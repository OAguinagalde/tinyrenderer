//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (934)
//--------------------------------------------------------------------------------
pub const CM_PROB_NOT_CONFIGURED = @as(u32, 1);
pub const CM_PROB_DEVLOADER_FAILED = @as(u32, 2);
pub const CM_PROB_OUT_OF_MEMORY = @as(u32, 3);
pub const CM_PROB_ENTRY_IS_WRONG_TYPE = @as(u32, 4);
pub const CM_PROB_LACKED_ARBITRATOR = @as(u32, 5);
pub const CM_PROB_BOOT_CONFIG_CONFLICT = @as(u32, 6);
pub const CM_PROB_FAILED_FILTER = @as(u32, 7);
pub const CM_PROB_DEVLOADER_NOT_FOUND = @as(u32, 8);
pub const CM_PROB_INVALID_DATA = @as(u32, 9);
pub const CM_PROB_FAILED_START = @as(u32, 10);
pub const CM_PROB_LIAR = @as(u32, 11);
pub const CM_PROB_NORMAL_CONFLICT = @as(u32, 12);
pub const CM_PROB_NOT_VERIFIED = @as(u32, 13);
pub const CM_PROB_NEED_RESTART = @as(u32, 14);
pub const CM_PROB_REENUMERATION = @as(u32, 15);
pub const CM_PROB_PARTIAL_LOG_CONF = @as(u32, 16);
pub const CM_PROB_UNKNOWN_RESOURCE = @as(u32, 17);
pub const CM_PROB_REINSTALL = @as(u32, 18);
pub const CM_PROB_REGISTRY = @as(u32, 19);
pub const CM_PROB_VXDLDR = @as(u32, 20);
pub const CM_PROB_WILL_BE_REMOVED = @as(u32, 21);
pub const CM_PROB_DISABLED = @as(u32, 22);
pub const CM_PROB_DEVLOADER_NOT_READY = @as(u32, 23);
pub const CM_PROB_DEVICE_NOT_THERE = @as(u32, 24);
pub const CM_PROB_MOVED = @as(u32, 25);
pub const CM_PROB_TOO_EARLY = @as(u32, 26);
pub const CM_PROB_NO_VALID_LOG_CONF = @as(u32, 27);
pub const CM_PROB_FAILED_INSTALL = @as(u32, 28);
pub const CM_PROB_HARDWARE_DISABLED = @as(u32, 29);
pub const CM_PROB_CANT_SHARE_IRQ = @as(u32, 30);
pub const CM_PROB_FAILED_ADD = @as(u32, 31);
pub const CM_PROB_DISABLED_SERVICE = @as(u32, 32);
pub const CM_PROB_TRANSLATION_FAILED = @as(u32, 33);
pub const CM_PROB_NO_SOFTCONFIG = @as(u32, 34);
pub const CM_PROB_BIOS_TABLE = @as(u32, 35);
pub const CM_PROB_IRQ_TRANSLATION_FAILED = @as(u32, 36);
pub const CM_PROB_FAILED_DRIVER_ENTRY = @as(u32, 37);
pub const CM_PROB_DRIVER_FAILED_PRIOR_UNLOAD = @as(u32, 38);
pub const CM_PROB_DRIVER_FAILED_LOAD = @as(u32, 39);
pub const CM_PROB_DRIVER_SERVICE_KEY_INVALID = @as(u32, 40);
pub const CM_PROB_LEGACY_SERVICE_NO_DEVICES = @as(u32, 41);
pub const CM_PROB_DUPLICATE_DEVICE = @as(u32, 42);
pub const CM_PROB_FAILED_POST_START = @as(u32, 43);
pub const CM_PROB_HALTED = @as(u32, 44);
pub const CM_PROB_PHANTOM = @as(u32, 45);
pub const CM_PROB_SYSTEM_SHUTDOWN = @as(u32, 46);
pub const CM_PROB_HELD_FOR_EJECT = @as(u32, 47);
pub const CM_PROB_DRIVER_BLOCKED = @as(u32, 48);
pub const CM_PROB_REGISTRY_TOO_LARGE = @as(u32, 49);
pub const CM_PROB_SETPROPERTIES_FAILED = @as(u32, 50);
pub const CM_PROB_WAITING_ON_DEPENDENCY = @as(u32, 51);
pub const CM_PROB_UNSIGNED_DRIVER = @as(u32, 52);
pub const CM_PROB_USED_BY_DEBUGGER = @as(u32, 53);
pub const CM_PROB_DEVICE_RESET = @as(u32, 54);
pub const CM_PROB_CONSOLE_LOCKED = @as(u32, 55);
pub const CM_PROB_NEED_CLASS_CONFIG = @as(u32, 56);
pub const CM_PROB_GUEST_ASSIGNMENT_FAILED = @as(u32, 57);
pub const NUM_CM_PROB_V1 = @as(u32, 37);
pub const NUM_CM_PROB_V2 = @as(u32, 50);
pub const NUM_CM_PROB_V3 = @as(u32, 51);
pub const NUM_CM_PROB_V4 = @as(u32, 52);
pub const NUM_CM_PROB_V5 = @as(u32, 53);
pub const NUM_CM_PROB_V6 = @as(u32, 54);
pub const NUM_CM_PROB_V7 = @as(u32, 55);
pub const NUM_CM_PROB_V8 = @as(u32, 57);
pub const NUM_CM_PROB_V9 = @as(u32, 58);
pub const DN_ROOT_ENUMERATED = @as(u32, 1);
pub const DN_DRIVER_LOADED = @as(u32, 2);
pub const DN_ENUM_LOADED = @as(u32, 4);
pub const DN_STARTED = @as(u32, 8);
pub const DN_MANUAL = @as(u32, 16);
pub const DN_NEED_TO_ENUM = @as(u32, 32);
pub const DN_NOT_FIRST_TIME = @as(u32, 64);
pub const DN_HARDWARE_ENUM = @as(u32, 128);
pub const DN_LIAR = @as(u32, 256);
pub const DN_HAS_MARK = @as(u32, 512);
pub const DN_HAS_PROBLEM = @as(u32, 1024);
pub const DN_FILTERED = @as(u32, 2048);
pub const DN_MOVED = @as(u32, 4096);
pub const DN_DISABLEABLE = @as(u32, 8192);
pub const DN_REMOVABLE = @as(u32, 16384);
pub const DN_PRIVATE_PROBLEM = @as(u32, 32768);
pub const DN_MF_PARENT = @as(u32, 65536);
pub const DN_MF_CHILD = @as(u32, 131072);
pub const DN_WILL_BE_REMOVED = @as(u32, 262144);
pub const DN_NOT_FIRST_TIMEE = @as(u32, 524288);
pub const DN_STOP_FREE_RES = @as(u32, 1048576);
pub const DN_REBAL_CANDIDATE = @as(u32, 2097152);
pub const DN_BAD_PARTIAL = @as(u32, 4194304);
pub const DN_NT_ENUMERATOR = @as(u32, 8388608);
pub const DN_NT_DRIVER = @as(u32, 16777216);
pub const DN_NEEDS_LOCKING = @as(u32, 33554432);
pub const DN_ARM_WAKEUP = @as(u32, 67108864);
pub const DN_APM_ENUMERATOR = @as(u32, 134217728);
pub const DN_APM_DRIVER = @as(u32, 268435456);
pub const DN_SILENT_INSTALL = @as(u32, 536870912);
pub const DN_NO_SHOW_IN_DM = @as(u32, 1073741824);
pub const DN_BOOT_LOG_PROB = @as(u32, 2147483648);
pub const LCPRI_FORCECONFIG = @as(u32, 0);
pub const LCPRI_BOOTCONFIG = @as(u32, 1);
pub const LCPRI_DESIRED = @as(u32, 8192);
pub const LCPRI_NORMAL = @as(u32, 12288);
pub const LCPRI_LASTBESTCONFIG = @as(u32, 16383);
pub const LCPRI_SUBOPTIMAL = @as(u32, 20480);
pub const LCPRI_LASTSOFTCONFIG = @as(u32, 32767);
pub const LCPRI_RESTART = @as(u32, 32768);
pub const LCPRI_REBOOT = @as(u32, 36864);
pub const LCPRI_POWEROFF = @as(u32, 40960);
pub const LCPRI_HARDRECONFIG = @as(u32, 49152);
pub const LCPRI_HARDWIRED = @as(u32, 57344);
pub const LCPRI_IMPOSSIBLE = @as(u32, 61440);
pub const LCPRI_DISABLED = @as(u32, 65535);
pub const MAX_LCPRI = @as(u32, 65535);
pub const CM_DEVICE_PANEL_SIDE_UNKNOWN = @as(u32, 0);
pub const CM_DEVICE_PANEL_SIDE_TOP = @as(u32, 1);
pub const CM_DEVICE_PANEL_SIDE_BOTTOM = @as(u32, 2);
pub const CM_DEVICE_PANEL_SIDE_LEFT = @as(u32, 3);
pub const CM_DEVICE_PANEL_SIDE_RIGHT = @as(u32, 4);
pub const CM_DEVICE_PANEL_SIDE_FRONT = @as(u32, 5);
pub const CM_DEVICE_PANEL_SIDE_BACK = @as(u32, 6);
pub const CM_DEVICE_PANEL_EDGE_UNKNOWN = @as(u32, 0);
pub const CM_DEVICE_PANEL_EDGE_TOP = @as(u32, 1);
pub const CM_DEVICE_PANEL_EDGE_BOTTOM = @as(u32, 2);
pub const CM_DEVICE_PANEL_EDGE_LEFT = @as(u32, 3);
pub const CM_DEVICE_PANEL_EDGE_RIGHT = @as(u32, 4);
pub const CM_DEVICE_PANEL_SHAPE_UNKNOWN = @as(u32, 0);
pub const CM_DEVICE_PANEL_SHAPE_RECTANGLE = @as(u32, 1);
pub const CM_DEVICE_PANEL_SHAPE_OVAL = @as(u32, 2);
pub const CM_DEVICE_PANEL_ORIENTATION_HORIZONTAL = @as(u32, 0);
pub const CM_DEVICE_PANEL_ORIENTATION_VERTICAL = @as(u32, 1);
pub const CM_DEVICE_PANEL_JOINT_TYPE_UNKNOWN = @as(u32, 0);
pub const CM_DEVICE_PANEL_JOINT_TYPE_PLANAR = @as(u32, 1);
pub const CM_DEVICE_PANEL_JOINT_TYPE_HINGE = @as(u32, 2);
pub const CM_DEVICE_PANEL_JOINT_TYPE_PIVOT = @as(u32, 3);
pub const CM_DEVICE_PANEL_JOINT_TYPE_SWIVEL = @as(u32, 4);
pub const LINE_LEN = @as(u32, 256);
pub const MAX_INF_STRING_LENGTH = @as(u32, 4096);
pub const MAX_INF_SECTION_NAME_LENGTH = @as(u32, 255);
pub const MAX_TITLE_LEN = @as(u32, 60);
pub const MAX_INSTRUCTION_LEN = @as(u32, 256);
pub const MAX_LABEL_LEN = @as(u32, 30);
pub const MAX_SERVICE_NAME_LEN = @as(u32, 256);
pub const MAX_SUBTITLE_LEN = @as(u32, 256);
pub const SP_MAX_MACHINENAME_LENGTH = @as(u32, 263);
pub const SP_ALTPLATFORM_FLAGS_VERSION_RANGE = @as(u32, 1);
pub const SP_ALTPLATFORM_FLAGS_SUITE_MASK = @as(u32, 2);
pub const INF_STYLE_CACHE_ENABLE = @as(u32, 16);
pub const INF_STYLE_CACHE_DISABLE = @as(u32, 32);
pub const INF_STYLE_CACHE_IGNORE = @as(u32, 64);
pub const DIRID_ABSOLUTE = @as(i32, -1);
pub const DIRID_ABSOLUTE_16BIT = @as(u32, 65535);
pub const DIRID_NULL = @as(u32, 0);
pub const DIRID_SRCPATH = @as(u32, 1);
pub const DIRID_WINDOWS = @as(u32, 10);
pub const DIRID_SYSTEM = @as(u32, 11);
pub const DIRID_DRIVERS = @as(u32, 12);
pub const DIRID_DRIVER_STORE = @as(u32, 13);
pub const DIRID_INF = @as(u32, 17);
pub const DIRID_HELP = @as(u32, 18);
pub const DIRID_FONTS = @as(u32, 20);
pub const DIRID_VIEWERS = @as(u32, 21);
pub const DIRID_COLOR = @as(u32, 23);
pub const DIRID_APPS = @as(u32, 24);
pub const DIRID_SHARED = @as(u32, 25);
pub const DIRID_BOOT = @as(u32, 30);
pub const DIRID_SYSTEM16 = @as(u32, 50);
pub const DIRID_SPOOL = @as(u32, 51);
pub const DIRID_SPOOLDRIVERS = @as(u32, 52);
pub const DIRID_USERPROFILE = @as(u32, 53);
pub const DIRID_LOADER = @as(u32, 54);
pub const DIRID_PRINTPROCESSOR = @as(u32, 55);
pub const DIRID_COMMON_STARTMENU = @as(u32, 16406);
pub const DIRID_COMMON_PROGRAMS = @as(u32, 16407);
pub const DIRID_COMMON_STARTUP = @as(u32, 16408);
pub const DIRID_COMMON_DESKTOPDIRECTORY = @as(u32, 16409);
pub const DIRID_COMMON_FAVORITES = @as(u32, 16415);
pub const DIRID_COMMON_APPDATA = @as(u32, 16419);
pub const DIRID_PROGRAM_FILES = @as(u32, 16422);
pub const DIRID_SYSTEM_X86 = @as(u32, 16425);
pub const DIRID_PROGRAM_FILES_X86 = @as(u32, 16426);
pub const DIRID_PROGRAM_FILES_COMMON = @as(u32, 16427);
pub const DIRID_PROGRAM_FILES_COMMONX86 = @as(u32, 16428);
pub const DIRID_COMMON_TEMPLATES = @as(u32, 16429);
pub const DIRID_COMMON_DOCUMENTS = @as(u32, 16430);
pub const DIRID_USER = @as(u32, 32768);
pub const SPFILENOTIFY_STARTQUEUE = @as(u32, 1);
pub const SPFILENOTIFY_ENDQUEUE = @as(u32, 2);
pub const SPFILENOTIFY_STARTSUBQUEUE = @as(u32, 3);
pub const SPFILENOTIFY_ENDSUBQUEUE = @as(u32, 4);
pub const SPFILENOTIFY_STARTDELETE = @as(u32, 5);
pub const SPFILENOTIFY_ENDDELETE = @as(u32, 6);
pub const SPFILENOTIFY_DELETEERROR = @as(u32, 7);
pub const SPFILENOTIFY_STARTRENAME = @as(u32, 8);
pub const SPFILENOTIFY_ENDRENAME = @as(u32, 9);
pub const SPFILENOTIFY_RENAMEERROR = @as(u32, 10);
pub const SPFILENOTIFY_STARTCOPY = @as(u32, 11);
pub const SPFILENOTIFY_ENDCOPY = @as(u32, 12);
pub const SPFILENOTIFY_COPYERROR = @as(u32, 13);
pub const SPFILENOTIFY_NEEDMEDIA = @as(u32, 14);
pub const SPFILENOTIFY_QUEUESCAN = @as(u32, 15);
pub const SPFILENOTIFY_CABINETINFO = @as(u32, 16);
pub const SPFILENOTIFY_FILEINCABINET = @as(u32, 17);
pub const SPFILENOTIFY_NEEDNEWCABINET = @as(u32, 18);
pub const SPFILENOTIFY_FILEEXTRACTED = @as(u32, 19);
pub const SPFILENOTIFY_FILEOPDELAYED = @as(u32, 20);
pub const SPFILENOTIFY_STARTBACKUP = @as(u32, 21);
pub const SPFILENOTIFY_BACKUPERROR = @as(u32, 22);
pub const SPFILENOTIFY_ENDBACKUP = @as(u32, 23);
pub const SPFILENOTIFY_QUEUESCAN_EX = @as(u32, 24);
pub const SPFILENOTIFY_STARTREGISTRATION = @as(u32, 25);
pub const SPFILENOTIFY_ENDREGISTRATION = @as(u32, 32);
pub const SPFILENOTIFY_QUEUESCAN_SIGNERINFO = @as(u32, 64);
pub const SPFILENOTIFY_LANGMISMATCH = @as(u32, 65536);
pub const SPFILENOTIFY_TARGETEXISTS = @as(u32, 131072);
pub const SPFILENOTIFY_TARGETNEWER = @as(u32, 262144);
pub const FILEOP_RENAME = @as(u32, 1);
pub const FILEOP_BACKUP = @as(u32, 3);
pub const FILEOP_ABORT = @as(u32, 0);
pub const FILEOP_DOIT = @as(u32, 1);
pub const FILEOP_SKIP = @as(u32, 2);
pub const FILEOP_NEWPATH = @as(u32, 4);
pub const COPYFLG_WARN_IF_SKIP = @as(u32, 1);
pub const COPYFLG_NOSKIP = @as(u32, 2);
pub const COPYFLG_NOVERSIONCHECK = @as(u32, 4);
pub const COPYFLG_FORCE_FILE_IN_USE = @as(u32, 8);
pub const COPYFLG_NO_OVERWRITE = @as(u32, 16);
pub const COPYFLG_NO_VERSION_DIALOG = @as(u32, 32);
pub const COPYFLG_OVERWRITE_OLDER_ONLY = @as(u32, 64);
pub const COPYFLG_PROTECTED_WINDOWS_DRIVER_FILE = @as(u32, 256);
pub const COPYFLG_REPLACEONLY = @as(u32, 1024);
pub const COPYFLG_NODECOMP = @as(u32, 2048);
pub const COPYFLG_REPLACE_BOOT_FILE = @as(u32, 4096);
pub const COPYFLG_NOPRUNE = @as(u32, 8192);
pub const COPYFLG_IN_USE_TRY_RENAME = @as(u32, 16384);
pub const DELFLG_IN_USE = @as(u32, 1);
pub const DELFLG_IN_USE1 = @as(u32, 65536);
pub const SPREG_SUCCESS = @as(u32, 0);
pub const SPREG_LOADLIBRARY = @as(u32, 1);
pub const SPREG_GETPROCADDR = @as(u32, 2);
pub const SPREG_REGSVR = @as(u32, 3);
pub const SPREG_DLLINSTALL = @as(u32, 4);
pub const SPREG_TIMEOUT = @as(u32, 5);
pub const SPREG_UNKNOWN = @as(u32, 4294967295);
pub const SPINT_ACTIVE = @as(u32, 1);
pub const SPINT_DEFAULT = @as(u32, 2);
pub const SPINT_REMOVED = @as(u32, 4);
pub const DIF_SELECTDEVICE = @as(u32, 1);
pub const DIF_INSTALLDEVICE = @as(u32, 2);
pub const DIF_ASSIGNRESOURCES = @as(u32, 3);
pub const DIF_PROPERTIES = @as(u32, 4);
pub const DIF_REMOVE = @as(u32, 5);
pub const DIF_FIRSTTIMESETUP = @as(u32, 6);
pub const DIF_FOUNDDEVICE = @as(u32, 7);
pub const DIF_SELECTCLASSDRIVERS = @as(u32, 8);
pub const DIF_VALIDATECLASSDRIVERS = @as(u32, 9);
pub const DIF_INSTALLCLASSDRIVERS = @as(u32, 10);
pub const DIF_CALCDISKSPACE = @as(u32, 11);
pub const DIF_DESTROYPRIVATEDATA = @as(u32, 12);
pub const DIF_VALIDATEDRIVER = @as(u32, 13);
pub const DIF_DETECT = @as(u32, 15);
pub const DIF_INSTALLWIZARD = @as(u32, 16);
pub const DIF_DESTROYWIZARDDATA = @as(u32, 17);
pub const DIF_PROPERTYCHANGE = @as(u32, 18);
pub const DIF_ENABLECLASS = @as(u32, 19);
pub const DIF_DETECTVERIFY = @as(u32, 20);
pub const DIF_INSTALLDEVICEFILES = @as(u32, 21);
pub const DIF_UNREMOVE = @as(u32, 22);
pub const DIF_SELECTBESTCOMPATDRV = @as(u32, 23);
pub const DIF_ALLOW_INSTALL = @as(u32, 24);
pub const DIF_REGISTERDEVICE = @as(u32, 25);
pub const DIF_NEWDEVICEWIZARD_PRESELECT = @as(u32, 26);
pub const DIF_NEWDEVICEWIZARD_SELECT = @as(u32, 27);
pub const DIF_NEWDEVICEWIZARD_PREANALYZE = @as(u32, 28);
pub const DIF_NEWDEVICEWIZARD_POSTANALYZE = @as(u32, 29);
pub const DIF_NEWDEVICEWIZARD_FINISHINSTALL = @as(u32, 30);
pub const DIF_UNUSED1 = @as(u32, 31);
pub const DIF_INSTALLINTERFACES = @as(u32, 32);
pub const DIF_DETECTCANCEL = @as(u32, 33);
pub const DIF_REGISTER_COINSTALLERS = @as(u32, 34);
pub const DIF_ADDPROPERTYPAGE_ADVANCED = @as(u32, 35);
pub const DIF_ADDPROPERTYPAGE_BASIC = @as(u32, 36);
pub const DIF_RESERVED1 = @as(u32, 37);
pub const DIF_TROUBLESHOOTER = @as(u32, 38);
pub const DIF_POWERMESSAGEWAKE = @as(u32, 39);
pub const DIF_ADDREMOTEPROPERTYPAGE_ADVANCED = @as(u32, 40);
pub const DIF_UPDATEDRIVER_UI = @as(u32, 41);
pub const DIF_FINISHINSTALL_ACTION = @as(u32, 42);
pub const DIF_RESERVED2 = @as(u32, 48);
pub const DIF_MOVEDEVICE = @as(u32, 14);
pub const DI_SHOWOEM = @as(i32, 1);
pub const DI_SHOWCOMPAT = @as(i32, 2);
pub const DI_SHOWCLASS = @as(i32, 4);
pub const DI_SHOWALL = @as(i32, 7);
pub const DI_NOVCP = @as(i32, 8);
pub const DI_DIDCOMPAT = @as(i32, 16);
pub const DI_DIDCLASS = @as(i32, 32);
pub const DI_AUTOASSIGNRES = @as(i32, 64);
pub const DI_NEEDRESTART = @as(i32, 128);
pub const DI_NEEDREBOOT = @as(i32, 256);
pub const DI_NOBROWSE = @as(i32, 512);
pub const DI_MULTMFGS = @as(i32, 1024);
pub const DI_DISABLED = @as(i32, 2048);
pub const DI_GENERALPAGE_ADDED = @as(i32, 4096);
pub const DI_RESOURCEPAGE_ADDED = @as(i32, 8192);
pub const DI_PROPERTIES_CHANGE = @as(i32, 16384);
pub const DI_INF_IS_SORTED = @as(i32, 32768);
pub const DI_ENUMSINGLEINF = @as(i32, 65536);
pub const DI_DONOTCALLCONFIGMG = @as(i32, 131072);
pub const DI_INSTALLDISABLED = @as(i32, 262144);
pub const DI_COMPAT_FROM_CLASS = @as(i32, 524288);
pub const DI_CLASSINSTALLPARAMS = @as(i32, 1048576);
pub const DI_NODI_DEFAULTACTION = @as(i32, 2097152);
pub const DI_QUIETINSTALL = @as(i32, 8388608);
pub const DI_NOFILECOPY = @as(i32, 16777216);
pub const DI_FORCECOPY = @as(i32, 33554432);
pub const DI_DRIVERPAGE_ADDED = @as(i32, 67108864);
pub const DI_USECI_SELECTSTRINGS = @as(i32, 134217728);
pub const DI_OVERRIDE_INFFLAGS = @as(i32, 268435456);
pub const DI_PROPS_NOCHANGEUSAGE = @as(i32, 536870912);
pub const DI_NOSELECTICONS = @as(i32, 1073741824);
pub const DI_NOWRITE_IDS = @as(i32, -2147483648);
pub const DI_FLAGSEX_RESERVED2 = @as(i32, 1);
pub const DI_FLAGSEX_RESERVED3 = @as(i32, 2);
pub const DI_FLAGSEX_CI_FAILED = @as(i32, 4);
pub const DI_FLAGSEX_FINISHINSTALL_ACTION = @as(i32, 8);
pub const DI_FLAGSEX_DIDINFOLIST = @as(i32, 16);
pub const DI_FLAGSEX_DIDCOMPATINFO = @as(i32, 32);
pub const DI_FLAGSEX_FILTERCLASSES = @as(i32, 64);
pub const DI_FLAGSEX_SETFAILEDINSTALL = @as(i32, 128);
pub const DI_FLAGSEX_DEVICECHANGE = @as(i32, 256);
pub const DI_FLAGSEX_ALWAYSWRITEIDS = @as(i32, 512);
pub const DI_FLAGSEX_PROPCHANGE_PENDING = @as(i32, 1024);
pub const DI_FLAGSEX_ALLOWEXCLUDEDDRVS = @as(i32, 2048);
pub const DI_FLAGSEX_NOUIONQUERYREMOVE = @as(i32, 4096);
pub const DI_FLAGSEX_USECLASSFORCOMPAT = @as(i32, 8192);
pub const DI_FLAGSEX_RESERVED4 = @as(i32, 16384);
pub const DI_FLAGSEX_NO_DRVREG_MODIFY = @as(i32, 32768);
pub const DI_FLAGSEX_IN_SYSTEM_SETUP = @as(i32, 65536);
pub const DI_FLAGSEX_INET_DRIVER = @as(i32, 131072);
pub const DI_FLAGSEX_APPENDDRIVERLIST = @as(i32, 262144);
pub const DI_FLAGSEX_PREINSTALLBACKUP = @as(i32, 524288);
pub const DI_FLAGSEX_BACKUPONREPLACE = @as(i32, 1048576);
pub const DI_FLAGSEX_DRIVERLIST_FROM_URL = @as(i32, 2097152);
pub const DI_FLAGSEX_RESERVED1 = @as(i32, 4194304);
pub const DI_FLAGSEX_EXCLUDE_OLD_INET_DRIVERS = @as(i32, 8388608);
pub const DI_FLAGSEX_POWERPAGE_ADDED = @as(i32, 16777216);
pub const DI_FLAGSEX_FILTERSIMILARDRIVERS = @as(i32, 33554432);
pub const DI_FLAGSEX_INSTALLEDDRIVER = @as(i32, 67108864);
pub const DI_FLAGSEX_NO_CLASSLIST_NODE_MERGE = @as(i32, 134217728);
pub const DI_FLAGSEX_ALTPLATFORM_DRVSEARCH = @as(i32, 268435456);
pub const DI_FLAGSEX_RESTART_DEVICE_ONLY = @as(i32, 536870912);
pub const DI_FLAGSEX_RECURSIVESEARCH = @as(i32, 1073741824);
pub const DI_FLAGSEX_SEARCH_PUBLISHED_INFS = @as(i32, -2147483648);
pub const ENABLECLASS_QUERY = @as(u32, 0);
pub const ENABLECLASS_SUCCESS = @as(u32, 1);
pub const ENABLECLASS_FAILURE = @as(u32, 2);
pub const DICS_ENABLE = @as(u32, 1);
pub const DICS_DISABLE = @as(u32, 2);
pub const DICS_PROPCHANGE = @as(u32, 3);
pub const DICS_START = @as(u32, 4);
pub const DICS_STOP = @as(u32, 5);
pub const DICS_FLAG_GLOBAL = @as(u32, 1);
pub const DICS_FLAG_CONFIGSPECIFIC = @as(u32, 2);
pub const DICS_FLAG_CONFIGGENERAL = @as(u32, 4);
pub const DI_REMOVEDEVICE_GLOBAL = @as(u32, 1);
pub const DI_REMOVEDEVICE_CONFIGSPECIFIC = @as(u32, 2);
pub const DI_UNREMOVEDEVICE_CONFIGSPECIFIC = @as(u32, 2);
pub const MAX_INSTALLWIZARD_DYNAPAGES = @as(u32, 20);
pub const NDW_INSTALLFLAG_DIDFACTDEFS = @as(u32, 1);
pub const NDW_INSTALLFLAG_HARDWAREALLREADYIN = @as(u32, 2);
pub const NDW_INSTALLFLAG_NEEDSHUTDOWN = @as(u32, 512);
pub const NDW_INSTALLFLAG_EXPRESSINTRO = @as(u32, 1024);
pub const NDW_INSTALLFLAG_SKIPISDEVINSTALLED = @as(u32, 2048);
pub const NDW_INSTALLFLAG_NODETECTEDDEVS = @as(u32, 4096);
pub const NDW_INSTALLFLAG_INSTALLSPECIFIC = @as(u32, 8192);
pub const NDW_INSTALLFLAG_SKIPCLASSLIST = @as(u32, 16384);
pub const NDW_INSTALLFLAG_CI_PICKED_OEM = @as(u32, 32768);
pub const NDW_INSTALLFLAG_PCMCIAMODE = @as(u32, 65536);
pub const NDW_INSTALLFLAG_PCMCIADEVICE = @as(u32, 131072);
pub const NDW_INSTALLFLAG_USERCANCEL = @as(u32, 262144);
pub const NDW_INSTALLFLAG_KNOWNCLASS = @as(u32, 524288);
pub const DYNAWIZ_FLAG_PAGESADDED = @as(u32, 1);
pub const DYNAWIZ_FLAG_ANALYZE_HANDLECONFLICT = @as(u32, 8);
pub const DYNAWIZ_FLAG_INSTALLDET_NEXT = @as(u32, 2);
pub const DYNAWIZ_FLAG_INSTALLDET_PREV = @as(u32, 4);
pub const MIN_IDD_DYNAWIZ_RESOURCE_ID = @as(u32, 10000);
pub const MAX_IDD_DYNAWIZ_RESOURCE_ID = @as(u32, 11000);
pub const IDD_DYNAWIZ_FIRSTPAGE = @as(u32, 10000);
pub const IDD_DYNAWIZ_SELECT_PREVPAGE = @as(u32, 10001);
pub const IDD_DYNAWIZ_SELECT_NEXTPAGE = @as(u32, 10002);
pub const IDD_DYNAWIZ_ANALYZE_PREVPAGE = @as(u32, 10003);
pub const IDD_DYNAWIZ_ANALYZE_NEXTPAGE = @as(u32, 10004);
pub const IDD_DYNAWIZ_SELECTDEV_PAGE = @as(u32, 10009);
pub const IDD_DYNAWIZ_ANALYZEDEV_PAGE = @as(u32, 10010);
pub const IDD_DYNAWIZ_INSTALLDETECTEDDEVS_PAGE = @as(u32, 10011);
pub const IDD_DYNAWIZ_SELECTCLASS_PAGE = @as(u32, 10012);
pub const IDD_DYNAWIZ_INSTALLDETECTED_PREVPAGE = @as(u32, 10006);
pub const IDD_DYNAWIZ_INSTALLDETECTED_NEXTPAGE = @as(u32, 10007);
pub const IDD_DYNAWIZ_INSTALLDETECTED_NODEVS = @as(u32, 10008);
pub const DNF_DUPDESC = @as(u32, 1);
pub const DNF_OLDDRIVER = @as(u32, 2);
pub const DNF_EXCLUDEFROMLIST = @as(u32, 4);
pub const DNF_NODRIVER = @as(u32, 8);
pub const DNF_LEGACYINF = @as(u32, 16);
pub const DNF_CLASS_DRIVER = @as(u32, 32);
pub const DNF_COMPATIBLE_DRIVER = @as(u32, 64);
pub const DNF_INET_DRIVER = @as(u32, 128);
pub const DNF_UNUSED1 = @as(u32, 256);
pub const DNF_UNUSED2 = @as(u32, 512);
pub const DNF_OLD_INET_DRIVER = @as(u32, 1024);
pub const DNF_BAD_DRIVER = @as(u32, 2048);
pub const DNF_DUPPROVIDER = @as(u32, 4096);
pub const DNF_INF_IS_SIGNED = @as(u32, 8192);
pub const DNF_OEM_F6_INF = @as(u32, 16384);
pub const DNF_DUPDRIVERVER = @as(u32, 32768);
pub const DNF_BASIC_DRIVER = @as(u32, 65536);
pub const DNF_AUTHENTICODE_SIGNED = @as(u32, 131072);
pub const DNF_INSTALLEDDRIVER = @as(u32, 262144);
pub const DNF_ALWAYSEXCLUDEFROMLIST = @as(u32, 524288);
pub const DNF_INBOX_DRIVER = @as(u32, 1048576);
pub const DNF_REQUESTADDITIONALSOFTWARE = @as(u32, 2097152);
pub const DNF_UNUSED_22 = @as(u32, 4194304);
pub const DNF_UNUSED_23 = @as(u32, 8388608);
pub const DNF_UNUSED_24 = @as(u32, 16777216);
pub const DNF_UNUSED_25 = @as(u32, 33554432);
pub const DNF_UNUSED_26 = @as(u32, 67108864);
pub const DNF_UNUSED_27 = @as(u32, 134217728);
pub const DNF_UNUSED_28 = @as(u32, 268435456);
pub const DNF_UNUSED_29 = @as(u32, 536870912);
pub const DNF_UNUSED_30 = @as(u32, 1073741824);
pub const DNF_UNUSED_31 = @as(u32, 2147483648);
pub const DRIVER_HARDWAREID_RANK = @as(u32, 4095);
pub const DRIVER_HARDWAREID_MASK = @as(u32, 2147487743);
pub const DRIVER_UNTRUSTED_RANK = @as(u32, 2147483648);
pub const DRIVER_W9X_SUSPECT_RANK = @as(u32, 3221225472);
pub const DRIVER_COMPATID_RANK = @as(u32, 16383);
pub const DRIVER_UNTRUSTED_HARDWAREID_RANK = @as(u32, 36863);
pub const DRIVER_UNTRUSTED_COMPATID_RANK = @as(u32, 49151);
pub const DRIVER_W9X_SUSPECT_HARDWAREID_RANK = @as(u32, 53247);
pub const DRIVER_W9X_SUSPECT_COMPATID_RANK = @as(u32, 65535);
pub const SPPSR_SELECT_DEVICE_RESOURCES = @as(u32, 1);
pub const SPPSR_ENUM_BASIC_DEVICE_PROPERTIES = @as(u32, 2);
pub const SPPSR_ENUM_ADV_DEVICE_PROPERTIES = @as(u32, 3);
pub const INFINFO_INF_SPEC_IS_HINF = @as(u32, 1);
pub const INFINFO_INF_NAME_IS_ABSOLUTE = @as(u32, 2);
pub const INFINFO_DEFAULT_SEARCH = @as(u32, 3);
pub const INFINFO_REVERSE_DEFAULT_SEARCH = @as(u32, 4);
pub const INFINFO_INF_PATH_LIST_SEARCH = @as(u32, 5);
pub const FILE_COMPRESSION_NONE = @as(u32, 0);
pub const FILE_COMPRESSION_WINLZA = @as(u32, 1);
pub const FILE_COMPRESSION_MSZIP = @as(u32, 2);
pub const FILE_COMPRESSION_NTCAB = @as(u32, 3);
pub const SRCLIST_TEMPORARY = @as(u32, 1);
pub const SRCLIST_NOBROWSE = @as(u32, 2);
pub const SRCLIST_SYSTEM = @as(u32, 16);
pub const SRCLIST_USER = @as(u32, 32);
pub const SRCLIST_SYSIFADMIN = @as(u32, 64);
pub const SRCLIST_SUBDIRS = @as(u32, 256);
pub const SRCLIST_APPEND = @as(u32, 512);
pub const SRCLIST_NOSTRIPPLATFORM = @as(u32, 1024);
pub const IDF_NOBROWSE = @as(u32, 1);
pub const IDF_NOSKIP = @as(u32, 2);
pub const IDF_NODETAILS = @as(u32, 4);
pub const IDF_NOCOMPRESSED = @as(u32, 8);
pub const IDF_CHECKFIRST = @as(u32, 256);
pub const IDF_NOBEEP = @as(u32, 512);
pub const IDF_NOFOREGROUND = @as(u32, 1024);
pub const IDF_WARNIFSKIP = @as(u32, 2048);
pub const IDF_NOREMOVABLEMEDIAPROMPT = @as(u32, 4096);
pub const IDF_USEDISKNAMEASPROMPT = @as(u32, 8192);
pub const IDF_OEMDISK = @as(u32, 2147483648);
pub const DPROMPT_SUCCESS = @as(u32, 0);
pub const DPROMPT_CANCEL = @as(u32, 1);
pub const DPROMPT_SKIPFILE = @as(u32, 2);
pub const DPROMPT_BUFFERTOOSMALL = @as(u32, 3);
pub const DPROMPT_OUTOFMEMORY = @as(u32, 4);
pub const SETDIRID_NOT_FULL_PATH = @as(u32, 1);
pub const SRCINFO_PATH = @as(u32, 1);
pub const SRCINFO_TAGFILE = @as(u32, 2);
pub const SRCINFO_DESCRIPTION = @as(u32, 3);
pub const SRCINFO_FLAGS = @as(u32, 4);
pub const SRCINFO_TAGFILE2 = @as(u32, 5);
pub const SRC_FLAGS_CABFILE = @as(u32, 16);
pub const SP_FLAG_CABINETCONTINUATION = @as(u32, 2048);
pub const SP_BACKUP_BACKUPPASS = @as(u32, 1);
pub const SP_BACKUP_DEMANDPASS = @as(u32, 2);
pub const SP_BACKUP_SPECIAL = @as(u32, 4);
pub const SP_BACKUP_BOOTFILE = @as(u32, 8);
pub const SPQ_SCAN_FILE_PRESENCE = @as(u32, 1);
pub const SPQ_SCAN_FILE_VALIDITY = @as(u32, 2);
pub const SPQ_SCAN_USE_CALLBACK = @as(u32, 4);
pub const SPQ_SCAN_USE_CALLBACKEX = @as(u32, 8);
pub const SPQ_SCAN_INFORM_USER = @as(u32, 16);
pub const SPQ_SCAN_PRUNE_COPY_QUEUE = @as(u32, 32);
pub const SPQ_SCAN_USE_CALLBACK_SIGNERINFO = @as(u32, 64);
pub const SPQ_SCAN_PRUNE_DELREN = @as(u32, 128);
pub const SPQ_SCAN_FILE_PRESENCE_WITHOUT_SOURCE = @as(u32, 256);
pub const SPQ_SCAN_FILE_COMPARISON = @as(u32, 512);
pub const SPQ_SCAN_ACTIVATE_DRP = @as(u32, 1024);
pub const SPQ_DELAYED_COPY = @as(u32, 1);
pub const SPQ_FLAG_BACKUP_AWARE = @as(u32, 1);
pub const SPQ_FLAG_ABORT_IF_UNSIGNED = @as(u32, 2);
pub const SPQ_FLAG_FILES_MODIFIED = @as(u32, 4);
pub const SPQ_FLAG_DO_SHUFFLEMOVE = @as(u32, 8);
pub const SPQ_FLAG_VALID = @as(u32, 15);
pub const SPOST_MAX = @as(u32, 3);
pub const SUOI_FORCEDELETE = @as(u32, 1);
pub const SUOI_INTERNAL1 = @as(u32, 2);
pub const SPDSL_IGNORE_DISK = @as(u32, 1);
pub const SPDSL_DISALLOW_NEGATIVE_ADJUST = @as(u32, 2);
pub const SPFILEQ_FILE_IN_USE = @as(u32, 1);
pub const SPFILEQ_REBOOT_RECOMMENDED = @as(u32, 2);
pub const SPFILEQ_REBOOT_IN_PROGRESS = @as(u32, 4);
pub const FLG_ADDREG_DELREG_BIT = @as(u32, 32768);
pub const FLG_ADDREG_BINVALUETYPE = @as(u32, 1);
pub const FLG_ADDREG_NOCLOBBER = @as(u32, 2);
pub const FLG_ADDREG_DELVAL = @as(u32, 4);
pub const FLG_ADDREG_APPEND = @as(u32, 8);
pub const FLG_ADDREG_KEYONLY = @as(u32, 16);
pub const FLG_ADDREG_OVERWRITEONLY = @as(u32, 32);
pub const FLG_ADDREG_64BITKEY = @as(u32, 4096);
pub const FLG_ADDREG_KEYONLY_COMMON = @as(u32, 8192);
pub const FLG_ADDREG_32BITKEY = @as(u32, 16384);
pub const FLG_ADDREG_TYPE_SZ = @as(u32, 0);
pub const FLG_ADDREG_TYPE_MULTI_SZ = @as(u32, 65536);
pub const FLG_ADDREG_TYPE_EXPAND_SZ = @as(u32, 131072);
pub const FLG_DELREG_VALUE = @as(u32, 0);
pub const FLG_DELREG_OPERATION_MASK = @as(u32, 254);
pub const FLG_BITREG_CLEARBITS = @as(u32, 0);
pub const FLG_BITREG_SETBITS = @as(u32, 1);
pub const FLG_BITREG_64BITKEY = @as(u32, 4096);
pub const FLG_BITREG_32BITKEY = @as(u32, 16384);
pub const FLG_INI2REG_64BITKEY = @as(u32, 4096);
pub const FLG_INI2REG_32BITKEY = @as(u32, 16384);
pub const FLG_REGSVR_DLLREGISTER = @as(u32, 1);
pub const FLG_REGSVR_DLLINSTALL = @as(u32, 2);
pub const FLG_PROFITEM_CURRENTUSER = @as(u32, 1);
pub const FLG_PROFITEM_DELETE = @as(u32, 2);
pub const FLG_PROFITEM_GROUP = @as(u32, 4);
pub const FLG_PROFITEM_CSIDL = @as(u32, 8);
pub const FLG_ADDPROPERTY_NOCLOBBER = @as(u32, 1);
pub const FLG_ADDPROPERTY_OVERWRITEONLY = @as(u32, 2);
pub const FLG_ADDPROPERTY_APPEND = @as(u32, 4);
pub const FLG_ADDPROPERTY_OR = @as(u32, 8);
pub const FLG_ADDPROPERTY_AND = @as(u32, 16);
pub const FLG_DELPROPERTY_MULTI_SZ_DELSTRING = @as(u32, 1);
pub const SPINST_LOGCONFIG = @as(u32, 1);
pub const SPINST_INIFILES = @as(u32, 2);
pub const SPINST_REGISTRY = @as(u32, 4);
pub const SPINST_INI2REG = @as(u32, 8);
pub const SPINST_FILES = @as(u32, 16);
pub const SPINST_BITREG = @as(u32, 32);
pub const SPINST_REGSVR = @as(u32, 64);
pub const SPINST_UNREGSVR = @as(u32, 128);
pub const SPINST_PROFILEITEMS = @as(u32, 256);
pub const SPINST_COPYINF = @as(u32, 512);
pub const SPINST_PROPERTIES = @as(u32, 1024);
pub const SPINST_ALL = @as(u32, 2047);
pub const SPINST_SINGLESECTION = @as(u32, 65536);
pub const SPINST_LOGCONFIG_IS_FORCED = @as(u32, 131072);
pub const SPINST_LOGCONFIGS_ARE_OVERRIDES = @as(u32, 262144);
pub const SPINST_REGISTERCALLBACKAWARE = @as(u32, 524288);
pub const SPINST_DEVICEINSTALL = @as(u32, 1048576);
pub const SPSVCINST_TAGTOFRONT = @as(u32, 1);
pub const SPSVCINST_ASSOCSERVICE = @as(u32, 2);
pub const SPSVCINST_DELETEEVENTLOGENTRY = @as(u32, 4);
pub const SPSVCINST_NOCLOBBER_DISPLAYNAME = @as(u32, 8);
pub const SPSVCINST_NOCLOBBER_STARTTYPE = @as(u32, 16);
pub const SPSVCINST_NOCLOBBER_ERRORCONTROL = @as(u32, 32);
pub const SPSVCINST_NOCLOBBER_LOADORDERGROUP = @as(u32, 64);
pub const SPSVCINST_NOCLOBBER_DEPENDENCIES = @as(u32, 128);
pub const SPSVCINST_NOCLOBBER_DESCRIPTION = @as(u32, 256);
pub const SPSVCINST_STOPSERVICE = @as(u32, 512);
pub const SPSVCINST_CLOBBER_SECURITY = @as(u32, 1024);
pub const SPSVCINST_STARTSERVICE = @as(u32, 2048);
pub const SPSVCINST_NOCLOBBER_REQUIREDPRIVILEGES = @as(u32, 4096);
pub const SPSVCINST_NOCLOBBER_TRIGGERS = @as(u32, 8192);
pub const SPSVCINST_NOCLOBBER_SERVICESIDTYPE = @as(u32, 16384);
pub const SPSVCINST_NOCLOBBER_DELAYEDAUTOSTART = @as(u32, 32768);
pub const SPFILELOG_SYSTEMLOG = @as(u32, 1);
pub const SPFILELOG_FORCENEW = @as(u32, 2);
pub const SPFILELOG_QUERYONLY = @as(u32, 4);
pub const SPFILELOG_OEMFILE = @as(u32, 1);
pub const LogSevInformation = @as(u32, 0);
pub const LogSevWarning = @as(u32, 1);
pub const LogSevError = @as(u32, 2);
pub const LogSevFatalError = @as(u32, 3);
pub const LogSevMaximum = @as(u32, 4);
pub const DICD_GENERATE_ID = @as(u32, 1);
pub const DICD_INHERIT_CLASSDRVS = @as(u32, 2);
pub const DIOD_INHERIT_CLASSDRVS = @as(u32, 2);
pub const DIOD_CANCEL_REMOVE = @as(u32, 4);
pub const DIODI_NO_ADD = @as(u32, 1);
pub const SPRDI_FIND_DUPS = @as(u32, 1);
pub const SPDIT_NODRIVER = @as(u32, 0);
pub const DIGCF_DEFAULT = @as(u32, 1);
pub const DIGCF_PRESENT = @as(u32, 2);
pub const DIGCF_ALLCLASSES = @as(u32, 4);
pub const DIGCF_PROFILE = @as(u32, 8);
pub const DIGCF_DEVICEINTERFACE = @as(u32, 16);
pub const DIBCI_NOINSTALLCLASS = @as(u32, 1);
pub const DIBCI_NODISPLAYCLASS = @as(u32, 2);
pub const DIOCR_INSTALLER = @as(u32, 1);
pub const DIOCR_INTERFACE = @as(u32, 2);
pub const DIREG_DEV = @as(u32, 1);
pub const DIREG_DRV = @as(u32, 2);
pub const DIREG_BOTH = @as(u32, 4);
pub const DICLASSPROP_INSTALLER = @as(u32, 1);
pub const DICLASSPROP_INTERFACE = @as(u32, 2);
pub const SPDRP_DEVICEDESC = @as(u32, 0);
pub const SPDRP_HARDWAREID = @as(u32, 1);
pub const SPDRP_COMPATIBLEIDS = @as(u32, 2);
pub const SPDRP_UNUSED0 = @as(u32, 3);
pub const SPDRP_SERVICE = @as(u32, 4);
pub const SPDRP_UNUSED1 = @as(u32, 5);
pub const SPDRP_UNUSED2 = @as(u32, 6);
pub const SPDRP_CLASS = @as(u32, 7);
pub const SPDRP_CLASSGUID = @as(u32, 8);
pub const SPDRP_DRIVER = @as(u32, 9);
pub const SPDRP_CONFIGFLAGS = @as(u32, 10);
pub const SPDRP_MFG = @as(u32, 11);
pub const SPDRP_FRIENDLYNAME = @as(u32, 12);
pub const SPDRP_LOCATION_INFORMATION = @as(u32, 13);
pub const SPDRP_PHYSICAL_DEVICE_OBJECT_NAME = @as(u32, 14);
pub const SPDRP_CAPABILITIES = @as(u32, 15);
pub const SPDRP_UI_NUMBER = @as(u32, 16);
pub const SPDRP_UPPERFILTERS = @as(u32, 17);
pub const SPDRP_LOWERFILTERS = @as(u32, 18);
pub const SPDRP_BUSTYPEGUID = @as(u32, 19);
pub const SPDRP_LEGACYBUSTYPE = @as(u32, 20);
pub const SPDRP_BUSNUMBER = @as(u32, 21);
pub const SPDRP_ENUMERATOR_NAME = @as(u32, 22);
pub const SPDRP_SECURITY = @as(u32, 23);
pub const SPDRP_SECURITY_SDS = @as(u32, 24);
pub const SPDRP_DEVTYPE = @as(u32, 25);
pub const SPDRP_EXCLUSIVE = @as(u32, 26);
pub const SPDRP_CHARACTERISTICS = @as(u32, 27);
pub const SPDRP_ADDRESS = @as(u32, 28);
pub const SPDRP_UI_NUMBER_DESC_FORMAT = @as(u32, 29);
pub const SPDRP_DEVICE_POWER_DATA = @as(u32, 30);
pub const SPDRP_REMOVAL_POLICY = @as(u32, 31);
pub const SPDRP_REMOVAL_POLICY_HW_DEFAULT = @as(u32, 32);
pub const SPDRP_REMOVAL_POLICY_OVERRIDE = @as(u32, 33);
pub const SPDRP_INSTALL_STATE = @as(u32, 34);
pub const SPDRP_LOCATION_PATHS = @as(u32, 35);
pub const SPDRP_BASE_CONTAINERID = @as(u32, 36);
pub const SPDRP_MAXIMUM_PROPERTY = @as(u32, 37);
pub const SPCRP_UPPERFILTERS = @as(u32, 17);
pub const SPCRP_LOWERFILTERS = @as(u32, 18);
pub const SPCRP_SECURITY = @as(u32, 23);
pub const SPCRP_SECURITY_SDS = @as(u32, 24);
pub const SPCRP_DEVTYPE = @as(u32, 25);
pub const SPCRP_EXCLUSIVE = @as(u32, 26);
pub const SPCRP_CHARACTERISTICS = @as(u32, 27);
pub const SPCRP_MAXIMUM_PROPERTY = @as(u32, 28);
pub const DMI_MASK = @as(u32, 1);
pub const DMI_BKCOLOR = @as(u32, 2);
pub const DMI_USERECT = @as(u32, 4);
pub const DIGCDP_FLAG_BASIC = @as(u32, 1);
pub const DIGCDP_FLAG_ADVANCED = @as(u32, 2);
pub const DIGCDP_FLAG_REMOTE_BASIC = @as(u32, 3);
pub const DIGCDP_FLAG_REMOTE_ADVANCED = @as(u32, 4);
pub const IDI_RESOURCEFIRST = @as(u32, 159);
pub const IDI_RESOURCE = @as(u32, 159);
pub const IDI_RESOURCELAST = @as(u32, 161);
pub const IDI_RESOURCEOVERLAYFIRST = @as(u32, 161);
pub const IDI_RESOURCEOVERLAYLAST = @as(u32, 161);
pub const IDI_CONFLICT = @as(u32, 161);
pub const IDI_CLASSICON_OVERLAYFIRST = @as(u32, 500);
pub const IDI_CLASSICON_OVERLAYLAST = @as(u32, 502);
pub const IDI_PROBLEM_OVL = @as(u32, 500);
pub const IDI_DISABLED_OVL = @as(u32, 501);
pub const IDI_FORCED_OVL = @as(u32, 502);
pub const SPWPT_SELECTDEVICE = @as(u32, 1);
pub const SPWP_USE_DEVINFO_DATA = @as(u32, 1);
pub const SIGNERSCORE_UNKNOWN = @as(u32, 4278190080);
pub const SIGNERSCORE_W9X_SUSPECT = @as(u32, 3221225472);
pub const SIGNERSCORE_UNSIGNED = @as(u32, 2147483648);
pub const SIGNERSCORE_AUTHENTICODE = @as(u32, 251658240);
pub const SIGNERSCORE_WHQL = @as(u32, 218103813);
pub const SIGNERSCORE_UNCLASSIFIED = @as(u32, 218103812);
pub const SIGNERSCORE_INBOX = @as(u32, 218103811);
pub const SIGNERSCORE_LOGO_STANDARD = @as(u32, 218103810);
pub const SIGNERSCORE_LOGO_PREMIUM = @as(u32, 218103809);
pub const SIGNERSCORE_MASK = @as(u32, 4278190080);
pub const SIGNERSCORE_SIGNED_MASK = @as(u32, 4026531840);
pub const DICUSTOMDEVPROP_MERGE_MULTISZ = @as(u32, 1);
pub const SCWMI_CLOBBER_SECURITY = @as(u32, 1);
pub const MAX_DEVICE_ID_LEN = @as(u32, 200);
pub const MAX_GUID_STRING_LEN = @as(u32, 39);
pub const MAX_CLASS_NAME_LEN = @as(u32, 32);
pub const MAX_PROFILE_LEN = @as(u32, 80);
pub const MAX_CONFIG_VALUE = @as(u32, 9999);
pub const MAX_INSTANCE_VALUE = @as(u32, 9999);
pub const MAX_MEM_REGISTERS = @as(u32, 9);
pub const MAX_IO_PORTS = @as(u32, 20);
pub const MAX_IRQS = @as(u32, 7);
pub const MAX_DMA_CHANNELS = @as(u32, 7);
pub const DWORD_MAX = @as(u32, 4294967295);
pub const CONFIGMG_VERSION = @as(u32, 1024);
pub const CM_CDMASK_DEVINST = @as(u32, 1);
pub const CM_CDMASK_RESDES = @as(u32, 2);
pub const CM_CDMASK_FLAGS = @as(u32, 4);
pub const CM_CDMASK_DESCRIPTION = @as(u32, 8);
pub const CM_CDMASK_VALID = @as(u32, 15);
pub const CM_CDFLAGS_DRIVER = @as(u32, 1);
pub const CM_CDFLAGS_ROOT_OWNED = @as(u32, 2);
pub const CM_CDFLAGS_RESERVED = @as(u32, 4);
pub const IO_ALIAS_10_BIT_DECODE = @as(u32, 4);
pub const IO_ALIAS_12_BIT_DECODE = @as(u32, 16);
pub const IO_ALIAS_16_BIT_DECODE = @as(u32, 0);
pub const IO_ALIAS_POSITIVE_DECODE = @as(u32, 255);
pub const IOA_Local = @as(u32, 255);
pub const CM_RESDES_WIDTH_DEFAULT = @as(u32, 0);
pub const CM_RESDES_WIDTH_32 = @as(u32, 1);
pub const CM_RESDES_WIDTH_64 = @as(u32, 2);
pub const CM_RESDES_WIDTH_BITS = @as(u32, 3);
pub const PCD_MAX_MEMORY = @as(u32, 2);
pub const PCD_MAX_IO = @as(u32, 2);
pub const CM_HWPI_NOT_DOCKABLE = @as(u32, 0);
pub const CM_HWPI_UNDOCKED = @as(u32, 1);
pub const CM_HWPI_DOCKED = @as(u32, 2);
pub const ResType_All = @as(u32, 0);
pub const ResType_None = @as(u32, 0);
pub const ResType_Mem = @as(u32, 1);
pub const ResType_IO = @as(u32, 2);
pub const ResType_DMA = @as(u32, 3);
pub const ResType_IRQ = @as(u32, 4);
pub const ResType_DoNotUse = @as(u32, 5);
pub const ResType_BusNumber = @as(u32, 6);
pub const ResType_MemLarge = @as(u32, 7);
pub const ResType_MAX = @as(u32, 7);
pub const ResType_Ignored_Bit = @as(u32, 32768);
pub const ResType_ClassSpecific = @as(u32, 65535);
pub const ResType_Reserved = @as(u32, 32768);
pub const ResType_DevicePrivate = @as(u32, 32769);
pub const ResType_PcCardConfig = @as(u32, 32770);
pub const ResType_MfCardConfig = @as(u32, 32771);
pub const ResType_Connection = @as(u32, 32772);
pub const CM_ADD_RANGE_ADDIFCONFLICT = @as(u32, 0);
pub const CM_ADD_RANGE_DONOTADDIFCONFLICT = @as(u32, 1);
pub const CM_ADD_RANGE_BITS = @as(u32, 1);
pub const BASIC_LOG_CONF = @as(u32, 0);
pub const FILTERED_LOG_CONF = @as(u32, 1);
pub const ALLOC_LOG_CONF = @as(u32, 2);
pub const BOOT_LOG_CONF = @as(u32, 3);
pub const FORCED_LOG_CONF = @as(u32, 4);
pub const OVERRIDE_LOG_CONF = @as(u32, 5);
pub const NUM_LOG_CONF = @as(u32, 6);
pub const LOG_CONF_BITS = @as(u32, 7);
pub const PRIORITY_EQUAL_FIRST = @as(u32, 8);
pub const PRIORITY_EQUAL_LAST = @as(u32, 0);
pub const PRIORITY_BIT = @as(u32, 8);
pub const RegDisposition_OpenAlways = @as(u32, 0);
pub const RegDisposition_OpenExisting = @as(u32, 1);
pub const RegDisposition_Bits = @as(u32, 1);
pub const CM_ADD_ID_HARDWARE = @as(u32, 0);
pub const CM_ADD_ID_COMPATIBLE = @as(u32, 1);
pub const CM_ADD_ID_BITS = @as(u32, 1);
pub const CM_CREATE_DEVNODE_NORMAL = @as(u32, 0);
pub const CM_CREATE_DEVNODE_NO_WAIT_INSTALL = @as(u32, 1);
pub const CM_CREATE_DEVNODE_PHANTOM = @as(u32, 2);
pub const CM_CREATE_DEVNODE_GENERATE_ID = @as(u32, 4);
pub const CM_CREATE_DEVNODE_DO_NOT_INSTALL = @as(u32, 8);
pub const CM_CREATE_DEVNODE_BITS = @as(u32, 15);
pub const CM_DELETE_CLASS_ONLY = @as(u32, 0);
pub const CM_DELETE_CLASS_SUBKEYS = @as(u32, 1);
pub const CM_DELETE_CLASS_INTERFACE = @as(u32, 2);
pub const CM_DELETE_CLASS_BITS = @as(u32, 3);
pub const CM_ENUMERATE_CLASSES_INSTALLER = @as(u32, 0);
pub const CM_ENUMERATE_CLASSES_INTERFACE = @as(u32, 1);
pub const CM_ENUMERATE_CLASSES_BITS = @as(u32, 1);
pub const CM_DETECT_NEW_PROFILE = @as(u32, 1);
pub const CM_DETECT_CRASHED = @as(u32, 2);
pub const CM_DETECT_HWPROF_FIRST_BOOT = @as(u32, 4);
pub const CM_DETECT_RUN = @as(u32, 2147483648);
pub const CM_DETECT_BITS = @as(u32, 2147483655);
pub const CM_DISABLE_POLITE = @as(u32, 0);
pub const CM_DISABLE_ABSOLUTE = @as(u32, 1);
pub const CM_DISABLE_HARDWARE = @as(u32, 2);
pub const CM_DISABLE_UI_NOT_OK = @as(u32, 4);
pub const CM_DISABLE_PERSIST = @as(u32, 8);
pub const CM_DISABLE_BITS = @as(u32, 15);
pub const CM_GETIDLIST_FILTER_NONE = @as(u32, 0);
pub const CM_GETIDLIST_FILTER_ENUMERATOR = @as(u32, 1);
pub const CM_GETIDLIST_FILTER_SERVICE = @as(u32, 2);
pub const CM_GETIDLIST_FILTER_EJECTRELATIONS = @as(u32, 4);
pub const CM_GETIDLIST_FILTER_REMOVALRELATIONS = @as(u32, 8);
pub const CM_GETIDLIST_FILTER_POWERRELATIONS = @as(u32, 16);
pub const CM_GETIDLIST_FILTER_BUSRELATIONS = @as(u32, 32);
pub const CM_GETIDLIST_DONOTGENERATE = @as(u32, 268435520);
pub const CM_GETIDLIST_FILTER_BITS = @as(u32, 268435583);
pub const CM_GETIDLIST_FILTER_TRANSPORTRELATIONS = @as(u32, 128);
pub const CM_GETIDLIST_FILTER_PRESENT = @as(u32, 256);
pub const CM_GETIDLIST_FILTER_CLASS = @as(u32, 512);
pub const CM_GET_DEVICE_INTERFACE_LIST_PRESENT = @as(u32, 0);
pub const CM_GET_DEVICE_INTERFACE_LIST_ALL_DEVICES = @as(u32, 1);
pub const CM_GET_DEVICE_INTERFACE_LIST_BITS = @as(u32, 1);
pub const CM_DRP_DEVICEDESC = @as(u32, 1);
pub const CM_DRP_HARDWAREID = @as(u32, 2);
pub const CM_DRP_COMPATIBLEIDS = @as(u32, 3);
pub const CM_DRP_UNUSED0 = @as(u32, 4);
pub const CM_DRP_SERVICE = @as(u32, 5);
pub const CM_DRP_UNUSED1 = @as(u32, 6);
pub const CM_DRP_UNUSED2 = @as(u32, 7);
pub const CM_DRP_CLASS = @as(u32, 8);
pub const CM_DRP_CLASSGUID = @as(u32, 9);
pub const CM_DRP_DRIVER = @as(u32, 10);
pub const CM_DRP_CONFIGFLAGS = @as(u32, 11);
pub const CM_DRP_MFG = @as(u32, 12);
pub const CM_DRP_FRIENDLYNAME = @as(u32, 13);
pub const CM_DRP_LOCATION_INFORMATION = @as(u32, 14);
pub const CM_DRP_PHYSICAL_DEVICE_OBJECT_NAME = @as(u32, 15);
pub const CM_DRP_CAPABILITIES = @as(u32, 16);
pub const CM_DRP_UI_NUMBER = @as(u32, 17);
pub const CM_DRP_UPPERFILTERS = @as(u32, 18);
pub const CM_DRP_LOWERFILTERS = @as(u32, 19);
pub const CM_DRP_BUSTYPEGUID = @as(u32, 20);
pub const CM_DRP_LEGACYBUSTYPE = @as(u32, 21);
pub const CM_DRP_BUSNUMBER = @as(u32, 22);
pub const CM_DRP_ENUMERATOR_NAME = @as(u32, 23);
pub const CM_DRP_SECURITY = @as(u32, 24);
pub const CM_DRP_SECURITY_SDS = @as(u32, 25);
pub const CM_DRP_DEVTYPE = @as(u32, 26);
pub const CM_DRP_EXCLUSIVE = @as(u32, 27);
pub const CM_DRP_CHARACTERISTICS = @as(u32, 28);
pub const CM_DRP_ADDRESS = @as(u32, 29);
pub const CM_DRP_UI_NUMBER_DESC_FORMAT = @as(u32, 30);
pub const CM_DRP_DEVICE_POWER_DATA = @as(u32, 31);
pub const CM_DRP_REMOVAL_POLICY = @as(u32, 32);
pub const CM_DRP_REMOVAL_POLICY_HW_DEFAULT = @as(u32, 33);
pub const CM_DRP_REMOVAL_POLICY_OVERRIDE = @as(u32, 34);
pub const CM_DRP_INSTALL_STATE = @as(u32, 35);
pub const CM_DRP_LOCATION_PATHS = @as(u32, 36);
pub const CM_DRP_BASE_CONTAINERID = @as(u32, 37);
pub const CM_DRP_MIN = @as(u32, 1);
pub const CM_DRP_MAX = @as(u32, 37);
pub const CM_DEVCAP_LOCKSUPPORTED = @as(u32, 1);
pub const CM_DEVCAP_EJECTSUPPORTED = @as(u32, 2);
pub const CM_DEVCAP_REMOVABLE = @as(u32, 4);
pub const CM_DEVCAP_DOCKDEVICE = @as(u32, 8);
pub const CM_DEVCAP_UNIQUEID = @as(u32, 16);
pub const CM_DEVCAP_SILENTINSTALL = @as(u32, 32);
pub const CM_DEVCAP_RAWDEVICEOK = @as(u32, 64);
pub const CM_DEVCAP_SURPRISEREMOVALOK = @as(u32, 128);
pub const CM_DEVCAP_HARDWAREDISABLED = @as(u32, 256);
pub const CM_DEVCAP_NONDYNAMIC = @as(u32, 512);
pub const CM_DEVCAP_SECUREDEVICE = @as(u32, 1024);
pub const CM_REMOVAL_POLICY_EXPECT_NO_REMOVAL = @as(u32, 1);
pub const CM_REMOVAL_POLICY_EXPECT_ORDERLY_REMOVAL = @as(u32, 2);
pub const CM_REMOVAL_POLICY_EXPECT_SURPRISE_REMOVAL = @as(u32, 3);
pub const CM_INSTALL_STATE_INSTALLED = @as(u32, 0);
pub const CM_INSTALL_STATE_NEEDS_REINSTALL = @as(u32, 1);
pub const CM_INSTALL_STATE_FAILED_INSTALL = @as(u32, 2);
pub const CM_INSTALL_STATE_FINISH_INSTALL = @as(u32, 3);
pub const CM_LOCATE_DEVNODE_NORMAL = @as(u32, 0);
pub const CM_LOCATE_DEVNODE_PHANTOM = @as(u32, 1);
pub const CM_LOCATE_DEVNODE_CANCELREMOVE = @as(u32, 2);
pub const CM_LOCATE_DEVNODE_NOVALIDATION = @as(u32, 4);
pub const CM_LOCATE_DEVNODE_BITS = @as(u32, 7);
pub const CM_OPEN_CLASS_KEY_INSTALLER = @as(u32, 0);
pub const CM_OPEN_CLASS_KEY_INTERFACE = @as(u32, 1);
pub const CM_OPEN_CLASS_KEY_BITS = @as(u32, 1);
pub const CM_REMOVE_UI_OK = @as(u32, 0);
pub const CM_REMOVE_UI_NOT_OK = @as(u32, 1);
pub const CM_REMOVE_NO_RESTART = @as(u32, 2);
pub const CM_REMOVE_BITS = @as(u32, 3);
pub const CM_REENUMERATE_NORMAL = @as(u32, 0);
pub const CM_REENUMERATE_SYNCHRONOUS = @as(u32, 1);
pub const CM_REENUMERATE_RETRY_INSTALLATION = @as(u32, 2);
pub const CM_REENUMERATE_ASYNCHRONOUS = @as(u32, 4);
pub const CM_REENUMERATE_BITS = @as(u32, 7);
pub const CM_REGISTER_DEVICE_DRIVER_STATIC = @as(u32, 0);
pub const CM_REGISTER_DEVICE_DRIVER_DISABLEABLE = @as(u32, 1);
pub const CM_REGISTER_DEVICE_DRIVER_REMOVABLE = @as(u32, 2);
pub const CM_REGISTER_DEVICE_DRIVER_BITS = @as(u32, 3);
pub const CM_REGISTRY_HARDWARE = @as(u32, 0);
pub const CM_REGISTRY_SOFTWARE = @as(u32, 1);
pub const CM_REGISTRY_USER = @as(u32, 256);
pub const CM_REGISTRY_CONFIG = @as(u32, 512);
pub const CM_REGISTRY_BITS = @as(u32, 769);
pub const CM_SET_DEVNODE_PROBLEM_NORMAL = @as(u32, 0);
pub const CM_SET_DEVNODE_PROBLEM_OVERRIDE = @as(u32, 1);
pub const CM_SET_DEVNODE_PROBLEM_BITS = @as(u32, 1);
pub const CM_SET_HW_PROF_FLAGS_UI_NOT_OK = @as(u32, 1);
pub const CM_SET_HW_PROF_FLAGS_BITS = @as(u32, 1);
pub const CM_SETUP_DEVNODE_READY = @as(u32, 0);
pub const CM_SETUP_DOWNLOAD = @as(u32, 1);
pub const CM_SETUP_WRITE_LOG_CONFS = @as(u32, 2);
pub const CM_SETUP_PROP_CHANGE = @as(u32, 3);
pub const CM_SETUP_DEVNODE_RESET = @as(u32, 4);
pub const CM_SETUP_DEVNODE_CONFIG = @as(u32, 5);
pub const CM_SETUP_DEVNODE_CONFIG_CLASS = @as(u32, 6);
pub const CM_SETUP_DEVNODE_CONFIG_EXTENSIONS = @as(u32, 7);
pub const CM_SETUP_DEVNODE_CONFIG_RESET = @as(u32, 8);
pub const CM_SETUP_BITS = @as(u32, 15);
pub const CM_QUERY_ARBITRATOR_RAW = @as(u32, 0);
pub const CM_QUERY_ARBITRATOR_TRANSLATED = @as(u32, 1);
pub const CM_QUERY_ARBITRATOR_BITS = @as(u32, 1);
pub const CM_CUSTOMDEVPROP_MERGE_MULTISZ = @as(u32, 1);
pub const CM_CUSTOMDEVPROP_BITS = @as(u32, 1);
pub const CM_NAME_ATTRIBUTE_NAME_RETRIEVED_FROM_DEVICE = @as(u32, 1);
pub const CM_NAME_ATTRIBUTE_USER_ASSIGNED_NAME = @as(u32, 2);
pub const CM_CLASS_PROPERTY_INSTALLER = @as(u32, 0);
pub const CM_CLASS_PROPERTY_INTERFACE = @as(u32, 1);
pub const CM_CLASS_PROPERTY_BITS = @as(u32, 1);
pub const CM_NOTIFY_FILTER_FLAG_ALL_INTERFACE_CLASSES = @as(u32, 1);
pub const CM_NOTIFY_FILTER_FLAG_ALL_DEVICE_INSTANCES = @as(u32, 2);
pub const CM_GLOBAL_STATE_CAN_DO_UI = @as(u32, 1);
pub const CM_GLOBAL_STATE_ON_BIG_STACK = @as(u32, 2);
pub const CM_GLOBAL_STATE_SERVICES_AVAILABLE = @as(u32, 4);
pub const CM_GLOBAL_STATE_SHUTTING_DOWN = @as(u32, 8);
pub const CM_GLOBAL_STATE_DETECTION_PENDING = @as(u32, 16);
pub const CM_GLOBAL_STATE_REBOOT_REQUIRED = @as(u32, 32);
pub const INSTALLFLAG_FORCE = @as(u32, 1);
pub const INSTALLFLAG_READONLY = @as(u32, 2);
pub const INSTALLFLAG_NONINTERACTIVE = @as(u32, 4);
pub const INSTALLFLAG_BITS = @as(u32, 7);
pub const DIIDFLAG_SHOWSEARCHUI = @as(u32, 1);
pub const DIIDFLAG_NOFINISHINSTALLUI = @as(u32, 2);
pub const DIIDFLAG_INSTALLNULLDRIVER = @as(u32, 4);
pub const DIIDFLAG_INSTALLCOPYINFDRIVERS = @as(u32, 8);
pub const DIIDFLAG_BITS = @as(u32, 15);
pub const DIIRFLAG_INF_ALREADY_COPIED = @as(u32, 1);
pub const DIIRFLAG_FORCE_INF = @as(u32, 2);
pub const DIIRFLAG_HW_USING_THE_INF = @as(u32, 4);
pub const DIIRFLAG_HOTPATCH = @as(u32, 8);
pub const DIIRFLAG_NOBACKUP = @as(u32, 16);
pub const DIIRFLAG_PRE_CONFIGURE_INF = @as(u32, 32);
pub const DIIRFLAG_INSTALL_AS_SET = @as(u32, 64);
pub const DIURFLAG_NO_REMOVE_INF = @as(u32, 1);
pub const DIURFLAG_RESERVED = @as(u32, 2);
pub const ROLLBACK_FLAG_NO_UI = @as(u32, 1);
pub const ROLLBACK_BITS = @as(u32, 1);

//--------------------------------------------------------------------------------
// Section: Types (118)
//--------------------------------------------------------------------------------
pub const CONFIGRET = extern enum(u32) {
    CR_SUCCESS = 0,
    CR_DEFAULT = 1,
    CR_OUT_OF_MEMORY = 2,
    CR_INVALID_POINTER = 3,
    CR_INVALID_FLAG = 4,
    CR_INVALID_DEVNODE = 5,
    CR_INVALID_DEVINST = 5,
    CR_INVALID_RES_DES = 6,
    CR_INVALID_LOG_CONF = 7,
    CR_INVALID_ARBITRATOR = 8,
    CR_INVALID_NODELIST = 9,
    CR_DEVNODE_HAS_REQS = 10,
    CR_DEVINST_HAS_REQS = 10,
    CR_INVALID_RESOURCEID = 11,
    CR_DLVXD_NOT_FOUND = 12,
    CR_NO_SUCH_DEVNODE = 13,
    CR_NO_SUCH_DEVINST = 13,
    CR_NO_MORE_LOG_CONF = 14,
    CR_NO_MORE_RES_DES = 15,
    CR_ALREADY_SUCH_DEVNODE = 16,
    CR_ALREADY_SUCH_DEVINST = 16,
    CR_INVALID_RANGE_LIST = 17,
    CR_INVALID_RANGE = 18,
    CR_FAILURE = 19,
    CR_NO_SUCH_LOGICAL_DEV = 20,
    CR_CREATE_BLOCKED = 21,
    CR_NOT_SYSTEM_VM = 22,
    CR_REMOVE_VETOED = 23,
    CR_APM_VETOED = 24,
    CR_INVALID_LOAD_TYPE = 25,
    CR_BUFFER_SMALL = 26,
    CR_NO_ARBITRATOR = 27,
    CR_NO_REGISTRY_HANDLE = 28,
    CR_REGISTRY_ERROR = 29,
    CR_INVALID_DEVICE_ID = 30,
    CR_INVALID_DATA = 31,
    CR_INVALID_API = 32,
    CR_DEVLOADER_NOT_READY = 33,
    CR_NEED_RESTART = 34,
    CR_NO_MORE_HW_PROFILES = 35,
    CR_DEVICE_NOT_THERE = 36,
    CR_NO_SUCH_VALUE = 37,
    CR_WRONG_TYPE = 38,
    CR_INVALID_PRIORITY = 39,
    CR_NOT_DISABLEABLE = 40,
    CR_FREE_RESOURCES = 41,
    CR_QUERY_VETOED = 42,
    CR_CANT_SHARE_IRQ = 43,
    CR_NO_DEPENDENT = 44,
    CR_SAME_RESOURCES = 45,
    CR_NO_SUCH_REGISTRY_KEY = 46,
    CR_INVALID_MACHINENAME = 47,
    CR_REMOTE_COMM_FAILURE = 48,
    CR_MACHINE_UNAVAILABLE = 49,
    CR_NO_CM_SERVICES = 50,
    CR_ACCESS_DENIED = 51,
    CR_CALL_NOT_IMPLEMENTED = 52,
    CR_INVALID_PROPERTY = 53,
    CR_DEVICE_INTERFACE_ACTIVE = 54,
    CR_NO_SUCH_DEVICE_INTERFACE = 55,
    CR_INVALID_REFERENCE_STRING = 56,
    CR_INVALID_CONFLICT_LIST = 57,
    CR_INVALID_INDEX = 58,
    CR_INVALID_STRUCTURE_SIZE = 59,
    NUM_CR_RESULTS = 60,
};
pub const CR_SUCCESS = CONFIGRET.CR_SUCCESS;
pub const CR_DEFAULT = CONFIGRET.CR_DEFAULT;
pub const CR_OUT_OF_MEMORY = CONFIGRET.CR_OUT_OF_MEMORY;
pub const CR_INVALID_POINTER = CONFIGRET.CR_INVALID_POINTER;
pub const CR_INVALID_FLAG = CONFIGRET.CR_INVALID_FLAG;
pub const CR_INVALID_DEVNODE = CONFIGRET.CR_INVALID_DEVNODE;
pub const CR_INVALID_DEVINST = CONFIGRET.CR_INVALID_DEVINST;
pub const CR_INVALID_RES_DES = CONFIGRET.CR_INVALID_RES_DES;
pub const CR_INVALID_LOG_CONF = CONFIGRET.CR_INVALID_LOG_CONF;
pub const CR_INVALID_ARBITRATOR = CONFIGRET.CR_INVALID_ARBITRATOR;
pub const CR_INVALID_NODELIST = CONFIGRET.CR_INVALID_NODELIST;
pub const CR_DEVNODE_HAS_REQS = CONFIGRET.CR_DEVNODE_HAS_REQS;
pub const CR_DEVINST_HAS_REQS = CONFIGRET.CR_DEVINST_HAS_REQS;
pub const CR_INVALID_RESOURCEID = CONFIGRET.CR_INVALID_RESOURCEID;
pub const CR_DLVXD_NOT_FOUND = CONFIGRET.CR_DLVXD_NOT_FOUND;
pub const CR_NO_SUCH_DEVNODE = CONFIGRET.CR_NO_SUCH_DEVNODE;
pub const CR_NO_SUCH_DEVINST = CONFIGRET.CR_NO_SUCH_DEVINST;
pub const CR_NO_MORE_LOG_CONF = CONFIGRET.CR_NO_MORE_LOG_CONF;
pub const CR_NO_MORE_RES_DES = CONFIGRET.CR_NO_MORE_RES_DES;
pub const CR_ALREADY_SUCH_DEVNODE = CONFIGRET.CR_ALREADY_SUCH_DEVNODE;
pub const CR_ALREADY_SUCH_DEVINST = CONFIGRET.CR_ALREADY_SUCH_DEVINST;
pub const CR_INVALID_RANGE_LIST = CONFIGRET.CR_INVALID_RANGE_LIST;
pub const CR_INVALID_RANGE = CONFIGRET.CR_INVALID_RANGE;
pub const CR_FAILURE = CONFIGRET.CR_FAILURE;
pub const CR_NO_SUCH_LOGICAL_DEV = CONFIGRET.CR_NO_SUCH_LOGICAL_DEV;
pub const CR_CREATE_BLOCKED = CONFIGRET.CR_CREATE_BLOCKED;
pub const CR_NOT_SYSTEM_VM = CONFIGRET.CR_NOT_SYSTEM_VM;
pub const CR_REMOVE_VETOED = CONFIGRET.CR_REMOVE_VETOED;
pub const CR_APM_VETOED = CONFIGRET.CR_APM_VETOED;
pub const CR_INVALID_LOAD_TYPE = CONFIGRET.CR_INVALID_LOAD_TYPE;
pub const CR_BUFFER_SMALL = CONFIGRET.CR_BUFFER_SMALL;
pub const CR_NO_ARBITRATOR = CONFIGRET.CR_NO_ARBITRATOR;
pub const CR_NO_REGISTRY_HANDLE = CONFIGRET.CR_NO_REGISTRY_HANDLE;
pub const CR_REGISTRY_ERROR = CONFIGRET.CR_REGISTRY_ERROR;
pub const CR_INVALID_DEVICE_ID = CONFIGRET.CR_INVALID_DEVICE_ID;
pub const CR_INVALID_DATA = CONFIGRET.CR_INVALID_DATA;
pub const CR_INVALID_API = CONFIGRET.CR_INVALID_API;
pub const CR_DEVLOADER_NOT_READY = CONFIGRET.CR_DEVLOADER_NOT_READY;
pub const CR_NEED_RESTART = CONFIGRET.CR_NEED_RESTART;
pub const CR_NO_MORE_HW_PROFILES = CONFIGRET.CR_NO_MORE_HW_PROFILES;
pub const CR_DEVICE_NOT_THERE = CONFIGRET.CR_DEVICE_NOT_THERE;
pub const CR_NO_SUCH_VALUE = CONFIGRET.CR_NO_SUCH_VALUE;
pub const CR_WRONG_TYPE = CONFIGRET.CR_WRONG_TYPE;
pub const CR_INVALID_PRIORITY = CONFIGRET.CR_INVALID_PRIORITY;
pub const CR_NOT_DISABLEABLE = CONFIGRET.CR_NOT_DISABLEABLE;
pub const CR_FREE_RESOURCES = CONFIGRET.CR_FREE_RESOURCES;
pub const CR_QUERY_VETOED = CONFIGRET.CR_QUERY_VETOED;
pub const CR_CANT_SHARE_IRQ = CONFIGRET.CR_CANT_SHARE_IRQ;
pub const CR_NO_DEPENDENT = CONFIGRET.CR_NO_DEPENDENT;
pub const CR_SAME_RESOURCES = CONFIGRET.CR_SAME_RESOURCES;
pub const CR_NO_SUCH_REGISTRY_KEY = CONFIGRET.CR_NO_SUCH_REGISTRY_KEY;
pub const CR_INVALID_MACHINENAME = CONFIGRET.CR_INVALID_MACHINENAME;
pub const CR_REMOTE_COMM_FAILURE = CONFIGRET.CR_REMOTE_COMM_FAILURE;
pub const CR_MACHINE_UNAVAILABLE = CONFIGRET.CR_MACHINE_UNAVAILABLE;
pub const CR_NO_CM_SERVICES = CONFIGRET.CR_NO_CM_SERVICES;
pub const CR_ACCESS_DENIED = CONFIGRET.CR_ACCESS_DENIED;
pub const CR_CALL_NOT_IMPLEMENTED = CONFIGRET.CR_CALL_NOT_IMPLEMENTED;
pub const CR_INVALID_PROPERTY = CONFIGRET.CR_INVALID_PROPERTY;
pub const CR_DEVICE_INTERFACE_ACTIVE = CONFIGRET.CR_DEVICE_INTERFACE_ACTIVE;
pub const CR_NO_SUCH_DEVICE_INTERFACE = CONFIGRET.CR_NO_SUCH_DEVICE_INTERFACE;
pub const CR_INVALID_REFERENCE_STRING = CONFIGRET.CR_INVALID_REFERENCE_STRING;
pub const CR_INVALID_CONFLICT_LIST = CONFIGRET.CR_INVALID_CONFLICT_LIST;
pub const CR_INVALID_INDEX = CONFIGRET.CR_INVALID_INDEX;
pub const CR_INVALID_STRUCTURE_SIZE = CONFIGRET.CR_INVALID_STRUCTURE_SIZE;
pub const NUM_CR_RESULTS = CONFIGRET.NUM_CR_RESULTS;

pub usingnamespace switch (@import("../zig.zig").arch) {
.X64, .Arm64 => struct {

pub const SP_ALTPLATFORM_INFO_V3 = extern struct {
    cbSize: u32,
    Platform: u32,
    MajorVersion: u32,
    MinorVersion: u32,
    ProcessorArchitecture: u16,
    Anonymous: _Anonymous_e__Union,
    FirstValidatedMajorVersion: u32,
    FirstValidatedMinorVersion: u32,
    ProductType: u8,
    SuiteMask: u16,
    BuildNumber: u32,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X64, .Arm64 => struct {

pub const SP_DEVINFO_DATA = extern struct {
    cbSize: u32,
    ClassGuid: Guid,
    DevInst: u32,
    Reserved: usize,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X64, .Arm64 => struct {

pub const SP_DEVICE_INTERFACE_DATA = extern struct {
    cbSize: u32,
    InterfaceClassGuid: Guid,
    Flags: u32,
    Reserved: usize,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X64, .Arm64 => struct {

pub const SP_DEVICE_INTERFACE_DETAIL_DATA_A = extern struct {
    cbSize: u32,
    DevicePath: [1]CHAR,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X64, .Arm64 => struct {

pub const SP_DEVICE_INTERFACE_DETAIL_DATA_W = extern struct {
    cbSize: u32,
    DevicePath: [1]u16,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X64, .Arm64 => struct {

pub const SP_DEVINFO_LIST_DETAIL_DATA_A = extern struct {
    cbSize: u32,
    ClassGuid: Guid,
    RemoteMachineHandle: HANDLE,
    RemoteMachineName: [263]CHAR,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X64, .Arm64 => struct {

pub const SP_DEVINFO_LIST_DETAIL_DATA_W = extern struct {
    cbSize: u32,
    ClassGuid: Guid,
    RemoteMachineHandle: HANDLE,
    RemoteMachineName: [263]u16,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X64, .Arm64 => struct {

pub const SP_DEVINSTALL_PARAMS_A = extern struct {
    cbSize: u32,
    Flags: u32,
    FlagsEx: u32,
    hwndParent: HWND,
    InstallMsgHandler: PSP_FILE_CALLBACK_A,
    InstallMsgHandlerContext: *c_void,
    FileQueue: *c_void,
    ClassInstallReserved: usize,
    Reserved: u32,
    DriverPath: [260]CHAR,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X64, .Arm64 => struct {

pub const SP_DEVINSTALL_PARAMS_W = extern struct {
    cbSize: u32,
    Flags: u32,
    FlagsEx: u32,
    hwndParent: HWND,
    InstallMsgHandler: PSP_FILE_CALLBACK_A,
    InstallMsgHandlerContext: *c_void,
    FileQueue: *c_void,
    ClassInstallReserved: usize,
    Reserved: u32,
    DriverPath: [260]u16,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X64, .Arm64 => struct {

pub const SP_CLASSINSTALL_HEADER = extern struct {
    cbSize: u32,
    InstallFunction: u32,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X64, .Arm64 => struct {

pub const SP_ENABLECLASS_PARAMS = extern struct {
    ClassInstallHeader: SP_CLASSINSTALL_HEADER,
    ClassGuid: Guid,
    EnableMessage: u32,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X64, .Arm64 => struct {

pub const SP_PROPCHANGE_PARAMS = extern struct {
    ClassInstallHeader: SP_CLASSINSTALL_HEADER,
    StateChange: u32,
    Scope: u32,
    HwProfile: u32,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X64, .Arm64 => struct {

pub const SP_REMOVEDEVICE_PARAMS = extern struct {
    ClassInstallHeader: SP_CLASSINSTALL_HEADER,
    Scope: u32,
    HwProfile: u32,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X64, .Arm64 => struct {

pub const SP_UNREMOVEDEVICE_PARAMS = extern struct {
    ClassInstallHeader: SP_CLASSINSTALL_HEADER,
    Scope: u32,
    HwProfile: u32,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X64, .Arm64 => struct {

pub const SP_SELECTDEVICE_PARAMS_W = extern struct {
    ClassInstallHeader: SP_CLASSINSTALL_HEADER,
    Title: [60]u16,
    Instructions: [256]u16,
    ListLabel: [30]u16,
    SubTitle: [256]u16,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X64, .Arm64 => struct {

pub const SP_DETECTDEVICE_PARAMS = extern struct {
    ClassInstallHeader: SP_CLASSINSTALL_HEADER,
    DetectProgressNotify: PDETECT_PROGRESS_NOTIFY,
    ProgressNotifyParam: *c_void,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X64, .Arm64 => struct {

pub const SP_INSTALLWIZARD_DATA = extern struct {
    ClassInstallHeader: SP_CLASSINSTALL_HEADER,
    Flags: u32,
    DynamicPages: [20]isize,
    NumDynamicPages: u32,
    DynamicPageFlags: u32,
    PrivateFlags: u32,
    PrivateData: LPARAM,
    hwndWizardDlg: HWND,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X64, .Arm64 => struct {

pub const SP_NEWDEVICEWIZARD_DATA = extern struct {
    ClassInstallHeader: SP_CLASSINSTALL_HEADER,
    Flags: u32,
    DynamicPages: [20]isize,
    NumDynamicPages: u32,
    hwndWizardDlg: HWND,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X64, .Arm64 => struct {

pub const SP_TROUBLESHOOTER_PARAMS_W = extern struct {
    ClassInstallHeader: SP_CLASSINSTALL_HEADER,
    ChmFile: [260]u16,
    HtmlTroubleShooter: [260]u16,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X64, .Arm64 => struct {

pub const SP_POWERMESSAGEWAKE_PARAMS_W = extern struct {
    ClassInstallHeader: SP_CLASSINSTALL_HEADER,
    PowerMessageWake: [512]u16,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X64, .Arm64 => struct {

pub const SP_DRVINFO_DATA_V2_A = extern struct {
    cbSize: u32,
    DriverType: u32,
    Reserved: usize,
    Description: [256]CHAR,
    MfgName: [256]CHAR,
    ProviderName: [256]CHAR,
    DriverDate: FILETIME,
    DriverVersion: u64,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X64, .Arm64 => struct {

pub const SP_DRVINFO_DATA_V2_W = extern struct {
    cbSize: u32,
    DriverType: u32,
    Reserved: usize,
    Description: [256]u16,
    MfgName: [256]u16,
    ProviderName: [256]u16,
    DriverDate: FILETIME,
    DriverVersion: u64,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X64, .Arm64 => struct {

pub const SP_DRVINFO_DATA_V1_A = extern struct {
    cbSize: u32,
    DriverType: u32,
    Reserved: usize,
    Description: [256]CHAR,
    MfgName: [256]CHAR,
    ProviderName: [256]CHAR,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X64, .Arm64 => struct {

pub const SP_DRVINFO_DATA_V1_W = extern struct {
    cbSize: u32,
    DriverType: u32,
    Reserved: usize,
    Description: [256]u16,
    MfgName: [256]u16,
    ProviderName: [256]u16,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X64, .Arm64 => struct {

pub const SP_DRVINFO_DETAIL_DATA_A = extern struct {
    cbSize: u32,
    InfDate: FILETIME,
    CompatIDsOffset: u32,
    CompatIDsLength: u32,
    Reserved: usize,
    SectionName: [256]CHAR,
    InfFileName: [260]CHAR,
    DrvDescription: [256]CHAR,
    HardwareID: [1]CHAR,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X64, .Arm64 => struct {

pub const SP_DRVINFO_DETAIL_DATA_W = extern struct {
    cbSize: u32,
    InfDate: FILETIME,
    CompatIDsOffset: u32,
    CompatIDsLength: u32,
    Reserved: usize,
    SectionName: [256]u16,
    InfFileName: [260]u16,
    DrvDescription: [256]u16,
    HardwareID: [1]u16,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X64, .Arm64 => struct {

pub const SP_DRVINSTALL_PARAMS = extern struct {
    cbSize: u32,
    Rank: u32,
    Flags: u32,
    PrivateData: usize,
    Reserved: u32,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X64, .Arm64 => struct {

pub const COINSTALLER_CONTEXT_DATA = extern struct {
    PostProcessing: BOOL,
    InstallResult: u32,
    PrivateData: *c_void,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X64, .Arm64 => struct {

pub const SP_CLASSIMAGELIST_DATA = extern struct {
    cbSize: u32,
    ImageList: HIMAGELIST,
    Reserved: usize,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X64, .Arm64 => struct {

pub const SP_PROPSHEETPAGE_REQUEST = extern struct {
    cbSize: u32,
    PageRequested: u32,
    DeviceInfoSet: *c_void,
    DeviceInfoData: *SP_DEVINFO_DATA,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X64, .Arm64 => struct {

pub const SP_BACKUP_QUEUE_PARAMS_V2_A = extern struct {
    cbSize: u32,
    FullInfPath: [260]CHAR,
    FilenameOffset: i32,
    ReinstallInstance: [260]CHAR,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X64, .Arm64 => struct {

pub const SP_BACKUP_QUEUE_PARAMS_V2_W = extern struct {
    cbSize: u32,
    FullInfPath: [260]u16,
    FilenameOffset: i32,
    ReinstallInstance: [260]u16,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X64, .Arm64 => struct {

pub const SP_BACKUP_QUEUE_PARAMS_V1_A = extern struct {
    cbSize: u32,
    FullInfPath: [260]CHAR,
    FilenameOffset: i32,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X64, .Arm64 => struct {

pub const SP_BACKUP_QUEUE_PARAMS_V1_W = extern struct {
    cbSize: u32,
    FullInfPath: [260]u16,
    FilenameOffset: i32,
};

}, else => struct { } };

pub const HCMNOTIFICATION = ?*opaque{};

pub const SP_SELECTDEVICE_PARAMS_A = extern struct {
    ClassInstallHeader: SP_CLASSINSTALL_HEADER,
    Title: [60]CHAR,
    Instructions: [256]CHAR,
    ListLabel: [30]CHAR,
    SubTitle: [256]CHAR,
    Reserved: [2]u8,
};

pub const PDETECT_PROGRESS_NOTIFY = fn(
    ProgressNotifyParam: *c_void,
    DetectComplete: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const SP_TROUBLESHOOTER_PARAMS_A = extern struct {
    ClassInstallHeader: SP_CLASSINSTALL_HEADER,
    ChmFile: [260]CHAR,
    HtmlTroubleShooter: [260]CHAR,
};

pub const SP_POWERMESSAGEWAKE_PARAMS_A = extern struct {
    ClassInstallHeader: SP_CLASSINSTALL_HEADER,
    PowerMessageWake: [512]CHAR,
};

pub const PSP_DETSIG_CMPPROC = fn(
    DeviceInfoSet: *c_void,
    NewDeviceData: *SP_DEVINFO_DATA,
    ExistingDeviceData: *SP_DEVINFO_DATA,
    CompareContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const SetupFileLogInfo = extern enum(i32) {
    SourceFilename = 0,
    Checksum = 1,
    DiskTagfile = 2,
    DiskDescription = 3,
    OtherInfo = 4,
    Max = 5,
};
pub const SetupFileLogSourceFilename = SetupFileLogInfo.SourceFilename;
pub const SetupFileLogChecksum = SetupFileLogInfo.Checksum;
pub const SetupFileLogDiskTagfile = SetupFileLogInfo.DiskTagfile;
pub const SetupFileLogDiskDescription = SetupFileLogInfo.DiskDescription;
pub const SetupFileLogOtherInfo = SetupFileLogInfo.OtherInfo;
pub const SetupFileLogMax = SetupFileLogInfo.Max;

pub const PNP_VETO_TYPE = extern enum(i32) {
    TypeUnknown = 0,
    LegacyDevice = 1,
    PendingClose = 2,
    WindowsApp = 3,
    WindowsService = 4,
    OutstandingOpen = 5,
    Device = 6,
    Driver = 7,
    IllegalDeviceRequest = 8,
    InsufficientPower = 9,
    NonDisableable = 10,
    LegacyDriver = 11,
    InsufficientRights = 12,
    AlreadyRemoved = 13,
};
pub const PNP_VetoTypeUnknown = PNP_VETO_TYPE.TypeUnknown;
pub const PNP_VetoLegacyDevice = PNP_VETO_TYPE.LegacyDevice;
pub const PNP_VetoPendingClose = PNP_VETO_TYPE.PendingClose;
pub const PNP_VetoWindowsApp = PNP_VETO_TYPE.WindowsApp;
pub const PNP_VetoWindowsService = PNP_VETO_TYPE.WindowsService;
pub const PNP_VetoOutstandingOpen = PNP_VETO_TYPE.OutstandingOpen;
pub const PNP_VetoDevice = PNP_VETO_TYPE.Device;
pub const PNP_VetoDriver = PNP_VETO_TYPE.Driver;
pub const PNP_VetoIllegalDeviceRequest = PNP_VETO_TYPE.IllegalDeviceRequest;
pub const PNP_VetoInsufficientPower = PNP_VETO_TYPE.InsufficientPower;
pub const PNP_VetoNonDisableable = PNP_VETO_TYPE.NonDisableable;
pub const PNP_VetoLegacyDriver = PNP_VETO_TYPE.LegacyDriver;
pub const PNP_VetoInsufficientRights = PNP_VETO_TYPE.InsufficientRights;
pub const PNP_VetoAlreadyRemoved = PNP_VETO_TYPE.AlreadyRemoved;

pub const CONFLICT_DETAILS_A = extern struct {
    CD_ulSize: u32,
    CD_ulMask: u32,
    CD_dnDevInst: u32,
    CD_rdResDes: usize,
    CD_ulFlags: u32,
    CD_szDescription: [260]CHAR,
};

pub const CONFLICT_DETAILS_W = extern struct {
    CD_ulSize: u32,
    CD_ulMask: u32,
    CD_dnDevInst: u32,
    CD_rdResDes: usize,
    CD_ulFlags: u32,
    CD_szDescription: [260]u16,
};

pub const MEM_RANGE = extern struct {
    MR_Align: u64,
    MR_nBytes: u32,
    MR_Min: u64,
    MR_Max: u64,
    MR_Flags: u32,
    MR_Reserved: u32,
};

pub const MEM_DES = extern struct {
    MD_Count: u32,
    MD_Type: u32,
    MD_Alloc_Base: u64,
    MD_Alloc_End: u64,
    MD_Flags: u32,
    MD_Reserved: u32,
};

pub const MEM_RESOURCE = extern struct {
    MEM_Header: MEM_DES,
    MEM_Data: [1]MEM_RANGE,
};

pub const Mem_Large_Range_s = extern struct {
    MLR_Align: u64,
    MLR_nBytes: u64,
    MLR_Min: u64,
    MLR_Max: u64,
    MLR_Flags: u32,
    MLR_Reserved: u32,
};

pub const Mem_Large_Des_s = extern struct {
    MLD_Count: u32,
    MLD_Type: u32,
    MLD_Alloc_Base: u64,
    MLD_Alloc_End: u64,
    MLD_Flags: u32,
    MLD_Reserved: u32,
};

pub const Mem_Large_Resource_s = extern struct {
    MEM_LARGE_Header: Mem_Large_Des_s,
    MEM_LARGE_Data: [1]Mem_Large_Range_s,
};

pub const IO_RANGE = extern struct {
    IOR_Align: u64,
    IOR_nPorts: u32,
    IOR_Min: u64,
    IOR_Max: u64,
    IOR_RangeFlags: u32,
    IOR_Alias: u64,
};

pub const IO_DES = extern struct {
    IOD_Count: u32,
    IOD_Type: u32,
    IOD_Alloc_Base: u64,
    IOD_Alloc_End: u64,
    IOD_DesFlags: u32,
};

pub const IO_RESOURCE = extern struct {
    IO_Header: IO_DES,
    IO_Data: [1]IO_RANGE,
};

pub const DMA_RANGE = extern struct {
    DR_Min: u32,
    DR_Max: u32,
    DR_Flags: u32,
};

pub const DMA_DES = extern struct {
    DD_Count: u32,
    DD_Type: u32,
    DD_Flags: u32,
    DD_Alloc_Chan: u32,
};

pub const DMA_RESOURCE = extern struct {
    DMA_Header: DMA_DES,
    DMA_Data: [1]DMA_RANGE,
};

pub const IRQ_RANGE = extern struct {
    IRQR_Min: u32,
    IRQR_Max: u32,
    IRQR_Flags: u32,
};

pub const IRQ_DES_32 = extern struct {
    IRQD_Count: u32,
    IRQD_Type: u32,
    IRQD_Flags: u32,
    IRQD_Alloc_Num: u32,
    IRQD_Affinity: u32,
};

pub const IRQ_DES_64 = extern struct {
    IRQD_Count: u32,
    IRQD_Type: u32,
    IRQD_Flags: u32,
    IRQD_Alloc_Num: u32,
    IRQD_Affinity: u64,
};

pub const IRQ_RESOURCE_32 = extern struct {
    IRQ_Header: IRQ_DES_32,
    IRQ_Data: [1]IRQ_RANGE,
};

pub const IRQ_RESOURCE_64 = extern struct {
    IRQ_Header: IRQ_DES_64,
    IRQ_Data: [1]IRQ_RANGE,
};

pub const DevPrivate_Range_s = extern struct {
    PR_Data1: u32,
    PR_Data2: u32,
    PR_Data3: u32,
};

pub const DevPrivate_Des_s = extern struct {
    PD_Count: u32,
    PD_Type: u32,
    PD_Data1: u32,
    PD_Data2: u32,
    PD_Data3: u32,
    PD_Flags: u32,
};

pub const DevPrivate_Resource_s = extern struct {
    PRV_Header: DevPrivate_Des_s,
    PRV_Data: [1]DevPrivate_Range_s,
};

pub const CS_DES = extern struct {
    CSD_SignatureLength: u32,
    CSD_LegacyDataOffset: u32,
    CSD_LegacyDataSize: u32,
    CSD_Flags: u32,
    CSD_ClassGuid: Guid,
    CSD_Signature: [1]u8,
};

pub const CS_RESOURCE = extern struct {
    CS_Header: CS_DES,
};

pub const PCCARD_DES = extern struct {
    PCD_Count: u32,
    PCD_Type: u32,
    PCD_Flags: u32,
    PCD_ConfigIndex: u8,
    PCD_Reserved: [3]u8,
    PCD_MemoryCardBase1: u32,
    PCD_MemoryCardBase2: u32,
    PCD_MemoryCardBase: [2]u32,
    PCD_MemoryFlags: [2]u16,
    PCD_IoFlags: [2]u8,
};

pub const PCCARD_RESOURCE = extern struct {
    PcCard_Header: PCCARD_DES,
};

pub const MFCARD_DES = extern struct {
    PMF_Count: u32,
    PMF_Type: u32,
    PMF_Flags: u32,
    PMF_ConfigOptions: u8,
    PMF_IoResourceIndex: u8,
    PMF_Reserved: [2]u8,
    PMF_ConfigRegisterBase: u32,
};

pub const MFCARD_RESOURCE = extern struct {
    MfCard_Header: MFCARD_DES,
};

pub const BUSNUMBER_RANGE = extern struct {
    BUSR_Min: u32,
    BUSR_Max: u32,
    BUSR_nBusNumbers: u32,
    BUSR_Flags: u32,
};

pub const BUSNUMBER_DES = extern struct {
    BUSD_Count: u32,
    BUSD_Type: u32,
    BUSD_Flags: u32,
    BUSD_Alloc_Base: u32,
    BUSD_Alloc_End: u32,
};

pub const BUSNUMBER_RESOURCE = extern struct {
    BusNumber_Header: BUSNUMBER_DES,
    BusNumber_Data: [1]BUSNUMBER_RANGE,
};

pub const Connection_Des_s = extern struct {
    COND_Type: u32,
    COND_Flags: u32,
    COND_Class: u8,
    COND_ClassType: u8,
    COND_Reserved1: u8,
    COND_Reserved2: u8,
    COND_Id: LARGE_INTEGER,
};

pub const Connection_Resource_s = extern struct {
    Connection_Header: Connection_Des_s,
};

pub const HWProfileInfo_sA = extern struct {
    HWPI_ulHWProfile: u32,
    HWPI_szFriendlyName: [80]CHAR,
    HWPI_dwFlags: u32,
};

pub const HWProfileInfo_sW = extern struct {
    HWPI_ulHWProfile: u32,
    HWPI_szFriendlyName: [80]u16,
    HWPI_dwFlags: u32,
};

pub const CM_NOTIFY_FILTER_TYPE = extern enum(i32) {
    DEVICEINTERFACE = 0,
    DEVICEHANDLE = 1,
    DEVICEINSTANCE = 2,
    MAX = 3,
};
pub const CM_NOTIFY_FILTER_TYPE_DEVICEINTERFACE = CM_NOTIFY_FILTER_TYPE.DEVICEINTERFACE;
pub const CM_NOTIFY_FILTER_TYPE_DEVICEHANDLE = CM_NOTIFY_FILTER_TYPE.DEVICEHANDLE;
pub const CM_NOTIFY_FILTER_TYPE_DEVICEINSTANCE = CM_NOTIFY_FILTER_TYPE.DEVICEINSTANCE;
pub const CM_NOTIFY_FILTER_TYPE_MAX = CM_NOTIFY_FILTER_TYPE.MAX;

pub const CM_NOTIFY_FILTER = extern struct {
    cbSize: u32,
    Flags: u32,
    FilterType: CM_NOTIFY_FILTER_TYPE,
    Reserved: u32,
    u: _u_e__Union,
    const _u_e__Union = u32; // TODO: generate this nested type!
};

pub const CM_NOTIFY_ACTION = extern enum(i32) {
    DEVICEINTERFACEARRIVAL = 0,
    DEVICEINTERFACEREMOVAL = 1,
    DEVICEQUERYREMOVE = 2,
    DEVICEQUERYREMOVEFAILED = 3,
    DEVICEREMOVEPENDING = 4,
    DEVICEREMOVECOMPLETE = 5,
    DEVICECUSTOMEVENT = 6,
    DEVICEINSTANCEENUMERATED = 7,
    DEVICEINSTANCESTARTED = 8,
    DEVICEINSTANCEREMOVED = 9,
    MAX = 10,
};
pub const CM_NOTIFY_ACTION_DEVICEINTERFACEARRIVAL = CM_NOTIFY_ACTION.DEVICEINTERFACEARRIVAL;
pub const CM_NOTIFY_ACTION_DEVICEINTERFACEREMOVAL = CM_NOTIFY_ACTION.DEVICEINTERFACEREMOVAL;
pub const CM_NOTIFY_ACTION_DEVICEQUERYREMOVE = CM_NOTIFY_ACTION.DEVICEQUERYREMOVE;
pub const CM_NOTIFY_ACTION_DEVICEQUERYREMOVEFAILED = CM_NOTIFY_ACTION.DEVICEQUERYREMOVEFAILED;
pub const CM_NOTIFY_ACTION_DEVICEREMOVEPENDING = CM_NOTIFY_ACTION.DEVICEREMOVEPENDING;
pub const CM_NOTIFY_ACTION_DEVICEREMOVECOMPLETE = CM_NOTIFY_ACTION.DEVICEREMOVECOMPLETE;
pub const CM_NOTIFY_ACTION_DEVICECUSTOMEVENT = CM_NOTIFY_ACTION.DEVICECUSTOMEVENT;
pub const CM_NOTIFY_ACTION_DEVICEINSTANCEENUMERATED = CM_NOTIFY_ACTION.DEVICEINSTANCEENUMERATED;
pub const CM_NOTIFY_ACTION_DEVICEINSTANCESTARTED = CM_NOTIFY_ACTION.DEVICEINSTANCESTARTED;
pub const CM_NOTIFY_ACTION_DEVICEINSTANCEREMOVED = CM_NOTIFY_ACTION.DEVICEINSTANCEREMOVED;
pub const CM_NOTIFY_ACTION_MAX = CM_NOTIFY_ACTION.MAX;

pub const CM_NOTIFY_EVENT_DATA = extern struct {
    FilterType: CM_NOTIFY_FILTER_TYPE,
    Reserved: u32,
    u: _u_e__Union,
    const _u_e__Union = u32; // TODO: generate this nested type!
};

pub const PCM_NOTIFY_CALLBACK = fn(
    hNotify: HCMNOTIFICATION,
    Context: ?*c_void,
    Action: CM_NOTIFY_ACTION,
    // TODO: what to do with BytesParamIndex 4?
    EventData: *CM_NOTIFY_EVENT_DATA,
    EventDataSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const SETUP_DI_BUILD_DRIVER_DRIVER_TYPE = extern enum(u32) {
    LASSDRIVER = 1,
    OMPATDRIVER = 2,
};
pub const SPDIT_CLASSDRIVER = SETUP_DI_BUILD_DRIVER_DRIVER_TYPE.LASSDRIVER;
pub const SPDIT_COMPATDRIVER = SETUP_DI_BUILD_DRIVER_DRIVER_TYPE.OMPATDRIVER;

pub usingnamespace switch (@import("../zig.zig").arch) {
.X86 => struct {

pub const SP_ALTPLATFORM_INFO_V3 = extern struct {
    cbSize: u32,
    Platform: u32,
    MajorVersion: u32,
    MinorVersion: u32,
    ProcessorArchitecture: u16,
    Anonymous: _Anonymous_e__Union,
    FirstValidatedMajorVersion: u32,
    FirstValidatedMinorVersion: u32,
    ProductType: u8,
    SuiteMask: u16,
    BuildNumber: u32,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X86 => struct {

pub const SP_DEVINFO_DATA = extern struct {
    cbSize: u32,
    ClassGuid: Guid,
    DevInst: u32,
    Reserved: usize,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X86 => struct {

pub const SP_DEVICE_INTERFACE_DATA = extern struct {
    cbSize: u32,
    InterfaceClassGuid: Guid,
    Flags: u32,
    Reserved: usize,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X86 => struct {

pub const SP_DEVICE_INTERFACE_DETAIL_DATA_A = extern struct {
    cbSize: u32,
    DevicePath: [1]CHAR,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X86 => struct {

pub const SP_DEVICE_INTERFACE_DETAIL_DATA_W = extern struct {
    cbSize: u32,
    DevicePath: [1]u16,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X86 => struct {

pub const SP_DEVINFO_LIST_DETAIL_DATA_A = extern struct {
    cbSize: u32,
    ClassGuid: Guid,
    RemoteMachineHandle: HANDLE,
    RemoteMachineName: [263]CHAR,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X86 => struct {

pub const SP_DEVINFO_LIST_DETAIL_DATA_W = extern struct {
    cbSize: u32,
    ClassGuid: Guid,
    RemoteMachineHandle: HANDLE,
    RemoteMachineName: [263]u16,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X86 => struct {

pub const SP_DEVINSTALL_PARAMS_A = extern struct {
    cbSize: u32,
    Flags: u32,
    FlagsEx: u32,
    hwndParent: HWND,
    InstallMsgHandler: PSP_FILE_CALLBACK_A,
    InstallMsgHandlerContext: *c_void,
    FileQueue: *c_void,
    ClassInstallReserved: usize,
    Reserved: u32,
    DriverPath: [260]CHAR,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X86 => struct {

pub const SP_DEVINSTALL_PARAMS_W = extern struct {
    cbSize: u32,
    Flags: u32,
    FlagsEx: u32,
    hwndParent: HWND,
    InstallMsgHandler: PSP_FILE_CALLBACK_A,
    InstallMsgHandlerContext: *c_void,
    FileQueue: *c_void,
    ClassInstallReserved: usize,
    Reserved: u32,
    DriverPath: [260]u16,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X86 => struct {

pub const SP_CLASSINSTALL_HEADER = extern struct {
    cbSize: u32,
    InstallFunction: u32,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X86 => struct {

pub const SP_ENABLECLASS_PARAMS = extern struct {
    ClassInstallHeader: SP_CLASSINSTALL_HEADER,
    ClassGuid: Guid,
    EnableMessage: u32,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X86 => struct {

pub const SP_PROPCHANGE_PARAMS = extern struct {
    ClassInstallHeader: SP_CLASSINSTALL_HEADER,
    StateChange: u32,
    Scope: u32,
    HwProfile: u32,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X86 => struct {

pub const SP_REMOVEDEVICE_PARAMS = extern struct {
    ClassInstallHeader: SP_CLASSINSTALL_HEADER,
    Scope: u32,
    HwProfile: u32,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X86 => struct {

pub const SP_UNREMOVEDEVICE_PARAMS = extern struct {
    ClassInstallHeader: SP_CLASSINSTALL_HEADER,
    Scope: u32,
    HwProfile: u32,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X86 => struct {

pub const SP_SELECTDEVICE_PARAMS_W = extern struct {
    ClassInstallHeader: SP_CLASSINSTALL_HEADER,
    Title: [60]u16,
    Instructions: [256]u16,
    ListLabel: [30]u16,
    SubTitle: [256]u16,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X86 => struct {

pub const SP_DETECTDEVICE_PARAMS = extern struct {
    ClassInstallHeader: SP_CLASSINSTALL_HEADER,
    DetectProgressNotify: PDETECT_PROGRESS_NOTIFY,
    ProgressNotifyParam: *c_void,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X86 => struct {

pub const SP_INSTALLWIZARD_DATA = extern struct {
    ClassInstallHeader: SP_CLASSINSTALL_HEADER,
    Flags: u32,
    DynamicPages: [20]isize,
    NumDynamicPages: u32,
    DynamicPageFlags: u32,
    PrivateFlags: u32,
    PrivateData: LPARAM,
    hwndWizardDlg: HWND,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X86 => struct {

pub const SP_NEWDEVICEWIZARD_DATA = extern struct {
    ClassInstallHeader: SP_CLASSINSTALL_HEADER,
    Flags: u32,
    DynamicPages: [20]isize,
    NumDynamicPages: u32,
    hwndWizardDlg: HWND,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X86 => struct {

pub const SP_TROUBLESHOOTER_PARAMS_W = extern struct {
    ClassInstallHeader: SP_CLASSINSTALL_HEADER,
    ChmFile: [260]u16,
    HtmlTroubleShooter: [260]u16,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X86 => struct {

pub const SP_POWERMESSAGEWAKE_PARAMS_W = extern struct {
    ClassInstallHeader: SP_CLASSINSTALL_HEADER,
    PowerMessageWake: [512]u16,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X86 => struct {

pub const SP_DRVINFO_DATA_V2_A = extern struct {
    cbSize: u32,
    DriverType: u32,
    Reserved: usize,
    Description: [256]CHAR,
    MfgName: [256]CHAR,
    ProviderName: [256]CHAR,
    DriverDate: FILETIME,
    DriverVersion: u64,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X86 => struct {

pub const SP_DRVINFO_DATA_V2_W = extern struct {
    cbSize: u32,
    DriverType: u32,
    Reserved: usize,
    Description: [256]u16,
    MfgName: [256]u16,
    ProviderName: [256]u16,
    DriverDate: FILETIME,
    DriverVersion: u64,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X86 => struct {

pub const SP_DRVINFO_DATA_V1_A = extern struct {
    cbSize: u32,
    DriverType: u32,
    Reserved: usize,
    Description: [256]CHAR,
    MfgName: [256]CHAR,
    ProviderName: [256]CHAR,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X86 => struct {

pub const SP_DRVINFO_DATA_V1_W = extern struct {
    cbSize: u32,
    DriverType: u32,
    Reserved: usize,
    Description: [256]u16,
    MfgName: [256]u16,
    ProviderName: [256]u16,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X86 => struct {

pub const SP_DRVINFO_DETAIL_DATA_A = extern struct {
    cbSize: u32,
    InfDate: FILETIME,
    CompatIDsOffset: u32,
    CompatIDsLength: u32,
    Reserved: usize,
    SectionName: [256]CHAR,
    InfFileName: [260]CHAR,
    DrvDescription: [256]CHAR,
    HardwareID: [1]CHAR,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X86 => struct {

pub const SP_DRVINFO_DETAIL_DATA_W = extern struct {
    cbSize: u32,
    InfDate: FILETIME,
    CompatIDsOffset: u32,
    CompatIDsLength: u32,
    Reserved: usize,
    SectionName: [256]u16,
    InfFileName: [260]u16,
    DrvDescription: [256]u16,
    HardwareID: [1]u16,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X86 => struct {

pub const SP_DRVINSTALL_PARAMS = extern struct {
    cbSize: u32,
    Rank: u32,
    Flags: u32,
    PrivateData: usize,
    Reserved: u32,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X86 => struct {

pub const COINSTALLER_CONTEXT_DATA = extern struct {
    PostProcessing: BOOL,
    InstallResult: u32,
    PrivateData: *c_void,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X86 => struct {

pub const SP_CLASSIMAGELIST_DATA = extern struct {
    cbSize: u32,
    ImageList: HIMAGELIST,
    Reserved: usize,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X86 => struct {

pub const SP_PROPSHEETPAGE_REQUEST = extern struct {
    cbSize: u32,
    PageRequested: u32,
    DeviceInfoSet: *c_void,
    DeviceInfoData: *SP_DEVINFO_DATA,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X86 => struct {

pub const SP_BACKUP_QUEUE_PARAMS_V2_A = extern struct {
    cbSize: u32,
    FullInfPath: [260]CHAR,
    FilenameOffset: i32,
    ReinstallInstance: [260]CHAR,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X86 => struct {

pub const SP_BACKUP_QUEUE_PARAMS_V2_W = extern struct {
    cbSize: u32,
    FullInfPath: [260]u16,
    FilenameOffset: i32,
    ReinstallInstance: [260]u16,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X86 => struct {

pub const SP_BACKUP_QUEUE_PARAMS_V1_A = extern struct {
    cbSize: u32,
    FullInfPath: [260]CHAR,
    FilenameOffset: i32,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X86 => struct {

pub const SP_BACKUP_QUEUE_PARAMS_V1_W = extern struct {
    cbSize: u32,
    FullInfPath: [260]u16,
    FilenameOffset: i32,
};

}, else => struct { } };


//--------------------------------------------------------------------------------
// Section: Functions (403)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "SETUPAPI" fn SetupGetInfDriverStoreLocationA(
    FileName: [*:0]const u8,
    AlternatePlatformInfo: ?*SP_ALTPLATFORM_INFO_V2,
    LocaleName: ?[*:0]const u8,
    ReturnBuffer: [*:0]u8,
    ReturnBufferSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "SETUPAPI" fn SetupGetInfDriverStoreLocationW(
    FileName: [*:0]const u16,
    AlternatePlatformInfo: ?*SP_ALTPLATFORM_INFO_V2,
    LocaleName: ?[*:0]const u16,
    ReturnBuffer: [*:0]u16,
    ReturnBufferSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "SETUPAPI" fn SetupGetInfPublishedNameA(
    DriverStoreLocation: [*:0]const u8,
    ReturnBuffer: [*:0]u8,
    ReturnBufferSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "SETUPAPI" fn SetupGetInfPublishedNameW(
    DriverStoreLocation: [*:0]const u16,
    ReturnBuffer: [*:0]u16,
    ReturnBufferSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "SETUPAPI" fn SetupGetThreadLogToken(
) callconv(@import("std").os.windows.WINAPI) u64;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "SETUPAPI" fn SetupSetThreadLogToken(
    LogToken: u64,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "SETUPAPI" fn SetupWriteTextLog(
    LogToken: u64,
    Category: u32,
    Flags: u32,
    MessageStr: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "SETUPAPI" fn SetupWriteTextLogError(
    LogToken: u64,
    Category: u32,
    LogFlags: u32,
    Error: u32,
    MessageStr: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "SETUPAPI" fn SetupWriteTextLogInfLine(
    LogToken: u64,
    Flags: u32,
    InfHandle: *c_void,
    Context: *INFCONTEXT,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "SETUPAPI" fn SetupGetBackupInformationA(
    QueueHandle: *c_void,
    BackupParams: *SP_BACKUP_QUEUE_PARAMS_V2_A,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SETUPAPI" fn SetupGetBackupInformationW(
    QueueHandle: *c_void,
    BackupParams: *SP_BACKUP_QUEUE_PARAMS_V2_W,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SETUPAPI" fn SetupPrepareQueueForRestoreA(
    QueueHandle: *c_void,
    BackupPath: [*:0]const u8,
    RestoreFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SETUPAPI" fn SetupPrepareQueueForRestoreW(
    QueueHandle: *c_void,
    BackupPath: [*:0]const u16,
    RestoreFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "SETUPAPI" fn SetupSetNonInteractiveMode(
    NonInteractiveFlag: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "SETUPAPI" fn SetupGetNonInteractiveMode(
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiCreateDeviceInfoList(
    ClassGuid: ?*const Guid,
    hwndParent: HWND,
) callconv(@import("std").os.windows.WINAPI) *c_void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiCreateDeviceInfoListExA(
    ClassGuid: ?*const Guid,
    hwndParent: HWND,
    MachineName: ?[*:0]const u8,
    Reserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiCreateDeviceInfoListExW(
    ClassGuid: ?*const Guid,
    hwndParent: HWND,
    MachineName: ?[*:0]const u16,
    Reserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiGetDeviceInfoListClass(
    DeviceInfoSet: *c_void,
    ClassGuid: *Guid,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiGetDeviceInfoListDetailA(
    DeviceInfoSet: *c_void,
    DeviceInfoSetDetailData: *SP_DEVINFO_LIST_DETAIL_DATA_A,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiGetDeviceInfoListDetailW(
    DeviceInfoSet: *c_void,
    DeviceInfoSetDetailData: *SP_DEVINFO_LIST_DETAIL_DATA_W,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiCreateDeviceInfoA(
    DeviceInfoSet: *c_void,
    DeviceName: [*:0]const u8,
    ClassGuid: *const Guid,
    DeviceDescription: ?[*:0]const u8,
    hwndParent: HWND,
    CreationFlags: u32,
    DeviceInfoData: ?*SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiCreateDeviceInfoW(
    DeviceInfoSet: *c_void,
    DeviceName: [*:0]const u16,
    ClassGuid: *const Guid,
    DeviceDescription: ?[*:0]const u16,
    hwndParent: HWND,
    CreationFlags: u32,
    DeviceInfoData: ?*SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiOpenDeviceInfoA(
    DeviceInfoSet: *c_void,
    DeviceInstanceId: [*:0]const u8,
    hwndParent: HWND,
    OpenFlags: u32,
    DeviceInfoData: ?*SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiOpenDeviceInfoW(
    DeviceInfoSet: *c_void,
    DeviceInstanceId: [*:0]const u16,
    hwndParent: HWND,
    OpenFlags: u32,
    DeviceInfoData: ?*SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiGetDeviceInstanceIdA(
    DeviceInfoSet: *c_void,
    DeviceInfoData: *SP_DEVINFO_DATA,
    DeviceInstanceId: ?[*:0]u8,
    DeviceInstanceIdSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiGetDeviceInstanceIdW(
    DeviceInfoSet: *c_void,
    DeviceInfoData: *SP_DEVINFO_DATA,
    DeviceInstanceId: ?[*:0]u16,
    DeviceInstanceIdSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiDeleteDeviceInfo(
    DeviceInfoSet: *c_void,
    DeviceInfoData: *SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiEnumDeviceInfo(
    DeviceInfoSet: *c_void,
    MemberIndex: u32,
    DeviceInfoData: *SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiDestroyDeviceInfoList(
    DeviceInfoSet: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiEnumDeviceInterfaces(
    DeviceInfoSet: *c_void,
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    InterfaceClassGuid: *const Guid,
    MemberIndex: u32,
    DeviceInterfaceData: *SP_DEVICE_INTERFACE_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiCreateDeviceInterfaceA(
    DeviceInfoSet: *c_void,
    DeviceInfoData: *SP_DEVINFO_DATA,
    InterfaceClassGuid: *const Guid,
    ReferenceString: ?[*:0]const u8,
    CreationFlags: u32,
    DeviceInterfaceData: ?*SP_DEVICE_INTERFACE_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiCreateDeviceInterfaceW(
    DeviceInfoSet: *c_void,
    DeviceInfoData: *SP_DEVINFO_DATA,
    InterfaceClassGuid: *const Guid,
    ReferenceString: ?[*:0]const u16,
    CreationFlags: u32,
    DeviceInterfaceData: ?*SP_DEVICE_INTERFACE_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiOpenDeviceInterfaceA(
    DeviceInfoSet: *c_void,
    DevicePath: [*:0]const u8,
    OpenFlags: u32,
    DeviceInterfaceData: ?*SP_DEVICE_INTERFACE_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiOpenDeviceInterfaceW(
    DeviceInfoSet: *c_void,
    DevicePath: [*:0]const u16,
    OpenFlags: u32,
    DeviceInterfaceData: ?*SP_DEVICE_INTERFACE_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiGetDeviceInterfaceAlias(
    DeviceInfoSet: *c_void,
    DeviceInterfaceData: *SP_DEVICE_INTERFACE_DATA,
    AliasInterfaceClassGuid: *const Guid,
    AliasDeviceInterfaceData: *SP_DEVICE_INTERFACE_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiDeleteDeviceInterfaceData(
    DeviceInfoSet: *c_void,
    DeviceInterfaceData: *SP_DEVICE_INTERFACE_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiRemoveDeviceInterface(
    DeviceInfoSet: *c_void,
    DeviceInterfaceData: *SP_DEVICE_INTERFACE_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiGetDeviceInterfaceDetailA(
    DeviceInfoSet: *c_void,
    DeviceInterfaceData: *SP_DEVICE_INTERFACE_DATA,
    // TODO: what to do with BytesParamIndex 3?
    DeviceInterfaceDetailData: ?*SP_DEVICE_INTERFACE_DETAIL_DATA_A,
    DeviceInterfaceDetailDataSize: u32,
    RequiredSize: ?*u32,
    DeviceInfoData: ?*SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiGetDeviceInterfaceDetailW(
    DeviceInfoSet: *c_void,
    DeviceInterfaceData: *SP_DEVICE_INTERFACE_DATA,
    // TODO: what to do with BytesParamIndex 3?
    DeviceInterfaceDetailData: ?*SP_DEVICE_INTERFACE_DETAIL_DATA_W,
    DeviceInterfaceDetailDataSize: u32,
    RequiredSize: ?*u32,
    DeviceInfoData: ?*SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiInstallDeviceInterfaces(
    DeviceInfoSet: *c_void,
    DeviceInfoData: *SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "SETUPAPI" fn SetupDiSetDeviceInterfaceDefault(
    DeviceInfoSet: *c_void,
    DeviceInterfaceData: *SP_DEVICE_INTERFACE_DATA,
    Flags: u32,
    Reserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiRegisterDeviceInfo(
    DeviceInfoSet: *c_void,
    DeviceInfoData: *SP_DEVINFO_DATA,
    Flags: u32,
    CompareProc: ?PSP_DETSIG_CMPPROC,
    CompareContext: ?*c_void,
    DupDeviceInfoData: ?*SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiBuildDriverInfoList(
    DeviceInfoSet: *c_void,
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    DriverType: SETUP_DI_BUILD_DRIVER_DRIVER_TYPE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiCancelDriverInfoSearch(
    DeviceInfoSet: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiEnumDriverInfoA(
    DeviceInfoSet: *c_void,
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    DriverType: u32,
    MemberIndex: u32,
    DriverInfoData: *SP_DRVINFO_DATA_V2_A,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiEnumDriverInfoW(
    DeviceInfoSet: *c_void,
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    DriverType: u32,
    MemberIndex: u32,
    DriverInfoData: *SP_DRVINFO_DATA_V2_W,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiGetSelectedDriverA(
    DeviceInfoSet: *c_void,
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    DriverInfoData: *SP_DRVINFO_DATA_V2_A,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiGetSelectedDriverW(
    DeviceInfoSet: *c_void,
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    DriverInfoData: *SP_DRVINFO_DATA_V2_W,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiSetSelectedDriverA(
    DeviceInfoSet: *c_void,
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    DriverInfoData: ?*SP_DRVINFO_DATA_V2_A,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiSetSelectedDriverW(
    DeviceInfoSet: *c_void,
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    DriverInfoData: ?*SP_DRVINFO_DATA_V2_W,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiGetDriverInfoDetailA(
    DeviceInfoSet: *c_void,
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    DriverInfoData: *SP_DRVINFO_DATA_V2_A,
    // TODO: what to do with BytesParamIndex 4?
    DriverInfoDetailData: ?*SP_DRVINFO_DETAIL_DATA_A,
    DriverInfoDetailDataSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiGetDriverInfoDetailW(
    DeviceInfoSet: *c_void,
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    DriverInfoData: *SP_DRVINFO_DATA_V2_W,
    // TODO: what to do with BytesParamIndex 4?
    DriverInfoDetailData: ?*SP_DRVINFO_DETAIL_DATA_W,
    DriverInfoDetailDataSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiDestroyDriverInfoList(
    DeviceInfoSet: *c_void,
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    DriverType: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiGetClassDevsW(
    ClassGuid: ?*const Guid,
    Enumerator: ?[*:0]const u16,
    hwndParent: HWND,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) *c_void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiGetClassDevsExA(
    ClassGuid: ?*const Guid,
    Enumerator: ?[*:0]const u8,
    hwndParent: HWND,
    Flags: u32,
    DeviceInfoSet: ?*c_void,
    MachineName: ?[*:0]const u8,
    Reserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiGetClassDevsExW(
    ClassGuid: ?*const Guid,
    Enumerator: ?[*:0]const u16,
    hwndParent: HWND,
    Flags: u32,
    DeviceInfoSet: ?*c_void,
    MachineName: ?[*:0]const u16,
    Reserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiGetINFClassA(
    InfName: [*:0]const u8,
    ClassGuid: *Guid,
    ClassName: [*:0]u8,
    ClassNameSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiGetINFClassW(
    InfName: [*:0]const u16,
    ClassGuid: *Guid,
    ClassName: [*:0]u16,
    ClassNameSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiBuildClassInfoList(
    Flags: u32,
    ClassGuidList: ?[*]Guid,
    ClassGuidListSize: u32,
    RequiredSize: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiBuildClassInfoListExA(
    Flags: u32,
    ClassGuidList: ?[*]Guid,
    ClassGuidListSize: u32,
    RequiredSize: *u32,
    MachineName: ?[*:0]const u8,
    Reserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiBuildClassInfoListExW(
    Flags: u32,
    ClassGuidList: ?[*]Guid,
    ClassGuidListSize: u32,
    RequiredSize: *u32,
    MachineName: ?[*:0]const u16,
    Reserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiGetClassDescriptionA(
    ClassGuid: *const Guid,
    ClassDescription: [*:0]u8,
    ClassDescriptionSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiGetClassDescriptionW(
    ClassGuid: *const Guid,
    ClassDescription: [*:0]u16,
    ClassDescriptionSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiGetClassDescriptionExA(
    ClassGuid: *const Guid,
    ClassDescription: [*:0]u8,
    ClassDescriptionSize: u32,
    RequiredSize: ?*u32,
    MachineName: ?[*:0]const u8,
    Reserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiGetClassDescriptionExW(
    ClassGuid: *const Guid,
    ClassDescription: [*:0]u16,
    ClassDescriptionSize: u32,
    RequiredSize: ?*u32,
    MachineName: ?[*:0]const u16,
    Reserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiCallClassInstaller(
    InstallFunction: u32,
    DeviceInfoSet: *c_void,
    DeviceInfoData: ?*SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiSelectDevice(
    DeviceInfoSet: *c_void,
    DeviceInfoData: ?*SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiSelectBestCompatDrv(
    DeviceInfoSet: *c_void,
    DeviceInfoData: ?*SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiInstallDevice(
    DeviceInfoSet: *c_void,
    DeviceInfoData: *SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiInstallDriverFiles(
    DeviceInfoSet: *c_void,
    DeviceInfoData: *SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiRegisterCoDeviceInstallers(
    DeviceInfoSet: *c_void,
    DeviceInfoData: *SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiRemoveDevice(
    DeviceInfoSet: *c_void,
    DeviceInfoData: *SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiUnremoveDevice(
    DeviceInfoSet: *c_void,
    DeviceInfoData: *SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SETUPAPI" fn SetupDiRestartDevices(
    DeviceInfoSet: *c_void,
    DeviceInfoData: *SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiChangeState(
    DeviceInfoSet: *c_void,
    DeviceInfoData: *SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiInstallClassA(
    hwndParent: HWND,
    InfFileName: [*:0]const u8,
    Flags: u32,
    FileQueue: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiInstallClassW(
    hwndParent: HWND,
    InfFileName: [*:0]const u16,
    Flags: u32,
    FileQueue: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiInstallClassExA(
    hwndParent: HWND,
    InfFileName: ?[*:0]const u8,
    Flags: u32,
    FileQueue: ?*c_void,
    InterfaceClassGuid: ?*const Guid,
    Reserved1: *c_void,
    Reserved2: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiInstallClassExW(
    hwndParent: HWND,
    InfFileName: ?[*:0]const u16,
    Flags: u32,
    FileQueue: ?*c_void,
    InterfaceClassGuid: ?*const Guid,
    Reserved1: *c_void,
    Reserved2: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiOpenClassRegKey(
    ClassGuid: ?*const Guid,
    samDesired: u32,
) callconv(@import("std").os.windows.WINAPI) HKEY;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiOpenClassRegKeyExA(
    ClassGuid: ?*const Guid,
    samDesired: u32,
    Flags: u32,
    MachineName: ?[*:0]const u8,
    Reserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) HKEY;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiOpenClassRegKeyExW(
    ClassGuid: ?*const Guid,
    samDesired: u32,
    Flags: u32,
    MachineName: ?[*:0]const u16,
    Reserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) HKEY;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiCreateDeviceInterfaceRegKeyA(
    DeviceInfoSet: *c_void,
    DeviceInterfaceData: *SP_DEVICE_INTERFACE_DATA,
    Reserved: u32,
    samDesired: u32,
    InfHandle: ?*c_void,
    InfSectionName: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) HKEY;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiCreateDeviceInterfaceRegKeyW(
    DeviceInfoSet: *c_void,
    DeviceInterfaceData: *SP_DEVICE_INTERFACE_DATA,
    Reserved: u32,
    samDesired: u32,
    InfHandle: ?*c_void,
    InfSectionName: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HKEY;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiOpenDeviceInterfaceRegKey(
    DeviceInfoSet: *c_void,
    DeviceInterfaceData: *SP_DEVICE_INTERFACE_DATA,
    Reserved: u32,
    samDesired: u32,
) callconv(@import("std").os.windows.WINAPI) HKEY;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiDeleteDeviceInterfaceRegKey(
    DeviceInfoSet: *c_void,
    DeviceInterfaceData: *SP_DEVICE_INTERFACE_DATA,
    Reserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiCreateDevRegKeyA(
    DeviceInfoSet: *c_void,
    DeviceInfoData: *SP_DEVINFO_DATA,
    Scope: u32,
    HwProfile: u32,
    KeyType: u32,
    InfHandle: ?*c_void,
    InfSectionName: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) HKEY;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiCreateDevRegKeyW(
    DeviceInfoSet: *c_void,
    DeviceInfoData: *SP_DEVINFO_DATA,
    Scope: u32,
    HwProfile: u32,
    KeyType: u32,
    InfHandle: ?*c_void,
    InfSectionName: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HKEY;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiOpenDevRegKey(
    DeviceInfoSet: *c_void,
    DeviceInfoData: *SP_DEVINFO_DATA,
    Scope: u32,
    HwProfile: u32,
    KeyType: u32,
    samDesired: u32,
) callconv(@import("std").os.windows.WINAPI) HKEY;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiDeleteDevRegKey(
    DeviceInfoSet: *c_void,
    DeviceInfoData: *SP_DEVINFO_DATA,
    Scope: u32,
    HwProfile: u32,
    KeyType: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiGetHwProfileList(
    HwProfileList: [*]u32,
    HwProfileListSize: u32,
    RequiredSize: *u32,
    CurrentlyActiveIndex: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiGetHwProfileListExA(
    HwProfileList: [*]u32,
    HwProfileListSize: u32,
    RequiredSize: *u32,
    CurrentlyActiveIndex: ?*u32,
    MachineName: ?[*:0]const u8,
    Reserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiGetHwProfileListExW(
    HwProfileList: [*]u32,
    HwProfileListSize: u32,
    RequiredSize: *u32,
    CurrentlyActiveIndex: ?*u32,
    MachineName: ?[*:0]const u16,
    Reserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "SETUPAPI" fn SetupDiGetDevicePropertyKeys(
    DeviceInfoSet: *c_void,
    DeviceInfoData: *SP_DEVINFO_DATA,
    PropertyKeyArray: ?[*]DEVPROPKEY,
    PropertyKeyCount: u32,
    RequiredPropertyKeyCount: ?*u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "SETUPAPI" fn SetupDiGetDevicePropertyW(
    DeviceInfoSet: *c_void,
    DeviceInfoData: *SP_DEVINFO_DATA,
    PropertyKey: *const DEVPROPKEY,
    PropertyType: *u32,
    // TODO: what to do with BytesParamIndex 5?
    PropertyBuffer: ?*u8,
    PropertyBufferSize: u32,
    RequiredSize: ?*u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "SETUPAPI" fn SetupDiSetDevicePropertyW(
    DeviceInfoSet: *c_void,
    DeviceInfoData: *SP_DEVINFO_DATA,
    PropertyKey: *const DEVPROPKEY,
    PropertyType: u32,
    // TODO: what to do with BytesParamIndex 5?
    PropertyBuffer: ?*const u8,
    PropertyBufferSize: u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "SETUPAPI" fn SetupDiGetDeviceInterfacePropertyKeys(
    DeviceInfoSet: *c_void,
    DeviceInterfaceData: *SP_DEVICE_INTERFACE_DATA,
    PropertyKeyArray: ?[*]DEVPROPKEY,
    PropertyKeyCount: u32,
    RequiredPropertyKeyCount: ?*u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "SETUPAPI" fn SetupDiGetDeviceInterfacePropertyW(
    DeviceInfoSet: *c_void,
    DeviceInterfaceData: *SP_DEVICE_INTERFACE_DATA,
    PropertyKey: *const DEVPROPKEY,
    PropertyType: *u32,
    // TODO: what to do with BytesParamIndex 5?
    PropertyBuffer: ?*u8,
    PropertyBufferSize: u32,
    RequiredSize: ?*u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "SETUPAPI" fn SetupDiSetDeviceInterfacePropertyW(
    DeviceInfoSet: *c_void,
    DeviceInterfaceData: *SP_DEVICE_INTERFACE_DATA,
    PropertyKey: *const DEVPROPKEY,
    PropertyType: u32,
    // TODO: what to do with BytesParamIndex 5?
    PropertyBuffer: ?*const u8,
    PropertyBufferSize: u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "SETUPAPI" fn SetupDiGetClassPropertyKeys(
    ClassGuid: *const Guid,
    PropertyKeyArray: ?[*]DEVPROPKEY,
    PropertyKeyCount: u32,
    RequiredPropertyKeyCount: ?*u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "SETUPAPI" fn SetupDiGetClassPropertyKeysExW(
    ClassGuid: *const Guid,
    PropertyKeyArray: ?[*]DEVPROPKEY,
    PropertyKeyCount: u32,
    RequiredPropertyKeyCount: ?*u32,
    Flags: u32,
    MachineName: ?[*:0]const u16,
    Reserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "SETUPAPI" fn SetupDiGetClassPropertyW(
    ClassGuid: *const Guid,
    PropertyKey: *const DEVPROPKEY,
    PropertyType: *u32,
    // TODO: what to do with BytesParamIndex 4?
    PropertyBuffer: ?*u8,
    PropertyBufferSize: u32,
    RequiredSize: ?*u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "SETUPAPI" fn SetupDiGetClassPropertyExW(
    ClassGuid: *const Guid,
    PropertyKey: *const DEVPROPKEY,
    PropertyType: *u32,
    // TODO: what to do with BytesParamIndex 4?
    PropertyBuffer: ?*u8,
    PropertyBufferSize: u32,
    RequiredSize: ?*u32,
    Flags: u32,
    MachineName: ?[*:0]const u16,
    Reserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "SETUPAPI" fn SetupDiSetClassPropertyW(
    ClassGuid: *const Guid,
    PropertyKey: *const DEVPROPKEY,
    PropertyType: u32,
    // TODO: what to do with BytesParamIndex 4?
    PropertyBuffer: ?*const u8,
    PropertyBufferSize: u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "SETUPAPI" fn SetupDiSetClassPropertyExW(
    ClassGuid: *const Guid,
    PropertyKey: *const DEVPROPKEY,
    PropertyType: u32,
    // TODO: what to do with BytesParamIndex 4?
    PropertyBuffer: ?*const u8,
    PropertyBufferSize: u32,
    Flags: u32,
    MachineName: ?[*:0]const u16,
    Reserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiGetDeviceRegistryPropertyA(
    DeviceInfoSet: *c_void,
    DeviceInfoData: *SP_DEVINFO_DATA,
    Property: u32,
    PropertyRegDataType: ?*u32,
    // TODO: what to do with BytesParamIndex 5?
    PropertyBuffer: ?*u8,
    PropertyBufferSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiGetDeviceRegistryPropertyW(
    DeviceInfoSet: *c_void,
    DeviceInfoData: *SP_DEVINFO_DATA,
    Property: u32,
    PropertyRegDataType: ?*u32,
    // TODO: what to do with BytesParamIndex 5?
    PropertyBuffer: ?*u8,
    PropertyBufferSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "SETUPAPI" fn SetupDiGetClassRegistryPropertyA(
    ClassGuid: *const Guid,
    Property: u32,
    PropertyRegDataType: ?*u32,
    // TODO: what to do with BytesParamIndex 4?
    PropertyBuffer: *u8,
    PropertyBufferSize: u32,
    RequiredSize: ?*u32,
    MachineName: ?[*:0]const u8,
    Reserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "SETUPAPI" fn SetupDiGetClassRegistryPropertyW(
    ClassGuid: *const Guid,
    Property: u32,
    PropertyRegDataType: ?*u32,
    // TODO: what to do with BytesParamIndex 4?
    PropertyBuffer: *u8,
    PropertyBufferSize: u32,
    RequiredSize: ?*u32,
    MachineName: ?[*:0]const u16,
    Reserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiSetDeviceRegistryPropertyA(
    DeviceInfoSet: *c_void,
    DeviceInfoData: *SP_DEVINFO_DATA,
    Property: u32,
    // TODO: what to do with BytesParamIndex 4?
    PropertyBuffer: ?*const u8,
    PropertyBufferSize: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiSetDeviceRegistryPropertyW(
    DeviceInfoSet: *c_void,
    DeviceInfoData: *SP_DEVINFO_DATA,
    Property: u32,
    // TODO: what to do with BytesParamIndex 4?
    PropertyBuffer: ?*const u8,
    PropertyBufferSize: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "SETUPAPI" fn SetupDiSetClassRegistryPropertyA(
    ClassGuid: *const Guid,
    Property: u32,
    // TODO: what to do with BytesParamIndex 3?
    PropertyBuffer: ?*const u8,
    PropertyBufferSize: u32,
    MachineName: ?[*:0]const u8,
    Reserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "SETUPAPI" fn SetupDiSetClassRegistryPropertyW(
    ClassGuid: *const Guid,
    Property: u32,
    // TODO: what to do with BytesParamIndex 3?
    PropertyBuffer: ?*const u8,
    PropertyBufferSize: u32,
    MachineName: ?[*:0]const u16,
    Reserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiGetDeviceInstallParamsA(
    DeviceInfoSet: *c_void,
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    DeviceInstallParams: *SP_DEVINSTALL_PARAMS_A,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiGetDeviceInstallParamsW(
    DeviceInfoSet: *c_void,
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    DeviceInstallParams: *SP_DEVINSTALL_PARAMS_W,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiGetClassInstallParamsA(
    DeviceInfoSet: *c_void,
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    // TODO: what to do with BytesParamIndex 3?
    ClassInstallParams: ?*SP_CLASSINSTALL_HEADER,
    ClassInstallParamsSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiGetClassInstallParamsW(
    DeviceInfoSet: *c_void,
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    // TODO: what to do with BytesParamIndex 3?
    ClassInstallParams: ?*SP_CLASSINSTALL_HEADER,
    ClassInstallParamsSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiSetDeviceInstallParamsA(
    DeviceInfoSet: *c_void,
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    DeviceInstallParams: *SP_DEVINSTALL_PARAMS_A,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiSetDeviceInstallParamsW(
    DeviceInfoSet: *c_void,
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    DeviceInstallParams: *SP_DEVINSTALL_PARAMS_W,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiSetClassInstallParamsA(
    DeviceInfoSet: *c_void,
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    // TODO: what to do with BytesParamIndex 3?
    ClassInstallParams: ?*SP_CLASSINSTALL_HEADER,
    ClassInstallParamsSize: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiSetClassInstallParamsW(
    DeviceInfoSet: *c_void,
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    // TODO: what to do with BytesParamIndex 3?
    ClassInstallParams: ?*SP_CLASSINSTALL_HEADER,
    ClassInstallParamsSize: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiGetDriverInstallParamsA(
    DeviceInfoSet: *c_void,
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    DriverInfoData: *SP_DRVINFO_DATA_V2_A,
    DriverInstallParams: *SP_DRVINSTALL_PARAMS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiGetDriverInstallParamsW(
    DeviceInfoSet: *c_void,
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    DriverInfoData: *SP_DRVINFO_DATA_V2_W,
    DriverInstallParams: *SP_DRVINSTALL_PARAMS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiSetDriverInstallParamsA(
    DeviceInfoSet: *c_void,
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    DriverInfoData: *SP_DRVINFO_DATA_V2_A,
    DriverInstallParams: *SP_DRVINSTALL_PARAMS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiSetDriverInstallParamsW(
    DeviceInfoSet: *c_void,
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    DriverInfoData: *SP_DRVINFO_DATA_V2_W,
    DriverInstallParams: *SP_DRVINSTALL_PARAMS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiLoadClassIcon(
    ClassGuid: *const Guid,
    LargeIcon: ?*HICON,
    MiniIconIndex: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "SETUPAPI" fn SetupDiLoadDeviceIcon(
    DeviceInfoSet: *c_void,
    DeviceInfoData: *SP_DEVINFO_DATA,
    cxIcon: u32,
    cyIcon: u32,
    Flags: u32,
    hIcon: *HICON,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiDrawMiniIcon(
    hdc: HDC,
    rc: RECT,
    MiniIconIndex: i32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiGetClassBitmapIndex(
    ClassGuid: ?*const Guid,
    MiniIconIndex: *i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiGetClassImageList(
    ClassImageListData: *SP_CLASSIMAGELIST_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiGetClassImageListExA(
    ClassImageListData: *SP_CLASSIMAGELIST_DATA,
    MachineName: ?[*:0]const u8,
    Reserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiGetClassImageListExW(
    ClassImageListData: *SP_CLASSIMAGELIST_DATA,
    MachineName: ?[*:0]const u16,
    Reserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiGetClassImageIndex(
    ClassImageListData: *SP_CLASSIMAGELIST_DATA,
    ClassGuid: *const Guid,
    ImageIndex: *i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiDestroyClassImageList(
    ClassImageListData: *SP_CLASSIMAGELIST_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiGetClassDevPropertySheetsA(
    DeviceInfoSet: *c_void,
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    PropertySheetHeader: *PROPSHEETHEADERA_V2,
    PropertySheetHeaderPageListSize: u32,
    RequiredSize: ?*u32,
    PropertySheetType: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiGetClassDevPropertySheetsW(
    DeviceInfoSet: *c_void,
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    PropertySheetHeader: *PROPSHEETHEADERW_V2,
    PropertySheetHeaderPageListSize: u32,
    RequiredSize: ?*u32,
    PropertySheetType: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiAskForOEMDisk(
    DeviceInfoSet: *c_void,
    DeviceInfoData: ?*SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiSelectOEMDrv(
    hwndParent: HWND,
    DeviceInfoSet: *c_void,
    DeviceInfoData: ?*SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiClassNameFromGuidA(
    ClassGuid: *const Guid,
    ClassName: [*:0]u8,
    ClassNameSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiClassNameFromGuidW(
    ClassGuid: *const Guid,
    ClassName: [*:0]u16,
    ClassNameSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiClassNameFromGuidExA(
    ClassGuid: *const Guid,
    ClassName: [*:0]u8,
    ClassNameSize: u32,
    RequiredSize: ?*u32,
    MachineName: ?[*:0]const u8,
    Reserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiClassNameFromGuidExW(
    ClassGuid: *const Guid,
    ClassName: [*:0]u16,
    ClassNameSize: u32,
    RequiredSize: ?*u32,
    MachineName: ?[*:0]const u16,
    Reserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiClassGuidsFromNameA(
    ClassName: [*:0]const u8,
    ClassGuidList: [*]Guid,
    ClassGuidListSize: u32,
    RequiredSize: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiClassGuidsFromNameW(
    ClassName: [*:0]const u16,
    ClassGuidList: [*]Guid,
    ClassGuidListSize: u32,
    RequiredSize: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiClassGuidsFromNameExA(
    ClassName: [*:0]const u8,
    ClassGuidList: [*]Guid,
    ClassGuidListSize: u32,
    RequiredSize: *u32,
    MachineName: ?[*:0]const u8,
    Reserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiClassGuidsFromNameExW(
    ClassName: [*:0]const u16,
    ClassGuidList: [*]Guid,
    ClassGuidListSize: u32,
    RequiredSize: *u32,
    MachineName: ?[*:0]const u16,
    Reserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiGetHwProfileFriendlyNameA(
    HwProfile: u32,
    FriendlyName: [*:0]u8,
    FriendlyNameSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiGetHwProfileFriendlyNameW(
    HwProfile: u32,
    FriendlyName: [*:0]u16,
    FriendlyNameSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiGetHwProfileFriendlyNameExA(
    HwProfile: u32,
    FriendlyName: [*:0]u8,
    FriendlyNameSize: u32,
    RequiredSize: ?*u32,
    MachineName: ?[*:0]const u8,
    Reserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiGetHwProfileFriendlyNameExW(
    HwProfile: u32,
    FriendlyName: [*:0]u16,
    FriendlyNameSize: u32,
    RequiredSize: ?*u32,
    MachineName: ?[*:0]const u16,
    Reserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SETUPAPI" fn SetupDiGetWizardPage(
    DeviceInfoSet: *c_void,
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    InstallWizardData: *SP_INSTALLWIZARD_DATA,
    PageType: u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) HPROPSHEETPAGE;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiGetSelectedDevice(
    DeviceInfoSet: *c_void,
    DeviceInfoData: *SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiSetSelectedDevice(
    DeviceInfoSet: *c_void,
    DeviceInfoData: *SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SETUPAPI" fn SetupDiGetActualModelsSectionA(
    Context: *INFCONTEXT,
    AlternatePlatformInfo: ?*SP_ALTPLATFORM_INFO_V2,
    InfSectionWithExt: ?[*:0]u8,
    InfSectionWithExtSize: u32,
    RequiredSize: ?*u32,
    Reserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SETUPAPI" fn SetupDiGetActualModelsSectionW(
    Context: *INFCONTEXT,
    AlternatePlatformInfo: ?*SP_ALTPLATFORM_INFO_V2,
    InfSectionWithExt: ?[*:0]u16,
    InfSectionWithExtSize: u32,
    RequiredSize: ?*u32,
    Reserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiGetActualSectionToInstallA(
    InfHandle: *c_void,
    InfSectionName: [*:0]const u8,
    InfSectionWithExt: ?[*:0]u8,
    InfSectionWithExtSize: u32,
    RequiredSize: ?*u32,
    Extension: ?*?PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn SetupDiGetActualSectionToInstallW(
    InfHandle: *c_void,
    InfSectionName: [*:0]const u16,
    InfSectionWithExt: ?[*:0]u16,
    InfSectionWithExtSize: u32,
    RequiredSize: ?*u32,
    Extension: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "SETUPAPI" fn SetupDiGetActualSectionToInstallExA(
    InfHandle: *c_void,
    InfSectionName: [*:0]const u8,
    AlternatePlatformInfo: ?*SP_ALTPLATFORM_INFO_V2,
    InfSectionWithExt: ?[*:0]u8,
    InfSectionWithExtSize: u32,
    RequiredSize: ?*u32,
    Extension: ?*?PSTR,
    Reserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "SETUPAPI" fn SetupDiGetActualSectionToInstallExW(
    InfHandle: *c_void,
    InfSectionName: [*:0]const u16,
    AlternatePlatformInfo: ?*SP_ALTPLATFORM_INFO_V2,
    InfSectionWithExt: ?[*:0]u16,
    InfSectionWithExtSize: u32,
    RequiredSize: ?*u32,
    Extension: ?*?PWSTR,
    Reserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "SETUPAPI" fn SetupDiGetCustomDevicePropertyA(
    DeviceInfoSet: *c_void,
    DeviceInfoData: *SP_DEVINFO_DATA,
    CustomPropertyName: [*:0]const u8,
    Flags: u32,
    PropertyRegDataType: ?*u32,
    // TODO: what to do with BytesParamIndex 6?
    PropertyBuffer: *u8,
    PropertyBufferSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "SETUPAPI" fn SetupDiGetCustomDevicePropertyW(
    DeviceInfoSet: *c_void,
    DeviceInfoData: *SP_DEVINFO_DATA,
    CustomPropertyName: [*:0]const u16,
    Flags: u32,
    PropertyRegDataType: ?*u32,
    // TODO: what to do with BytesParamIndex 6?
    PropertyBuffer: *u8,
    PropertyBufferSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Add_Empty_Log_Conf(
    plcLogConf: *usize,
    dnDevInst: u32,
    Priority: PRIORITY,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Add_Empty_Log_Conf_Ex(
    plcLogConf: *usize,
    dnDevInst: u32,
    Priority: PRIORITY,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Add_IDA(
    dnDevInst: u32,
    pszID: PSTR,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Add_IDW(
    dnDevInst: u32,
    pszID: PWSTR,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Add_ID_ExA(
    dnDevInst: u32,
    pszID: PSTR,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Add_ID_ExW(
    dnDevInst: u32,
    pszID: PWSTR,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Add_Range(
    ullStartValue: u64,
    ullEndValue: u64,
    rlh: usize,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Add_Res_Des(
    prdResDes: ?*usize,
    lcLogConf: usize,
    ResourceID: u32,
    // TODO: what to do with BytesParamIndex 4?
    ResourceData: *c_void,
    ResourceLen: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Add_Res_Des_Ex(
    prdResDes: ?*usize,
    lcLogConf: usize,
    ResourceID: u32,
    // TODO: what to do with BytesParamIndex 4?
    ResourceData: *c_void,
    ResourceLen: u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Connect_MachineA(
    UNCServerName: ?[*:0]const u8,
    phMachine: *isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Connect_MachineW(
    UNCServerName: ?[*:0]const u16,
    phMachine: *isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Create_DevNodeA(
    pdnDevInst: *u32,
    pDeviceID: *i8,
    dnParent: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Create_DevNodeW(
    pdnDevInst: *u32,
    pDeviceID: *u16,
    dnParent: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Create_DevNode_ExA(
    pdnDevInst: *u32,
    pDeviceID: *i8,
    dnParent: u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Create_DevNode_ExW(
    pdnDevInst: *u32,
    pDeviceID: *u16,
    dnParent: u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Create_Range_List(
    prlh: *usize,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Delete_Class_Key(
    ClassGuid: *Guid,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Delete_Class_Key_Ex(
    ClassGuid: *Guid,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Delete_DevNode_Key(
    dnDevNode: u32,
    ulHardwareProfile: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Delete_DevNode_Key_Ex(
    dnDevNode: u32,
    ulHardwareProfile: u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Delete_Range(
    ullStartValue: u64,
    ullEndValue: u64,
    rlh: usize,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Detect_Resource_Conflict(
    dnDevInst: u32,
    ResourceID: u32,
    // TODO: what to do with BytesParamIndex 3?
    ResourceData: *c_void,
    ResourceLen: u32,
    pbConflictDetected: *BOOL,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Detect_Resource_Conflict_Ex(
    dnDevInst: u32,
    ResourceID: u32,
    // TODO: what to do with BytesParamIndex 3?
    ResourceData: *c_void,
    ResourceLen: u32,
    pbConflictDetected: *BOOL,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Disable_DevNode(
    dnDevInst: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Disable_DevNode_Ex(
    dnDevInst: u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Disconnect_Machine(
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Dup_Range_List(
    rlhOld: usize,
    rlhNew: usize,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Enable_DevNode(
    dnDevInst: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Enable_DevNode_Ex(
    dnDevInst: u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Enumerate_Classes(
    ulClassIndex: u32,
    ClassGuid: *Guid,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Enumerate_Classes_Ex(
    ulClassIndex: u32,
    ClassGuid: *Guid,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Enumerate_EnumeratorsA(
    ulEnumIndex: u32,
    Buffer: [*:0]u8,
    pulLength: *u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Enumerate_EnumeratorsW(
    ulEnumIndex: u32,
    Buffer: [*:0]u16,
    pulLength: *u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Enumerate_Enumerators_ExA(
    ulEnumIndex: u32,
    Buffer: [*:0]u8,
    pulLength: *u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Enumerate_Enumerators_ExW(
    ulEnumIndex: u32,
    Buffer: [*:0]u16,
    pulLength: *u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Find_Range(
    pullStart: *u64,
    ullStart: u64,
    ulLength: u32,
    ullAlignment: u64,
    ullEnd: u64,
    rlh: usize,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_First_Range(
    rlh: usize,
    pullStart: *u64,
    pullEnd: *u64,
    preElement: *usize,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Free_Log_Conf(
    lcLogConfToBeFreed: usize,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Free_Log_Conf_Ex(
    lcLogConfToBeFreed: usize,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Free_Log_Conf_Handle(
    lcLogConf: usize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Free_Range_List(
    rlh: usize,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Free_Res_Des(
    prdResDes: ?*usize,
    rdResDes: usize,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Free_Res_Des_Ex(
    prdResDes: ?*usize,
    rdResDes: usize,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Free_Res_Des_Handle(
    rdResDes: usize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_Child(
    pdnDevInst: *u32,
    dnDevInst: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_Child_Ex(
    pdnDevInst: *u32,
    dnDevInst: u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Get_Class_NameA(
    ClassGuid: *Guid,
    Buffer: ?[*:0]u8,
    pulLength: *u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Get_Class_NameW(
    ClassGuid: *Guid,
    Buffer: ?[*:0]u16,
    pulLength: *u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Get_Class_Name_ExA(
    ClassGuid: *Guid,
    Buffer: ?[*:0]u8,
    pulLength: *u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Get_Class_Name_ExW(
    ClassGuid: *Guid,
    Buffer: ?[*:0]u16,
    pulLength: *u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Get_Class_Key_NameA(
    ClassGuid: *Guid,
    pszKeyName: ?[*:0]u8,
    pulLength: *u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Get_Class_Key_NameW(
    ClassGuid: *Guid,
    pszKeyName: ?[*:0]u16,
    pulLength: *u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Get_Class_Key_Name_ExA(
    ClassGuid: *Guid,
    pszKeyName: ?[*:0]u8,
    pulLength: *u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Get_Class_Key_Name_ExW(
    ClassGuid: *Guid,
    pszKeyName: ?[*:0]u16,
    pulLength: *u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_Depth(
    pulDepth: *u32,
    dnDevInst: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_Depth_Ex(
    pulDepth: *u32,
    dnDevInst: u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Get_Device_IDA(
    dnDevInst: u32,
    Buffer: [*:0]u8,
    BufferLen: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_Device_IDW(
    dnDevInst: u32,
    Buffer: [*:0]u16,
    BufferLen: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Get_Device_ID_ExA(
    dnDevInst: u32,
    Buffer: [*:0]u8,
    BufferLen: u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_Device_ID_ExW(
    dnDevInst: u32,
    Buffer: [*:0]u16,
    BufferLen: u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_Device_ID_ListA(
    pszFilter: ?[*:0]const u8,
    Buffer: [*]u8,
    BufferLen: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_Device_ID_ListW(
    pszFilter: ?[*:0]const u16,
    Buffer: [*]u16,
    BufferLen: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Get_Device_ID_List_ExA(
    pszFilter: ?[*:0]const u8,
    Buffer: [*]u8,
    BufferLen: u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_Device_ID_List_ExW(
    pszFilter: ?[*:0]const u16,
    Buffer: [*]u16,
    BufferLen: u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_Device_ID_List_SizeA(
    pulLen: *u32,
    pszFilter: ?[*:0]const u8,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_Device_ID_List_SizeW(
    pulLen: *u32,
    pszFilter: ?[*:0]const u16,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Get_Device_ID_List_Size_ExA(
    pulLen: *u32,
    pszFilter: ?[*:0]const u8,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_Device_ID_List_Size_ExW(
    pulLen: *u32,
    pszFilter: ?[*:0]const u16,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_Device_ID_Size(
    pulLen: *u32,
    dnDevInst: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_Device_ID_Size_Ex(
    pulLen: *u32,
    dnDevInst: u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "CFGMGR32" fn CM_Get_DevNode_PropertyW(
    dnDevInst: u32,
    PropertyKey: *const DEVPROPKEY,
    PropertyType: *u32,
    // TODO: what to do with BytesParamIndex 4?
    PropertyBuffer: ?*u8,
    PropertyBufferSize: *u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows10.0.10240'
pub extern "CFGMGR32" fn CM_Get_DevNode_Property_ExW(
    dnDevInst: u32,
    PropertyKey: *const DEVPROPKEY,
    PropertyType: *u32,
    // TODO: what to do with BytesParamIndex 4?
    PropertyBuffer: ?*u8,
    PropertyBufferSize: *u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "CFGMGR32" fn CM_Get_DevNode_Property_Keys(
    dnDevInst: u32,
    PropertyKeyArray: ?[*]DEVPROPKEY,
    PropertyKeyCount: *u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows10.0.10240'
pub extern "CFGMGR32" fn CM_Get_DevNode_Property_Keys_Ex(
    dnDevInst: u32,
    PropertyKeyArray: ?[*]DEVPROPKEY,
    PropertyKeyCount: *u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Get_DevNode_Registry_PropertyA(
    dnDevInst: u32,
    ulProperty: u32,
    pulRegDataType: ?*u32,
    // TODO: what to do with BytesParamIndex 4?
    Buffer: ?*c_void,
    pulLength: *u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_DevNode_Registry_PropertyW(
    dnDevInst: u32,
    ulProperty: u32,
    pulRegDataType: ?*u32,
    // TODO: what to do with BytesParamIndex 4?
    Buffer: ?*c_void,
    pulLength: *u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Get_DevNode_Registry_Property_ExA(
    dnDevInst: u32,
    ulProperty: u32,
    pulRegDataType: ?*u32,
    // TODO: what to do with BytesParamIndex 4?
    Buffer: ?*c_void,
    pulLength: *u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Get_DevNode_Registry_Property_ExW(
    dnDevInst: u32,
    ulProperty: u32,
    pulRegDataType: ?*u32,
    // TODO: what to do with BytesParamIndex 4?
    Buffer: ?*c_void,
    pulLength: *u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Get_DevNode_Custom_PropertyA(
    dnDevInst: u32,
    pszCustomPropertyName: [*:0]const u8,
    pulRegDataType: ?*u32,
    // TODO: what to do with BytesParamIndex 4?
    Buffer: ?*c_void,
    pulLength: *u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Get_DevNode_Custom_PropertyW(
    dnDevInst: u32,
    pszCustomPropertyName: [*:0]const u16,
    pulRegDataType: ?*u32,
    // TODO: what to do with BytesParamIndex 4?
    Buffer: ?*c_void,
    pulLength: *u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Get_DevNode_Custom_Property_ExA(
    dnDevInst: u32,
    pszCustomPropertyName: [*:0]const u8,
    pulRegDataType: ?*u32,
    // TODO: what to do with BytesParamIndex 4?
    Buffer: ?*c_void,
    pulLength: *u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Get_DevNode_Custom_Property_ExW(
    dnDevInst: u32,
    pszCustomPropertyName: [*:0]const u16,
    pulRegDataType: ?*u32,
    // TODO: what to do with BytesParamIndex 4?
    Buffer: ?*c_void,
    pulLength: *u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_DevNode_Status(
    pulStatus: *u32,
    pulProblemNumber: *u32,
    dnDevInst: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_DevNode_Status_Ex(
    pulStatus: *u32,
    pulProblemNumber: *u32,
    dnDevInst: u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_First_Log_Conf(
    plcLogConf: ?*usize,
    dnDevInst: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_First_Log_Conf_Ex(
    plcLogConf: ?*usize,
    dnDevInst: u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Get_Global_State(
    pulState: *u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Get_Global_State_Ex(
    pulState: *u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Get_Hardware_Profile_InfoA(
    ulIndex: u32,
    pHWProfileInfo: *HWProfileInfo_sA,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Get_Hardware_Profile_Info_ExA(
    ulIndex: u32,
    pHWProfileInfo: *HWProfileInfo_sA,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Get_Hardware_Profile_InfoW(
    ulIndex: u32,
    pHWProfileInfo: *HWProfileInfo_sW,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Get_Hardware_Profile_Info_ExW(
    ulIndex: u32,
    pHWProfileInfo: *HWProfileInfo_sW,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_HW_Prof_FlagsA(
    pDeviceID: *i8,
    ulHardwareProfile: u32,
    pulValue: *u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_HW_Prof_FlagsW(
    pDeviceID: *u16,
    ulHardwareProfile: u32,
    pulValue: *u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_HW_Prof_Flags_ExA(
    pDeviceID: *i8,
    ulHardwareProfile: u32,
    pulValue: *u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_HW_Prof_Flags_ExW(
    pDeviceID: *u16,
    ulHardwareProfile: u32,
    pulValue: *u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Get_Device_Interface_AliasA(
    pszDeviceInterface: [*:0]const u8,
    AliasInterfaceGuid: *Guid,
    pszAliasDeviceInterface: [*:0]u8,
    pulLength: *u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_Device_Interface_AliasW(
    pszDeviceInterface: [*:0]const u16,
    AliasInterfaceGuid: *Guid,
    pszAliasDeviceInterface: [*:0]u16,
    pulLength: *u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Get_Device_Interface_Alias_ExA(
    pszDeviceInterface: [*:0]const u8,
    AliasInterfaceGuid: *Guid,
    pszAliasDeviceInterface: [*:0]u8,
    pulLength: *u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Get_Device_Interface_Alias_ExW(
    pszDeviceInterface: [*:0]const u16,
    AliasInterfaceGuid: *Guid,
    pszAliasDeviceInterface: [*:0]u16,
    pulLength: *u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_Device_Interface_ListA(
    InterfaceClassGuid: *Guid,
    pDeviceID: ?*i8,
    Buffer: [*]u8,
    BufferLen: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_Device_Interface_ListW(
    InterfaceClassGuid: *Guid,
    pDeviceID: ?*u16,
    Buffer: [*]u16,
    BufferLen: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Get_Device_Interface_List_ExA(
    InterfaceClassGuid: *Guid,
    pDeviceID: ?*i8,
    Buffer: [*]u8,
    BufferLen: u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Get_Device_Interface_List_ExW(
    InterfaceClassGuid: *Guid,
    pDeviceID: ?*u16,
    Buffer: [*]u16,
    BufferLen: u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_Device_Interface_List_SizeA(
    pulLen: *u32,
    InterfaceClassGuid: *Guid,
    pDeviceID: ?*i8,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_Device_Interface_List_SizeW(
    pulLen: *u32,
    InterfaceClassGuid: *Guid,
    pDeviceID: ?*u16,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Get_Device_Interface_List_Size_ExA(
    pulLen: *u32,
    InterfaceClassGuid: *Guid,
    pDeviceID: ?*i8,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Get_Device_Interface_List_Size_ExW(
    pulLen: *u32,
    InterfaceClassGuid: *Guid,
    pDeviceID: ?*u16,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "CFGMGR32" fn CM_Get_Device_Interface_PropertyW(
    pszDeviceInterface: [*:0]const u16,
    PropertyKey: *const DEVPROPKEY,
    PropertyType: *u32,
    // TODO: what to do with BytesParamIndex 4?
    PropertyBuffer: ?*u8,
    PropertyBufferSize: *u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows10.0.10240'
pub extern "CFGMGR32" fn CM_Get_Device_Interface_Property_ExW(
    pszDeviceInterface: [*:0]const u16,
    PropertyKey: *const DEVPROPKEY,
    PropertyType: *u32,
    // TODO: what to do with BytesParamIndex 4?
    PropertyBuffer: ?*u8,
    PropertyBufferSize: *u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "CFGMGR32" fn CM_Get_Device_Interface_Property_KeysW(
    pszDeviceInterface: [*:0]const u16,
    PropertyKeyArray: ?[*]DEVPROPKEY,
    PropertyKeyCount: *u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows10.0.10240'
pub extern "CFGMGR32" fn CM_Get_Device_Interface_Property_Keys_ExW(
    pszDeviceInterface: [*:0]const u16,
    PropertyKeyArray: ?[*]DEVPROPKEY,
    PropertyKeyCount: *u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_Log_Conf_Priority(
    lcLogConf: usize,
    pPriority: *u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_Log_Conf_Priority_Ex(
    lcLogConf: usize,
    pPriority: *u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_Next_Log_Conf(
    plcLogConf: ?*usize,
    lcLogConf: usize,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_Next_Log_Conf_Ex(
    plcLogConf: ?*usize,
    lcLogConf: usize,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_Parent(
    pdnDevInst: *u32,
    dnDevInst: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_Parent_Ex(
    pdnDevInst: *u32,
    dnDevInst: u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_Res_Des_Data(
    rdResDes: usize,
    // TODO: what to do with BytesParamIndex 2?
    Buffer: *c_void,
    BufferLen: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_Res_Des_Data_Ex(
    rdResDes: usize,
    // TODO: what to do with BytesParamIndex 2?
    Buffer: *c_void,
    BufferLen: u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_Res_Des_Data_Size(
    pulSize: *u32,
    rdResDes: usize,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_Res_Des_Data_Size_Ex(
    pulSize: *u32,
    rdResDes: usize,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_Sibling(
    pdnDevInst: *u32,
    dnDevInst: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_Sibling_Ex(
    pdnDevInst: *u32,
    dnDevInst: u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_Version(
) callconv(@import("std").os.windows.WINAPI) u16;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_Version_Ex(
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) u16;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "SETUPAPI" fn CM_Is_Version_Available(
    wVersion: u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "SETUPAPI" fn CM_Is_Version_Available_Ex(
    wVersion: u16,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SETUPAPI" fn CM_Intersect_Range_List(
    rlhOld1: usize,
    rlhOld2: usize,
    rlhNew: usize,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Invert_Range_List(
    rlhOld: usize,
    rlhNew: usize,
    ullMaxValue: u64,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Locate_DevNodeA(
    pdnDevInst: *u32,
    pDeviceID: ?*i8,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Locate_DevNodeW(
    pdnDevInst: *u32,
    pDeviceID: ?*u16,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Locate_DevNode_ExA(
    pdnDevInst: *u32,
    pDeviceID: ?*i8,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Locate_DevNode_ExW(
    pdnDevInst: *u32,
    pDeviceID: ?*u16,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Merge_Range_List(
    rlhOld1: usize,
    rlhOld2: usize,
    rlhNew: usize,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Modify_Res_Des(
    prdResDes: *usize,
    rdResDes: usize,
    ResourceID: u32,
    // TODO: what to do with BytesParamIndex 4?
    ResourceData: *c_void,
    ResourceLen: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Modify_Res_Des_Ex(
    prdResDes: *usize,
    rdResDes: usize,
    ResourceID: u32,
    // TODO: what to do with BytesParamIndex 4?
    ResourceData: *c_void,
    ResourceLen: u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Move_DevNode(
    dnFromDevInst: u32,
    dnToDevInst: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Move_DevNode_Ex(
    dnFromDevInst: u32,
    dnToDevInst: u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Next_Range(
    preElement: *usize,
    pullStart: *u64,
    pullEnd: *u64,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_Next_Res_Des(
    prdResDes: *usize,
    rdResDes: usize,
    ForResource: u32,
    pResourceID: ?*u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_Next_Res_Des_Ex(
    prdResDes: *usize,
    rdResDes: usize,
    ForResource: u32,
    pResourceID: ?*u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Open_Class_KeyA(
    ClassGuid: ?*Guid,
    pszClassName: ?[*:0]const u8,
    samDesired: u32,
    Disposition: u32,
    phkClass: *HKEY,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Open_Class_KeyW(
    ClassGuid: ?*Guid,
    pszClassName: ?[*:0]const u16,
    samDesired: u32,
    Disposition: u32,
    phkClass: *HKEY,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Open_Class_Key_ExA(
    ClassGuid: ?*Guid,
    pszClassName: ?[*:0]const u8,
    samDesired: u32,
    Disposition: u32,
    phkClass: *HKEY,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Open_Class_Key_ExW(
    ClassGuid: ?*Guid,
    pszClassName: ?[*:0]const u16,
    samDesired: u32,
    Disposition: u32,
    phkClass: *HKEY,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Open_DevNode_Key(
    dnDevNode: u32,
    samDesired: u32,
    ulHardwareProfile: u32,
    Disposition: u32,
    phkDevice: *HKEY,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Open_DevNode_Key_Ex(
    dnDevNode: u32,
    samDesired: u32,
    ulHardwareProfile: u32,
    Disposition: u32,
    phkDevice: *HKEY,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "SETUPAPI" fn CM_Open_Device_Interface_KeyA(
    pszDeviceInterface: [*:0]const u8,
    samDesired: u32,
    Disposition: u32,
    phkDeviceInterface: *HKEY,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "SETUPAPI" fn CM_Open_Device_Interface_KeyW(
    pszDeviceInterface: [*:0]const u16,
    samDesired: u32,
    Disposition: u32,
    phkDeviceInterface: *HKEY,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows10.0.10240'
pub extern "SETUPAPI" fn CM_Open_Device_Interface_Key_ExA(
    pszDeviceInterface: [*:0]const u8,
    samDesired: u32,
    Disposition: u32,
    phkDeviceInterface: *HKEY,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows10.0.10240'
pub extern "SETUPAPI" fn CM_Open_Device_Interface_Key_ExW(
    pszDeviceInterface: [*:0]const u16,
    samDesired: u32,
    Disposition: u32,
    phkDeviceInterface: *HKEY,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Delete_Device_Interface_KeyA(
    pszDeviceInterface: [*:0]const u8,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "SETUPAPI" fn CM_Delete_Device_Interface_KeyW(
    pszDeviceInterface: [*:0]const u16,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows10.0.10240'
pub extern "SETUPAPI" fn CM_Delete_Device_Interface_Key_ExA(
    pszDeviceInterface: [*:0]const u8,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows10.0.10240'
pub extern "SETUPAPI" fn CM_Delete_Device_Interface_Key_ExW(
    pszDeviceInterface: [*:0]const u16,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Query_Arbitrator_Free_Data(
    // TODO: what to do with BytesParamIndex 1?
    pData: *c_void,
    DataLen: u32,
    dnDevInst: u32,
    ResourceID: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Query_Arbitrator_Free_Data_Ex(
    // TODO: what to do with BytesParamIndex 1?
    pData: *c_void,
    DataLen: u32,
    dnDevInst: u32,
    ResourceID: u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Query_Arbitrator_Free_Size(
    pulSize: *u32,
    dnDevInst: u32,
    ResourceID: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Query_Arbitrator_Free_Size_Ex(
    pulSize: *u32,
    dnDevInst: u32,
    ResourceID: u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Query_Remove_SubTree(
    dnAncestor: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Query_Remove_SubTree_Ex(
    dnAncestor: u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Query_And_Remove_SubTreeA(
    dnAncestor: u32,
    pVetoType: ?*PNP_VETO_TYPE,
    pszVetoName: ?[*:0]u8,
    ulNameLength: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Query_And_Remove_SubTreeW(
    dnAncestor: u32,
    pVetoType: ?*PNP_VETO_TYPE,
    pszVetoName: ?[*:0]u16,
    ulNameLength: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Query_And_Remove_SubTree_ExA(
    dnAncestor: u32,
    pVetoType: ?*PNP_VETO_TYPE,
    pszVetoName: ?[*:0]u8,
    ulNameLength: u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Query_And_Remove_SubTree_ExW(
    dnAncestor: u32,
    pVetoType: ?*PNP_VETO_TYPE,
    pszVetoName: ?[*:0]u16,
    ulNameLength: u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Request_Device_EjectA(
    dnDevInst: u32,
    pVetoType: ?*PNP_VETO_TYPE,
    pszVetoName: ?[*:0]u8,
    ulNameLength: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Request_Device_Eject_ExA(
    dnDevInst: u32,
    pVetoType: ?*PNP_VETO_TYPE,
    pszVetoName: ?[*:0]u8,
    ulNameLength: u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Request_Device_EjectW(
    dnDevInst: u32,
    pVetoType: ?*PNP_VETO_TYPE,
    pszVetoName: ?[*:0]u16,
    ulNameLength: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Request_Device_Eject_ExW(
    dnDevInst: u32,
    pVetoType: ?*PNP_VETO_TYPE,
    pszVetoName: ?[*:0]u16,
    ulNameLength: u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Reenumerate_DevNode(
    dnDevInst: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Reenumerate_DevNode_Ex(
    dnDevInst: u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Register_Device_InterfaceA(
    dnDevInst: u32,
    InterfaceClassGuid: *Guid,
    pszReference: ?[*:0]const u8,
    pszDeviceInterface: [*:0]u8,
    pulLength: *u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Register_Device_InterfaceW(
    dnDevInst: u32,
    InterfaceClassGuid: *Guid,
    pszReference: ?[*:0]const u16,
    pszDeviceInterface: [*:0]u16,
    pulLength: *u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Register_Device_Interface_ExA(
    dnDevInst: u32,
    InterfaceClassGuid: *Guid,
    pszReference: ?[*:0]const u8,
    pszDeviceInterface: [*:0]u8,
    pulLength: *u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Register_Device_Interface_ExW(
    dnDevInst: u32,
    InterfaceClassGuid: *Guid,
    pszReference: ?[*:0]const u16,
    pszDeviceInterface: [*:0]u16,
    pulLength: *u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Set_DevNode_Problem_Ex(
    dnDevInst: u32,
    ulProblem: u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Set_DevNode_Problem(
    dnDevInst: u32,
    ulProblem: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Unregister_Device_InterfaceA(
    pszDeviceInterface: [*:0]const u8,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Unregister_Device_InterfaceW(
    pszDeviceInterface: [*:0]const u16,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Unregister_Device_Interface_ExA(
    pszDeviceInterface: [*:0]const u8,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Unregister_Device_Interface_ExW(
    pszDeviceInterface: [*:0]const u16,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Register_Device_Driver(
    dnDevInst: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Register_Device_Driver_Ex(
    dnDevInst: u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Remove_SubTree(
    dnAncestor: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Remove_SubTree_Ex(
    dnAncestor: u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "CFGMGR32" fn CM_Set_DevNode_PropertyW(
    dnDevInst: u32,
    PropertyKey: *const DEVPROPKEY,
    PropertyType: u32,
    // TODO: what to do with BytesParamIndex 4?
    PropertyBuffer: ?*const u8,
    PropertyBufferSize: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows10.0.10240'
pub extern "CFGMGR32" fn CM_Set_DevNode_Property_ExW(
    dnDevInst: u32,
    PropertyKey: *const DEVPROPKEY,
    PropertyType: u32,
    // TODO: what to do with BytesParamIndex 4?
    PropertyBuffer: ?*const u8,
    PropertyBufferSize: u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Set_DevNode_Registry_PropertyA(
    dnDevInst: u32,
    ulProperty: u32,
    // TODO: what to do with BytesParamIndex 3?
    Buffer: ?*c_void,
    ulLength: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'Windows 2000'
pub extern "SETUPAPI" fn CM_Set_DevNode_Registry_PropertyW(
    dnDevInst: u32,
    ulProperty: u32,
    // TODO: what to do with BytesParamIndex 3?
    Buffer: ?*c_void,
    ulLength: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Set_DevNode_Registry_Property_ExA(
    dnDevInst: u32,
    ulProperty: u32,
    // TODO: what to do with BytesParamIndex 3?
    Buffer: ?*c_void,
    ulLength: u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Set_DevNode_Registry_Property_ExW(
    dnDevInst: u32,
    ulProperty: u32,
    // TODO: what to do with BytesParamIndex 3?
    Buffer: ?*c_void,
    ulLength: u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "CFGMGR32" fn CM_Set_Device_Interface_PropertyW(
    pszDeviceInterface: [*:0]const u16,
    PropertyKey: *const DEVPROPKEY,
    PropertyType: u32,
    // TODO: what to do with BytesParamIndex 4?
    PropertyBuffer: ?*const u8,
    PropertyBufferSize: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows10.0.10240'
pub extern "CFGMGR32" fn CM_Set_Device_Interface_Property_ExW(
    pszDeviceInterface: [*:0]const u16,
    PropertyKey: *const DEVPROPKEY,
    PropertyType: u32,
    // TODO: what to do with BytesParamIndex 4?
    PropertyBuffer: ?*const u8,
    PropertyBufferSize: u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Is_Dock_Station_Present(
    pbPresent: *BOOL,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Is_Dock_Station_Present_Ex(
    pbPresent: *BOOL,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Request_Eject_PC(
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Request_Eject_PC_Ex(
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Set_HW_Prof_FlagsA(
    pDeviceID: *i8,
    ulConfig: u32,
    ulValue: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Set_HW_Prof_FlagsW(
    pDeviceID: *u16,
    ulConfig: u32,
    ulValue: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Set_HW_Prof_Flags_ExA(
    pDeviceID: *i8,
    ulConfig: u32,
    ulValue: u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Set_HW_Prof_Flags_ExW(
    pDeviceID: *u16,
    ulConfig: u32,
    ulValue: u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Setup_DevNode(
    dnDevInst: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Setup_DevNode_Ex(
    dnDevInst: u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Test_Range_Available(
    ullStartValue: u64,
    ullEndValue: u64,
    rlh: usize,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Uninstall_DevNode(
    dnDevInst: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Uninstall_DevNode_Ex(
    dnDevInst: u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Run_Detection(
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Run_Detection_Ex(
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Set_HW_Prof(
    ulHardwareProfile: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Set_HW_Prof_Ex(
    ulHardwareProfile: u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Query_Resource_Conflict_List(
    pclConflictList: *usize,
    dnDevInst: u32,
    ResourceID: u32,
    // TODO: what to do with BytesParamIndex 4?
    ResourceData: *c_void,
    ResourceLen: u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Free_Resource_Conflict_Handle(
    clConflictList: usize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_Resource_Conflict_Count(
    clConflictList: usize,
    pulCount: *u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Get_Resource_Conflict_DetailsA(
    clConflictList: usize,
    ulIndex: u32,
    pConflictDetails: *CONFLICT_DETAILS_A,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_Resource_Conflict_DetailsW(
    clConflictList: usize,
    ulIndex: u32,
    pConflictDetails: *CONFLICT_DETAILS_W,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "CFGMGR32" fn CM_Get_Class_PropertyW(
    ClassGUID: *Guid,
    PropertyKey: *const DEVPROPKEY,
    PropertyType: *u32,
    // TODO: what to do with BytesParamIndex 4?
    PropertyBuffer: ?*u8,
    PropertyBufferSize: *u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows10.0.10240'
pub extern "CFGMGR32" fn CM_Get_Class_Property_ExW(
    ClassGUID: *Guid,
    PropertyKey: *const DEVPROPKEY,
    PropertyType: *u32,
    // TODO: what to do with BytesParamIndex 4?
    PropertyBuffer: ?*u8,
    PropertyBufferSize: *u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "CFGMGR32" fn CM_Get_Class_Property_Keys(
    ClassGUID: *Guid,
    PropertyKeyArray: ?[*]DEVPROPKEY,
    PropertyKeyCount: *u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows10.0.10240'
pub extern "CFGMGR32" fn CM_Get_Class_Property_Keys_Ex(
    ClassGUID: *Guid,
    PropertyKeyArray: ?[*]DEVPROPKEY,
    PropertyKeyCount: *u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "CFGMGR32" fn CM_Set_Class_PropertyW(
    ClassGUID: *Guid,
    PropertyKey: *const DEVPROPKEY,
    PropertyType: u32,
    // TODO: what to do with BytesParamIndex 4?
    PropertyBuffer: ?*const u8,
    PropertyBufferSize: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows10.0.10240'
pub extern "CFGMGR32" fn CM_Set_Class_Property_ExW(
    ClassGUID: *Guid,
    PropertyKey: *const DEVPROPKEY,
    PropertyType: u32,
    // TODO: what to do with BytesParamIndex 4?
    PropertyBuffer: ?*const u8,
    PropertyBufferSize: u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Get_Class_Registry_PropertyA(
    ClassGuid: *Guid,
    ulProperty: u32,
    pulRegDataType: ?*u32,
    // TODO: what to do with BytesParamIndex 4?
    Buffer: ?*c_void,
    pulLength: *u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Get_Class_Registry_PropertyW(
    ClassGuid: *Guid,
    ulProperty: u32,
    pulRegDataType: ?*u32,
    // TODO: what to do with BytesParamIndex 4?
    Buffer: ?*c_void,
    pulLength: *u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CM_Set_Class_Registry_PropertyA(
    ClassGuid: *Guid,
    ulProperty: u32,
    // TODO: what to do with BytesParamIndex 3?
    Buffer: ?*c_void,
    ulLength: u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SETUPAPI" fn CM_Set_Class_Registry_PropertyW(
    ClassGuid: *Guid,
    ulProperty: u32,
    // TODO: what to do with BytesParamIndex 3?
    Buffer: ?*c_void,
    ulLength: u32,
    ulFlags: u32,
    hMachine: isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

pub extern "SETUPAPI" fn CMP_WaitNoPendingInstallEvents(
    dwTimeout: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "CFGMGR32" fn CM_Register_Notification(
    pFilter: *CM_NOTIFY_FILTER,
    pContext: ?*c_void,
    pCallback: PCM_NOTIFY_CALLBACK,
    pNotifyContext: *isize,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows8.0'
pub extern "CFGMGR32" fn CM_Unregister_Notification(
    NotifyContext: HCMNOTIFICATION,
) callconv(@import("std").os.windows.WINAPI) CONFIGRET;

// TODO: this type is limited to platform 'windows6.1'
pub extern "CFGMGR32" fn CM_MapCrToWin32Err(
    CmReturnCode: CONFIGRET,
    DefaultErr: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "newdev" fn UpdateDriverForPlugAndPlayDevicesA(
    hwndParent: HWND,
    HardwareId: [*:0]const u8,
    FullInfPath: [*:0]const u8,
    InstallFlags: u32,
    bRebootRequired: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "newdev" fn UpdateDriverForPlugAndPlayDevicesW(
    hwndParent: HWND,
    HardwareId: [*:0]const u16,
    FullInfPath: [*:0]const u16,
    InstallFlags: u32,
    bRebootRequired: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "newdev" fn DiInstallDevice(
    hwndParent: HWND,
    DeviceInfoSet: *c_void,
    DeviceInfoData: *SP_DEVINFO_DATA,
    DriverInfoData: ?*SP_DRVINFO_DATA_V2_A,
    Flags: u32,
    NeedReboot: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "newdev" fn DiInstallDriverW(
    hwndParent: HWND,
    InfPath: [*:0]const u16,
    Flags: u32,
    NeedReboot: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "newdev" fn DiInstallDriverA(
    hwndParent: HWND,
    InfPath: [*:0]const u8,
    Flags: u32,
    NeedReboot: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.1'
pub extern "newdev" fn DiUninstallDevice(
    hwndParent: HWND,
    DeviceInfoSet: *c_void,
    DeviceInfoData: *SP_DEVINFO_DATA,
    Flags: u32,
    NeedReboot: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows10.0.10240'
pub extern "newdev" fn DiUninstallDriverW(
    hwndParent: HWND,
    InfPath: [*:0]const u16,
    Flags: u32,
    NeedReboot: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "newdev" fn DiUninstallDriverA(
    hwndParent: HWND,
    InfPath: [*:0]const u8,
    Flags: u32,
    NeedReboot: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "newdev" fn DiShowUpdateDevice(
    hwndParent: HWND,
    DeviceInfoSet: *c_void,
    DeviceInfoData: *SP_DEVINFO_DATA,
    Flags: u32,
    NeedReboot: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "newdev" fn DiRollbackDriver(
    DeviceInfoSet: *c_void,
    DeviceInfoData: *SP_DEVINFO_DATA,
    hwndParent: HWND,
    Flags: u32,
    NeedReboot: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "newdev" fn DiShowUpdateDriver(
    hwndParent: HWND,
    FilePath: ?[*:0]const u16,
    Flags: u32,
    NeedReboot: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (119)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const SP_DEVICE_INTERFACE_DETAIL_DATA_ = SP_DEVICE_INTERFACE_DETAIL_DATA_A;
        pub const SP_DEVINFO_LIST_DETAIL_DATA_ = SP_DEVINFO_LIST_DETAIL_DATA_A;
        pub const SP_DEVINSTALL_PARAMS_ = SP_DEVINSTALL_PARAMS_A;
        pub const SP_SELECTDEVICE_PARAMS_ = SP_SELECTDEVICE_PARAMS_A;
        pub const SP_TROUBLESHOOTER_PARAMS_ = SP_TROUBLESHOOTER_PARAMS_A;
        pub const SP_POWERMESSAGEWAKE_PARAMS_ = SP_POWERMESSAGEWAKE_PARAMS_A;
        pub const SP_DRVINFO_DATA_V2_ = SP_DRVINFO_DATA_V2_A;
        pub const SP_DRVINFO_DATA_V1_ = SP_DRVINFO_DATA_V1_A;
        pub const SP_DRVINFO_DETAIL_DATA_ = SP_DRVINFO_DETAIL_DATA_A;
        pub const SP_BACKUP_QUEUE_PARAMS_V2_ = SP_BACKUP_QUEUE_PARAMS_V2_A;
        pub const SP_BACKUP_QUEUE_PARAMS_V1_ = SP_BACKUP_QUEUE_PARAMS_V1_A;
        pub const CONFLICT_DETAILS_ = CONFLICT_DETAILS_A;
        pub const HWProfileInfo_s = HWProfileInfo_sA;
        pub const SetupGetInfDriverStoreLocation = SetupGetInfDriverStoreLocationA;
        pub const SetupGetInfPublishedName = SetupGetInfPublishedNameA;
        pub const SetupGetBackupInformation = SetupGetBackupInformationA;
        pub const SetupPrepareQueueForRestore = SetupPrepareQueueForRestoreA;
        pub const SetupDiCreateDeviceInfoListEx = SetupDiCreateDeviceInfoListExA;
        pub const SetupDiGetDeviceInfoListDetail = SetupDiGetDeviceInfoListDetailA;
        pub const SetupDiCreateDeviceInfo = SetupDiCreateDeviceInfoA;
        pub const SetupDiOpenDeviceInfo = SetupDiOpenDeviceInfoA;
        pub const SetupDiGetDeviceInstanceId = SetupDiGetDeviceInstanceIdA;
        pub const SetupDiCreateDeviceInterface = SetupDiCreateDeviceInterfaceA;
        pub const SetupDiOpenDeviceInterface = SetupDiOpenDeviceInterfaceA;
        pub const SetupDiGetDeviceInterfaceDetail = SetupDiGetDeviceInterfaceDetailA;
        pub const SetupDiEnumDriverInfo = SetupDiEnumDriverInfoA;
        pub const SetupDiGetSelectedDriver = SetupDiGetSelectedDriverA;
        pub const SetupDiSetSelectedDriver = SetupDiSetSelectedDriverA;
        pub const SetupDiGetDriverInfoDetail = SetupDiGetDriverInfoDetailA;
        pub const SetupDiGetClassDevsEx = SetupDiGetClassDevsExA;
        pub const SetupDiGetINFClass = SetupDiGetINFClassA;
        pub const SetupDiBuildClassInfoListEx = SetupDiBuildClassInfoListExA;
        pub const SetupDiGetClassDescription = SetupDiGetClassDescriptionA;
        pub const SetupDiGetClassDescriptionEx = SetupDiGetClassDescriptionExA;
        pub const SetupDiInstallClass = SetupDiInstallClassA;
        pub const SetupDiInstallClassEx = SetupDiInstallClassExA;
        pub const SetupDiOpenClassRegKeyEx = SetupDiOpenClassRegKeyExA;
        pub const SetupDiCreateDeviceInterfaceRegKey = SetupDiCreateDeviceInterfaceRegKeyA;
        pub const SetupDiCreateDevRegKey = SetupDiCreateDevRegKeyA;
        pub const SetupDiGetHwProfileListEx = SetupDiGetHwProfileListExA;
        pub const SetupDiGetDeviceRegistryProperty = SetupDiGetDeviceRegistryPropertyA;
        pub const SetupDiGetClassRegistryProperty = SetupDiGetClassRegistryPropertyA;
        pub const SetupDiSetDeviceRegistryProperty = SetupDiSetDeviceRegistryPropertyA;
        pub const SetupDiSetClassRegistryProperty = SetupDiSetClassRegistryPropertyA;
        pub const SetupDiGetDeviceInstallParams = SetupDiGetDeviceInstallParamsA;
        pub const SetupDiGetClassInstallParams = SetupDiGetClassInstallParamsA;
        pub const SetupDiSetDeviceInstallParams = SetupDiSetDeviceInstallParamsA;
        pub const SetupDiSetClassInstallParams = SetupDiSetClassInstallParamsA;
        pub const SetupDiGetDriverInstallParams = SetupDiGetDriverInstallParamsA;
        pub const SetupDiSetDriverInstallParams = SetupDiSetDriverInstallParamsA;
        pub const SetupDiGetClassImageListEx = SetupDiGetClassImageListExA;
        pub const SetupDiGetClassDevPropertySheets = SetupDiGetClassDevPropertySheetsA;
        pub const SetupDiClassNameFromGuid = SetupDiClassNameFromGuidA;
        pub const SetupDiClassNameFromGuidEx = SetupDiClassNameFromGuidExA;
        pub const SetupDiClassGuidsFromName = SetupDiClassGuidsFromNameA;
        pub const SetupDiClassGuidsFromNameEx = SetupDiClassGuidsFromNameExA;
        pub const SetupDiGetHwProfileFriendlyName = SetupDiGetHwProfileFriendlyNameA;
        pub const SetupDiGetHwProfileFriendlyNameEx = SetupDiGetHwProfileFriendlyNameExA;
        pub const SetupDiGetActualModelsSection = SetupDiGetActualModelsSectionA;
        pub const SetupDiGetActualSectionToInstall = SetupDiGetActualSectionToInstallA;
        pub const SetupDiGetActualSectionToInstallEx = SetupDiGetActualSectionToInstallExA;
        pub const SetupDiGetCustomDeviceProperty = SetupDiGetCustomDevicePropertyA;
        pub const CM_Add_ID = CM_Add_IDA;
        pub const CM_Add_ID_Ex = CM_Add_ID_ExA;
        pub const CM_Connect_Machine = CM_Connect_MachineA;
        pub const CM_Create_DevNode = CM_Create_DevNodeA;
        pub const CM_Create_DevNode_Ex = CM_Create_DevNode_ExA;
        pub const CM_Enumerate_Enumerators = CM_Enumerate_EnumeratorsA;
        pub const CM_Enumerate_Enumerators_Ex = CM_Enumerate_Enumerators_ExA;
        pub const CM_Get_Class_Name = CM_Get_Class_NameA;
        pub const CM_Get_Class_Name_Ex = CM_Get_Class_Name_ExA;
        pub const CM_Get_Class_Key_Name = CM_Get_Class_Key_NameA;
        pub const CM_Get_Class_Key_Name_Ex = CM_Get_Class_Key_Name_ExA;
        pub const CM_Get_Device_ID = CM_Get_Device_IDA;
        pub const CM_Get_Device_ID_Ex = CM_Get_Device_ID_ExA;
        pub const CM_Get_Device_ID_List = CM_Get_Device_ID_ListA;
        pub const CM_Get_Device_ID_List_Ex = CM_Get_Device_ID_List_ExA;
        pub const CM_Get_Device_ID_List_Size = CM_Get_Device_ID_List_SizeA;
        pub const CM_Get_Device_ID_List_Size_Ex = CM_Get_Device_ID_List_Size_ExA;
        pub const CM_Get_DevNode_Registry_Property = CM_Get_DevNode_Registry_PropertyA;
        pub const CM_Get_DevNode_Registry_Property_Ex = CM_Get_DevNode_Registry_Property_ExA;
        pub const CM_Get_DevNode_Custom_Property = CM_Get_DevNode_Custom_PropertyA;
        pub const CM_Get_DevNode_Custom_Property_Ex = CM_Get_DevNode_Custom_Property_ExA;
        pub const CM_Get_Hardware_Profile_Info = CM_Get_Hardware_Profile_InfoA;
        pub const CM_Get_Hardware_Profile_Info_Ex = CM_Get_Hardware_Profile_Info_ExA;
        pub const CM_Get_HW_Prof_Flags = CM_Get_HW_Prof_FlagsA;
        pub const CM_Get_HW_Prof_Flags_Ex = CM_Get_HW_Prof_Flags_ExA;
        pub const CM_Get_Device_Interface_Alias = CM_Get_Device_Interface_AliasA;
        pub const CM_Get_Device_Interface_Alias_Ex = CM_Get_Device_Interface_Alias_ExA;
        pub const CM_Get_Device_Interface_List = CM_Get_Device_Interface_ListA;
        pub const CM_Get_Device_Interface_List_Ex = CM_Get_Device_Interface_List_ExA;
        pub const CM_Get_Device_Interface_List_Size = CM_Get_Device_Interface_List_SizeA;
        pub const CM_Get_Device_Interface_List_Size_Ex = CM_Get_Device_Interface_List_Size_ExA;
        pub const CM_Locate_DevNode = CM_Locate_DevNodeA;
        pub const CM_Locate_DevNode_Ex = CM_Locate_DevNode_ExA;
        pub const CM_Open_Class_Key = CM_Open_Class_KeyA;
        pub const CM_Open_Class_Key_Ex = CM_Open_Class_Key_ExA;
        pub const CM_Open_Device_Interface_Key = CM_Open_Device_Interface_KeyA;
        pub const CM_Open_Device_Interface_Key_Ex = CM_Open_Device_Interface_Key_ExA;
        pub const CM_Delete_Device_Interface_Key = CM_Delete_Device_Interface_KeyA;
        pub const CM_Delete_Device_Interface_Key_Ex = CM_Delete_Device_Interface_Key_ExA;
        pub const CM_Query_And_Remove_SubTree = CM_Query_And_Remove_SubTreeA;
        pub const CM_Query_And_Remove_SubTree_Ex = CM_Query_And_Remove_SubTree_ExA;
        pub const CM_Request_Device_Eject = CM_Request_Device_EjectA;
        pub const CM_Request_Device_Eject_Ex = CM_Request_Device_Eject_ExA;
        pub const CM_Register_Device_Interface = CM_Register_Device_InterfaceA;
        pub const CM_Register_Device_Interface_Ex = CM_Register_Device_Interface_ExA;
        pub const CM_Unregister_Device_Interface = CM_Unregister_Device_InterfaceA;
        pub const CM_Unregister_Device_Interface_Ex = CM_Unregister_Device_Interface_ExA;
        pub const CM_Set_DevNode_Registry_Property = CM_Set_DevNode_Registry_PropertyA;
        pub const CM_Set_DevNode_Registry_Property_Ex = CM_Set_DevNode_Registry_Property_ExA;
        pub const CM_Set_HW_Prof_Flags = CM_Set_HW_Prof_FlagsA;
        pub const CM_Set_HW_Prof_Flags_Ex = CM_Set_HW_Prof_Flags_ExA;
        pub const CM_Get_Resource_Conflict_Details = CM_Get_Resource_Conflict_DetailsA;
        pub const CM_Get_Class_Registry_Property = CM_Get_Class_Registry_PropertyA;
        pub const CM_Set_Class_Registry_Property = CM_Set_Class_Registry_PropertyA;
        pub const UpdateDriverForPlugAndPlayDevices = UpdateDriverForPlugAndPlayDevicesA;
        pub const DiInstallDriver = DiInstallDriverA;
        pub const DiUninstallDriver = DiUninstallDriverA;
    },
    .wide => struct {
        pub const SP_DEVICE_INTERFACE_DETAIL_DATA_ = SP_DEVICE_INTERFACE_DETAIL_DATA_W;
        pub const SP_DEVINFO_LIST_DETAIL_DATA_ = SP_DEVINFO_LIST_DETAIL_DATA_W;
        pub const SP_DEVINSTALL_PARAMS_ = SP_DEVINSTALL_PARAMS_W;
        pub const SP_SELECTDEVICE_PARAMS_ = SP_SELECTDEVICE_PARAMS_W;
        pub const SP_TROUBLESHOOTER_PARAMS_ = SP_TROUBLESHOOTER_PARAMS_W;
        pub const SP_POWERMESSAGEWAKE_PARAMS_ = SP_POWERMESSAGEWAKE_PARAMS_W;
        pub const SP_DRVINFO_DATA_V2_ = SP_DRVINFO_DATA_V2_W;
        pub const SP_DRVINFO_DATA_V1_ = SP_DRVINFO_DATA_V1_W;
        pub const SP_DRVINFO_DETAIL_DATA_ = SP_DRVINFO_DETAIL_DATA_W;
        pub const SP_BACKUP_QUEUE_PARAMS_V2_ = SP_BACKUP_QUEUE_PARAMS_V2_W;
        pub const SP_BACKUP_QUEUE_PARAMS_V1_ = SP_BACKUP_QUEUE_PARAMS_V1_W;
        pub const CONFLICT_DETAILS_ = CONFLICT_DETAILS_W;
        pub const HWProfileInfo_s = HWProfileInfo_sW;
        pub const SetupGetInfDriverStoreLocation = SetupGetInfDriverStoreLocationW;
        pub const SetupGetInfPublishedName = SetupGetInfPublishedNameW;
        pub const SetupGetBackupInformation = SetupGetBackupInformationW;
        pub const SetupPrepareQueueForRestore = SetupPrepareQueueForRestoreW;
        pub const SetupDiCreateDeviceInfoListEx = SetupDiCreateDeviceInfoListExW;
        pub const SetupDiGetDeviceInfoListDetail = SetupDiGetDeviceInfoListDetailW;
        pub const SetupDiCreateDeviceInfo = SetupDiCreateDeviceInfoW;
        pub const SetupDiOpenDeviceInfo = SetupDiOpenDeviceInfoW;
        pub const SetupDiGetDeviceInstanceId = SetupDiGetDeviceInstanceIdW;
        pub const SetupDiCreateDeviceInterface = SetupDiCreateDeviceInterfaceW;
        pub const SetupDiOpenDeviceInterface = SetupDiOpenDeviceInterfaceW;
        pub const SetupDiGetDeviceInterfaceDetail = SetupDiGetDeviceInterfaceDetailW;
        pub const SetupDiEnumDriverInfo = SetupDiEnumDriverInfoW;
        pub const SetupDiGetSelectedDriver = SetupDiGetSelectedDriverW;
        pub const SetupDiSetSelectedDriver = SetupDiSetSelectedDriverW;
        pub const SetupDiGetDriverInfoDetail = SetupDiGetDriverInfoDetailW;
        pub const SetupDiGetClassDevsEx = SetupDiGetClassDevsExW;
        pub const SetupDiGetINFClass = SetupDiGetINFClassW;
        pub const SetupDiBuildClassInfoListEx = SetupDiBuildClassInfoListExW;
        pub const SetupDiGetClassDescription = SetupDiGetClassDescriptionW;
        pub const SetupDiGetClassDescriptionEx = SetupDiGetClassDescriptionExW;
        pub const SetupDiInstallClass = SetupDiInstallClassW;
        pub const SetupDiInstallClassEx = SetupDiInstallClassExW;
        pub const SetupDiOpenClassRegKeyEx = SetupDiOpenClassRegKeyExW;
        pub const SetupDiCreateDeviceInterfaceRegKey = SetupDiCreateDeviceInterfaceRegKeyW;
        pub const SetupDiCreateDevRegKey = SetupDiCreateDevRegKeyW;
        pub const SetupDiGetHwProfileListEx = SetupDiGetHwProfileListExW;
        pub const SetupDiGetDeviceRegistryProperty = SetupDiGetDeviceRegistryPropertyW;
        pub const SetupDiGetClassRegistryProperty = SetupDiGetClassRegistryPropertyW;
        pub const SetupDiSetDeviceRegistryProperty = SetupDiSetDeviceRegistryPropertyW;
        pub const SetupDiSetClassRegistryProperty = SetupDiSetClassRegistryPropertyW;
        pub const SetupDiGetDeviceInstallParams = SetupDiGetDeviceInstallParamsW;
        pub const SetupDiGetClassInstallParams = SetupDiGetClassInstallParamsW;
        pub const SetupDiSetDeviceInstallParams = SetupDiSetDeviceInstallParamsW;
        pub const SetupDiSetClassInstallParams = SetupDiSetClassInstallParamsW;
        pub const SetupDiGetDriverInstallParams = SetupDiGetDriverInstallParamsW;
        pub const SetupDiSetDriverInstallParams = SetupDiSetDriverInstallParamsW;
        pub const SetupDiGetClassImageListEx = SetupDiGetClassImageListExW;
        pub const SetupDiGetClassDevPropertySheets = SetupDiGetClassDevPropertySheetsW;
        pub const SetupDiClassNameFromGuid = SetupDiClassNameFromGuidW;
        pub const SetupDiClassNameFromGuidEx = SetupDiClassNameFromGuidExW;
        pub const SetupDiClassGuidsFromName = SetupDiClassGuidsFromNameW;
        pub const SetupDiClassGuidsFromNameEx = SetupDiClassGuidsFromNameExW;
        pub const SetupDiGetHwProfileFriendlyName = SetupDiGetHwProfileFriendlyNameW;
        pub const SetupDiGetHwProfileFriendlyNameEx = SetupDiGetHwProfileFriendlyNameExW;
        pub const SetupDiGetActualModelsSection = SetupDiGetActualModelsSectionW;
        pub const SetupDiGetActualSectionToInstall = SetupDiGetActualSectionToInstallW;
        pub const SetupDiGetActualSectionToInstallEx = SetupDiGetActualSectionToInstallExW;
        pub const SetupDiGetCustomDeviceProperty = SetupDiGetCustomDevicePropertyW;
        pub const CM_Add_ID = CM_Add_IDW;
        pub const CM_Add_ID_Ex = CM_Add_ID_ExW;
        pub const CM_Connect_Machine = CM_Connect_MachineW;
        pub const CM_Create_DevNode = CM_Create_DevNodeW;
        pub const CM_Create_DevNode_Ex = CM_Create_DevNode_ExW;
        pub const CM_Enumerate_Enumerators = CM_Enumerate_EnumeratorsW;
        pub const CM_Enumerate_Enumerators_Ex = CM_Enumerate_Enumerators_ExW;
        pub const CM_Get_Class_Name = CM_Get_Class_NameW;
        pub const CM_Get_Class_Name_Ex = CM_Get_Class_Name_ExW;
        pub const CM_Get_Class_Key_Name = CM_Get_Class_Key_NameW;
        pub const CM_Get_Class_Key_Name_Ex = CM_Get_Class_Key_Name_ExW;
        pub const CM_Get_Device_ID = CM_Get_Device_IDW;
        pub const CM_Get_Device_ID_Ex = CM_Get_Device_ID_ExW;
        pub const CM_Get_Device_ID_List = CM_Get_Device_ID_ListW;
        pub const CM_Get_Device_ID_List_Ex = CM_Get_Device_ID_List_ExW;
        pub const CM_Get_Device_ID_List_Size = CM_Get_Device_ID_List_SizeW;
        pub const CM_Get_Device_ID_List_Size_Ex = CM_Get_Device_ID_List_Size_ExW;
        pub const CM_Get_DevNode_Registry_Property = CM_Get_DevNode_Registry_PropertyW;
        pub const CM_Get_DevNode_Registry_Property_Ex = CM_Get_DevNode_Registry_Property_ExW;
        pub const CM_Get_DevNode_Custom_Property = CM_Get_DevNode_Custom_PropertyW;
        pub const CM_Get_DevNode_Custom_Property_Ex = CM_Get_DevNode_Custom_Property_ExW;
        pub const CM_Get_Hardware_Profile_Info = CM_Get_Hardware_Profile_InfoW;
        pub const CM_Get_Hardware_Profile_Info_Ex = CM_Get_Hardware_Profile_Info_ExW;
        pub const CM_Get_HW_Prof_Flags = CM_Get_HW_Prof_FlagsW;
        pub const CM_Get_HW_Prof_Flags_Ex = CM_Get_HW_Prof_Flags_ExW;
        pub const CM_Get_Device_Interface_Alias = CM_Get_Device_Interface_AliasW;
        pub const CM_Get_Device_Interface_Alias_Ex = CM_Get_Device_Interface_Alias_ExW;
        pub const CM_Get_Device_Interface_List = CM_Get_Device_Interface_ListW;
        pub const CM_Get_Device_Interface_List_Ex = CM_Get_Device_Interface_List_ExW;
        pub const CM_Get_Device_Interface_List_Size = CM_Get_Device_Interface_List_SizeW;
        pub const CM_Get_Device_Interface_List_Size_Ex = CM_Get_Device_Interface_List_Size_ExW;
        pub const CM_Locate_DevNode = CM_Locate_DevNodeW;
        pub const CM_Locate_DevNode_Ex = CM_Locate_DevNode_ExW;
        pub const CM_Open_Class_Key = CM_Open_Class_KeyW;
        pub const CM_Open_Class_Key_Ex = CM_Open_Class_Key_ExW;
        pub const CM_Open_Device_Interface_Key = CM_Open_Device_Interface_KeyW;
        pub const CM_Open_Device_Interface_Key_Ex = CM_Open_Device_Interface_Key_ExW;
        pub const CM_Delete_Device_Interface_Key = CM_Delete_Device_Interface_KeyW;
        pub const CM_Delete_Device_Interface_Key_Ex = CM_Delete_Device_Interface_Key_ExW;
        pub const CM_Query_And_Remove_SubTree = CM_Query_And_Remove_SubTreeW;
        pub const CM_Query_And_Remove_SubTree_Ex = CM_Query_And_Remove_SubTree_ExW;
        pub const CM_Request_Device_Eject = CM_Request_Device_EjectW;
        pub const CM_Request_Device_Eject_Ex = CM_Request_Device_Eject_ExW;
        pub const CM_Register_Device_Interface = CM_Register_Device_InterfaceW;
        pub const CM_Register_Device_Interface_Ex = CM_Register_Device_Interface_ExW;
        pub const CM_Unregister_Device_Interface = CM_Unregister_Device_InterfaceW;
        pub const CM_Unregister_Device_Interface_Ex = CM_Unregister_Device_Interface_ExW;
        pub const CM_Set_DevNode_Registry_Property = CM_Set_DevNode_Registry_PropertyW;
        pub const CM_Set_DevNode_Registry_Property_Ex = CM_Set_DevNode_Registry_Property_ExW;
        pub const CM_Set_HW_Prof_Flags = CM_Set_HW_Prof_FlagsW;
        pub const CM_Set_HW_Prof_Flags_Ex = CM_Set_HW_Prof_Flags_ExW;
        pub const CM_Get_Resource_Conflict_Details = CM_Get_Resource_Conflict_DetailsW;
        pub const CM_Get_Class_Registry_Property = CM_Get_Class_Registry_PropertyW;
        pub const CM_Set_Class_Registry_Property = CM_Set_Class_Registry_PropertyW;
        pub const UpdateDriverForPlugAndPlayDevices = UpdateDriverForPlugAndPlayDevicesW;
        pub const DiInstallDriver = DiInstallDriverW;
        pub const DiUninstallDriver = DiUninstallDriverW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const SP_DEVICE_INTERFACE_DETAIL_DATA_ = *opaque{};
        pub const SP_DEVINFO_LIST_DETAIL_DATA_ = *opaque{};
        pub const SP_DEVINSTALL_PARAMS_ = *opaque{};
        pub const SP_SELECTDEVICE_PARAMS_ = *opaque{};
        pub const SP_TROUBLESHOOTER_PARAMS_ = *opaque{};
        pub const SP_POWERMESSAGEWAKE_PARAMS_ = *opaque{};
        pub const SP_DRVINFO_DATA_V2_ = *opaque{};
        pub const SP_DRVINFO_DATA_V1_ = *opaque{};
        pub const SP_DRVINFO_DETAIL_DATA_ = *opaque{};
        pub const SP_BACKUP_QUEUE_PARAMS_V2_ = *opaque{};
        pub const SP_BACKUP_QUEUE_PARAMS_V1_ = *opaque{};
        pub const CONFLICT_DETAILS_ = *opaque{};
        pub const HWProfileInfo_s = *opaque{};
        pub const SetupGetInfDriverStoreLocation = *opaque{};
        pub const SetupGetInfPublishedName = *opaque{};
        pub const SetupGetBackupInformation = *opaque{};
        pub const SetupPrepareQueueForRestore = *opaque{};
        pub const SetupDiCreateDeviceInfoListEx = *opaque{};
        pub const SetupDiGetDeviceInfoListDetail = *opaque{};
        pub const SetupDiCreateDeviceInfo = *opaque{};
        pub const SetupDiOpenDeviceInfo = *opaque{};
        pub const SetupDiGetDeviceInstanceId = *opaque{};
        pub const SetupDiCreateDeviceInterface = *opaque{};
        pub const SetupDiOpenDeviceInterface = *opaque{};
        pub const SetupDiGetDeviceInterfaceDetail = *opaque{};
        pub const SetupDiEnumDriverInfo = *opaque{};
        pub const SetupDiGetSelectedDriver = *opaque{};
        pub const SetupDiSetSelectedDriver = *opaque{};
        pub const SetupDiGetDriverInfoDetail = *opaque{};
        pub const SetupDiGetClassDevsEx = *opaque{};
        pub const SetupDiGetINFClass = *opaque{};
        pub const SetupDiBuildClassInfoListEx = *opaque{};
        pub const SetupDiGetClassDescription = *opaque{};
        pub const SetupDiGetClassDescriptionEx = *opaque{};
        pub const SetupDiInstallClass = *opaque{};
        pub const SetupDiInstallClassEx = *opaque{};
        pub const SetupDiOpenClassRegKeyEx = *opaque{};
        pub const SetupDiCreateDeviceInterfaceRegKey = *opaque{};
        pub const SetupDiCreateDevRegKey = *opaque{};
        pub const SetupDiGetHwProfileListEx = *opaque{};
        pub const SetupDiGetDeviceRegistryProperty = *opaque{};
        pub const SetupDiGetClassRegistryProperty = *opaque{};
        pub const SetupDiSetDeviceRegistryProperty = *opaque{};
        pub const SetupDiSetClassRegistryProperty = *opaque{};
        pub const SetupDiGetDeviceInstallParams = *opaque{};
        pub const SetupDiGetClassInstallParams = *opaque{};
        pub const SetupDiSetDeviceInstallParams = *opaque{};
        pub const SetupDiSetClassInstallParams = *opaque{};
        pub const SetupDiGetDriverInstallParams = *opaque{};
        pub const SetupDiSetDriverInstallParams = *opaque{};
        pub const SetupDiGetClassImageListEx = *opaque{};
        pub const SetupDiGetClassDevPropertySheets = *opaque{};
        pub const SetupDiClassNameFromGuid = *opaque{};
        pub const SetupDiClassNameFromGuidEx = *opaque{};
        pub const SetupDiClassGuidsFromName = *opaque{};
        pub const SetupDiClassGuidsFromNameEx = *opaque{};
        pub const SetupDiGetHwProfileFriendlyName = *opaque{};
        pub const SetupDiGetHwProfileFriendlyNameEx = *opaque{};
        pub const SetupDiGetActualModelsSection = *opaque{};
        pub const SetupDiGetActualSectionToInstall = *opaque{};
        pub const SetupDiGetActualSectionToInstallEx = *opaque{};
        pub const SetupDiGetCustomDeviceProperty = *opaque{};
        pub const CM_Add_ID = *opaque{};
        pub const CM_Add_ID_Ex = *opaque{};
        pub const CM_Connect_Machine = *opaque{};
        pub const CM_Create_DevNode = *opaque{};
        pub const CM_Create_DevNode_Ex = *opaque{};
        pub const CM_Enumerate_Enumerators = *opaque{};
        pub const CM_Enumerate_Enumerators_Ex = *opaque{};
        pub const CM_Get_Class_Name = *opaque{};
        pub const CM_Get_Class_Name_Ex = *opaque{};
        pub const CM_Get_Class_Key_Name = *opaque{};
        pub const CM_Get_Class_Key_Name_Ex = *opaque{};
        pub const CM_Get_Device_ID = *opaque{};
        pub const CM_Get_Device_ID_Ex = *opaque{};
        pub const CM_Get_Device_ID_List = *opaque{};
        pub const CM_Get_Device_ID_List_Ex = *opaque{};
        pub const CM_Get_Device_ID_List_Size = *opaque{};
        pub const CM_Get_Device_ID_List_Size_Ex = *opaque{};
        pub const CM_Get_DevNode_Registry_Property = *opaque{};
        pub const CM_Get_DevNode_Registry_Property_Ex = *opaque{};
        pub const CM_Get_DevNode_Custom_Property = *opaque{};
        pub const CM_Get_DevNode_Custom_Property_Ex = *opaque{};
        pub const CM_Get_Hardware_Profile_Info = *opaque{};
        pub const CM_Get_Hardware_Profile_Info_Ex = *opaque{};
        pub const CM_Get_HW_Prof_Flags = *opaque{};
        pub const CM_Get_HW_Prof_Flags_Ex = *opaque{};
        pub const CM_Get_Device_Interface_Alias = *opaque{};
        pub const CM_Get_Device_Interface_Alias_Ex = *opaque{};
        pub const CM_Get_Device_Interface_List = *opaque{};
        pub const CM_Get_Device_Interface_List_Ex = *opaque{};
        pub const CM_Get_Device_Interface_List_Size = *opaque{};
        pub const CM_Get_Device_Interface_List_Size_Ex = *opaque{};
        pub const CM_Locate_DevNode = *opaque{};
        pub const CM_Locate_DevNode_Ex = *opaque{};
        pub const CM_Open_Class_Key = *opaque{};
        pub const CM_Open_Class_Key_Ex = *opaque{};
        pub const CM_Open_Device_Interface_Key = *opaque{};
        pub const CM_Open_Device_Interface_Key_Ex = *opaque{};
        pub const CM_Delete_Device_Interface_Key = *opaque{};
        pub const CM_Delete_Device_Interface_Key_Ex = *opaque{};
        pub const CM_Query_And_Remove_SubTree = *opaque{};
        pub const CM_Query_And_Remove_SubTree_Ex = *opaque{};
        pub const CM_Request_Device_Eject = *opaque{};
        pub const CM_Request_Device_Eject_Ex = *opaque{};
        pub const CM_Register_Device_Interface = *opaque{};
        pub const CM_Register_Device_Interface_Ex = *opaque{};
        pub const CM_Unregister_Device_Interface = *opaque{};
        pub const CM_Unregister_Device_Interface_Ex = *opaque{};
        pub const CM_Set_DevNode_Registry_Property = *opaque{};
        pub const CM_Set_DevNode_Registry_Property_Ex = *opaque{};
        pub const CM_Set_HW_Prof_Flags = *opaque{};
        pub const CM_Set_HW_Prof_Flags_Ex = *opaque{};
        pub const CM_Get_Resource_Conflict_Details = *opaque{};
        pub const CM_Get_Class_Registry_Property = *opaque{};
        pub const CM_Set_Class_Registry_Property = *opaque{};
        pub const UpdateDriverForPlugAndPlayDevices = *opaque{};
        pub const DiInstallDriver = *opaque{};
        pub const DiUninstallDriver = *opaque{};
    } else struct {
        pub const SP_DEVICE_INTERFACE_DETAIL_DATA_ = @compileError("'SP_DEVICE_INTERFACE_DETAIL_DATA_' requires that UNICODE be set to true or false in the root module");
        pub const SP_DEVINFO_LIST_DETAIL_DATA_ = @compileError("'SP_DEVINFO_LIST_DETAIL_DATA_' requires that UNICODE be set to true or false in the root module");
        pub const SP_DEVINSTALL_PARAMS_ = @compileError("'SP_DEVINSTALL_PARAMS_' requires that UNICODE be set to true or false in the root module");
        pub const SP_SELECTDEVICE_PARAMS_ = @compileError("'SP_SELECTDEVICE_PARAMS_' requires that UNICODE be set to true or false in the root module");
        pub const SP_TROUBLESHOOTER_PARAMS_ = @compileError("'SP_TROUBLESHOOTER_PARAMS_' requires that UNICODE be set to true or false in the root module");
        pub const SP_POWERMESSAGEWAKE_PARAMS_ = @compileError("'SP_POWERMESSAGEWAKE_PARAMS_' requires that UNICODE be set to true or false in the root module");
        pub const SP_DRVINFO_DATA_V2_ = @compileError("'SP_DRVINFO_DATA_V2_' requires that UNICODE be set to true or false in the root module");
        pub const SP_DRVINFO_DATA_V1_ = @compileError("'SP_DRVINFO_DATA_V1_' requires that UNICODE be set to true or false in the root module");
        pub const SP_DRVINFO_DETAIL_DATA_ = @compileError("'SP_DRVINFO_DETAIL_DATA_' requires that UNICODE be set to true or false in the root module");
        pub const SP_BACKUP_QUEUE_PARAMS_V2_ = @compileError("'SP_BACKUP_QUEUE_PARAMS_V2_' requires that UNICODE be set to true or false in the root module");
        pub const SP_BACKUP_QUEUE_PARAMS_V1_ = @compileError("'SP_BACKUP_QUEUE_PARAMS_V1_' requires that UNICODE be set to true or false in the root module");
        pub const CONFLICT_DETAILS_ = @compileError("'CONFLICT_DETAILS_' requires that UNICODE be set to true or false in the root module");
        pub const HWProfileInfo_s = @compileError("'HWProfileInfo_s' requires that UNICODE be set to true or false in the root module");
        pub const SetupGetInfDriverStoreLocation = @compileError("'SetupGetInfDriverStoreLocation' requires that UNICODE be set to true or false in the root module");
        pub const SetupGetInfPublishedName = @compileError("'SetupGetInfPublishedName' requires that UNICODE be set to true or false in the root module");
        pub const SetupGetBackupInformation = @compileError("'SetupGetBackupInformation' requires that UNICODE be set to true or false in the root module");
        pub const SetupPrepareQueueForRestore = @compileError("'SetupPrepareQueueForRestore' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiCreateDeviceInfoListEx = @compileError("'SetupDiCreateDeviceInfoListEx' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiGetDeviceInfoListDetail = @compileError("'SetupDiGetDeviceInfoListDetail' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiCreateDeviceInfo = @compileError("'SetupDiCreateDeviceInfo' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiOpenDeviceInfo = @compileError("'SetupDiOpenDeviceInfo' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiGetDeviceInstanceId = @compileError("'SetupDiGetDeviceInstanceId' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiCreateDeviceInterface = @compileError("'SetupDiCreateDeviceInterface' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiOpenDeviceInterface = @compileError("'SetupDiOpenDeviceInterface' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiGetDeviceInterfaceDetail = @compileError("'SetupDiGetDeviceInterfaceDetail' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiEnumDriverInfo = @compileError("'SetupDiEnumDriverInfo' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiGetSelectedDriver = @compileError("'SetupDiGetSelectedDriver' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiSetSelectedDriver = @compileError("'SetupDiSetSelectedDriver' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiGetDriverInfoDetail = @compileError("'SetupDiGetDriverInfoDetail' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiGetClassDevsEx = @compileError("'SetupDiGetClassDevsEx' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiGetINFClass = @compileError("'SetupDiGetINFClass' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiBuildClassInfoListEx = @compileError("'SetupDiBuildClassInfoListEx' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiGetClassDescription = @compileError("'SetupDiGetClassDescription' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiGetClassDescriptionEx = @compileError("'SetupDiGetClassDescriptionEx' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiInstallClass = @compileError("'SetupDiInstallClass' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiInstallClassEx = @compileError("'SetupDiInstallClassEx' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiOpenClassRegKeyEx = @compileError("'SetupDiOpenClassRegKeyEx' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiCreateDeviceInterfaceRegKey = @compileError("'SetupDiCreateDeviceInterfaceRegKey' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiCreateDevRegKey = @compileError("'SetupDiCreateDevRegKey' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiGetHwProfileListEx = @compileError("'SetupDiGetHwProfileListEx' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiGetDeviceRegistryProperty = @compileError("'SetupDiGetDeviceRegistryProperty' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiGetClassRegistryProperty = @compileError("'SetupDiGetClassRegistryProperty' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiSetDeviceRegistryProperty = @compileError("'SetupDiSetDeviceRegistryProperty' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiSetClassRegistryProperty = @compileError("'SetupDiSetClassRegistryProperty' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiGetDeviceInstallParams = @compileError("'SetupDiGetDeviceInstallParams' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiGetClassInstallParams = @compileError("'SetupDiGetClassInstallParams' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiSetDeviceInstallParams = @compileError("'SetupDiSetDeviceInstallParams' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiSetClassInstallParams = @compileError("'SetupDiSetClassInstallParams' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiGetDriverInstallParams = @compileError("'SetupDiGetDriverInstallParams' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiSetDriverInstallParams = @compileError("'SetupDiSetDriverInstallParams' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiGetClassImageListEx = @compileError("'SetupDiGetClassImageListEx' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiGetClassDevPropertySheets = @compileError("'SetupDiGetClassDevPropertySheets' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiClassNameFromGuid = @compileError("'SetupDiClassNameFromGuid' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiClassNameFromGuidEx = @compileError("'SetupDiClassNameFromGuidEx' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiClassGuidsFromName = @compileError("'SetupDiClassGuidsFromName' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiClassGuidsFromNameEx = @compileError("'SetupDiClassGuidsFromNameEx' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiGetHwProfileFriendlyName = @compileError("'SetupDiGetHwProfileFriendlyName' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiGetHwProfileFriendlyNameEx = @compileError("'SetupDiGetHwProfileFriendlyNameEx' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiGetActualModelsSection = @compileError("'SetupDiGetActualModelsSection' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiGetActualSectionToInstall = @compileError("'SetupDiGetActualSectionToInstall' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiGetActualSectionToInstallEx = @compileError("'SetupDiGetActualSectionToInstallEx' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiGetCustomDeviceProperty = @compileError("'SetupDiGetCustomDeviceProperty' requires that UNICODE be set to true or false in the root module");
        pub const CM_Add_ID = @compileError("'CM_Add_ID' requires that UNICODE be set to true or false in the root module");
        pub const CM_Add_ID_Ex = @compileError("'CM_Add_ID_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Connect_Machine = @compileError("'CM_Connect_Machine' requires that UNICODE be set to true or false in the root module");
        pub const CM_Create_DevNode = @compileError("'CM_Create_DevNode' requires that UNICODE be set to true or false in the root module");
        pub const CM_Create_DevNode_Ex = @compileError("'CM_Create_DevNode_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Enumerate_Enumerators = @compileError("'CM_Enumerate_Enumerators' requires that UNICODE be set to true or false in the root module");
        pub const CM_Enumerate_Enumerators_Ex = @compileError("'CM_Enumerate_Enumerators_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_Class_Name = @compileError("'CM_Get_Class_Name' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_Class_Name_Ex = @compileError("'CM_Get_Class_Name_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_Class_Key_Name = @compileError("'CM_Get_Class_Key_Name' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_Class_Key_Name_Ex = @compileError("'CM_Get_Class_Key_Name_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_Device_ID = @compileError("'CM_Get_Device_ID' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_Device_ID_Ex = @compileError("'CM_Get_Device_ID_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_Device_ID_List = @compileError("'CM_Get_Device_ID_List' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_Device_ID_List_Ex = @compileError("'CM_Get_Device_ID_List_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_Device_ID_List_Size = @compileError("'CM_Get_Device_ID_List_Size' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_Device_ID_List_Size_Ex = @compileError("'CM_Get_Device_ID_List_Size_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_DevNode_Registry_Property = @compileError("'CM_Get_DevNode_Registry_Property' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_DevNode_Registry_Property_Ex = @compileError("'CM_Get_DevNode_Registry_Property_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_DevNode_Custom_Property = @compileError("'CM_Get_DevNode_Custom_Property' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_DevNode_Custom_Property_Ex = @compileError("'CM_Get_DevNode_Custom_Property_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_Hardware_Profile_Info = @compileError("'CM_Get_Hardware_Profile_Info' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_Hardware_Profile_Info_Ex = @compileError("'CM_Get_Hardware_Profile_Info_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_HW_Prof_Flags = @compileError("'CM_Get_HW_Prof_Flags' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_HW_Prof_Flags_Ex = @compileError("'CM_Get_HW_Prof_Flags_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_Device_Interface_Alias = @compileError("'CM_Get_Device_Interface_Alias' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_Device_Interface_Alias_Ex = @compileError("'CM_Get_Device_Interface_Alias_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_Device_Interface_List = @compileError("'CM_Get_Device_Interface_List' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_Device_Interface_List_Ex = @compileError("'CM_Get_Device_Interface_List_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_Device_Interface_List_Size = @compileError("'CM_Get_Device_Interface_List_Size' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_Device_Interface_List_Size_Ex = @compileError("'CM_Get_Device_Interface_List_Size_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Locate_DevNode = @compileError("'CM_Locate_DevNode' requires that UNICODE be set to true or false in the root module");
        pub const CM_Locate_DevNode_Ex = @compileError("'CM_Locate_DevNode_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Open_Class_Key = @compileError("'CM_Open_Class_Key' requires that UNICODE be set to true or false in the root module");
        pub const CM_Open_Class_Key_Ex = @compileError("'CM_Open_Class_Key_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Open_Device_Interface_Key = @compileError("'CM_Open_Device_Interface_Key' requires that UNICODE be set to true or false in the root module");
        pub const CM_Open_Device_Interface_Key_Ex = @compileError("'CM_Open_Device_Interface_Key_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Delete_Device_Interface_Key = @compileError("'CM_Delete_Device_Interface_Key' requires that UNICODE be set to true or false in the root module");
        pub const CM_Delete_Device_Interface_Key_Ex = @compileError("'CM_Delete_Device_Interface_Key_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Query_And_Remove_SubTree = @compileError("'CM_Query_And_Remove_SubTree' requires that UNICODE be set to true or false in the root module");
        pub const CM_Query_And_Remove_SubTree_Ex = @compileError("'CM_Query_And_Remove_SubTree_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Request_Device_Eject = @compileError("'CM_Request_Device_Eject' requires that UNICODE be set to true or false in the root module");
        pub const CM_Request_Device_Eject_Ex = @compileError("'CM_Request_Device_Eject_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Register_Device_Interface = @compileError("'CM_Register_Device_Interface' requires that UNICODE be set to true or false in the root module");
        pub const CM_Register_Device_Interface_Ex = @compileError("'CM_Register_Device_Interface_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Unregister_Device_Interface = @compileError("'CM_Unregister_Device_Interface' requires that UNICODE be set to true or false in the root module");
        pub const CM_Unregister_Device_Interface_Ex = @compileError("'CM_Unregister_Device_Interface_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Set_DevNode_Registry_Property = @compileError("'CM_Set_DevNode_Registry_Property' requires that UNICODE be set to true or false in the root module");
        pub const CM_Set_DevNode_Registry_Property_Ex = @compileError("'CM_Set_DevNode_Registry_Property_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Set_HW_Prof_Flags = @compileError("'CM_Set_HW_Prof_Flags' requires that UNICODE be set to true or false in the root module");
        pub const CM_Set_HW_Prof_Flags_Ex = @compileError("'CM_Set_HW_Prof_Flags_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_Resource_Conflict_Details = @compileError("'CM_Get_Resource_Conflict_Details' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_Class_Registry_Property = @compileError("'CM_Get_Class_Registry_Property' requires that UNICODE be set to true or false in the root module");
        pub const CM_Set_Class_Registry_Property = @compileError("'CM_Set_Class_Registry_Property' requires that UNICODE be set to true or false in the root module");
        pub const UpdateDriverForPlugAndPlayDevices = @compileError("'UpdateDriverForPlugAndPlayDevices' requires that UNICODE be set to true or false in the root module");
        pub const DiInstallDriver = @compileError("'DiInstallDriver' requires that UNICODE be set to true or false in the root module");
        pub const DiUninstallDriver = @compileError("'DiUninstallDriver' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (23)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const PSP_FILE_CALLBACK_A = @import("application_installation_and_servicing.zig").PSP_FILE_CALLBACK_A;
const LPARAM = @import("windows_and_messaging.zig").LPARAM;
const FILETIME = @import("windows_programming.zig").FILETIME;
const SP_ALTPLATFORM_INFO_V2 = @import("application_installation_and_servicing.zig").SP_ALTPLATFORM_INFO_V2;
const CHAR = @import("system_services.zig").CHAR;
const PWSTR = @import("system_services.zig").PWSTR;
const INFCONTEXT = @import("application_installation_and_servicing.zig").INFCONTEXT;
const HKEY = @import("windows_programming.zig").HKEY;
const DEVPROPKEY = @import("system_services.zig").DEVPROPKEY;
const HDC = @import("gdi.zig").HDC;
const PROPSHEETHEADERW_V2 = @import("controls.zig").PROPSHEETHEADERW_V2;
const PSTR = @import("system_services.zig").PSTR;
const RECT = @import("display_devices.zig").RECT;
const BOOL = @import("system_services.zig").BOOL;
const HWND = @import("windows_and_messaging.zig").HWND;
const PRIORITY = @import("html_help.zig").PRIORITY;
const LARGE_INTEGER = @import("system_services.zig").LARGE_INTEGER;
const PROPSHEETHEADERA_V2 = @import("controls.zig").PROPSHEETHEADERA_V2;
const HANDLE = @import("system_services.zig").HANDLE;
const HPROPSHEETPAGE = @import("controls.zig").HPROPSHEETPAGE;
const HICON = @import("menus_and_resources.zig").HICON;
const HIMAGELIST = @import("controls.zig").HIMAGELIST;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "PDETECT_PROGRESS_NOTIFY")) { _ = PDETECT_PROGRESS_NOTIFY; }
    if (@hasDecl(@This(), "PSP_DETSIG_CMPPROC")) { _ = PSP_DETSIG_CMPPROC; }
    if (@hasDecl(@This(), "PCM_NOTIFY_CALLBACK")) { _ = PCM_NOTIFY_CALLBACK; }

    @setEvalBranchQuota(
        @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("std").builtin.is_test) return;
    inline for (@import("std").meta.declarations(@This())) |decl| {
        if (decl.is_pub) {
            _ = decl;
        }
    }
}
