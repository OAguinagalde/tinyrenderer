//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (9)
//--------------------------------------------------------------------------------
const CLSID_MbnConnectionProfileManager_Value = @import("../zig.zig").Guid.initString("bdfee05a-4418-11dd-90ed-001c257ccff1");
pub const CLSID_MbnConnectionProfileManager = &CLSID_MbnConnectionProfileManager_Value;

const CLSID_MbnInterfaceManager_Value = @import("../zig.zig").Guid.initString("bdfee05b-4418-11dd-90ed-001c257ccff1");
pub const CLSID_MbnInterfaceManager = &CLSID_MbnInterfaceManager_Value;

const CLSID_MbnConnectionManager_Value = @import("../zig.zig").Guid.initString("bdfee05c-4418-11dd-90ed-001c257ccff1");
pub const CLSID_MbnConnectionManager = &CLSID_MbnConnectionManager_Value;

const CLSID_MbnDeviceServicesManager_Value = @import("../zig.zig").Guid.initString("2269daa3-2a9f-4165-a501-ce00a6f7a75b");
pub const CLSID_MbnDeviceServicesManager = &CLSID_MbnDeviceServicesManager_Value;

const IID_IDummyMBNUCMExt_Value = @import("../zig.zig").Guid.initString("dcbbbab6-ffff-4bbb-aaee-338e368af6fa");
pub const IID_IDummyMBNUCMExt = &IID_IDummyMBNUCMExt_Value;
pub const IDummyMBNUCMExt = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const MBN_DEVICE_SERVICE_SESSIONS_STATE = extern enum(i32) {
    D = 0,
};
pub const MBN_DEVICE_SERVICE_SESSIONS_RESTORED = MBN_DEVICE_SERVICE_SESSIONS_STATE.D;

const IID_IMbnDeviceServiceStateEvents_Value = @import("../zig.zig").Guid.initString("5d3ff196-89ee-49d8-8b60-33ffddffc58d");
pub const IID_IMbnDeviceServiceStateEvents = &IID_IMbnDeviceServiceStateEvents_Value;
pub const IMbnDeviceServiceStateEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnSessionsStateChange: fn(
            self: *const IMbnDeviceServiceStateEvents,
            interfaceID: BSTR,
            stateChange: MBN_DEVICE_SERVICE_SESSIONS_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMbnDeviceServiceStateEvents_OnSessionsStateChange(self: *const T, interfaceID: BSTR, stateChange: MBN_DEVICE_SERVICE_SESSIONS_STATE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMbnDeviceServiceStateEvents.VTable, self.vtable).OnSessionsStateChange(@ptrCast(*const IMbnDeviceServiceStateEvents, self), interfaceID, stateChange);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const __mbnapi_ReferenceRemainingTypes__ = extern struct {
    bandClass: MBN_BAND_CLASS,
    contextConstants: MBN_CONTEXT_CONSTANTS,
    ctrlCaps: MBN_CTRL_CAPS,
    dataClass: MBN_DATA_CLASS,
    interfaceCapsConstants: MBN_INTERFACE_CAPS_CONSTANTS,
    pinConstants: MBN_PIN_CONSTANTS,
    providerConstants: MBN_PROVIDER_CONSTANTS,
    providerState: MBN_PROVIDER_STATE,
    registrationConstants: MBN_REGISTRATION_CONSTANTS,
    signalConstants: MBN_SIGNAL_CONSTANTS,
    smsCaps: MBN_SMS_CAPS,
    smsConstants: WWAEXT_SMS_CONSTANTS,
    wwaextSmsConstants: WWAEXT_SMS_CONSTANTS,
    smsStatusFlag: MBN_SMS_STATUS_FLAG,
};

pub const __DummyPinType__ = extern struct {
    pinType: u32,
};


//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (17)
//--------------------------------------------------------------------------------
const IDispatch = @import("automation.zig").IDispatch;
const MBN_PROVIDER_STATE = @import("mobile_broadband.zig").MBN_PROVIDER_STATE;
const WWAEXT_SMS_CONSTANTS = @import("mobile_broadband.zig").WWAEXT_SMS_CONSTANTS;
const IUnknown = @import("com.zig").IUnknown;
const MBN_SMS_CAPS = @import("mobile_broadband.zig").MBN_SMS_CAPS;
const HRESULT = @import("com.zig").HRESULT;
const MBN_PROVIDER_CONSTANTS = @import("mobile_broadband.zig").MBN_PROVIDER_CONSTANTS;
const BSTR = @import("automation.zig").BSTR;
const MBN_BAND_CLASS = @import("mobile_broadband.zig").MBN_BAND_CLASS;
const MBN_SMS_STATUS_FLAG = @import("mobile_broadband.zig").MBN_SMS_STATUS_FLAG;
const MBN_CTRL_CAPS = @import("mobile_broadband.zig").MBN_CTRL_CAPS;
const MBN_CONTEXT_CONSTANTS = @import("mobile_broadband.zig").MBN_CONTEXT_CONSTANTS;
const MBN_PIN_CONSTANTS = @import("mobile_broadband.zig").MBN_PIN_CONSTANTS;
const MBN_SIGNAL_CONSTANTS = @import("mobile_broadband.zig").MBN_SIGNAL_CONSTANTS;
const MBN_REGISTRATION_CONSTANTS = @import("mobile_broadband.zig").MBN_REGISTRATION_CONSTANTS;
const MBN_INTERFACE_CAPS_CONSTANTS = @import("mobile_broadband.zig").MBN_INTERFACE_CAPS_CONSTANTS;
const MBN_DATA_CLASS = @import("mobile_broadband.zig").MBN_DATA_CLASS;

test {
    @setEvalBranchQuota(
        @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("std").builtin.is_test) return;
    inline for (@import("std").meta.declarations(@This())) |decl| {
        if (decl.is_pub) {
            _ = decl;
        }
    }
}
