//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (30)
//--------------------------------------------------------------------------------
pub const HRAWINPUT = ?*opaque{};

pub const RAW_INPUT_DATA_COMMAND_FLAGS = extern enum(u32) {
    HEADER = 268435461,
    INPUT = 268435459,
};
pub const RID_HEADER = RAW_INPUT_DATA_COMMAND_FLAGS.HEADER;
pub const RID_INPUT = RAW_INPUT_DATA_COMMAND_FLAGS.INPUT;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const HOT_KEY_MODIFIERS = extern enum(u32) {
    ALT = 1,
    CONTROL = 2,
    NOREPEAT = 16384,
    SHIFT = 4,
    WIN = 8,
    _,
};
pub const MOD_ALT = HOT_KEY_MODIFIERS.ALT;
pub const MOD_CONTROL = HOT_KEY_MODIFIERS.CONTROL;
pub const MOD_NOREPEAT = HOT_KEY_MODIFIERS.NOREPEAT;
pub const MOD_SHIFT = HOT_KEY_MODIFIERS.SHIFT;
pub const MOD_WIN = HOT_KEY_MODIFIERS.WIN;

pub const RAW_INPUT_DEVICE_INFO_COMMAND = extern enum(u32) {
    PREPARSEDDATA = 536870917,
    DEVICENAME = 536870919,
    DEVICEINFO = 536870923,
};
pub const RIDI_PREPARSEDDATA = RAW_INPUT_DEVICE_INFO_COMMAND.PREPARSEDDATA;
pub const RIDI_DEVICENAME = RAW_INPUT_DEVICE_INFO_COMMAND.DEVICENAME;
pub const RIDI_DEVICEINFO = RAW_INPUT_DEVICE_INFO_COMMAND.DEVICEINFO;

pub const ACTIVATE_KEYBOARD_LAYOUT_FLAGS = extern enum(u32) {
    REORDER = 8,
    RESET = 1073741824,
    SETFORPROCESS = 256,
    SHIFTLOCK = 65536,
    ACTIVATE = 1,
    NOTELLSHELL = 128,
    REPLACELANG = 16,
    SUBSTITUTE_OK = 2,
};
pub const KLF_REORDER = ACTIVATE_KEYBOARD_LAYOUT_FLAGS.REORDER;
pub const KLF_RESET = ACTIVATE_KEYBOARD_LAYOUT_FLAGS.RESET;
pub const KLF_SETFORPROCESS = ACTIVATE_KEYBOARD_LAYOUT_FLAGS.SETFORPROCESS;
pub const KLF_SHIFTLOCK = ACTIVATE_KEYBOARD_LAYOUT_FLAGS.SHIFTLOCK;
pub const KLF_ACTIVATE = ACTIVATE_KEYBOARD_LAYOUT_FLAGS.ACTIVATE;
pub const KLF_NOTELLSHELL = ACTIVATE_KEYBOARD_LAYOUT_FLAGS.NOTELLSHELL;
pub const KLF_REPLACELANG = ACTIVATE_KEYBOARD_LAYOUT_FLAGS.REPLACELANG;
pub const KLF_SUBSTITUTE_OK = ACTIVATE_KEYBOARD_LAYOUT_FLAGS.SUBSTITUTE_OK;

pub const GET_MOUSE_MOVE_POINTS_EX_RESOLUTION = extern enum(u32) {
    DISPLAY_POINTS = 1,
    HIGH_RESOLUTION_POINTS = 2,
};
pub const GMMP_USE_DISPLAY_POINTS = GET_MOUSE_MOVE_POINTS_EX_RESOLUTION.DISPLAY_POINTS;
pub const GMMP_USE_HIGH_RESOLUTION_POINTS = GET_MOUSE_MOVE_POINTS_EX_RESOLUTION.HIGH_RESOLUTION_POINTS;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const KEYBD_EVENT_FLAGS = extern enum(u32) {
    EXTENDEDKEY = 1,
    KEYUP = 2,
    SCANCODE = 8,
    UNICODE = 4,
    _,
};
pub const KEYEVENTF_EXTENDEDKEY = KEYBD_EVENT_FLAGS.EXTENDEDKEY;
pub const KEYEVENTF_KEYUP = KEYBD_EVENT_FLAGS.KEYUP;
pub const KEYEVENTF_SCANCODE = KEYBD_EVENT_FLAGS.SCANCODE;
pub const KEYEVENTF_UNICODE = KEYBD_EVENT_FLAGS.UNICODE;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const MOUSE_EVENT_FLAGS = extern enum(u32) {
    ABSOLUTE = 32768,
    LEFTDOWN = 2,
    LEFTUP = 4,
    MIDDLEDOWN = 32,
    MIDDLEUP = 64,
    MOVE = 1,
    RIGHTDOWN = 8,
    RIGHTUP = 16,
    WHEEL = 2048,
    XDOWN = 128,
    XUP = 256,
    HWHEEL = 4096,
    MOVE_NOCOALESCE = 8192,
    VIRTUALDESK = 16384,
    _,
};
pub const MOUSEEVENTF_ABSOLUTE = MOUSE_EVENT_FLAGS.ABSOLUTE;
pub const MOUSEEVENTF_LEFTDOWN = MOUSE_EVENT_FLAGS.LEFTDOWN;
pub const MOUSEEVENTF_LEFTUP = MOUSE_EVENT_FLAGS.LEFTUP;
pub const MOUSEEVENTF_MIDDLEDOWN = MOUSE_EVENT_FLAGS.MIDDLEDOWN;
pub const MOUSEEVENTF_MIDDLEUP = MOUSE_EVENT_FLAGS.MIDDLEUP;
pub const MOUSEEVENTF_MOVE = MOUSE_EVENT_FLAGS.MOVE;
pub const MOUSEEVENTF_RIGHTDOWN = MOUSE_EVENT_FLAGS.RIGHTDOWN;
pub const MOUSEEVENTF_RIGHTUP = MOUSE_EVENT_FLAGS.RIGHTUP;
pub const MOUSEEVENTF_WHEEL = MOUSE_EVENT_FLAGS.WHEEL;
pub const MOUSEEVENTF_XDOWN = MOUSE_EVENT_FLAGS.XDOWN;
pub const MOUSEEVENTF_XUP = MOUSE_EVENT_FLAGS.XUP;
pub const MOUSEEVENTF_HWHEEL = MOUSE_EVENT_FLAGS.HWHEEL;
pub const MOUSEEVENTF_MOVE_NOCOALESCE = MOUSE_EVENT_FLAGS.MOVE_NOCOALESCE;
pub const MOUSEEVENTF_VIRTUALDESK = MOUSE_EVENT_FLAGS.VIRTUALDESK;

pub const RID_DEVICE_INFO_TYPE = extern enum(u32) {
    MOUSE = 0,
    KEYBOARD = 1,
    HID = 2,
};
pub const RIM_TYPEMOUSE = RID_DEVICE_INFO_TYPE.MOUSE;
pub const RIM_TYPEKEYBOARD = RID_DEVICE_INFO_TYPE.KEYBOARD;
pub const RIM_TYPEHID = RID_DEVICE_INFO_TYPE.HID;

pub const RAWINPUTDEVICE_FLAGS = extern enum(u32) {
    REMOVE = 1,
    EXCLUDE = 16,
    PAGEONLY = 32,
    NOLEGACY = 48,
    INPUTSINK = 256,
    CAPTUREMOUSE = 512,
    NOHOTKEYS = 512,
    APPKEYS = 1024,
    EXINPUTSINK = 4096,
    DEVNOTIFY = 8192,
};
pub const RIDEV_REMOVE = RAWINPUTDEVICE_FLAGS.REMOVE;
pub const RIDEV_EXCLUDE = RAWINPUTDEVICE_FLAGS.EXCLUDE;
pub const RIDEV_PAGEONLY = RAWINPUTDEVICE_FLAGS.PAGEONLY;
pub const RIDEV_NOLEGACY = RAWINPUTDEVICE_FLAGS.NOLEGACY;
pub const RIDEV_INPUTSINK = RAWINPUTDEVICE_FLAGS.INPUTSINK;
pub const RIDEV_CAPTUREMOUSE = RAWINPUTDEVICE_FLAGS.CAPTUREMOUSE;
pub const RIDEV_NOHOTKEYS = RAWINPUTDEVICE_FLAGS.NOHOTKEYS;
pub const RIDEV_APPKEYS = RAWINPUTDEVICE_FLAGS.APPKEYS;
pub const RIDEV_EXINPUTSINK = RAWINPUTDEVICE_FLAGS.EXINPUTSINK;
pub const RIDEV_DEVNOTIFY = RAWINPUTDEVICE_FLAGS.DEVNOTIFY;

pub const INPUT_TYPE = extern enum(u32) {
    MOUSE = 0,
    KEYBOARD = 1,
    HARDWARE = 2,
};
pub const INPUT_MOUSE = INPUT_TYPE.MOUSE;
pub const INPUT_KEYBOARD = INPUT_TYPE.KEYBOARD;
pub const INPUT_HARDWARE = INPUT_TYPE.HARDWARE;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const TRACKMOUSEEVENT_FLAGS = extern enum(u32) {
    CANCEL = 2147483648,
    HOVER = 1,
    LEAVE = 2,
    NONCLIENT = 16,
    QUERY = 1073741824,
    _,
};
pub const TME_CANCEL = TRACKMOUSEEVENT_FLAGS.CANCEL;
pub const TME_HOVER = TRACKMOUSEEVENT_FLAGS.HOVER;
pub const TME_LEAVE = TRACKMOUSEEVENT_FLAGS.LEAVE;
pub const TME_NONCLIENT = TRACKMOUSEEVENT_FLAGS.NONCLIENT;
pub const TME_QUERY = TRACKMOUSEEVENT_FLAGS.QUERY;

pub const MOUSEMOVEPOINT = extern struct {
    x: i32,
    y: i32,
    time: u32,
    dwExtraInfo: usize,
};

pub const TRACKMOUSEEVENT = extern struct {
    cbSize: u32,
    dwFlags: TRACKMOUSEEVENT_FLAGS,
    hwndTrack: HWND,
    dwHoverTime: u32,
};

pub const MOUSEINPUT = extern struct {
    dx: i32,
    dy: i32,
    mouseData: u32,
    dwFlags: MOUSE_EVENT_FLAGS,
    time: u32,
    dwExtraInfo: usize,
};

pub const KEYBDINPUT = extern struct {
    wVk: u16,
    wScan: u16,
    dwFlags: KEYBD_EVENT_FLAGS,
    time: u32,
    dwExtraInfo: usize,
};

pub const HARDWAREINPUT = extern struct {
    uMsg: u32,
    wParamL: u16,
    wParamH: u16,
};

pub const INPUT = extern struct {
    type: INPUT_TYPE,
    Anonymous: _Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const LASTINPUTINFO = extern struct {
    cbSize: u32,
    dwTime: u32,
};

pub const RAWINPUTHEADER = extern struct {
    dwType: u32,
    dwSize: u32,
    hDevice: HANDLE,
    wParam: WPARAM,
};

pub const RAWMOUSE = extern struct {
    usFlags: u16,
    Anonymous: _Anonymous_e__Union,
    ulRawButtons: u32,
    lLastX: i32,
    lLastY: i32,
    ulExtraInformation: u32,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const RAWKEYBOARD = extern struct {
    MakeCode: u16,
    Flags: u16,
    Reserved: u16,
    VKey: u16,
    Message: u32,
    ExtraInformation: u32,
};

pub const RAWHID = extern struct {
    dwSizeHid: u32,
    dwCount: u32,
    bRawData: [1]u8,
};

pub const RAWINPUT = extern struct {
    header: RAWINPUTHEADER,
    data: _data_e__Union,
    const _data_e__Union = u32; // TODO: generate this nested type!
};

pub const RID_DEVICE_INFO_MOUSE = extern struct {
    dwId: u32,
    dwNumberOfButtons: u32,
    dwSampleRate: u32,
    fHasHorizontalWheel: BOOL,
};

pub const RID_DEVICE_INFO_KEYBOARD = extern struct {
    dwType: u32,
    dwSubType: u32,
    dwKeyboardMode: u32,
    dwNumberOfFunctionKeys: u32,
    dwNumberOfIndicators: u32,
    dwNumberOfKeysTotal: u32,
};

pub const RID_DEVICE_INFO_HID = extern struct {
    dwVendorId: u32,
    dwProductId: u32,
    dwVersionNumber: u32,
    usUsagePage: u16,
    usUsage: u16,
};

pub const RID_DEVICE_INFO = extern struct {
    cbSize: u32,
    dwType: RID_DEVICE_INFO_TYPE,
    Anonymous: _Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const RAWINPUTDEVICE = extern struct {
    usUsagePage: u16,
    usUsage: u16,
    dwFlags: RAWINPUTDEVICE_FLAGS,
    hwndTarget: HWND,
};

pub const RAWINPUTDEVICELIST = extern struct {
    hDevice: HANDLE,
    dwType: RID_DEVICE_INFO_TYPE,
};


//--------------------------------------------------------------------------------
// Section: Functions (60)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows5.0'
pub extern "COMCTL32" fn _TrackMouseEvent(
    lpEventTrack: *TRACKMOUSEEVENT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn LoadKeyboardLayoutA(
    pwszKLID: [*:0]const u8,
    Flags: ACTIVATE_KEYBOARD_LAYOUT_FLAGS,
) callconv(@import("std").os.windows.WINAPI) HKL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn LoadKeyboardLayoutW(
    pwszKLID: [*:0]const u16,
    Flags: ACTIVATE_KEYBOARD_LAYOUT_FLAGS,
) callconv(@import("std").os.windows.WINAPI) HKL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn ActivateKeyboardLayout(
    hkl: HKL,
    Flags: ACTIVATE_KEYBOARD_LAYOUT_FLAGS,
) callconv(@import("std").os.windows.WINAPI) HKL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn ToUnicodeEx(
    wVirtKey: u32,
    wScanCode: u32,
    lpKeyState: *[256]u8,
    pwszBuff: [*:0]u16,
    cchBuff: i32,
    wFlags: u32,
    dwhkl: HKL,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn UnloadKeyboardLayout(
    hkl: HKL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn GetKeyboardLayoutNameA(
    pwszKLID: *[9]u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn GetKeyboardLayoutNameW(
    pwszKLID: *[9]u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn GetKeyboardLayoutList(
    nBuff: i32,
    lpList: ?[*]HKL,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn GetKeyboardLayout(
    idThread: u32,
) callconv(@import("std").os.windows.WINAPI) HKL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn GetMouseMovePointsEx(
    cbSize: u32,
    lppt: *MOUSEMOVEPOINT,
    lpptBuf: [*]MOUSEMOVEPOINT,
    nBufPoints: i32,
    resolution: GET_MOUSE_MOVE_POINTS_EX_RESOLUTION,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn TrackMouseEvent(
    lpEventTrack: *TRACKMOUSEEVENT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "USER32" fn RegisterHotKey(
    hWnd: HWND,
    id: i32,
    fsModifiers: HOT_KEY_MODIFIERS,
    vk: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn UnregisterHotKey(
    hWnd: HWND,
    id: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn SwapMouseButton(
    fSwap: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn GetDoubleClickTime(
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn SetDoubleClickTime(
    param0: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn SetFocus(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) HWND;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn GetActiveWindow(
) callconv(@import("std").os.windows.WINAPI) HWND;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn GetFocus(
) callconv(@import("std").os.windows.WINAPI) HWND;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn GetKBCodePage(
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn GetKeyState(
    nVirtKey: i32,
) callconv(@import("std").os.windows.WINAPI) i16;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn GetAsyncKeyState(
    vKey: i32,
) callconv(@import("std").os.windows.WINAPI) i16;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn GetKeyboardState(
    lpKeyState: *[256]u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn SetKeyboardState(
    lpKeyState: *[256]u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn GetKeyNameTextA(
    lParam: i32,
    lpString: [*:0]u8,
    cchSize: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn GetKeyNameTextW(
    lParam: i32,
    lpString: [*:0]u16,
    cchSize: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn GetKeyboardType(
    nTypeFlag: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn ToAscii(
    uVirtKey: u32,
    uScanCode: u32,
    lpKeyState: ?*[256]u8,
    lpChar: *u16,
    uFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn ToAsciiEx(
    uVirtKey: u32,
    uScanCode: u32,
    lpKeyState: ?*[256]u8,
    lpChar: *u16,
    uFlags: u32,
    dwhkl: HKL,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn ToUnicode(
    wVirtKey: u32,
    wScanCode: u32,
    lpKeyState: ?*[256]u8,
    pwszBuff: [*:0]u16,
    cchBuff: i32,
    wFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn OemKeyScan(
    wOemChar: u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn VkKeyScanA(
    ch: CHAR,
) callconv(@import("std").os.windows.WINAPI) i16;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn VkKeyScanW(
    ch: u16,
) callconv(@import("std").os.windows.WINAPI) i16;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn VkKeyScanExA(
    ch: CHAR,
    dwhkl: HKL,
) callconv(@import("std").os.windows.WINAPI) i16;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn VkKeyScanExW(
    ch: u16,
    dwhkl: HKL,
) callconv(@import("std").os.windows.WINAPI) i16;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn keybd_event(
    bVk: u8,
    bScan: u8,
    dwFlags: KEYBD_EVENT_FLAGS,
    dwExtraInfo: usize,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn mouse_event(
    dwFlags: MOUSE_EVENT_FLAGS,
    dx: i32,
    dy: i32,
    dwData: u32,
    dwExtraInfo: usize,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn SendInput(
    cInputs: u32,
    pInputs: [*]INPUT,
    cbSize: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn GetLastInputInfo(
    plii: *LASTINPUTINFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn MapVirtualKeyA(
    uCode: u32,
    uMapType: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn MapVirtualKeyW(
    uCode: u32,
    uMapType: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn MapVirtualKeyExA(
    uCode: u32,
    uMapType: u32,
    dwhkl: HKL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn MapVirtualKeyExW(
    uCode: u32,
    uMapType: u32,
    dwhkl: HKL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn GetCapture(
) callconv(@import("std").os.windows.WINAPI) HWND;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn SetCapture(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) HWND;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn ReleaseCapture(
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn EnableWindow(
    hWnd: HWND,
    bEnable: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn IsWindowEnabled(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn DragDetect(
    hwnd: HWND,
    pt: POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn SetActiveWindow(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) HWND;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn BlockInput(
    fBlockIt: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "USER32" fn GetRawInputData(
    hRawInput: HRAWINPUT,
    uiCommand: RAW_INPUT_DATA_COMMAND_FLAGS,
    // TODO: what to do with BytesParamIndex 3?
    pData: ?*c_void,
    pcbSize: *u32,
    cbSizeHeader: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "USER32" fn GetRawInputDeviceInfoA(
    hDevice: HANDLE,
    uiCommand: RAW_INPUT_DEVICE_INFO_COMMAND,
    // TODO: what to do with BytesParamIndex 3?
    pData: ?*c_void,
    pcbSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "USER32" fn GetRawInputDeviceInfoW(
    hDevice: HANDLE,
    uiCommand: RAW_INPUT_DEVICE_INFO_COMMAND,
    // TODO: what to do with BytesParamIndex 3?
    pData: ?*c_void,
    pcbSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "USER32" fn GetRawInputBuffer(
    // TODO: what to do with BytesParamIndex 1?
    pData: ?*RAWINPUT,
    pcbSize: *u32,
    cbSizeHeader: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "USER32" fn RegisterRawInputDevices(
    pRawInputDevices: [*]RAWINPUTDEVICE,
    uiNumDevices: u32,
    cbSize: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "USER32" fn GetRegisteredRawInputDevices(
    pRawInputDevices: ?[*]RAWINPUTDEVICE,
    puiNumDevices: *u32,
    cbSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "USER32" fn GetRawInputDeviceList(
    pRawInputDeviceList: ?[*]RAWINPUTDEVICELIST,
    puiNumDevices: *u32,
    cbSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "USER32" fn DefRawInputProc(
    paRawInput: [*]*RAWINPUT,
    nInput: i32,
    cbSizeHeader: u32,
) callconv(@import("std").os.windows.WINAPI) LRESULT;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (8)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const LoadKeyboardLayout = LoadKeyboardLayoutA;
        pub const GetKeyboardLayoutName = GetKeyboardLayoutNameA;
        pub const GetKeyNameText = GetKeyNameTextA;
        pub const VkKeyScan = VkKeyScanA;
        pub const VkKeyScanEx = VkKeyScanExA;
        pub const MapVirtualKey = MapVirtualKeyA;
        pub const MapVirtualKeyEx = MapVirtualKeyExA;
        pub const GetRawInputDeviceInfo = GetRawInputDeviceInfoA;
    },
    .wide => struct {
        pub const LoadKeyboardLayout = LoadKeyboardLayoutW;
        pub const GetKeyboardLayoutName = GetKeyboardLayoutNameW;
        pub const GetKeyNameText = GetKeyNameTextW;
        pub const VkKeyScan = VkKeyScanW;
        pub const VkKeyScanEx = VkKeyScanExW;
        pub const MapVirtualKey = MapVirtualKeyW;
        pub const MapVirtualKeyEx = MapVirtualKeyExW;
        pub const GetRawInputDeviceInfo = GetRawInputDeviceInfoW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const LoadKeyboardLayout = *opaque{};
        pub const GetKeyboardLayoutName = *opaque{};
        pub const GetKeyNameText = *opaque{};
        pub const VkKeyScan = *opaque{};
        pub const VkKeyScanEx = *opaque{};
        pub const MapVirtualKey = *opaque{};
        pub const MapVirtualKeyEx = *opaque{};
        pub const GetRawInputDeviceInfo = *opaque{};
    } else struct {
        pub const LoadKeyboardLayout = @compileError("'LoadKeyboardLayout' requires that UNICODE be set to true or false in the root module");
        pub const GetKeyboardLayoutName = @compileError("'GetKeyboardLayoutName' requires that UNICODE be set to true or false in the root module");
        pub const GetKeyNameText = @compileError("'GetKeyNameText' requires that UNICODE be set to true or false in the root module");
        pub const VkKeyScan = @compileError("'VkKeyScan' requires that UNICODE be set to true or false in the root module");
        pub const VkKeyScanEx = @compileError("'VkKeyScanEx' requires that UNICODE be set to true or false in the root module");
        pub const MapVirtualKey = @compileError("'MapVirtualKey' requires that UNICODE be set to true or false in the root module");
        pub const MapVirtualKeyEx = @compileError("'MapVirtualKeyEx' requires that UNICODE be set to true or false in the root module");
        pub const GetRawInputDeviceInfo = @compileError("'GetRawInputDeviceInfo' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (10)
//--------------------------------------------------------------------------------
const WPARAM = @import("windows_and_messaging.zig").WPARAM;
const PWSTR = @import("system_services.zig").PWSTR;
const LRESULT = @import("system_services.zig").LRESULT;
const CHAR = @import("system_services.zig").CHAR;
const HANDLE = @import("system_services.zig").HANDLE;
const PSTR = @import("system_services.zig").PSTR;
const HKL = @import("text_services.zig").HKL;
const BOOL = @import("system_services.zig").BOOL;
const HWND = @import("windows_and_messaging.zig").HWND;
const POINT = @import("display_devices.zig").POINT;

test {
    @setEvalBranchQuota(
        @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("std").builtin.is_test) return;
    inline for (@import("std").meta.declarations(@This())) |decl| {
        if (decl.is_pub) {
            _ = decl;
        }
    }
}
