//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (817)
//--------------------------------------------------------------------------------
pub const SV_PLATFORM_ID_OS2 = @as(u32, 400);
pub const SV_PLATFORM_ID_NT = @as(u32, 500);
pub const MAJOR_VERSION_MASK = @as(u32, 15);
pub const SV_NODISC = @as(i32, -1);
pub const SV_PLATFORM_ID_PARMNUM = @as(u32, 101);
pub const SV_NAME_PARMNUM = @as(u32, 102);
pub const SV_VERSION_MAJOR_PARMNUM = @as(u32, 103);
pub const SV_VERSION_MINOR_PARMNUM = @as(u32, 104);
pub const SV_TYPE_PARMNUM = @as(u32, 105);
pub const SV_COMMENT_PARMNUM = @as(u32, 5);
pub const SV_USERS_PARMNUM = @as(u32, 107);
pub const SV_DISC_PARMNUM = @as(u32, 10);
pub const SV_HIDDEN_PARMNUM = @as(u32, 16);
pub const SV_ANNOUNCE_PARMNUM = @as(u32, 17);
pub const SV_ANNDELTA_PARMNUM = @as(u32, 18);
pub const SV_USERPATH_PARMNUM = @as(u32, 112);
pub const SV_ULIST_MTIME_PARMNUM = @as(u32, 401);
pub const SV_GLIST_MTIME_PARMNUM = @as(u32, 402);
pub const SV_ALIST_MTIME_PARMNUM = @as(u32, 403);
pub const SV_ALERTS_PARMNUM = @as(u32, 11);
pub const SV_SECURITY_PARMNUM = @as(u32, 405);
pub const SV_NUMADMIN_PARMNUM = @as(u32, 406);
pub const SV_LANMASK_PARMNUM = @as(u32, 407);
pub const SV_GUESTACC_PARMNUM = @as(u32, 408);
pub const SV_CHDEVQ_PARMNUM = @as(u32, 410);
pub const SV_CHDEVJOBS_PARMNUM = @as(u32, 411);
pub const SV_CONNECTIONS_PARMNUM = @as(u32, 412);
pub const SV_SHARES_PARMNUM = @as(u32, 413);
pub const SV_OPENFILES_PARMNUM = @as(u32, 414);
pub const SV_SESSREQS_PARMNUM = @as(u32, 417);
pub const SV_ACTIVELOCKS_PARMNUM = @as(u32, 419);
pub const SV_NUMREQBUF_PARMNUM = @as(u32, 420);
pub const SV_NUMBIGBUF_PARMNUM = @as(u32, 422);
pub const SV_NUMFILETASKS_PARMNUM = @as(u32, 423);
pub const SV_ALERTSCHED_PARMNUM = @as(u32, 37);
pub const SV_ERRORALERT_PARMNUM = @as(u32, 38);
pub const SV_LOGONALERT_PARMNUM = @as(u32, 39);
pub const SV_ACCESSALERT_PARMNUM = @as(u32, 40);
pub const SV_DISKALERT_PARMNUM = @as(u32, 41);
pub const SV_NETIOALERT_PARMNUM = @as(u32, 42);
pub const SV_MAXAUDITSZ_PARMNUM = @as(u32, 43);
pub const SV_SRVHEURISTICS_PARMNUM = @as(u32, 431);
pub const SV_SESSOPENS_PARMNUM = @as(u32, 501);
pub const SV_SESSVCS_PARMNUM = @as(u32, 502);
pub const SV_OPENSEARCH_PARMNUM = @as(u32, 503);
pub const SV_SIZREQBUF_PARMNUM = @as(u32, 504);
pub const SV_INITWORKITEMS_PARMNUM = @as(u32, 505);
pub const SV_MAXWORKITEMS_PARMNUM = @as(u32, 506);
pub const SV_RAWWORKITEMS_PARMNUM = @as(u32, 507);
pub const SV_IRPSTACKSIZE_PARMNUM = @as(u32, 508);
pub const SV_MAXRAWBUFLEN_PARMNUM = @as(u32, 509);
pub const SV_SESSUSERS_PARMNUM = @as(u32, 510);
pub const SV_SESSCONNS_PARMNUM = @as(u32, 511);
pub const SV_MAXNONPAGEDMEMORYUSAGE_PARMNUM = @as(u32, 512);
pub const SV_MAXPAGEDMEMORYUSAGE_PARMNUM = @as(u32, 513);
pub const SV_ENABLESOFTCOMPAT_PARMNUM = @as(u32, 514);
pub const SV_ENABLEFORCEDLOGOFF_PARMNUM = @as(u32, 515);
pub const SV_TIMESOURCE_PARMNUM = @as(u32, 516);
pub const SV_ACCEPTDOWNLEVELAPIS_PARMNUM = @as(u32, 517);
pub const SV_LMANNOUNCE_PARMNUM = @as(u32, 518);
pub const SV_DOMAIN_PARMNUM = @as(u32, 519);
pub const SV_MAXCOPYREADLEN_PARMNUM = @as(u32, 520);
pub const SV_MAXCOPYWRITELEN_PARMNUM = @as(u32, 521);
pub const SV_MINKEEPSEARCH_PARMNUM = @as(u32, 522);
pub const SV_MAXKEEPSEARCH_PARMNUM = @as(u32, 523);
pub const SV_MINKEEPCOMPLSEARCH_PARMNUM = @as(u32, 524);
pub const SV_MAXKEEPCOMPLSEARCH_PARMNUM = @as(u32, 525);
pub const SV_THREADCOUNTADD_PARMNUM = @as(u32, 526);
pub const SV_NUMBLOCKTHREADS_PARMNUM = @as(u32, 527);
pub const SV_SCAVTIMEOUT_PARMNUM = @as(u32, 528);
pub const SV_MINRCVQUEUE_PARMNUM = @as(u32, 529);
pub const SV_MINFREEWORKITEMS_PARMNUM = @as(u32, 530);
pub const SV_XACTMEMSIZE_PARMNUM = @as(u32, 531);
pub const SV_THREADPRIORITY_PARMNUM = @as(u32, 532);
pub const SV_MAXMPXCT_PARMNUM = @as(u32, 533);
pub const SV_OPLOCKBREAKWAIT_PARMNUM = @as(u32, 534);
pub const SV_OPLOCKBREAKRESPONSEWAIT_PARMNUM = @as(u32, 535);
pub const SV_ENABLEOPLOCKS_PARMNUM = @as(u32, 536);
pub const SV_ENABLEOPLOCKFORCECLOSE_PARMNUM = @as(u32, 537);
pub const SV_ENABLEFCBOPENS_PARMNUM = @as(u32, 538);
pub const SV_ENABLERAW_PARMNUM = @as(u32, 539);
pub const SV_ENABLESHAREDNETDRIVES_PARMNUM = @as(u32, 540);
pub const SV_MINFREECONNECTIONS_PARMNUM = @as(u32, 541);
pub const SV_MAXFREECONNECTIONS_PARMNUM = @as(u32, 542);
pub const SV_INITSESSTABLE_PARMNUM = @as(u32, 543);
pub const SV_INITCONNTABLE_PARMNUM = @as(u32, 544);
pub const SV_INITFILETABLE_PARMNUM = @as(u32, 545);
pub const SV_INITSEARCHTABLE_PARMNUM = @as(u32, 546);
pub const SV_ALERTSCHEDULE_PARMNUM = @as(u32, 547);
pub const SV_ERRORTHRESHOLD_PARMNUM = @as(u32, 548);
pub const SV_NETWORKERRORTHRESHOLD_PARMNUM = @as(u32, 549);
pub const SV_DISKSPACETHRESHOLD_PARMNUM = @as(u32, 550);
pub const SV_MAXLINKDELAY_PARMNUM = @as(u32, 552);
pub const SV_MINLINKTHROUGHPUT_PARMNUM = @as(u32, 553);
pub const SV_LINKINFOVALIDTIME_PARMNUM = @as(u32, 554);
pub const SV_SCAVQOSINFOUPDATETIME_PARMNUM = @as(u32, 555);
pub const SV_MAXWORKITEMIDLETIME_PARMNUM = @as(u32, 556);
pub const SV_MAXRAWWORKITEMS_PARMNUM = @as(u32, 557);
pub const SV_PRODUCTTYPE_PARMNUM = @as(u32, 560);
pub const SV_SERVERSIZE_PARMNUM = @as(u32, 561);
pub const SV_CONNECTIONLESSAUTODISC_PARMNUM = @as(u32, 562);
pub const SV_SHARINGVIOLATIONRETRIES_PARMNUM = @as(u32, 563);
pub const SV_SHARINGVIOLATIONDELAY_PARMNUM = @as(u32, 564);
pub const SV_MAXGLOBALOPENSEARCH_PARMNUM = @as(u32, 565);
pub const SV_REMOVEDUPLICATESEARCHES_PARMNUM = @as(u32, 566);
pub const SV_LOCKVIOLATIONRETRIES_PARMNUM = @as(u32, 567);
pub const SV_LOCKVIOLATIONOFFSET_PARMNUM = @as(u32, 568);
pub const SV_LOCKVIOLATIONDELAY_PARMNUM = @as(u32, 569);
pub const SV_MDLREADSWITCHOVER_PARMNUM = @as(u32, 570);
pub const SV_CACHEDOPENLIMIT_PARMNUM = @as(u32, 571);
pub const SV_CRITICALTHREADS_PARMNUM = @as(u32, 572);
pub const SV_RESTRICTNULLSESSACCESS_PARMNUM = @as(u32, 573);
pub const SV_ENABLEWFW311DIRECTIPX_PARMNUM = @as(u32, 574);
pub const SV_OTHERQUEUEAFFINITY_PARMNUM = @as(u32, 575);
pub const SV_QUEUESAMPLESECS_PARMNUM = @as(u32, 576);
pub const SV_BALANCECOUNT_PARMNUM = @as(u32, 577);
pub const SV_PREFERREDAFFINITY_PARMNUM = @as(u32, 578);
pub const SV_MAXFREERFCBS_PARMNUM = @as(u32, 579);
pub const SV_MAXFREEMFCBS_PARMNUM = @as(u32, 580);
pub const SV_MAXFREELFCBS_PARMNUM = @as(u32, 581);
pub const SV_MAXFREEPAGEDPOOLCHUNKS_PARMNUM = @as(u32, 582);
pub const SV_MINPAGEDPOOLCHUNKSIZE_PARMNUM = @as(u32, 583);
pub const SV_MAXPAGEDPOOLCHUNKSIZE_PARMNUM = @as(u32, 584);
pub const SV_SENDSFROMPREFERREDPROCESSOR_PARMNUM = @as(u32, 585);
pub const SV_MAXTHREADSPERQUEUE_PARMNUM = @as(u32, 586);
pub const SV_CACHEDDIRECTORYLIMIT_PARMNUM = @as(u32, 587);
pub const SV_MAXCOPYLENGTH_PARMNUM = @as(u32, 588);
pub const SV_ENABLECOMPRESSION_PARMNUM = @as(u32, 590);
pub const SV_AUTOSHAREWKS_PARMNUM = @as(u32, 591);
pub const SV_AUTOSHARESERVER_PARMNUM = @as(u32, 592);
pub const SV_ENABLESECURITYSIGNATURE_PARMNUM = @as(u32, 593);
pub const SV_REQUIRESECURITYSIGNATURE_PARMNUM = @as(u32, 594);
pub const SV_MINCLIENTBUFFERSIZE_PARMNUM = @as(u32, 595);
pub const SV_CONNECTIONNOSESSIONSTIMEOUT_PARMNUM = @as(u32, 596);
pub const SV_IDLETHREADTIMEOUT_PARMNUM = @as(u32, 597);
pub const SV_ENABLEW9XSECURITYSIGNATURE_PARMNUM = @as(u32, 598);
pub const SV_ENFORCEKERBEROSREAUTHENTICATION_PARMNUM = @as(u32, 599);
pub const SV_DISABLEDOS_PARMNUM = @as(u32, 600);
pub const SV_LOWDISKSPACEMINIMUM_PARMNUM = @as(u32, 601);
pub const SV_DISABLESTRICTNAMECHECKING_PARMNUM = @as(u32, 602);
pub const SV_ENABLEAUTHENTICATEUSERSHARING_PARMNUM = @as(u32, 603);
pub const SVI1_NUM_ELEMENTS = @as(u32, 5);
pub const SVI2_NUM_ELEMENTS = @as(u32, 40);
pub const SVI3_NUM_ELEMENTS = @as(u32, 44);
pub const SW_AUTOPROF_LOAD_MASK = @as(u32, 1);
pub const SW_AUTOPROF_SAVE_MASK = @as(u32, 2);
pub const SV_MAX_SRV_HEUR_LEN = @as(u32, 32);
pub const SV_USERS_PER_LICENSE = @as(u32, 5);
pub const SVTI2_REMAP_PIPE_NAMES = @as(u32, 2);
pub const SVTI2_SCOPED_NAME = @as(u32, 4);
pub const SVTI2_CLUSTER_NAME = @as(u32, 8);
pub const SVTI2_CLUSTER_DNN_NAME = @as(u32, 16);
pub const SVTI2_UNICODE_TRANSPORT_ADDRESS = @as(u32, 32);
pub const SVTI2_RESERVED1 = @as(u32, 4096);
pub const SVTI2_RESERVED2 = @as(u32, 8192);
pub const SVTI2_RESERVED3 = @as(u32, 16384);
pub const SRV_SUPPORT_HASH_GENERATION = @as(u32, 1);
pub const SRV_HASH_GENERATION_ACTIVE = @as(u32, 2);
pub const UF_TEMP_DUPLICATE_ACCOUNT = @as(u32, 256);
pub const UF_NORMAL_ACCOUNT = @as(u32, 512);
pub const UF_INTERDOMAIN_TRUST_ACCOUNT = @as(u32, 2048);
pub const UF_WORKSTATION_TRUST_ACCOUNT = @as(u32, 4096);
pub const UF_SERVER_TRUST_ACCOUNT = @as(u32, 8192);
pub const UF_MNS_LOGON_ACCOUNT = @as(u32, 131072);
pub const UF_NO_AUTH_DATA_REQUIRED = @as(u32, 33554432);
pub const UF_PARTIAL_SECRETS_ACCOUNT = @as(u32, 67108864);
pub const UF_USE_AES_KEYS = @as(u32, 134217728);
pub const LG_INCLUDE_INDIRECT = @as(u32, 1);
pub const USER_NAME_PARMNUM = @as(u32, 1);
pub const USER_PASSWORD_PARMNUM = @as(u32, 3);
pub const USER_PASSWORD_AGE_PARMNUM = @as(u32, 4);
pub const USER_PRIV_PARMNUM = @as(u32, 5);
pub const USER_HOME_DIR_PARMNUM = @as(u32, 6);
pub const USER_COMMENT_PARMNUM = @as(u32, 7);
pub const USER_FLAGS_PARMNUM = @as(u32, 8);
pub const USER_SCRIPT_PATH_PARMNUM = @as(u32, 9);
pub const USER_AUTH_FLAGS_PARMNUM = @as(u32, 10);
pub const USER_FULL_NAME_PARMNUM = @as(u32, 11);
pub const USER_USR_COMMENT_PARMNUM = @as(u32, 12);
pub const USER_PARMS_PARMNUM = @as(u32, 13);
pub const USER_WORKSTATIONS_PARMNUM = @as(u32, 14);
pub const USER_LAST_LOGON_PARMNUM = @as(u32, 15);
pub const USER_LAST_LOGOFF_PARMNUM = @as(u32, 16);
pub const USER_ACCT_EXPIRES_PARMNUM = @as(u32, 17);
pub const USER_MAX_STORAGE_PARMNUM = @as(u32, 18);
pub const USER_UNITS_PER_WEEK_PARMNUM = @as(u32, 19);
pub const USER_LOGON_HOURS_PARMNUM = @as(u32, 20);
pub const USER_PAD_PW_COUNT_PARMNUM = @as(u32, 21);
pub const USER_NUM_LOGONS_PARMNUM = @as(u32, 22);
pub const USER_LOGON_SERVER_PARMNUM = @as(u32, 23);
pub const USER_COUNTRY_CODE_PARMNUM = @as(u32, 24);
pub const USER_CODE_PAGE_PARMNUM = @as(u32, 25);
pub const USER_PRIMARY_GROUP_PARMNUM = @as(u32, 51);
pub const USER_PROFILE = @as(u32, 52);
pub const USER_PROFILE_PARMNUM = @as(u32, 52);
pub const USER_HOME_DIR_DRIVE_PARMNUM = @as(u32, 53);
pub const UNITS_PER_DAY = @as(u32, 24);
pub const USER_PRIV_MASK = @as(u32, 3);
pub const DEF_MIN_PWLEN = @as(u32, 6);
pub const DEF_PWUNIQUENESS = @as(u32, 5);
pub const DEF_MAX_PWHIST = @as(u32, 8);
pub const DEF_MAX_BADPW = @as(u32, 0);
pub const VALIDATED_LOGON = @as(u32, 0);
pub const PASSWORD_EXPIRED = @as(u32, 2);
pub const NON_VALIDATED_LOGON = @as(u32, 3);
pub const VALID_LOGOFF = @as(u32, 1);
pub const MODALS_MIN_PASSWD_LEN_PARMNUM = @as(u32, 1);
pub const MODALS_MAX_PASSWD_AGE_PARMNUM = @as(u32, 2);
pub const MODALS_MIN_PASSWD_AGE_PARMNUM = @as(u32, 3);
pub const MODALS_FORCE_LOGOFF_PARMNUM = @as(u32, 4);
pub const MODALS_PASSWD_HIST_LEN_PARMNUM = @as(u32, 5);
pub const MODALS_ROLE_PARMNUM = @as(u32, 6);
pub const MODALS_PRIMARY_PARMNUM = @as(u32, 7);
pub const MODALS_DOMAIN_NAME_PARMNUM = @as(u32, 8);
pub const MODALS_DOMAIN_ID_PARMNUM = @as(u32, 9);
pub const MODALS_LOCKOUT_DURATION_PARMNUM = @as(u32, 10);
pub const MODALS_LOCKOUT_OBSERVATION_WINDOW_PARMNUM = @as(u32, 11);
pub const MODALS_LOCKOUT_THRESHOLD_PARMNUM = @as(u32, 12);
pub const GROUPIDMASK = @as(u32, 32768);
pub const GROUP_ALL_PARMNUM = @as(u32, 0);
pub const GROUP_NAME_PARMNUM = @as(u32, 1);
pub const GROUP_COMMENT_PARMNUM = @as(u32, 2);
pub const GROUP_ATTRIBUTES_PARMNUM = @as(u32, 3);
pub const LOCALGROUP_NAME_PARMNUM = @as(u32, 1);
pub const LOCALGROUP_COMMENT_PARMNUM = @as(u32, 2);
pub const MAXPERMENTRIES = @as(u32, 64);
pub const ACCESS_NONE = @as(u32, 0);
pub const ACCESS_GROUP = @as(u32, 32768);
pub const ACCESS_AUDIT = @as(u32, 1);
pub const ACCESS_SUCCESS_OPEN = @as(u32, 16);
pub const ACCESS_SUCCESS_WRITE = @as(u32, 32);
pub const ACCESS_SUCCESS_DELETE = @as(u32, 64);
pub const ACCESS_SUCCESS_ACL = @as(u32, 128);
pub const ACCESS_SUCCESS_MASK = @as(u32, 240);
pub const ACCESS_FAIL_OPEN = @as(u32, 256);
pub const ACCESS_FAIL_WRITE = @as(u32, 512);
pub const ACCESS_FAIL_DELETE = @as(u32, 1024);
pub const ACCESS_FAIL_ACL = @as(u32, 2048);
pub const ACCESS_FAIL_MASK = @as(u32, 3840);
pub const ACCESS_FAIL_SHIFT = @as(u32, 4);
pub const ACCESS_RESOURCE_NAME_PARMNUM = @as(u32, 1);
pub const ACCESS_ATTR_PARMNUM = @as(u32, 2);
pub const ACCESS_COUNT_PARMNUM = @as(u32, 3);
pub const ACCESS_ACCESS_LIST_PARMNUM = @as(u32, 4);
pub const NET_VALIDATE_PASSWORD_LAST_SET = @as(u32, 1);
pub const NET_VALIDATE_BAD_PASSWORD_TIME = @as(u32, 2);
pub const NET_VALIDATE_LOCKOUT_TIME = @as(u32, 4);
pub const NET_VALIDATE_BAD_PASSWORD_COUNT = @as(u32, 8);
pub const NET_VALIDATE_PASSWORD_HISTORY_LENGTH = @as(u32, 16);
pub const NET_VALIDATE_PASSWORD_HISTORY = @as(u32, 32);
pub const NETLOGON_CONTROL_QUERY = @as(u32, 1);
pub const NETLOGON_CONTROL_REPLICATE = @as(u32, 2);
pub const NETLOGON_CONTROL_SYNCHRONIZE = @as(u32, 3);
pub const NETLOGON_CONTROL_PDC_REPLICATE = @as(u32, 4);
pub const NETLOGON_CONTROL_REDISCOVER = @as(u32, 5);
pub const NETLOGON_CONTROL_TC_QUERY = @as(u32, 6);
pub const NETLOGON_CONTROL_TRANSPORT_NOTIFY = @as(u32, 7);
pub const NETLOGON_CONTROL_FIND_USER = @as(u32, 8);
pub const NETLOGON_CONTROL_CHANGE_PASSWORD = @as(u32, 9);
pub const NETLOGON_CONTROL_TC_VERIFY = @as(u32, 10);
pub const NETLOGON_CONTROL_FORCE_DNS_REG = @as(u32, 11);
pub const NETLOGON_CONTROL_QUERY_DNS_REG = @as(u32, 12);
pub const NETLOGON_CONTROL_QUERY_ENC_TYPES = @as(u32, 13);
pub const NETLOGON_CONTROL_UNLOAD_NETLOGON_DLL = @as(u32, 65531);
pub const NETLOGON_CONTROL_BACKUP_CHANGE_LOG = @as(u32, 65532);
pub const NETLOGON_CONTROL_TRUNCATE_LOG = @as(u32, 65533);
pub const NETLOGON_CONTROL_SET_DBFLAG = @as(u32, 65534);
pub const NETLOGON_CONTROL_BREAKPOINT = @as(u32, 65535);
pub const NETLOGON_REPLICATION_NEEDED = @as(u32, 1);
pub const NETLOGON_REPLICATION_IN_PROGRESS = @as(u32, 2);
pub const NETLOGON_FULL_SYNC_REPLICATION = @as(u32, 4);
pub const NETLOGON_REDO_NEEDED = @as(u32, 8);
pub const NETLOGON_HAS_IP = @as(u32, 16);
pub const NETLOGON_HAS_TIMESERV = @as(u32, 32);
pub const NETLOGON_DNS_UPDATE_FAILURE = @as(u32, 64);
pub const NETLOGON_VERIFY_STATUS_RETURNED = @as(u32, 128);
pub const ServiceAccountPasswordGUID = Guid.initString("262e99c9-6160-4871-acec-4e61736b6f21");
pub const SERVICE_ACCOUNT_FLAG_LINK_TO_HOST_ONLY = @as(i32, 1);
pub const SERVICE_ACCOUNT_FLAG_ADD_AGAINST_RODC = @as(i32, 2);
pub const SERVICE_ACCOUNT_FLAG_UNLINK_FROM_HOST_ONLY = @as(i32, 1);
pub const SERVICE_ACCOUNT_FLAG_REMOVE_OFFLINE = @as(i32, 2);
pub const NETSETUP_ACCT_DELETE = @as(u32, 4);
pub const NETSETUP_DNS_NAME_CHANGES_ONLY = @as(u32, 4096);
pub const NETSETUP_INSTALL_INVOCATION = @as(u32, 262144);
pub const NETSETUP_ALT_SAMACCOUNTNAME = @as(u32, 131072);
pub const NET_IGNORE_UNSUPPORTED_FLAGS = @as(u32, 1);
pub const NETSETUP_PROVISION_PERSISTENTSITE = @as(u32, 32);
pub const NETSETUP_PROVISION_CHECK_PWD_ONLY = @as(u32, 2147483648);
pub const NETSETUP_PROVISIONING_PARAMS_WIN8_VERSION = @as(u32, 1);
pub const NETSETUP_PROVISIONING_PARAMS_CURRENT_VERSION = @as(u32, 2);
pub const PRJOB_QSTATUS = @as(u32, 3);
pub const PRJOB_DEVSTATUS = @as(u32, 508);
pub const PRJOB_COMPLETE = @as(u32, 4);
pub const PRJOB_INTERV = @as(u32, 8);
pub const PRJOB_ERROR = @as(u32, 16);
pub const PRJOB_DESTOFFLINE = @as(u32, 32);
pub const PRJOB_DESTPAUSED = @as(u32, 64);
pub const PRJOB_NOTIFY = @as(u32, 128);
pub const PRJOB_DESTNOPAPER = @as(u32, 256);
pub const PRJOB_DELETED = @as(u32, 32768);
pub const PRJOB_QS_QUEUED = @as(u32, 0);
pub const PRJOB_QS_PAUSED = @as(u32, 1);
pub const PRJOB_QS_SPOOLING = @as(u32, 2);
pub const PRJOB_QS_PRINTING = @as(u32, 3);
pub const LOGFLAGS_FORWARD = @as(u32, 0);
pub const LOGFLAGS_BACKWARD = @as(u32, 1);
pub const LOGFLAGS_SEEK = @as(u32, 2);
pub const ACTION_LOCKOUT = @as(u32, 0);
pub const ACTION_ADMINUNLOCK = @as(u32, 1);
pub const AE_SRVSTATUS = @as(u32, 0);
pub const AE_SESSLOGON = @as(u32, 1);
pub const AE_SESSLOGOFF = @as(u32, 2);
pub const AE_SESSPWERR = @as(u32, 3);
pub const AE_CONNSTART = @as(u32, 4);
pub const AE_CONNSTOP = @as(u32, 5);
pub const AE_CONNREJ = @as(u32, 6);
pub const AE_RESACCESS = @as(u32, 7);
pub const AE_RESACCESSREJ = @as(u32, 8);
pub const AE_CLOSEFILE = @as(u32, 9);
pub const AE_SERVICESTAT = @as(u32, 11);
pub const AE_ACLMOD = @as(u32, 12);
pub const AE_UASMOD = @as(u32, 13);
pub const AE_NETLOGON = @as(u32, 14);
pub const AE_NETLOGOFF = @as(u32, 15);
pub const AE_NETLOGDENIED = @as(u32, 16);
pub const AE_ACCLIMITEXCD = @as(u32, 17);
pub const AE_RESACCESS2 = @as(u32, 18);
pub const AE_ACLMODFAIL = @as(u32, 19);
pub const AE_LOCKOUT = @as(u32, 20);
pub const AE_GENERIC_TYPE = @as(u32, 21);
pub const AE_SRVSTART = @as(u32, 0);
pub const AE_SRVPAUSED = @as(u32, 1);
pub const AE_SRVCONT = @as(u32, 2);
pub const AE_SRVSTOP = @as(u32, 3);
pub const AE_GUEST = @as(u32, 0);
pub const AE_USER = @as(u32, 1);
pub const AE_ADMIN = @as(u32, 2);
pub const AE_NORMAL = @as(u32, 0);
pub const AE_USERLIMIT = @as(u32, 0);
pub const AE_GENERAL = @as(u32, 0);
pub const AE_ERROR = @as(u32, 1);
pub const AE_SESSDIS = @as(u32, 1);
pub const AE_BADPW = @as(u32, 1);
pub const AE_AUTODIS = @as(u32, 2);
pub const AE_UNSHARE = @as(u32, 2);
pub const AE_ADMINPRIVREQD = @as(u32, 2);
pub const AE_ADMINDIS = @as(u32, 3);
pub const AE_NOACCESSPERM = @as(u32, 3);
pub const AE_ACCRESTRICT = @as(u32, 4);
pub const AE_NORMAL_CLOSE = @as(u32, 0);
pub const AE_SES_CLOSE = @as(u32, 1);
pub const AE_ADMIN_CLOSE = @as(u32, 2);
pub const AE_LIM_UNKNOWN = @as(u32, 0);
pub const AE_LIM_LOGONHOURS = @as(u32, 1);
pub const AE_LIM_EXPIRED = @as(u32, 2);
pub const AE_LIM_INVAL_WKSTA = @as(u32, 3);
pub const AE_LIM_DISABLED = @as(u32, 4);
pub const AE_LIM_DELETED = @as(u32, 5);
pub const AE_MOD = @as(u32, 0);
pub const AE_DELETE = @as(u32, 1);
pub const AE_ADD = @as(u32, 2);
pub const AE_UAS_USER = @as(u32, 0);
pub const AE_UAS_GROUP = @as(u32, 1);
pub const AE_UAS_MODALS = @as(u32, 2);
pub const SVAUD_SERVICE = @as(u32, 1);
pub const SVAUD_GOODSESSLOGON = @as(u32, 6);
pub const SVAUD_BADSESSLOGON = @as(u32, 24);
pub const SVAUD_GOODNETLOGON = @as(u32, 96);
pub const SVAUD_BADNETLOGON = @as(u32, 384);
pub const SVAUD_GOODUSE = @as(u32, 1536);
pub const SVAUD_BADUSE = @as(u32, 6144);
pub const SVAUD_USERLIST = @as(u32, 8192);
pub const SVAUD_PERMISSIONS = @as(u32, 16384);
pub const SVAUD_RESOURCE = @as(u32, 32768);
pub const SVAUD_LOGONLIM = @as(u32, 65536);
pub const AA_AUDIT_ALL = @as(u32, 1);
pub const AA_A_OWNER = @as(u32, 4);
pub const AA_CLOSE = @as(u32, 8);
pub const AA_S_OPEN = @as(u32, 16);
pub const AA_S_WRITE = @as(u32, 32);
pub const AA_S_CREATE = @as(u32, 32);
pub const AA_S_DELETE = @as(u32, 64);
pub const AA_S_ACL = @as(u32, 128);
pub const AA_F_OPEN = @as(u32, 256);
pub const AA_F_WRITE = @as(u32, 512);
pub const AA_F_CREATE = @as(u32, 512);
pub const AA_F_DELETE = @as(u32, 1024);
pub const AA_F_ACL = @as(u32, 2048);
pub const AA_A_OPEN = @as(u32, 4096);
pub const AA_A_WRITE = @as(u32, 8192);
pub const AA_A_CREATE = @as(u32, 8192);
pub const AA_A_DELETE = @as(u32, 16384);
pub const AA_A_ACL = @as(u32, 32768);
pub const ERRLOG_BASE = @as(u32, 3100);
pub const NELOG_Internal_Error = @as(u32, 3100);
pub const NELOG_Resource_Shortage = @as(u32, 3101);
pub const NELOG_Unable_To_Lock_Segment = @as(u32, 3102);
pub const NELOG_Unable_To_Unlock_Segment = @as(u32, 3103);
pub const NELOG_Uninstall_Service = @as(u32, 3104);
pub const NELOG_Init_Exec_Fail = @as(u32, 3105);
pub const NELOG_Ncb_Error = @as(u32, 3106);
pub const NELOG_Net_Not_Started = @as(u32, 3107);
pub const NELOG_Ioctl_Error = @as(u32, 3108);
pub const NELOG_System_Semaphore = @as(u32, 3109);
pub const NELOG_Init_OpenCreate_Err = @as(u32, 3110);
pub const NELOG_NetBios = @as(u32, 3111);
pub const NELOG_SMB_Illegal = @as(u32, 3112);
pub const NELOG_Service_Fail = @as(u32, 3113);
pub const NELOG_Entries_Lost = @as(u32, 3114);
pub const NELOG_Init_Seg_Overflow = @as(u32, 3120);
pub const NELOG_Srv_No_Mem_Grow = @as(u32, 3121);
pub const NELOG_Access_File_Bad = @as(u32, 3122);
pub const NELOG_Srvnet_Not_Started = @as(u32, 3123);
pub const NELOG_Init_Chardev_Err = @as(u32, 3124);
pub const NELOG_Remote_API = @as(u32, 3125);
pub const NELOG_Ncb_TooManyErr = @as(u32, 3126);
pub const NELOG_Mailslot_err = @as(u32, 3127);
pub const NELOG_ReleaseMem_Alert = @as(u32, 3128);
pub const NELOG_AT_cannot_write = @as(u32, 3129);
pub const NELOG_Cant_Make_Msg_File = @as(u32, 3130);
pub const NELOG_Exec_Netservr_NoMem = @as(u32, 3131);
pub const NELOG_Server_Lock_Failure = @as(u32, 3132);
pub const NELOG_Msg_Shutdown = @as(u32, 3140);
pub const NELOG_Msg_Sem_Shutdown = @as(u32, 3141);
pub const NELOG_Msg_Log_Err = @as(u32, 3150);
pub const NELOG_VIO_POPUP_ERR = @as(u32, 3151);
pub const NELOG_Msg_Unexpected_SMB_Type = @as(u32, 3152);
pub const NELOG_Wksta_Infoseg = @as(u32, 3160);
pub const NELOG_Wksta_Compname = @as(u32, 3161);
pub const NELOG_Wksta_BiosThreadFailure = @as(u32, 3162);
pub const NELOG_Wksta_IniSeg = @as(u32, 3163);
pub const NELOG_Wksta_HostTab_Full = @as(u32, 3164);
pub const NELOG_Wksta_Bad_Mailslot_SMB = @as(u32, 3165);
pub const NELOG_Wksta_UASInit = @as(u32, 3166);
pub const NELOG_Wksta_SSIRelogon = @as(u32, 3167);
pub const NELOG_Build_Name = @as(u32, 3170);
pub const NELOG_Name_Expansion = @as(u32, 3171);
pub const NELOG_Message_Send = @as(u32, 3172);
pub const NELOG_Mail_Slt_Err = @as(u32, 3173);
pub const NELOG_AT_cannot_read = @as(u32, 3174);
pub const NELOG_AT_sched_err = @as(u32, 3175);
pub const NELOG_AT_schedule_file_created = @as(u32, 3176);
pub const NELOG_Srvnet_NB_Open = @as(u32, 3177);
pub const NELOG_AT_Exec_Err = @as(u32, 3178);
pub const NELOG_Lazy_Write_Err = @as(u32, 3180);
pub const NELOG_HotFix = @as(u32, 3181);
pub const NELOG_HardErr_From_Server = @as(u32, 3182);
pub const NELOG_LocalSecFail1 = @as(u32, 3183);
pub const NELOG_LocalSecFail2 = @as(u32, 3184);
pub const NELOG_LocalSecFail3 = @as(u32, 3185);
pub const NELOG_LocalSecGeneralFail = @as(u32, 3186);
pub const NELOG_NetWkSta_Internal_Error = @as(u32, 3190);
pub const NELOG_NetWkSta_No_Resource = @as(u32, 3191);
pub const NELOG_NetWkSta_SMB_Err = @as(u32, 3192);
pub const NELOG_NetWkSta_VC_Err = @as(u32, 3193);
pub const NELOG_NetWkSta_Stuck_VC_Err = @as(u32, 3194);
pub const NELOG_NetWkSta_NCB_Err = @as(u32, 3195);
pub const NELOG_NetWkSta_Write_Behind_Err = @as(u32, 3196);
pub const NELOG_NetWkSta_Reset_Err = @as(u32, 3197);
pub const NELOG_NetWkSta_Too_Many = @as(u32, 3198);
pub const NELOG_Srv_Thread_Failure = @as(u32, 3204);
pub const NELOG_Srv_Close_Failure = @as(u32, 3205);
pub const NELOG_ReplUserCurDir = @as(u32, 3206);
pub const NELOG_ReplCannotMasterDir = @as(u32, 3207);
pub const NELOG_ReplUpdateError = @as(u32, 3208);
pub const NELOG_ReplLostMaster = @as(u32, 3209);
pub const NELOG_NetlogonAuthDCFail = @as(u32, 3210);
pub const NELOG_ReplLogonFailed = @as(u32, 3211);
pub const NELOG_ReplNetErr = @as(u32, 3212);
pub const NELOG_ReplMaxFiles = @as(u32, 3213);
pub const NELOG_ReplMaxTreeDepth = @as(u32, 3214);
pub const NELOG_ReplBadMsg = @as(u32, 3215);
pub const NELOG_ReplSysErr = @as(u32, 3216);
pub const NELOG_ReplUserLoged = @as(u32, 3217);
pub const NELOG_ReplBadImport = @as(u32, 3218);
pub const NELOG_ReplBadExport = @as(u32, 3219);
pub const NELOG_ReplSignalFileErr = @as(u32, 3220);
pub const NELOG_DiskFT = @as(u32, 3221);
pub const NELOG_ReplAccessDenied = @as(u32, 3222);
pub const NELOG_NetlogonFailedPrimary = @as(u32, 3223);
pub const NELOG_NetlogonPasswdSetFailed = @as(u32, 3224);
pub const NELOG_NetlogonTrackingError = @as(u32, 3225);
pub const NELOG_NetlogonSyncError = @as(u32, 3226);
pub const NELOG_NetlogonRequireSignOrSealError = @as(u32, 3227);
pub const NELOG_UPS_PowerOut = @as(u32, 3230);
pub const NELOG_UPS_Shutdown = @as(u32, 3231);
pub const NELOG_UPS_CmdFileError = @as(u32, 3232);
pub const NELOG_UPS_CannotOpenDriver = @as(u32, 3233);
pub const NELOG_UPS_PowerBack = @as(u32, 3234);
pub const NELOG_UPS_CmdFileConfig = @as(u32, 3235);
pub const NELOG_UPS_CmdFileExec = @as(u32, 3236);
pub const NELOG_Missing_Parameter = @as(u32, 3250);
pub const NELOG_Invalid_Config_Line = @as(u32, 3251);
pub const NELOG_Invalid_Config_File = @as(u32, 3252);
pub const NELOG_File_Changed = @as(u32, 3253);
pub const NELOG_Files_Dont_Fit = @as(u32, 3254);
pub const NELOG_Wrong_DLL_Version = @as(u32, 3255);
pub const NELOG_Error_in_DLL = @as(u32, 3256);
pub const NELOG_System_Error = @as(u32, 3257);
pub const NELOG_FT_ErrLog_Too_Large = @as(u32, 3258);
pub const NELOG_FT_Update_In_Progress = @as(u32, 3259);
pub const NELOG_Joined_Domain = @as(u32, 3260);
pub const NELOG_Joined_Workgroup = @as(u32, 3261);
pub const NELOG_OEM_Code = @as(u32, 3299);
pub const ERRLOG2_BASE = @as(u32, 5700);
pub const NELOG_NetlogonSSIInitError = @as(u32, 5700);
pub const NELOG_NetlogonFailedToUpdateTrustList = @as(u32, 5701);
pub const NELOG_NetlogonFailedToAddRpcInterface = @as(u32, 5702);
pub const NELOG_NetlogonFailedToReadMailslot = @as(u32, 5703);
pub const NELOG_NetlogonFailedToRegisterSC = @as(u32, 5704);
pub const NELOG_NetlogonChangeLogCorrupt = @as(u32, 5705);
pub const NELOG_NetlogonFailedToCreateShare = @as(u32, 5706);
pub const NELOG_NetlogonDownLevelLogonFailed = @as(u32, 5707);
pub const NELOG_NetlogonDownLevelLogoffFailed = @as(u32, 5708);
pub const NELOG_NetlogonNTLogonFailed = @as(u32, 5709);
pub const NELOG_NetlogonNTLogoffFailed = @as(u32, 5710);
pub const NELOG_NetlogonPartialSyncCallSuccess = @as(u32, 5711);
pub const NELOG_NetlogonPartialSyncCallFailed = @as(u32, 5712);
pub const NELOG_NetlogonFullSyncCallSuccess = @as(u32, 5713);
pub const NELOG_NetlogonFullSyncCallFailed = @as(u32, 5714);
pub const NELOG_NetlogonPartialSyncSuccess = @as(u32, 5715);
pub const NELOG_NetlogonPartialSyncFailed = @as(u32, 5716);
pub const NELOG_NetlogonFullSyncSuccess = @as(u32, 5717);
pub const NELOG_NetlogonFullSyncFailed = @as(u32, 5718);
pub const NELOG_NetlogonAuthNoDomainController = @as(u32, 5719);
pub const NELOG_NetlogonAuthNoTrustLsaSecret = @as(u32, 5720);
pub const NELOG_NetlogonAuthNoTrustSamAccount = @as(u32, 5721);
pub const NELOG_NetlogonServerAuthFailed = @as(u32, 5722);
pub const NELOG_NetlogonServerAuthNoTrustSamAccount = @as(u32, 5723);
pub const NELOG_FailedToRegisterSC = @as(u32, 5724);
pub const NELOG_FailedToSetServiceStatus = @as(u32, 5725);
pub const NELOG_FailedToGetComputerName = @as(u32, 5726);
pub const NELOG_DriverNotLoaded = @as(u32, 5727);
pub const NELOG_NoTranportLoaded = @as(u32, 5728);
pub const NELOG_NetlogonFailedDomainDelta = @as(u32, 5729);
pub const NELOG_NetlogonFailedGlobalGroupDelta = @as(u32, 5730);
pub const NELOG_NetlogonFailedLocalGroupDelta = @as(u32, 5731);
pub const NELOG_NetlogonFailedUserDelta = @as(u32, 5732);
pub const NELOG_NetlogonFailedPolicyDelta = @as(u32, 5733);
pub const NELOG_NetlogonFailedTrustedDomainDelta = @as(u32, 5734);
pub const NELOG_NetlogonFailedAccountDelta = @as(u32, 5735);
pub const NELOG_NetlogonFailedSecretDelta = @as(u32, 5736);
pub const NELOG_NetlogonSystemError = @as(u32, 5737);
pub const NELOG_NetlogonDuplicateMachineAccounts = @as(u32, 5738);
pub const NELOG_NetlogonTooManyGlobalGroups = @as(u32, 5739);
pub const NELOG_NetlogonBrowserDriver = @as(u32, 5740);
pub const NELOG_NetlogonAddNameFailure = @as(u32, 5741);
pub const NELOG_RplMessages = @as(u32, 5742);
pub const NELOG_RplXnsBoot = @as(u32, 5743);
pub const NELOG_RplSystem = @as(u32, 5744);
pub const NELOG_RplWkstaTimeout = @as(u32, 5745);
pub const NELOG_RplWkstaFileOpen = @as(u32, 5746);
pub const NELOG_RplWkstaFileRead = @as(u32, 5747);
pub const NELOG_RplWkstaMemory = @as(u32, 5748);
pub const NELOG_RplWkstaFileChecksum = @as(u32, 5749);
pub const NELOG_RplWkstaFileLineCount = @as(u32, 5750);
pub const NELOG_RplWkstaBbcFile = @as(u32, 5751);
pub const NELOG_RplWkstaFileSize = @as(u32, 5752);
pub const NELOG_RplWkstaInternal = @as(u32, 5753);
pub const NELOG_RplWkstaWrongVersion = @as(u32, 5754);
pub const NELOG_RplWkstaNetwork = @as(u32, 5755);
pub const NELOG_RplAdapterResource = @as(u32, 5756);
pub const NELOG_RplFileCopy = @as(u32, 5757);
pub const NELOG_RplFileDelete = @as(u32, 5758);
pub const NELOG_RplFilePerms = @as(u32, 5759);
pub const NELOG_RplCheckConfigs = @as(u32, 5760);
pub const NELOG_RplCreateProfiles = @as(u32, 5761);
pub const NELOG_RplRegistry = @as(u32, 5762);
pub const NELOG_RplReplaceRPLDISK = @as(u32, 5763);
pub const NELOG_RplCheckSecurity = @as(u32, 5764);
pub const NELOG_RplBackupDatabase = @as(u32, 5765);
pub const NELOG_RplInitDatabase = @as(u32, 5766);
pub const NELOG_RplRestoreDatabaseFailure = @as(u32, 5767);
pub const NELOG_RplRestoreDatabaseSuccess = @as(u32, 5768);
pub const NELOG_RplInitRestoredDatabase = @as(u32, 5769);
pub const NELOG_NetlogonSessionTypeWrong = @as(u32, 5770);
pub const NELOG_RplUpgradeDBTo40 = @as(u32, 5771);
pub const NELOG_NetlogonLanmanBdcsNotAllowed = @as(u32, 5772);
pub const NELOG_NetlogonNoDynamicDns = @as(u32, 5773);
pub const NELOG_NetlogonDynamicDnsRegisterFailure = @as(u32, 5774);
pub const NELOG_NetlogonDynamicDnsDeregisterFailure = @as(u32, 5775);
pub const NELOG_NetlogonFailedFileCreate = @as(u32, 5776);
pub const NELOG_NetlogonGetSubnetToSite = @as(u32, 5777);
pub const NELOG_NetlogonNoSiteForClient = @as(u32, 5778);
pub const NELOG_NetlogonBadSiteName = @as(u32, 5779);
pub const NELOG_NetlogonBadSubnetName = @as(u32, 5780);
pub const NELOG_NetlogonDynamicDnsServerFailure = @as(u32, 5781);
pub const NELOG_NetlogonDynamicDnsFailure = @as(u32, 5782);
pub const NELOG_NetlogonRpcCallCancelled = @as(u32, 5783);
pub const NELOG_NetlogonDcSiteCovered = @as(u32, 5784);
pub const NELOG_NetlogonDcSiteNotCovered = @as(u32, 5785);
pub const NELOG_NetlogonGcSiteCovered = @as(u32, 5786);
pub const NELOG_NetlogonGcSiteNotCovered = @as(u32, 5787);
pub const NELOG_NetlogonFailedSpnUpdate = @as(u32, 5788);
pub const NELOG_NetlogonFailedDnsHostNameUpdate = @as(u32, 5789);
pub const NELOG_NetlogonAuthNoUplevelDomainController = @as(u32, 5790);
pub const NELOG_NetlogonAuthDomainDowngraded = @as(u32, 5791);
pub const NELOG_NetlogonNdncSiteCovered = @as(u32, 5792);
pub const NELOG_NetlogonNdncSiteNotCovered = @as(u32, 5793);
pub const NELOG_NetlogonDcOldSiteCovered = @as(u32, 5794);
pub const NELOG_NetlogonDcSiteNotCoveredAuto = @as(u32, 5795);
pub const NELOG_NetlogonGcOldSiteCovered = @as(u32, 5796);
pub const NELOG_NetlogonGcSiteNotCoveredAuto = @as(u32, 5797);
pub const NELOG_NetlogonNdncOldSiteCovered = @as(u32, 5798);
pub const NELOG_NetlogonNdncSiteNotCoveredAuto = @as(u32, 5799);
pub const NELOG_NetlogonSpnMultipleSamAccountNames = @as(u32, 5800);
pub const NELOG_NetlogonSpnCrackNamesFailure = @as(u32, 5801);
pub const NELOG_NetlogonNoAddressToSiteMapping = @as(u32, 5802);
pub const NELOG_NetlogonInvalidGenericParameterValue = @as(u32, 5803);
pub const NELOG_NetlogonInvalidDwordParameterValue = @as(u32, 5804);
pub const NELOG_NetlogonServerAuthFailedNoAccount = @as(u32, 5805);
pub const NELOG_NetlogonNoDynamicDnsManual = @as(u32, 5806);
pub const NELOG_NetlogonNoSiteForClients = @as(u32, 5807);
pub const NELOG_NetlogonDnsDeregAborted = @as(u32, 5808);
pub const NELOG_NetlogonRpcPortRequestFailure = @as(u32, 5809);
pub const NELOG_NetlogonPartialSiteMappingForClients = @as(u32, 5810);
pub const NELOG_NetlogonRemoteDynamicDnsRegisterFailure = @as(u32, 5811);
pub const NELOG_NetlogonRemoteDynamicDnsDeregisterFailure = @as(u32, 5812);
pub const NELOG_NetlogonRejectedRemoteDynamicDnsRegister = @as(u32, 5813);
pub const NELOG_NetlogonRejectedRemoteDynamicDnsDeregister = @as(u32, 5814);
pub const NELOG_NetlogonRemoteDynamicDnsUpdateRequestFailure = @as(u32, 5815);
pub const NELOG_NetlogonUserValidationReqInitialTimeOut = @as(u32, 5816);
pub const NELOG_NetlogonUserValidationReqRecurringTimeOut = @as(u32, 5817);
pub const NELOG_NetlogonUserValidationReqWaitInitialWarning = @as(u32, 5818);
pub const NELOG_NetlogonUserValidationReqWaitRecurringWarning = @as(u32, 5819);
pub const NELOG_NetlogonFailedToAddAuthzRpcInterface = @as(u32, 5820);
pub const NELOG_NetLogonFailedToInitializeAuthzRm = @as(u32, 5821);
pub const NELOG_NetLogonFailedToInitializeRPCSD = @as(u32, 5822);
pub const NELOG_NetlogonMachinePasswdSetSucceeded = @as(u32, 5823);
pub const NELOG_NetlogonMsaPasswdSetSucceeded = @as(u32, 5824);
pub const MSGNAME_NOT_FORWARDED = @as(u32, 0);
pub const MSGNAME_FORWARDED_TO = @as(u32, 4);
pub const MSGNAME_FORWARDED_FROM = @as(u32, 16);
pub const SUPPORTS_ANY = @as(i32, -1);
pub const NO_PERMISSION_REQUIRED = @as(u32, 1);
pub const ALLOCATE_RESPONSE = @as(u32, 2);
pub const USE_SPECIFIC_TRANSPORT = @as(u32, 2147483648);
pub const JOB_RUN_PERIODICALLY = @as(u32, 1);
pub const JOB_EXEC_ERROR = @as(u32, 2);
pub const JOB_RUNS_TODAY = @as(u32, 4);
pub const JOB_ADD_CURRENT_DATE = @as(u32, 8);
pub const JOB_NONINTERACTIVE = @as(u32, 16);
pub const SERVICE_INSTALL_STATE = @as(u32, 3);
pub const SERVICE_UNINSTALLED = @as(u32, 0);
pub const SERVICE_INSTALL_PENDING = @as(u32, 1);
pub const SERVICE_UNINSTALL_PENDING = @as(u32, 2);
pub const SERVICE_INSTALLED = @as(u32, 3);
pub const SERVICE_PAUSE_STATE = @as(u32, 12);
pub const LM20_SERVICE_ACTIVE = @as(u32, 0);
pub const LM20_SERVICE_CONTINUE_PENDING = @as(u32, 4);
pub const LM20_SERVICE_PAUSE_PENDING = @as(u32, 8);
pub const LM20_SERVICE_PAUSED = @as(u32, 12);
pub const SERVICE_NOT_UNINSTALLABLE = @as(u32, 0);
pub const SERVICE_UNINSTALLABLE = @as(u32, 16);
pub const SERVICE_NOT_PAUSABLE = @as(u32, 0);
pub const SERVICE_PAUSABLE = @as(u32, 32);
pub const SERVICE_REDIR_PAUSED = @as(u32, 1792);
pub const SERVICE_REDIR_DISK_PAUSED = @as(u32, 256);
pub const SERVICE_REDIR_PRINT_PAUSED = @as(u32, 512);
pub const SERVICE_REDIR_COMM_PAUSED = @as(u32, 1024);
pub const SERVICE_CTRL_INTERROGATE = @as(u32, 0);
pub const SERVICE_CTRL_PAUSE = @as(u32, 1);
pub const SERVICE_CTRL_CONTINUE = @as(u32, 2);
pub const SERVICE_CTRL_UNINSTALL = @as(u32, 3);
pub const SERVICE_CTRL_REDIR_DISK = @as(u32, 1);
pub const SERVICE_CTRL_REDIR_PRINT = @as(u32, 2);
pub const SERVICE_CTRL_REDIR_COMM = @as(u32, 4);
pub const SERVICE_IP_NO_HINT = @as(u32, 0);
pub const SERVICE_CCP_NO_HINT = @as(u32, 0);
pub const SERVICE_IP_QUERY_HINT = @as(u32, 65536);
pub const SERVICE_CCP_QUERY_HINT = @as(u32, 65536);
pub const SERVICE_IP_CHKPT_NUM = @as(u32, 255);
pub const SERVICE_CCP_CHKPT_NUM = @as(u32, 255);
pub const SERVICE_IP_WAIT_TIME = @as(u32, 65280);
pub const SERVICE_CCP_WAIT_TIME = @as(u32, 65280);
pub const SERVICE_IP_WAITTIME_SHIFT = @as(u32, 8);
pub const SERVICE_NTIP_WAITTIME_SHIFT = @as(u32, 12);
pub const UPPER_HINT_MASK = @as(u32, 65280);
pub const LOWER_HINT_MASK = @as(u32, 255);
pub const UPPER_GET_HINT_MASK = @as(u32, 267386880);
pub const LOWER_GET_HINT_MASK = @as(u32, 65280);
pub const SERVICE_NT_MAXTIME = @as(u32, 65535);
pub const SERVICE_RESRV_MASK = @as(u32, 131071);
pub const SERVICE_MAXTIME = @as(u32, 255);
pub const SERVICE_BASE = @as(u32, 3050);
pub const SERVICE_UIC_NORMAL = @as(u32, 0);
pub const SERVICE_UIC_BADPARMVAL = @as(u32, 3051);
pub const SERVICE_UIC_MISSPARM = @as(u32, 3052);
pub const SERVICE_UIC_UNKPARM = @as(u32, 3053);
pub const SERVICE_UIC_RESOURCE = @as(u32, 3054);
pub const SERVICE_UIC_CONFIG = @as(u32, 3055);
pub const SERVICE_UIC_SYSTEM = @as(u32, 3056);
pub const SERVICE_UIC_INTERNAL = @as(u32, 3057);
pub const SERVICE_UIC_AMBIGPARM = @as(u32, 3058);
pub const SERVICE_UIC_DUPPARM = @as(u32, 3059);
pub const SERVICE_UIC_KILL = @as(u32, 3060);
pub const SERVICE_UIC_EXEC = @as(u32, 3061);
pub const SERVICE_UIC_SUBSERV = @as(u32, 3062);
pub const SERVICE_UIC_CONFLPARM = @as(u32, 3063);
pub const SERVICE_UIC_FILE = @as(u32, 3064);
pub const SERVICE_UIC_M_NULL = @as(u32, 0);
pub const SERVICE_UIC_M_MEMORY = @as(u32, 3070);
pub const SERVICE_UIC_M_DISK = @as(u32, 3071);
pub const SERVICE_UIC_M_THREADS = @as(u32, 3072);
pub const SERVICE_UIC_M_PROCESSES = @as(u32, 3073);
pub const SERVICE_UIC_M_SECURITY = @as(u32, 3074);
pub const SERVICE_UIC_M_LANROOT = @as(u32, 3075);
pub const SERVICE_UIC_M_REDIR = @as(u32, 3076);
pub const SERVICE_UIC_M_SERVER = @as(u32, 3077);
pub const SERVICE_UIC_M_SEC_FILE_ERR = @as(u32, 3078);
pub const SERVICE_UIC_M_FILES = @as(u32, 3079);
pub const SERVICE_UIC_M_LOGS = @as(u32, 3080);
pub const SERVICE_UIC_M_LANGROUP = @as(u32, 3081);
pub const SERVICE_UIC_M_MSGNAME = @as(u32, 3082);
pub const SERVICE_UIC_M_ANNOUNCE = @as(u32, 3083);
pub const SERVICE_UIC_M_UAS = @as(u32, 3084);
pub const SERVICE_UIC_M_SERVER_SEC_ERR = @as(u32, 3085);
pub const SERVICE_UIC_M_WKSTA = @as(u32, 3087);
pub const SERVICE_UIC_M_ERRLOG = @as(u32, 3088);
pub const SERVICE_UIC_M_FILE_UW = @as(u32, 3089);
pub const SERVICE_UIC_M_ADDPAK = @as(u32, 3090);
pub const SERVICE_UIC_M_LAZY = @as(u32, 3091);
pub const SERVICE_UIC_M_UAS_MACHINE_ACCT = @as(u32, 3092);
pub const SERVICE_UIC_M_UAS_SERVERS_NMEMB = @as(u32, 3093);
pub const SERVICE_UIC_M_UAS_SERVERS_NOGRP = @as(u32, 3094);
pub const SERVICE_UIC_M_UAS_INVALID_ROLE = @as(u32, 3095);
pub const SERVICE_UIC_M_NETLOGON_NO_DC = @as(u32, 3096);
pub const SERVICE_UIC_M_NETLOGON_DC_CFLCT = @as(u32, 3097);
pub const SERVICE_UIC_M_NETLOGON_AUTH = @as(u32, 3098);
pub const SERVICE_UIC_M_UAS_PROLOG = @as(u32, 3099);
pub const SERVICE2_BASE = @as(u32, 5600);
pub const SERVICE_UIC_M_NETLOGON_MPATH = @as(u32, 5600);
pub const SERVICE_UIC_M_LSA_MACHINE_ACCT = @as(u32, 5601);
pub const SERVICE_UIC_M_DATABASE_ERROR = @as(u32, 5602);
pub const USE_FLAG_GLOBAL_MAPPING = @as(u32, 65536);
pub const USE_LOCAL_PARMNUM = @as(u32, 1);
pub const USE_REMOTE_PARMNUM = @as(u32, 2);
pub const USE_PASSWORD_PARMNUM = @as(u32, 3);
pub const USE_ASGTYPE_PARMNUM = @as(u32, 4);
pub const USE_USERNAME_PARMNUM = @as(u32, 5);
pub const USE_DOMAINNAME_PARMNUM = @as(u32, 6);
pub const USE_FLAGS_PARMNUM = @as(u32, 7);
pub const USE_AUTHIDENTITY_PARMNUM = @as(u32, 8);
pub const USE_SD_PARMNUM = @as(u32, 9);
pub const USE_OPTIONS_PARMNUM = @as(u32, 10);
pub const USE_OK = @as(u32, 0);
pub const USE_PAUSED = @as(u32, 1);
pub const USE_SESSLOST = @as(u32, 2);
pub const USE_DISCONN = @as(u32, 2);
pub const USE_NETERR = @as(u32, 3);
pub const USE_CONN = @as(u32, 4);
pub const USE_RECONN = @as(u32, 5);
pub const USE_CHARDEV = @as(u32, 2);
pub const CREATE_NO_CONNECT = @as(u32, 1);
pub const CREATE_BYPASS_CSC = @as(u32, 2);
pub const CREATE_CRED_RESET = @as(u32, 4);
pub const USE_DEFAULT_CREDENTIALS = @as(u32, 4);
pub const CREATE_REQUIRE_CONNECTION_INTEGRITY = @as(u32, 8);
pub const CREATE_REQUIRE_CONNECTION_PRIVACY = @as(u32, 16);
pub const CREATE_PERSIST_MAPPING = @as(u32, 32);
pub const CREATE_WRITE_THROUGH_SEMANTICS = @as(u32, 64);
pub const CREATE_COMPRESS_NETWORK_TRAFFIC = @as(u32, 128);
pub const WKSTA_PLATFORM_ID_PARMNUM = @as(u32, 100);
pub const WKSTA_COMPUTERNAME_PARMNUM = @as(u32, 1);
pub const WKSTA_LANGROUP_PARMNUM = @as(u32, 2);
pub const WKSTA_VER_MAJOR_PARMNUM = @as(u32, 4);
pub const WKSTA_VER_MINOR_PARMNUM = @as(u32, 5);
pub const WKSTA_LOGGED_ON_USERS_PARMNUM = @as(u32, 6);
pub const WKSTA_LANROOT_PARMNUM = @as(u32, 7);
pub const WKSTA_LOGON_DOMAIN_PARMNUM = @as(u32, 8);
pub const WKSTA_LOGON_SERVER_PARMNUM = @as(u32, 9);
pub const WKSTA_CHARWAIT_PARMNUM = @as(u32, 10);
pub const WKSTA_CHARTIME_PARMNUM = @as(u32, 11);
pub const WKSTA_CHARCOUNT_PARMNUM = @as(u32, 12);
pub const WKSTA_KEEPCONN_PARMNUM = @as(u32, 13);
pub const WKSTA_KEEPSEARCH_PARMNUM = @as(u32, 14);
pub const WKSTA_MAXCMDS_PARMNUM = @as(u32, 15);
pub const WKSTA_NUMWORKBUF_PARMNUM = @as(u32, 16);
pub const WKSTA_MAXWRKCACHE_PARMNUM = @as(u32, 17);
pub const WKSTA_SESSTIMEOUT_PARMNUM = @as(u32, 18);
pub const WKSTA_SIZERROR_PARMNUM = @as(u32, 19);
pub const WKSTA_NUMALERTS_PARMNUM = @as(u32, 20);
pub const WKSTA_NUMSERVICES_PARMNUM = @as(u32, 21);
pub const WKSTA_NUMCHARBUF_PARMNUM = @as(u32, 22);
pub const WKSTA_SIZCHARBUF_PARMNUM = @as(u32, 23);
pub const WKSTA_ERRLOGSZ_PARMNUM = @as(u32, 27);
pub const WKSTA_PRINTBUFTIME_PARMNUM = @as(u32, 28);
pub const WKSTA_SIZWORKBUF_PARMNUM = @as(u32, 29);
pub const WKSTA_MAILSLOTS_PARMNUM = @as(u32, 30);
pub const WKSTA_NUMDGRAMBUF_PARMNUM = @as(u32, 31);
pub const WKSTA_WRKHEURISTICS_PARMNUM = @as(u32, 32);
pub const WKSTA_MAXTHREADS_PARMNUM = @as(u32, 33);
pub const WKSTA_LOCKQUOTA_PARMNUM = @as(u32, 41);
pub const WKSTA_LOCKINCREMENT_PARMNUM = @as(u32, 42);
pub const WKSTA_LOCKMAXIMUM_PARMNUM = @as(u32, 43);
pub const WKSTA_PIPEINCREMENT_PARMNUM = @as(u32, 44);
pub const WKSTA_PIPEMAXIMUM_PARMNUM = @as(u32, 45);
pub const WKSTA_DORMANTFILELIMIT_PARMNUM = @as(u32, 46);
pub const WKSTA_CACHEFILETIMEOUT_PARMNUM = @as(u32, 47);
pub const WKSTA_USEOPPORTUNISTICLOCKING_PARMNUM = @as(u32, 48);
pub const WKSTA_USEUNLOCKBEHIND_PARMNUM = @as(u32, 49);
pub const WKSTA_USECLOSEBEHIND_PARMNUM = @as(u32, 50);
pub const WKSTA_BUFFERNAMEDPIPES_PARMNUM = @as(u32, 51);
pub const WKSTA_USELOCKANDREADANDUNLOCK_PARMNUM = @as(u32, 52);
pub const WKSTA_UTILIZENTCACHING_PARMNUM = @as(u32, 53);
pub const WKSTA_USERAWREAD_PARMNUM = @as(u32, 54);
pub const WKSTA_USERAWWRITE_PARMNUM = @as(u32, 55);
pub const WKSTA_USEWRITERAWWITHDATA_PARMNUM = @as(u32, 56);
pub const WKSTA_USEENCRYPTION_PARMNUM = @as(u32, 57);
pub const WKSTA_BUFFILESWITHDENYWRITE_PARMNUM = @as(u32, 58);
pub const WKSTA_BUFFERREADONLYFILES_PARMNUM = @as(u32, 59);
pub const WKSTA_FORCECORECREATEMODE_PARMNUM = @as(u32, 60);
pub const WKSTA_USE512BYTESMAXTRANSFER_PARMNUM = @as(u32, 61);
pub const WKSTA_READAHEADTHRUPUT_PARMNUM = @as(u32, 62);
pub const WKSTA_OTH_DOMAINS_PARMNUM = @as(u32, 101);
pub const TRANSPORT_QUALITYOFSERVICE_PARMNUM = @as(u32, 201);
pub const TRANSPORT_NAME_PARMNUM = @as(u32, 202);

//--------------------------------------------------------------------------------
// Section: Types (290)
//--------------------------------------------------------------------------------
pub const USER_INFO_0 = extern struct {
    usri0_name: PWSTR,
};

pub const USER_INFO_1 = extern struct {
    usri1_name: PWSTR,
    usri1_password: PWSTR,
    usri1_password_age: u32,
    usri1_priv: USER_PRIV,
    usri1_home_dir: PWSTR,
    usri1_comment: PWSTR,
    usri1_flags: USER_ACCOUNT_FLAGS,
    usri1_script_path: PWSTR,
};

pub const USER_INFO_2 = extern struct {
    usri2_name: PWSTR,
    usri2_password: PWSTR,
    usri2_password_age: u32,
    usri2_priv: USER_PRIV,
    usri2_home_dir: PWSTR,
    usri2_comment: PWSTR,
    usri2_flags: USER_ACCOUNT_FLAGS,
    usri2_script_path: PWSTR,
    usri2_auth_flags: AF_OP,
    usri2_full_name: PWSTR,
    usri2_usr_comment: PWSTR,
    usri2_parms: PWSTR,
    usri2_workstations: PWSTR,
    usri2_last_logon: u32,
    usri2_last_logoff: u32,
    usri2_acct_expires: u32,
    usri2_max_storage: u32,
    usri2_units_per_week: u32,
    usri2_logon_hours: *u8,
    usri2_bad_pw_count: u32,
    usri2_num_logons: u32,
    usri2_logon_server: PWSTR,
    usri2_country_code: u32,
    usri2_code_page: u32,
};

pub const USER_INFO_3 = extern struct {
    usri3_name: PWSTR,
    usri3_password: PWSTR,
    usri3_password_age: u32,
    usri3_priv: USER_PRIV,
    usri3_home_dir: PWSTR,
    usri3_comment: PWSTR,
    usri3_flags: USER_ACCOUNT_FLAGS,
    usri3_script_path: PWSTR,
    usri3_auth_flags: AF_OP,
    usri3_full_name: PWSTR,
    usri3_usr_comment: PWSTR,
    usri3_parms: PWSTR,
    usri3_workstations: PWSTR,
    usri3_last_logon: u32,
    usri3_last_logoff: u32,
    usri3_acct_expires: u32,
    usri3_max_storage: u32,
    usri3_units_per_week: u32,
    usri3_logon_hours: *u8,
    usri3_bad_pw_count: u32,
    usri3_num_logons: u32,
    usri3_logon_server: PWSTR,
    usri3_country_code: u32,
    usri3_code_page: u32,
    usri3_user_id: u32,
    usri3_primary_group_id: u32,
    usri3_profile: PWSTR,
    usri3_home_dir_drive: PWSTR,
    usri3_password_expired: u32,
};

pub const USER_INFO_4 = extern struct {
    usri4_name: PWSTR,
    usri4_password: PWSTR,
    usri4_password_age: u32,
    usri4_priv: USER_PRIV,
    usri4_home_dir: PWSTR,
    usri4_comment: PWSTR,
    usri4_flags: USER_ACCOUNT_FLAGS,
    usri4_script_path: PWSTR,
    usri4_auth_flags: AF_OP,
    usri4_full_name: PWSTR,
    usri4_usr_comment: PWSTR,
    usri4_parms: PWSTR,
    usri4_workstations: PWSTR,
    usri4_last_logon: u32,
    usri4_last_logoff: u32,
    usri4_acct_expires: u32,
    usri4_max_storage: u32,
    usri4_units_per_week: u32,
    usri4_logon_hours: *u8,
    usri4_bad_pw_count: u32,
    usri4_num_logons: u32,
    usri4_logon_server: PWSTR,
    usri4_country_code: u32,
    usri4_code_page: u32,
    usri4_user_sid: PSID,
    usri4_primary_group_id: u32,
    usri4_profile: PWSTR,
    usri4_home_dir_drive: PWSTR,
    usri4_password_expired: u32,
};

pub const USER_INFO_10 = extern struct {
    usri10_name: PWSTR,
    usri10_comment: PWSTR,
    usri10_usr_comment: PWSTR,
    usri10_full_name: PWSTR,
};

pub const USER_INFO_11 = extern struct {
    usri11_name: PWSTR,
    usri11_comment: PWSTR,
    usri11_usr_comment: PWSTR,
    usri11_full_name: PWSTR,
    usri11_priv: USER_PRIV,
    usri11_auth_flags: AF_OP,
    usri11_password_age: u32,
    usri11_home_dir: PWSTR,
    usri11_parms: PWSTR,
    usri11_last_logon: u32,
    usri11_last_logoff: u32,
    usri11_bad_pw_count: u32,
    usri11_num_logons: u32,
    usri11_logon_server: PWSTR,
    usri11_country_code: u32,
    usri11_workstations: PWSTR,
    usri11_max_storage: u32,
    usri11_units_per_week: u32,
    usri11_logon_hours: *u8,
    usri11_code_page: u32,
};

pub const USER_INFO_20 = extern struct {
    usri20_name: PWSTR,
    usri20_full_name: PWSTR,
    usri20_comment: PWSTR,
    usri20_flags: USER_ACCOUNT_FLAGS,
    usri20_user_id: u32,
};

pub const USER_INFO_21 = extern struct {
    usri21_password: [16]u8,
};

pub const USER_INFO_22 = extern struct {
    usri22_name: PWSTR,
    usri22_password: [16]u8,
    usri22_password_age: u32,
    usri22_priv: USER_PRIV,
    usri22_home_dir: PWSTR,
    usri22_comment: PWSTR,
    usri22_flags: USER_ACCOUNT_FLAGS,
    usri22_script_path: PWSTR,
    usri22_auth_flags: AF_OP,
    usri22_full_name: PWSTR,
    usri22_usr_comment: PWSTR,
    usri22_parms: PWSTR,
    usri22_workstations: PWSTR,
    usri22_last_logon: u32,
    usri22_last_logoff: u32,
    usri22_acct_expires: u32,
    usri22_max_storage: u32,
    usri22_units_per_week: u32,
    usri22_logon_hours: *u8,
    usri22_bad_pw_count: u32,
    usri22_num_logons: u32,
    usri22_logon_server: PWSTR,
    usri22_country_code: u32,
    usri22_code_page: u32,
};

pub const USER_INFO_23 = extern struct {
    usri23_name: PWSTR,
    usri23_full_name: PWSTR,
    usri23_comment: PWSTR,
    usri23_flags: USER_ACCOUNT_FLAGS,
    usri23_user_sid: PSID,
};

pub const USER_INFO_24 = extern struct {
    usri24_internet_identity: BOOL,
    usri24_flags: u32,
    usri24_internet_provider_name: PWSTR,
    usri24_internet_principal_name: PWSTR,
    usri24_user_sid: PSID,
};

pub const USER_INFO_1003 = extern struct {
    usri1003_password: PWSTR,
};

pub const USER_INFO_1005 = extern struct {
    usri1005_priv: USER_PRIV,
};

pub const USER_INFO_1006 = extern struct {
    usri1006_home_dir: PWSTR,
};

pub const USER_INFO_1007 = extern struct {
    usri1007_comment: PWSTR,
};

pub const USER_INFO_1008 = extern struct {
    usri1008_flags: USER_ACCOUNT_FLAGS,
};

pub const USER_INFO_1009 = extern struct {
    usri1009_script_path: PWSTR,
};

pub const USER_INFO_1010 = extern struct {
    usri1010_auth_flags: AF_OP,
};

pub const USER_INFO_1011 = extern struct {
    usri1011_full_name: PWSTR,
};

pub const USER_INFO_1012 = extern struct {
    usri1012_usr_comment: PWSTR,
};

pub const USER_INFO_1013 = extern struct {
    usri1013_parms: PWSTR,
};

pub const USER_INFO_1014 = extern struct {
    usri1014_workstations: PWSTR,
};

pub const USER_INFO_1017 = extern struct {
    usri1017_acct_expires: u32,
};

pub const USER_INFO_1018 = extern struct {
    usri1018_max_storage: u32,
};

pub const USER_INFO_1020 = extern struct {
    usri1020_units_per_week: u32,
    usri1020_logon_hours: *u8,
};

pub const USER_INFO_1023 = extern struct {
    usri1023_logon_server: PWSTR,
};

pub const USER_INFO_1024 = extern struct {
    usri1024_country_code: u32,
};

pub const USER_INFO_1025 = extern struct {
    usri1025_code_page: u32,
};

pub const USER_INFO_1051 = extern struct {
    usri1051_primary_group_id: u32,
};

pub const USER_INFO_1052 = extern struct {
    usri1052_profile: PWSTR,
};

pub const USER_INFO_1053 = extern struct {
    usri1053_home_dir_drive: PWSTR,
};

pub const USER_MODALS_INFO_0 = extern struct {
    usrmod0_min_passwd_len: u32,
    usrmod0_max_passwd_age: u32,
    usrmod0_min_passwd_age: u32,
    usrmod0_force_logoff: u32,
    usrmod0_password_hist_len: u32,
};

pub const USER_MODALS_INFO_1 = extern struct {
    usrmod1_role: u32,
    usrmod1_primary: PWSTR,
};

pub const USER_MODALS_INFO_2 = extern struct {
    usrmod2_domain_name: PWSTR,
    usrmod2_domain_id: PSID,
};

pub const USER_MODALS_INFO_3 = extern struct {
    usrmod3_lockout_duration: u32,
    usrmod3_lockout_observation_window: u32,
    usrmod3_lockout_threshold: u32,
};

pub const USER_MODALS_INFO_1001 = extern struct {
    usrmod1001_min_passwd_len: u32,
};

pub const USER_MODALS_INFO_1002 = extern struct {
    usrmod1002_max_passwd_age: u32,
};

pub const USER_MODALS_INFO_1003 = extern struct {
    usrmod1003_min_passwd_age: u32,
};

pub const USER_MODALS_INFO_1004 = extern struct {
    usrmod1004_force_logoff: u32,
};

pub const USER_MODALS_INFO_1005 = extern struct {
    usrmod1005_password_hist_len: u32,
};

pub const USER_MODALS_INFO_1006 = extern struct {
    usrmod1006_role: USER_MODALS_ROLES,
};

pub const USER_MODALS_INFO_1007 = extern struct {
    usrmod1007_primary: PWSTR,
};

pub const GROUP_INFO_0 = extern struct {
    grpi0_name: PWSTR,
};

pub const GROUP_INFO_1 = extern struct {
    grpi1_name: PWSTR,
    grpi1_comment: PWSTR,
};

pub const GROUP_INFO_2 = extern struct {
    grpi2_name: PWSTR,
    grpi2_comment: PWSTR,
    grpi2_group_id: u32,
    grpi2_attributes: u32,
};

pub const GROUP_INFO_3 = extern struct {
    grpi3_name: PWSTR,
    grpi3_comment: PWSTR,
    grpi3_group_sid: PSID,
    grpi3_attributes: u32,
};

pub const GROUP_INFO_1002 = extern struct {
    grpi1002_comment: PWSTR,
};

pub const GROUP_INFO_1005 = extern struct {
    grpi1005_attributes: u32,
};

pub const GROUP_USERS_INFO_0 = extern struct {
    grui0_name: PWSTR,
};

pub const GROUP_USERS_INFO_1 = extern struct {
    grui1_name: PWSTR,
    grui1_attributes: u32,
};

pub const LOCALGROUP_INFO_0 = extern struct {
    lgrpi0_name: PWSTR,
};

pub const LOCALGROUP_INFO_1 = extern struct {
    lgrpi1_name: PWSTR,
    lgrpi1_comment: PWSTR,
};

pub const LOCALGROUP_INFO_1002 = extern struct {
    lgrpi1002_comment: PWSTR,
};

pub const LOCALGROUP_MEMBERS_INFO_0 = extern struct {
    lgrmi0_sid: PSID,
};

pub const LOCALGROUP_MEMBERS_INFO_1 = extern struct {
    lgrmi1_sid: PSID,
    lgrmi1_sidusage: SID_NAME_USE,
    lgrmi1_name: PWSTR,
};

pub const LOCALGROUP_MEMBERS_INFO_2 = extern struct {
    lgrmi2_sid: PSID,
    lgrmi2_sidusage: SID_NAME_USE,
    lgrmi2_domainandname: PWSTR,
};

pub const LOCALGROUP_MEMBERS_INFO_3 = extern struct {
    lgrmi3_domainandname: PWSTR,
};

pub const LOCALGROUP_USERS_INFO_0 = extern struct {
    lgrui0_name: PWSTR,
};

pub const NET_DISPLAY_USER = extern struct {
    usri1_name: PWSTR,
    usri1_comment: PWSTR,
    usri1_flags: USER_ACCOUNT_FLAGS,
    usri1_full_name: PWSTR,
    usri1_user_id: u32,
    usri1_next_index: u32,
};

pub const NET_DISPLAY_MACHINE = extern struct {
    usri2_name: PWSTR,
    usri2_comment: PWSTR,
    usri2_flags: USER_ACCOUNT_FLAGS,
    usri2_user_id: u32,
    usri2_next_index: u32,
};

pub const NET_DISPLAY_GROUP = extern struct {
    grpi3_name: PWSTR,
    grpi3_comment: PWSTR,
    grpi3_group_id: u32,
    grpi3_attributes: u32,
    grpi3_next_index: u32,
};

pub const ACCESS_INFO_0 = extern struct {
    acc0_resource_name: PWSTR,
};

pub const ACCESS_INFO_1 = extern struct {
    acc1_resource_name: PWSTR,
    acc1_attr: u32,
    acc1_count: u32,
};

pub const ACCESS_INFO_1002 = extern struct {
    acc1002_attr: u32,
};

pub const ACCESS_LIST = extern struct {
    acl_ugname: PWSTR,
    acl_access: u32,
};

pub const NET_VALIDATE_PASSWORD_TYPE = extern enum(i32) {
    Authentication = 1,
    PasswordChange = 2,
    PasswordReset = 3,
};
pub const NetValidateAuthentication = NET_VALIDATE_PASSWORD_TYPE.Authentication;
pub const NetValidatePasswordChange = NET_VALIDATE_PASSWORD_TYPE.PasswordChange;
pub const NetValidatePasswordReset = NET_VALIDATE_PASSWORD_TYPE.PasswordReset;

pub const NET_VALIDATE_PASSWORD_HASH = extern struct {
    Length: u32,
    Hash: *u8,
};

pub const NET_VALIDATE_PERSISTED_FIELDS = extern struct {
    PresentFields: u32,
    PasswordLastSet: FILETIME,
    BadPasswordTime: FILETIME,
    LockoutTime: FILETIME,
    BadPasswordCount: u32,
    PasswordHistoryLength: u32,
    PasswordHistory: *NET_VALIDATE_PASSWORD_HASH,
};

pub const NET_VALIDATE_OUTPUT_ARG = extern struct {
    ChangedPersistedFields: NET_VALIDATE_PERSISTED_FIELDS,
    ValidationStatus: u32,
};

pub const NET_VALIDATE_AUTHENTICATION_INPUT_ARG = extern struct {
    InputPersistedFields: NET_VALIDATE_PERSISTED_FIELDS,
    PasswordMatched: u8,
};

pub const NET_VALIDATE_PASSWORD_CHANGE_INPUT_ARG = extern struct {
    InputPersistedFields: NET_VALIDATE_PERSISTED_FIELDS,
    ClearPassword: PWSTR,
    UserAccountName: PWSTR,
    HashedPassword: NET_VALIDATE_PASSWORD_HASH,
    PasswordMatch: u8,
};

pub const NET_VALIDATE_PASSWORD_RESET_INPUT_ARG = extern struct {
    InputPersistedFields: NET_VALIDATE_PERSISTED_FIELDS,
    ClearPassword: PWSTR,
    UserAccountName: PWSTR,
    HashedPassword: NET_VALIDATE_PASSWORD_HASH,
    PasswordMustChangeAtNextLogon: u8,
    ClearLockout: u8,
};

pub const NETSETUP_NAME_TYPE = extern enum(i32) {
    Unknown = 0,
    Machine = 1,
    Workgroup = 2,
    Domain = 3,
    NonExistentDomain = 4,
    DnsMachine = 5,
};
pub const NetSetupUnknown = NETSETUP_NAME_TYPE.Unknown;
pub const NetSetupMachine = NETSETUP_NAME_TYPE.Machine;
pub const NetSetupWorkgroup = NETSETUP_NAME_TYPE.Workgroup;
pub const NetSetupDomain = NETSETUP_NAME_TYPE.Domain;
pub const NetSetupNonExistentDomain = NETSETUP_NAME_TYPE.NonExistentDomain;
pub const NetSetupDnsMachine = NETSETUP_NAME_TYPE.DnsMachine;

pub const DSREG_JOIN_TYPE = extern enum(i32) {
    UNKNOWN_JOIN = 0,
    DEVICE_JOIN = 1,
    WORKPLACE_JOIN = 2,
};
pub const DSREG_UNKNOWN_JOIN = DSREG_JOIN_TYPE.UNKNOWN_JOIN;
pub const DSREG_DEVICE_JOIN = DSREG_JOIN_TYPE.DEVICE_JOIN;
pub const DSREG_WORKPLACE_JOIN = DSREG_JOIN_TYPE.WORKPLACE_JOIN;

pub const DSREG_USER_INFO = extern struct {
    pszUserEmail: PWSTR,
    pszUserKeyId: PWSTR,
    pszUserKeyName: PWSTR,
};

pub const DSREG_JOIN_INFO = extern struct {
    joinType: DSREG_JOIN_TYPE,
    pJoinCertificate: *CERT_CONTEXT,
    pszDeviceId: PWSTR,
    pszIdpDomain: PWSTR,
    pszTenantId: PWSTR,
    pszJoinUserEmail: PWSTR,
    pszTenantDisplayName: PWSTR,
    pszMdmEnrollmentUrl: PWSTR,
    pszMdmTermsOfUseUrl: PWSTR,
    pszMdmComplianceUrl: PWSTR,
    pszUserSettingSyncUrl: PWSTR,
    pUserInfo: *DSREG_USER_INFO,
};

pub const NET_COMPUTER_NAME_TYPE = extern enum(i32) {
    PrimaryComputerName = 0,
    AlternateComputerNames = 1,
    AllComputerNames = 2,
    ComputerNameTypeMax = 3,
};
pub const NetPrimaryComputerName = NET_COMPUTER_NAME_TYPE.PrimaryComputerName;
pub const NetAlternateComputerNames = NET_COMPUTER_NAME_TYPE.AlternateComputerNames;
pub const NetAllComputerNames = NET_COMPUTER_NAME_TYPE.AllComputerNames;
pub const NetComputerNameTypeMax = NET_COMPUTER_NAME_TYPE.ComputerNameTypeMax;

pub const NETSETUP_PROVISIONING_PARAMS = extern struct {
    dwVersion: u32,
    lpDomain: [*:0]const u16,
    lpHostName: [*:0]const u16,
    lpMachineAccountOU: [*:0]const u16,
    lpDcName: [*:0]const u16,
    dwProvisionOptions: NETSETUP_PROVISION,
    aCertTemplateNames: *PWSTR,
    cCertTemplateNames: u32,
    aMachinePolicyNames: *PWSTR,
    cMachinePolicyNames: u32,
    aMachinePolicyPaths: *PWSTR,
    cMachinePolicyPaths: u32,
    lpNetbiosName: PWSTR,
    lpSiteName: PWSTR,
    lpPrimaryDNSDomain: PWSTR,
};

pub const NETSETUP_JOIN_STATUS = extern enum(i32) {
    UnknownStatus = 0,
    Unjoined = 1,
    WorkgroupName = 2,
    DomainName = 3,
};
pub const NetSetupUnknownStatus = NETSETUP_JOIN_STATUS.UnknownStatus;
pub const NetSetupUnjoined = NETSETUP_JOIN_STATUS.Unjoined;
pub const NetSetupWorkgroupName = NETSETUP_JOIN_STATUS.WorkgroupName;
pub const NetSetupDomainName = NETSETUP_JOIN_STATUS.DomainName;

pub const STD_ALERT = extern struct {
    alrt_timestamp: u32,
    alrt_eventname: [17]u16,
    alrt_servicename: [81]u16,
};

pub const ADMIN_OTHER_INFO = extern struct {
    alrtad_errcode: u32,
    alrtad_numstrings: u32,
};

pub const ERRLOG_OTHER_INFO = extern struct {
    alrter_errcode: u32,
    alrter_offset: u32,
};

pub const PRINT_OTHER_INFO = extern struct {
    alrtpr_jobid: u32,
    alrtpr_status: u32,
    alrtpr_submitted: u32,
    alrtpr_size: u32,
};

pub const USER_OTHER_INFO = extern struct {
    alrtus_errcode: u32,
    alrtus_numstrings: u32,
};

pub const HLOG = extern struct {
    time: u32,
    last_flags: u32,
    offset: u32,
    rec_offset: u32,
};

pub const AUDIT_ENTRY = extern struct {
    ae_len: u32,
    ae_reserved: u32,
    ae_time: u32,
    ae_type: u32,
    ae_data_offset: u32,
    ae_data_size: u32,
};

// WARNING: this type symbol conflicts with a const!
pub const AE_SRVSTATUS_CONFLICT_ = usize;

// WARNING: this type symbol conflicts with a const!
pub const AE_SESSLOGON_CONFLICT_ = usize;

// WARNING: this type symbol conflicts with a const!
pub const AE_SESSLOGOFF_CONFLICT_ = usize;

// WARNING: this type symbol conflicts with a const!
pub const AE_SESSPWERR_CONFLICT_ = usize;

// WARNING: this type symbol conflicts with a const!
pub const AE_CONNSTART_CONFLICT_ = usize;

// WARNING: this type symbol conflicts with a const!
pub const AE_CONNSTOP_CONFLICT_ = usize;

// WARNING: this type symbol conflicts with a const!
pub const AE_CONNREJ_CONFLICT_ = usize;

// WARNING: this type symbol conflicts with a const!
pub const AE_RESACCESS_CONFLICT_ = usize;

// WARNING: this type symbol conflicts with a const!
pub const AE_RESACCESSREJ_CONFLICT_ = usize;

// WARNING: this type symbol conflicts with a const!
pub const AE_CLOSEFILE_CONFLICT_ = usize;

// WARNING: this type symbol conflicts with a const!
pub const AE_SERVICESTAT_CONFLICT_ = usize;

// WARNING: this type symbol conflicts with a const!
pub const AE_ACLMOD_CONFLICT_ = usize;

// WARNING: this type symbol conflicts with a const!
pub const AE_UASMOD_CONFLICT_ = usize;

// WARNING: this type symbol conflicts with a const!
pub const AE_NETLOGON_CONFLICT_ = usize;

// WARNING: this type symbol conflicts with a const!
pub const AE_NETLOGOFF_CONFLICT_ = usize;

pub const AE_ACCLIM = extern struct {
    ae_al_compname: u32,
    ae_al_username: u32,
    ae_al_resname: u32,
    ae_al_limit: u32,
};

// WARNING: this type symbol conflicts with a const!
pub const AE_LOCKOUT_CONFLICT_ = usize;

pub const AE_GENERIC = extern struct {
    ae_ge_msgfile: u32,
    ae_ge_msgnum: u32,
    ae_ge_params: u32,
    ae_ge_param1: u32,
    ae_ge_param2: u32,
    ae_ge_param3: u32,
    ae_ge_param4: u32,
    ae_ge_param5: u32,
    ae_ge_param6: u32,
    ae_ge_param7: u32,
    ae_ge_param8: u32,
    ae_ge_param9: u32,
};

pub const CONFIG_INFO_0 = extern struct {
    cfgi0_key: PWSTR,
    cfgi0_data: PWSTR,
};

pub const ERROR_LOG = extern struct {
    el_len: u32,
    el_reserved: u32,
    el_time: u32,
    el_error: u32,
    el_name: PWSTR,
    el_text: PWSTR,
    el_data: *u8,
    el_data_size: u32,
    el_nstrings: u32,
};

pub const MSG_INFO_0 = extern struct {
    msgi0_name: PWSTR,
};

pub const MSG_INFO_1 = extern struct {
    msgi1_name: PWSTR,
    msgi1_forward_flag: u32,
    msgi1_forward: PWSTR,
};

pub const TIME_OF_DAY_INFO = extern struct {
    tod_elapsedt: u32,
    tod_msecs: u32,
    tod_hours: u32,
    tod_mins: u32,
    tod_secs: u32,
    tod_hunds: u32,
    tod_timezone: i32,
    tod_tinterval: u32,
    tod_day: u32,
    tod_month: u32,
    tod_year: u32,
    tod_weekday: u32,
};

pub const AT_INFO = extern struct {
    JobTime: usize,
    DaysOfMonth: u32,
    DaysOfWeek: u8,
    Flags: u8,
    Command: PWSTR,
};

pub const AT_ENUM = extern struct {
    JobId: u32,
    JobTime: usize,
    DaysOfMonth: u32,
    DaysOfWeek: u8,
    Flags: u8,
    Command: PWSTR,
};

pub const SERVER_INFO_100 = extern struct {
    sv100_platform_id: u32,
    sv100_name: PWSTR,
};

pub const SERVER_INFO_101 = extern struct {
    sv101_platform_id: u32,
    sv101_name: PWSTR,
    sv101_version_major: u32,
    sv101_version_minor: u32,
    sv101_type: NET_SERVER_TYPE,
    sv101_comment: PWSTR,
};

pub const SERVER_INFO_102 = extern struct {
    sv102_platform_id: u32,
    sv102_name: PWSTR,
    sv102_version_major: u32,
    sv102_version_minor: u32,
    sv102_type: NET_SERVER_TYPE,
    sv102_comment: PWSTR,
    sv102_users: u32,
    sv102_disc: i32,
    sv102_hidden: SERVER_INFO_HIDDEN,
    sv102_announce: u32,
    sv102_anndelta: u32,
    sv102_licenses: u32,
    sv102_userpath: PWSTR,
};

pub const SERVER_INFO_103 = extern struct {
    sv103_platform_id: u32,
    sv103_name: PWSTR,
    sv103_version_major: u32,
    sv103_version_minor: u32,
    sv103_type: u32,
    sv103_comment: PWSTR,
    sv103_users: u32,
    sv103_disc: i32,
    sv103_hidden: BOOL,
    sv103_announce: u32,
    sv103_anndelta: u32,
    sv103_licenses: u32,
    sv103_userpath: PWSTR,
    sv103_capabilities: u32,
};

pub const SERVER_INFO_402 = extern struct {
    sv402_ulist_mtime: u32,
    sv402_glist_mtime: u32,
    sv402_alist_mtime: u32,
    sv402_alerts: PWSTR,
    sv402_security: SERVER_INFO_SECURITY,
    sv402_numadmin: u32,
    sv402_lanmask: u32,
    sv402_guestacct: PWSTR,
    sv402_chdevs: u32,
    sv402_chdevq: u32,
    sv402_chdevjobs: u32,
    sv402_connections: u32,
    sv402_shares: u32,
    sv402_openfiles: u32,
    sv402_sessopens: u32,
    sv402_sessvcs: u32,
    sv402_sessreqs: u32,
    sv402_opensearch: u32,
    sv402_activelocks: u32,
    sv402_numreqbuf: u32,
    sv402_sizreqbuf: u32,
    sv402_numbigbuf: u32,
    sv402_numfiletasks: u32,
    sv402_alertsched: u32,
    sv402_erroralert: u32,
    sv402_logonalert: u32,
    sv402_accessalert: u32,
    sv402_diskalert: u32,
    sv402_netioalert: u32,
    sv402_maxauditsz: u32,
    sv402_srvheuristics: PWSTR,
};

pub const SERVER_INFO_403 = extern struct {
    sv403_ulist_mtime: u32,
    sv403_glist_mtime: u32,
    sv403_alist_mtime: u32,
    sv403_alerts: PWSTR,
    sv403_security: SERVER_INFO_SECURITY,
    sv403_numadmin: u32,
    sv403_lanmask: u32,
    sv403_guestacct: PWSTR,
    sv403_chdevs: u32,
    sv403_chdevq: u32,
    sv403_chdevjobs: u32,
    sv403_connections: u32,
    sv403_shares: u32,
    sv403_openfiles: u32,
    sv403_sessopens: u32,
    sv403_sessvcs: u32,
    sv403_sessreqs: u32,
    sv403_opensearch: u32,
    sv403_activelocks: u32,
    sv403_numreqbuf: u32,
    sv403_sizreqbuf: u32,
    sv403_numbigbuf: u32,
    sv403_numfiletasks: u32,
    sv403_alertsched: u32,
    sv403_erroralert: u32,
    sv403_logonalert: u32,
    sv403_accessalert: u32,
    sv403_diskalert: u32,
    sv403_netioalert: u32,
    sv403_maxauditsz: u32,
    sv403_srvheuristics: PWSTR,
    sv403_auditedevents: u32,
    sv403_autoprofile: u32,
    sv403_autopath: PWSTR,
};

pub const SERVER_INFO_502 = extern struct {
    sv502_sessopens: u32,
    sv502_sessvcs: u32,
    sv502_opensearch: u32,
    sv502_sizreqbuf: u32,
    sv502_initworkitems: u32,
    sv502_maxworkitems: u32,
    sv502_rawworkitems: u32,
    sv502_irpstacksize: u32,
    sv502_maxrawbuflen: u32,
    sv502_sessusers: u32,
    sv502_sessconns: u32,
    sv502_maxpagedmemoryusage: u32,
    sv502_maxnonpagedmemoryusage: u32,
    sv502_enablesoftcompat: BOOL,
    sv502_enableforcedlogoff: BOOL,
    sv502_timesource: BOOL,
    sv502_acceptdownlevelapis: BOOL,
    sv502_lmannounce: BOOL,
};

pub const SERVER_INFO_503 = extern struct {
    sv503_sessopens: u32,
    sv503_sessvcs: u32,
    sv503_opensearch: u32,
    sv503_sizreqbuf: u32,
    sv503_initworkitems: u32,
    sv503_maxworkitems: u32,
    sv503_rawworkitems: u32,
    sv503_irpstacksize: u32,
    sv503_maxrawbuflen: u32,
    sv503_sessusers: u32,
    sv503_sessconns: u32,
    sv503_maxpagedmemoryusage: u32,
    sv503_maxnonpagedmemoryusage: u32,
    sv503_enablesoftcompat: BOOL,
    sv503_enableforcedlogoff: BOOL,
    sv503_timesource: BOOL,
    sv503_acceptdownlevelapis: BOOL,
    sv503_lmannounce: BOOL,
    sv503_domain: PWSTR,
    sv503_maxcopyreadlen: u32,
    sv503_maxcopywritelen: u32,
    sv503_minkeepsearch: u32,
    sv503_maxkeepsearch: u32,
    sv503_minkeepcomplsearch: u32,
    sv503_maxkeepcomplsearch: u32,
    sv503_threadcountadd: u32,
    sv503_numblockthreads: u32,
    sv503_scavtimeout: u32,
    sv503_minrcvqueue: u32,
    sv503_minfreeworkitems: u32,
    sv503_xactmemsize: u32,
    sv503_threadpriority: u32,
    sv503_maxmpxct: u32,
    sv503_oplockbreakwait: u32,
    sv503_oplockbreakresponsewait: u32,
    sv503_enableoplocks: BOOL,
    sv503_enableoplockforceclose: BOOL,
    sv503_enablefcbopens: BOOL,
    sv503_enableraw: BOOL,
    sv503_enablesharednetdrives: BOOL,
    sv503_minfreeconnections: u32,
    sv503_maxfreeconnections: u32,
};

pub const SERVER_INFO_599 = extern struct {
    sv599_sessopens: u32,
    sv599_sessvcs: u32,
    sv599_opensearch: u32,
    sv599_sizreqbuf: u32,
    sv599_initworkitems: u32,
    sv599_maxworkitems: u32,
    sv599_rawworkitems: u32,
    sv599_irpstacksize: u32,
    sv599_maxrawbuflen: u32,
    sv599_sessusers: u32,
    sv599_sessconns: u32,
    sv599_maxpagedmemoryusage: u32,
    sv599_maxnonpagedmemoryusage: u32,
    sv599_enablesoftcompat: BOOL,
    sv599_enableforcedlogoff: BOOL,
    sv599_timesource: BOOL,
    sv599_acceptdownlevelapis: BOOL,
    sv599_lmannounce: BOOL,
    sv599_domain: PWSTR,
    sv599_maxcopyreadlen: u32,
    sv599_maxcopywritelen: u32,
    sv599_minkeepsearch: u32,
    sv599_maxkeepsearch: u32,
    sv599_minkeepcomplsearch: u32,
    sv599_maxkeepcomplsearch: u32,
    sv599_threadcountadd: u32,
    sv599_numblockthreads: u32,
    sv599_scavtimeout: u32,
    sv599_minrcvqueue: u32,
    sv599_minfreeworkitems: u32,
    sv599_xactmemsize: u32,
    sv599_threadpriority: u32,
    sv599_maxmpxct: u32,
    sv599_oplockbreakwait: u32,
    sv599_oplockbreakresponsewait: u32,
    sv599_enableoplocks: BOOL,
    sv599_enableoplockforceclose: BOOL,
    sv599_enablefcbopens: BOOL,
    sv599_enableraw: BOOL,
    sv599_enablesharednetdrives: BOOL,
    sv599_minfreeconnections: u32,
    sv599_maxfreeconnections: u32,
    sv599_initsesstable: u32,
    sv599_initconntable: u32,
    sv599_initfiletable: u32,
    sv599_initsearchtable: u32,
    sv599_alertschedule: u32,
    sv599_errorthreshold: u32,
    sv599_networkerrorthreshold: u32,
    sv599_diskspacethreshold: u32,
    sv599_reserved: u32,
    sv599_maxlinkdelay: u32,
    sv599_minlinkthroughput: u32,
    sv599_linkinfovalidtime: u32,
    sv599_scavqosinfoupdatetime: u32,
    sv599_maxworkitemidletime: u32,
};

pub const SERVER_INFO_598 = extern struct {
    sv598_maxrawworkitems: u32,
    sv598_maxthreadsperqueue: u32,
    sv598_producttype: u32,
    sv598_serversize: u32,
    sv598_connectionlessautodisc: u32,
    sv598_sharingviolationretries: u32,
    sv598_sharingviolationdelay: u32,
    sv598_maxglobalopensearch: u32,
    sv598_removeduplicatesearches: u32,
    sv598_lockviolationoffset: u32,
    sv598_lockviolationdelay: u32,
    sv598_mdlreadswitchover: u32,
    sv598_cachedopenlimit: u32,
    sv598_otherqueueaffinity: u32,
    sv598_restrictnullsessaccess: BOOL,
    sv598_enablewfw311directipx: BOOL,
    sv598_queuesamplesecs: u32,
    sv598_balancecount: u32,
    sv598_preferredaffinity: u32,
    sv598_maxfreerfcbs: u32,
    sv598_maxfreemfcbs: u32,
    sv598_maxfreelfcbs: u32,
    sv598_maxfreepagedpoolchunks: u32,
    sv598_minpagedpoolchunksize: u32,
    sv598_maxpagedpoolchunksize: u32,
    sv598_sendsfrompreferredprocessor: BOOL,
    sv598_cacheddirectorylimit: u32,
    sv598_maxcopylength: u32,
    sv598_enablecompression: BOOL,
    sv598_autosharewks: BOOL,
    sv598_autoshareserver: BOOL,
    sv598_enablesecuritysignature: BOOL,
    sv598_requiresecuritysignature: BOOL,
    sv598_minclientbuffersize: u32,
    sv598_serverguid: Guid,
    sv598_ConnectionNoSessionsTimeout: u32,
    sv598_IdleThreadTimeOut: u32,
    sv598_enableW9xsecuritysignature: BOOL,
    sv598_enforcekerberosreauthentication: BOOL,
    sv598_disabledos: BOOL,
    sv598_lowdiskspaceminimum: u32,
    sv598_disablestrictnamechecking: BOOL,
    sv598_enableauthenticateusersharing: BOOL,
};

pub const SERVER_INFO_1005 = extern struct {
    sv1005_comment: PWSTR,
};

pub const SERVER_INFO_1107 = extern struct {
    sv1107_users: u32,
};

pub const SERVER_INFO_1010 = extern struct {
    sv1010_disc: i32,
};

pub const SERVER_INFO_1016 = extern struct {
    sv1016_hidden: SERVER_INFO_HIDDEN,
};

pub const SERVER_INFO_1017 = extern struct {
    sv1017_announce: u32,
};

pub const SERVER_INFO_1018 = extern struct {
    sv1018_anndelta: u32,
};

pub const SERVER_INFO_1501 = extern struct {
    sv1501_sessopens: u32,
};

pub const SERVER_INFO_1502 = extern struct {
    sv1502_sessvcs: u32,
};

pub const SERVER_INFO_1503 = extern struct {
    sv1503_opensearch: u32,
};

pub const SERVER_INFO_1506 = extern struct {
    sv1506_maxworkitems: u32,
};

pub const SERVER_INFO_1509 = extern struct {
    sv1509_maxrawbuflen: u32,
};

pub const SERVER_INFO_1510 = extern struct {
    sv1510_sessusers: u32,
};

pub const SERVER_INFO_1511 = extern struct {
    sv1511_sessconns: u32,
};

pub const SERVER_INFO_1512 = extern struct {
    sv1512_maxnonpagedmemoryusage: u32,
};

pub const SERVER_INFO_1513 = extern struct {
    sv1513_maxpagedmemoryusage: u32,
};

pub const SERVER_INFO_1514 = extern struct {
    sv1514_enablesoftcompat: BOOL,
};

pub const SERVER_INFO_1515 = extern struct {
    sv1515_enableforcedlogoff: BOOL,
};

pub const SERVER_INFO_1516 = extern struct {
    sv1516_timesource: BOOL,
};

pub const SERVER_INFO_1518 = extern struct {
    sv1518_lmannounce: BOOL,
};

pub const SERVER_INFO_1520 = extern struct {
    sv1520_maxcopyreadlen: u32,
};

pub const SERVER_INFO_1521 = extern struct {
    sv1521_maxcopywritelen: u32,
};

pub const SERVER_INFO_1522 = extern struct {
    sv1522_minkeepsearch: u32,
};

pub const SERVER_INFO_1523 = extern struct {
    sv1523_maxkeepsearch: u32,
};

pub const SERVER_INFO_1524 = extern struct {
    sv1524_minkeepcomplsearch: u32,
};

pub const SERVER_INFO_1525 = extern struct {
    sv1525_maxkeepcomplsearch: u32,
};

pub const SERVER_INFO_1528 = extern struct {
    sv1528_scavtimeout: u32,
};

pub const SERVER_INFO_1529 = extern struct {
    sv1529_minrcvqueue: u32,
};

pub const SERVER_INFO_1530 = extern struct {
    sv1530_minfreeworkitems: u32,
};

pub const SERVER_INFO_1533 = extern struct {
    sv1533_maxmpxct: u32,
};

pub const SERVER_INFO_1534 = extern struct {
    sv1534_oplockbreakwait: u32,
};

pub const SERVER_INFO_1535 = extern struct {
    sv1535_oplockbreakresponsewait: u32,
};

pub const SERVER_INFO_1536 = extern struct {
    sv1536_enableoplocks: BOOL,
};

pub const SERVER_INFO_1537 = extern struct {
    sv1537_enableoplockforceclose: BOOL,
};

pub const SERVER_INFO_1538 = extern struct {
    sv1538_enablefcbopens: BOOL,
};

pub const SERVER_INFO_1539 = extern struct {
    sv1539_enableraw: BOOL,
};

pub const SERVER_INFO_1540 = extern struct {
    sv1540_enablesharednetdrives: BOOL,
};

pub const SERVER_INFO_1541 = extern struct {
    sv1541_minfreeconnections: BOOL,
};

pub const SERVER_INFO_1542 = extern struct {
    sv1542_maxfreeconnections: BOOL,
};

pub const SERVER_INFO_1543 = extern struct {
    sv1543_initsesstable: u32,
};

pub const SERVER_INFO_1544 = extern struct {
    sv1544_initconntable: u32,
};

pub const SERVER_INFO_1545 = extern struct {
    sv1545_initfiletable: u32,
};

pub const SERVER_INFO_1546 = extern struct {
    sv1546_initsearchtable: u32,
};

pub const SERVER_INFO_1547 = extern struct {
    sv1547_alertschedule: u32,
};

pub const SERVER_INFO_1548 = extern struct {
    sv1548_errorthreshold: u32,
};

pub const SERVER_INFO_1549 = extern struct {
    sv1549_networkerrorthreshold: u32,
};

pub const SERVER_INFO_1550 = extern struct {
    sv1550_diskspacethreshold: u32,
};

pub const SERVER_INFO_1552 = extern struct {
    sv1552_maxlinkdelay: u32,
};

pub const SERVER_INFO_1553 = extern struct {
    sv1553_minlinkthroughput: u32,
};

pub const SERVER_INFO_1554 = extern struct {
    sv1554_linkinfovalidtime: u32,
};

pub const SERVER_INFO_1555 = extern struct {
    sv1555_scavqosinfoupdatetime: u32,
};

pub const SERVER_INFO_1556 = extern struct {
    sv1556_maxworkitemidletime: u32,
};

pub const SERVER_INFO_1557 = extern struct {
    sv1557_maxrawworkitems: u32,
};

pub const SERVER_INFO_1560 = extern struct {
    sv1560_producttype: u32,
};

pub const SERVER_INFO_1561 = extern struct {
    sv1561_serversize: u32,
};

pub const SERVER_INFO_1562 = extern struct {
    sv1562_connectionlessautodisc: u32,
};

pub const SERVER_INFO_1563 = extern struct {
    sv1563_sharingviolationretries: u32,
};

pub const SERVER_INFO_1564 = extern struct {
    sv1564_sharingviolationdelay: u32,
};

pub const SERVER_INFO_1565 = extern struct {
    sv1565_maxglobalopensearch: u32,
};

pub const SERVER_INFO_1566 = extern struct {
    sv1566_removeduplicatesearches: BOOL,
};

pub const SERVER_INFO_1567 = extern struct {
    sv1567_lockviolationretries: u32,
};

pub const SERVER_INFO_1568 = extern struct {
    sv1568_lockviolationoffset: u32,
};

pub const SERVER_INFO_1569 = extern struct {
    sv1569_lockviolationdelay: u32,
};

pub const SERVER_INFO_1570 = extern struct {
    sv1570_mdlreadswitchover: u32,
};

pub const SERVER_INFO_1571 = extern struct {
    sv1571_cachedopenlimit: u32,
};

pub const SERVER_INFO_1572 = extern struct {
    sv1572_criticalthreads: u32,
};

pub const SERVER_INFO_1573 = extern struct {
    sv1573_restrictnullsessaccess: u32,
};

pub const SERVER_INFO_1574 = extern struct {
    sv1574_enablewfw311directipx: u32,
};

pub const SERVER_INFO_1575 = extern struct {
    sv1575_otherqueueaffinity: u32,
};

pub const SERVER_INFO_1576 = extern struct {
    sv1576_queuesamplesecs: u32,
};

pub const SERVER_INFO_1577 = extern struct {
    sv1577_balancecount: u32,
};

pub const SERVER_INFO_1578 = extern struct {
    sv1578_preferredaffinity: u32,
};

pub const SERVER_INFO_1579 = extern struct {
    sv1579_maxfreerfcbs: u32,
};

pub const SERVER_INFO_1580 = extern struct {
    sv1580_maxfreemfcbs: u32,
};

pub const SERVER_INFO_1581 = extern struct {
    sv1581_maxfreemlcbs: u32,
};

pub const SERVER_INFO_1582 = extern struct {
    sv1582_maxfreepagedpoolchunks: u32,
};

pub const SERVER_INFO_1583 = extern struct {
    sv1583_minpagedpoolchunksize: u32,
};

pub const SERVER_INFO_1584 = extern struct {
    sv1584_maxpagedpoolchunksize: u32,
};

pub const SERVER_INFO_1585 = extern struct {
    sv1585_sendsfrompreferredprocessor: BOOL,
};

pub const SERVER_INFO_1586 = extern struct {
    sv1586_maxthreadsperqueue: u32,
};

pub const SERVER_INFO_1587 = extern struct {
    sv1587_cacheddirectorylimit: u32,
};

pub const SERVER_INFO_1588 = extern struct {
    sv1588_maxcopylength: u32,
};

pub const SERVER_INFO_1590 = extern struct {
    sv1590_enablecompression: u32,
};

pub const SERVER_INFO_1591 = extern struct {
    sv1591_autosharewks: u32,
};

pub const SERVER_INFO_1592 = extern struct {
    sv1592_autosharewks: u32,
};

pub const SERVER_INFO_1593 = extern struct {
    sv1593_enablesecuritysignature: u32,
};

pub const SERVER_INFO_1594 = extern struct {
    sv1594_requiresecuritysignature: u32,
};

pub const SERVER_INFO_1595 = extern struct {
    sv1595_minclientbuffersize: u32,
};

pub const SERVER_INFO_1596 = extern struct {
    sv1596_ConnectionNoSessionsTimeout: u32,
};

pub const SERVER_INFO_1597 = extern struct {
    sv1597_IdleThreadTimeOut: u32,
};

pub const SERVER_INFO_1598 = extern struct {
    sv1598_enableW9xsecuritysignature: u32,
};

pub const SERVER_INFO_1599 = extern struct {
    sv1598_enforcekerberosreauthentication: u8,
};

pub const SERVER_INFO_1600 = extern struct {
    sv1598_disabledos: u8,
};

pub const SERVER_INFO_1601 = extern struct {
    sv1598_lowdiskspaceminimum: u32,
};

pub const SERVER_INFO_1602 = extern struct {
    sv_1598_disablestrictnamechecking: BOOL,
};

pub const SERVER_TRANSPORT_INFO_0 = extern struct {
    svti0_numberofvcs: u32,
    svti0_transportname: PWSTR,
    svti0_transportaddress: *u8,
    svti0_transportaddresslength: u32,
    svti0_networkaddress: PWSTR,
};

pub const SERVER_TRANSPORT_INFO_1 = extern struct {
    svti1_numberofvcs: u32,
    svti1_transportname: PWSTR,
    svti1_transportaddress: *u8,
    svti1_transportaddresslength: u32,
    svti1_networkaddress: PWSTR,
    svti1_domain: PWSTR,
};

pub const SERVER_TRANSPORT_INFO_2 = extern struct {
    svti2_numberofvcs: u32,
    svti2_transportname: PWSTR,
    svti2_transportaddress: *u8,
    svti2_transportaddresslength: u32,
    svti2_networkaddress: PWSTR,
    svti2_domain: PWSTR,
    svti2_flags: u32,
};

pub const SERVER_TRANSPORT_INFO_3 = extern struct {
    svti3_numberofvcs: u32,
    svti3_transportname: PWSTR,
    svti3_transportaddress: *u8,
    svti3_transportaddresslength: u32,
    svti3_networkaddress: PWSTR,
    svti3_domain: PWSTR,
    svti3_flags: u32,
    svti3_passwordlength: u32,
    svti3_password: [256]u8,
};

pub const SERVICE_INFO_0 = extern struct {
    svci0_name: PWSTR,
};

pub const SERVICE_INFO_1 = extern struct {
    svci1_name: PWSTR,
    svci1_status: u32,
    svci1_code: u32,
    svci1_pid: u32,
};

pub const SERVICE_INFO_2 = extern struct {
    svci2_name: PWSTR,
    svci2_status: u32,
    svci2_code: u32,
    svci2_pid: u32,
    svci2_text: PWSTR,
    svci2_specific_error: u32,
    svci2_display_name: PWSTR,
};

pub const USE_INFO_0 = extern struct {
    ui0_local: PWSTR,
    ui0_remote: PWSTR,
};

pub const USE_INFO_1 = extern struct {
    ui1_local: PWSTR,
    ui1_remote: PWSTR,
    ui1_password: PWSTR,
    ui1_status: u32,
    ui1_asg_type: USE_INFO_ASG_TYPE,
    ui1_refcount: u32,
    ui1_usecount: u32,
};

pub const USE_INFO_2 = extern struct {
    ui2_local: PWSTR,
    ui2_remote: PWSTR,
    ui2_password: PWSTR,
    ui2_status: u32,
    ui2_asg_type: USE_INFO_ASG_TYPE,
    ui2_refcount: u32,
    ui2_usecount: u32,
    ui2_username: PWSTR,
    ui2_domainname: PWSTR,
};

pub const USE_INFO_3 = extern struct {
    ui3_ui2: USE_INFO_2,
    ui3_flags: u32,
};

pub const USE_INFO_4 = extern struct {
    ui4_ui3: USE_INFO_3,
    ui4_auth_identity_length: u32,
    ui4_auth_identity: *u8,
};

pub const USE_INFO_5 = extern struct {
    ui4_ui3: USE_INFO_3,
    ui4_auth_identity_length: u32,
    ui4_auth_identity: *u8,
    ui5_security_descriptor_length: u32,
    ui5_security_descriptor: *u8,
    ui5_use_options_length: u32,
    ui5_use_options: *u8,
};

pub const USE_OPTION_GENERIC = extern struct {
    Tag: u32,
    Length: u16,
    Reserved: u16,
};

pub const USE_OPTION_DEFERRED_CONNECTION_PARAMETERS = extern struct {
    Tag: u32,
    Length: u16,
    Reserved: u16,
};

pub const TRANSPORT_TYPE = extern enum(i32) {
    None = 0,
    Wsk = 1,
    Quic = 2,
};
pub const UseTransportType_None = TRANSPORT_TYPE.None;
pub const UseTransportType_Wsk = TRANSPORT_TYPE.Wsk;
pub const UseTransportType_Quic = TRANSPORT_TYPE.Quic;

pub const TRANSPORT_INFO = extern struct {
    Type: TRANSPORT_TYPE,
};

pub const USE_OPTION_TRANSPORT_PARAMETERS = extern struct {
    Tag: u32,
    Length: u16,
    Reserved: u16,
};

pub const WKSTA_INFO_100 = extern struct {
    wki100_platform_id: u32,
    wki100_computername: PWSTR,
    wki100_langroup: PWSTR,
    wki100_ver_major: u32,
    wki100_ver_minor: u32,
};

pub const WKSTA_INFO_101 = extern struct {
    wki101_platform_id: u32,
    wki101_computername: PWSTR,
    wki101_langroup: PWSTR,
    wki101_ver_major: u32,
    wki101_ver_minor: u32,
    wki101_lanroot: PWSTR,
};

pub const WKSTA_INFO_102 = extern struct {
    wki102_platform_id: u32,
    wki102_computername: PWSTR,
    wki102_langroup: PWSTR,
    wki102_ver_major: u32,
    wki102_ver_minor: u32,
    wki102_lanroot: PWSTR,
    wki102_logged_on_users: u32,
};

pub const WKSTA_INFO_302 = extern struct {
    wki302_char_wait: u32,
    wki302_collection_time: u32,
    wki302_maximum_collection_count: u32,
    wki302_keep_conn: u32,
    wki302_keep_search: u32,
    wki302_max_cmds: u32,
    wki302_num_work_buf: u32,
    wki302_siz_work_buf: u32,
    wki302_max_wrk_cache: u32,
    wki302_sess_timeout: u32,
    wki302_siz_error: u32,
    wki302_num_alerts: u32,
    wki302_num_services: u32,
    wki302_errlog_sz: u32,
    wki302_print_buf_time: u32,
    wki302_num_char_buf: u32,
    wki302_siz_char_buf: u32,
    wki302_wrk_heuristics: PWSTR,
    wki302_mailslots: u32,
    wki302_num_dgram_buf: u32,
};

pub const WKSTA_INFO_402 = extern struct {
    wki402_char_wait: u32,
    wki402_collection_time: u32,
    wki402_maximum_collection_count: u32,
    wki402_keep_conn: u32,
    wki402_keep_search: u32,
    wki402_max_cmds: u32,
    wki402_num_work_buf: u32,
    wki402_siz_work_buf: u32,
    wki402_max_wrk_cache: u32,
    wki402_sess_timeout: u32,
    wki402_siz_error: u32,
    wki402_num_alerts: u32,
    wki402_num_services: u32,
    wki402_errlog_sz: u32,
    wki402_print_buf_time: u32,
    wki402_num_char_buf: u32,
    wki402_siz_char_buf: u32,
    wki402_wrk_heuristics: PWSTR,
    wki402_mailslots: u32,
    wki402_num_dgram_buf: u32,
    wki402_max_threads: u32,
};

pub const WKSTA_INFO_502 = extern struct {
    wki502_char_wait: u32,
    wki502_collection_time: u32,
    wki502_maximum_collection_count: u32,
    wki502_keep_conn: u32,
    wki502_max_cmds: u32,
    wki502_sess_timeout: u32,
    wki502_siz_char_buf: u32,
    wki502_max_threads: u32,
    wki502_lock_quota: u32,
    wki502_lock_increment: u32,
    wki502_lock_maximum: u32,
    wki502_pipe_increment: u32,
    wki502_pipe_maximum: u32,
    wki502_cache_file_timeout: u32,
    wki502_dormant_file_limit: u32,
    wki502_read_ahead_throughput: u32,
    wki502_num_mailslot_buffers: u32,
    wki502_num_srv_announce_buffers: u32,
    wki502_max_illegal_datagram_events: u32,
    wki502_illegal_datagram_event_reset_frequency: u32,
    wki502_log_election_packets: BOOL,
    wki502_use_opportunistic_locking: BOOL,
    wki502_use_unlock_behind: BOOL,
    wki502_use_close_behind: BOOL,
    wki502_buf_named_pipes: BOOL,
    wki502_use_lock_read_unlock: BOOL,
    wki502_utilize_nt_caching: BOOL,
    wki502_use_raw_read: BOOL,
    wki502_use_raw_write: BOOL,
    wki502_use_write_raw_data: BOOL,
    wki502_use_encryption: BOOL,
    wki502_buf_files_deny_write: BOOL,
    wki502_buf_read_only_files: BOOL,
    wki502_force_core_create_mode: BOOL,
    wki502_use_512_byte_max_transfer: BOOL,
};

pub const WKSTA_INFO_1010 = extern struct {
    wki1010_char_wait: u32,
};

pub const WKSTA_INFO_1011 = extern struct {
    wki1011_collection_time: u32,
};

pub const WKSTA_INFO_1012 = extern struct {
    wki1012_maximum_collection_count: u32,
};

pub const WKSTA_INFO_1027 = extern struct {
    wki1027_errlog_sz: u32,
};

pub const WKSTA_INFO_1028 = extern struct {
    wki1028_print_buf_time: u32,
};

pub const WKSTA_INFO_1032 = extern struct {
    wki1032_wrk_heuristics: u32,
};

pub const WKSTA_INFO_1013 = extern struct {
    wki1013_keep_conn: u32,
};

pub const WKSTA_INFO_1018 = extern struct {
    wki1018_sess_timeout: u32,
};

pub const WKSTA_INFO_1023 = extern struct {
    wki1023_siz_char_buf: u32,
};

pub const WKSTA_INFO_1033 = extern struct {
    wki1033_max_threads: u32,
};

pub const WKSTA_INFO_1041 = extern struct {
    wki1041_lock_quota: u32,
};

pub const WKSTA_INFO_1042 = extern struct {
    wki1042_lock_increment: u32,
};

pub const WKSTA_INFO_1043 = extern struct {
    wki1043_lock_maximum: u32,
};

pub const WKSTA_INFO_1044 = extern struct {
    wki1044_pipe_increment: u32,
};

pub const WKSTA_INFO_1045 = extern struct {
    wki1045_pipe_maximum: u32,
};

pub const WKSTA_INFO_1046 = extern struct {
    wki1046_dormant_file_limit: u32,
};

pub const WKSTA_INFO_1047 = extern struct {
    wki1047_cache_file_timeout: u32,
};

pub const WKSTA_INFO_1048 = extern struct {
    wki1048_use_opportunistic_locking: BOOL,
};

pub const WKSTA_INFO_1049 = extern struct {
    wki1049_use_unlock_behind: BOOL,
};

pub const WKSTA_INFO_1050 = extern struct {
    wki1050_use_close_behind: BOOL,
};

pub const WKSTA_INFO_1051 = extern struct {
    wki1051_buf_named_pipes: BOOL,
};

pub const WKSTA_INFO_1052 = extern struct {
    wki1052_use_lock_read_unlock: BOOL,
};

pub const WKSTA_INFO_1053 = extern struct {
    wki1053_utilize_nt_caching: BOOL,
};

pub const WKSTA_INFO_1054 = extern struct {
    wki1054_use_raw_read: BOOL,
};

pub const WKSTA_INFO_1055 = extern struct {
    wki1055_use_raw_write: BOOL,
};

pub const WKSTA_INFO_1056 = extern struct {
    wki1056_use_write_raw_data: BOOL,
};

pub const WKSTA_INFO_1057 = extern struct {
    wki1057_use_encryption: BOOL,
};

pub const WKSTA_INFO_1058 = extern struct {
    wki1058_buf_files_deny_write: BOOL,
};

pub const WKSTA_INFO_1059 = extern struct {
    wki1059_buf_read_only_files: BOOL,
};

pub const WKSTA_INFO_1060 = extern struct {
    wki1060_force_core_create_mode: BOOL,
};

pub const WKSTA_INFO_1061 = extern struct {
    wki1061_use_512_byte_max_transfer: BOOL,
};

pub const WKSTA_INFO_1062 = extern struct {
    wki1062_read_ahead_throughput: u32,
};

pub const WKSTA_USER_INFO_0 = extern struct {
    wkui0_username: PWSTR,
};

pub const WKSTA_USER_INFO_1 = extern struct {
    wkui1_username: PWSTR,
    wkui1_logon_domain: PWSTR,
    wkui1_oth_domains: PWSTR,
    wkui1_logon_server: PWSTR,
};

pub const WKSTA_USER_INFO_1101 = extern struct {
    wkui1101_oth_domains: PWSTR,
};

pub const WKSTA_TRANSPORT_INFO_0 = extern struct {
    wkti0_quality_of_service: u32,
    wkti0_number_of_vcs: u32,
    wkti0_transport_name: PWSTR,
    wkti0_transport_address: PWSTR,
    wkti0_wan_ish: BOOL,
};

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const NET_REQUEST_PROVISION_OPTIONS = extern enum(u32) {
    R = 1073741824,
    _,
};
pub const NETSETUP_PROVISION_ONLINE_CALLER = NET_REQUEST_PROVISION_OPTIONS.R;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const NET_JOIN_DOMAIN_JOIN_OPTIONS = extern enum(u32) {
    JOIN_DOMAIN = 1,
    ACCT_CREATE = 2,
    WIN9X_UPGRADE = 16,
    DOMAIN_JOIN_IF_JOINED = 32,
    JOIN_UNSECURE = 64,
    MACHINE_PWD_PASSED = 128,
    DEFER_SPN_SET = 256,
    JOIN_DC_ACCOUNT = 512,
    JOIN_WITH_NEW_NAME = 1024,
    JOIN_READONLY = 2048,
    AMBIGUOUS_DC = 4096,
    NO_NETLOGON_CACHE = 8192,
    DONT_CONTROL_SERVICES = 16384,
    SET_MACHINE_NAME = 32768,
    FORCE_SPN_SET = 65536,
    NO_ACCT_REUSE = 131072,
    IGNORE_UNSUPPORTED_FLAGS = 268435456,
    _,
};
pub const NETSETUP_JOIN_DOMAIN = NET_JOIN_DOMAIN_JOIN_OPTIONS.JOIN_DOMAIN;
pub const NETSETUP_ACCT_CREATE = NET_JOIN_DOMAIN_JOIN_OPTIONS.ACCT_CREATE;
pub const NETSETUP_WIN9X_UPGRADE = NET_JOIN_DOMAIN_JOIN_OPTIONS.WIN9X_UPGRADE;
pub const NETSETUP_DOMAIN_JOIN_IF_JOINED = NET_JOIN_DOMAIN_JOIN_OPTIONS.DOMAIN_JOIN_IF_JOINED;
pub const NETSETUP_JOIN_UNSECURE = NET_JOIN_DOMAIN_JOIN_OPTIONS.JOIN_UNSECURE;
pub const NETSETUP_MACHINE_PWD_PASSED = NET_JOIN_DOMAIN_JOIN_OPTIONS.MACHINE_PWD_PASSED;
pub const NETSETUP_DEFER_SPN_SET = NET_JOIN_DOMAIN_JOIN_OPTIONS.DEFER_SPN_SET;
pub const NETSETUP_JOIN_DC_ACCOUNT = NET_JOIN_DOMAIN_JOIN_OPTIONS.JOIN_DC_ACCOUNT;
pub const NETSETUP_JOIN_WITH_NEW_NAME = NET_JOIN_DOMAIN_JOIN_OPTIONS.JOIN_WITH_NEW_NAME;
pub const NETSETUP_JOIN_READONLY = NET_JOIN_DOMAIN_JOIN_OPTIONS.JOIN_READONLY;
pub const NETSETUP_AMBIGUOUS_DC = NET_JOIN_DOMAIN_JOIN_OPTIONS.AMBIGUOUS_DC;
pub const NETSETUP_NO_NETLOGON_CACHE = NET_JOIN_DOMAIN_JOIN_OPTIONS.NO_NETLOGON_CACHE;
pub const NETSETUP_DONT_CONTROL_SERVICES = NET_JOIN_DOMAIN_JOIN_OPTIONS.DONT_CONTROL_SERVICES;
pub const NETSETUP_SET_MACHINE_NAME = NET_JOIN_DOMAIN_JOIN_OPTIONS.SET_MACHINE_NAME;
pub const NETSETUP_FORCE_SPN_SET = NET_JOIN_DOMAIN_JOIN_OPTIONS.FORCE_SPN_SET;
pub const NETSETUP_NO_ACCT_REUSE = NET_JOIN_DOMAIN_JOIN_OPTIONS.NO_ACCT_REUSE;
pub const NETSETUP_IGNORE_UNSUPPORTED_FLAGS = NET_JOIN_DOMAIN_JOIN_OPTIONS.IGNORE_UNSUPPORTED_FLAGS;

pub const NET_REMOTE_COMPUTER_SUPPORTS_OPTIONS = extern enum(i32) {
    REMOTE_ADMIN_PROTOCOL = 2,
    RPC = 4,
    SAM_PROTOCOL = 8,
    UNICODE = 16,
    LOCAL = 32,
};
pub const SUPPORTS_REMOTE_ADMIN_PROTOCOL = NET_REMOTE_COMPUTER_SUPPORTS_OPTIONS.REMOTE_ADMIN_PROTOCOL;
pub const SUPPORTS_RPC = NET_REMOTE_COMPUTER_SUPPORTS_OPTIONS.RPC;
pub const SUPPORTS_SAM_PROTOCOL = NET_REMOTE_COMPUTER_SUPPORTS_OPTIONS.SAM_PROTOCOL;
pub const SUPPORTS_UNICODE = NET_REMOTE_COMPUTER_SUPPORTS_OPTIONS.UNICODE;
pub const SUPPORTS_LOCAL = NET_REMOTE_COMPUTER_SUPPORTS_OPTIONS.LOCAL;

pub const FORCE_LEVEL_FLAGS = extern enum(u32) {
    NOFORCE = 0,
    FORCE = 1,
    LOTS_OF_FORCE = 2,
};
pub const USE_NOFORCE = FORCE_LEVEL_FLAGS.NOFORCE;
pub const USE_FORCE = FORCE_LEVEL_FLAGS.FORCE;
pub const USE_LOTS_OF_FORCE = FORCE_LEVEL_FLAGS.LOTS_OF_FORCE;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const NET_SERVER_TYPE = extern enum(u32) {
    WORKSTATION = 1,
    SERVER = 2,
    SQLSERVER = 4,
    DOMAIN_CTRL = 8,
    DOMAIN_BAKCTRL = 16,
    TIME_SOURCE = 32,
    AFP = 64,
    NOVELL = 128,
    DOMAIN_MEMBER = 256,
    PRINTQ_SERVER = 512,
    DIALIN_SERVER = 1024,
    XENIX_SERVER = 2048,
    SERVER_UNIX = 2048,
    NT = 4096,
    WFW = 8192,
    SERVER_MFPN = 16384,
    SERVER_NT = 32768,
    POTENTIAL_BROWSER = 65536,
    BACKUP_BROWSER = 131072,
    MASTER_BROWSER = 262144,
    DOMAIN_MASTER = 524288,
    SERVER_OSF = 1048576,
    SERVER_VMS = 2097152,
    WINDOWS = 4194304,
    DFS = 8388608,
    CLUSTER_NT = 16777216,
    TERMINALSERVER = 33554432,
    CLUSTER_VS_NT = 67108864,
    DCE = 268435456,
    ALTERNATE_XPORT = 536870912,
    LOCAL_LIST_ONLY = 1073741824,
    DOMAIN_ENUM = 2147483648,
    ALL = 4294967295,
    _,
};
pub const SV_TYPE_WORKSTATION = NET_SERVER_TYPE.WORKSTATION;
pub const SV_TYPE_SERVER = NET_SERVER_TYPE.SERVER;
pub const SV_TYPE_SQLSERVER = NET_SERVER_TYPE.SQLSERVER;
pub const SV_TYPE_DOMAIN_CTRL = NET_SERVER_TYPE.DOMAIN_CTRL;
pub const SV_TYPE_DOMAIN_BAKCTRL = NET_SERVER_TYPE.DOMAIN_BAKCTRL;
pub const SV_TYPE_TIME_SOURCE = NET_SERVER_TYPE.TIME_SOURCE;
pub const SV_TYPE_AFP = NET_SERVER_TYPE.AFP;
pub const SV_TYPE_NOVELL = NET_SERVER_TYPE.NOVELL;
pub const SV_TYPE_DOMAIN_MEMBER = NET_SERVER_TYPE.DOMAIN_MEMBER;
pub const SV_TYPE_PRINTQ_SERVER = NET_SERVER_TYPE.PRINTQ_SERVER;
pub const SV_TYPE_DIALIN_SERVER = NET_SERVER_TYPE.DIALIN_SERVER;
pub const SV_TYPE_XENIX_SERVER = NET_SERVER_TYPE.XENIX_SERVER;
pub const SV_TYPE_SERVER_UNIX = NET_SERVER_TYPE.SERVER_UNIX;
pub const SV_TYPE_NT = NET_SERVER_TYPE.NT;
pub const SV_TYPE_WFW = NET_SERVER_TYPE.WFW;
pub const SV_TYPE_SERVER_MFPN = NET_SERVER_TYPE.SERVER_MFPN;
pub const SV_TYPE_SERVER_NT = NET_SERVER_TYPE.SERVER_NT;
pub const SV_TYPE_POTENTIAL_BROWSER = NET_SERVER_TYPE.POTENTIAL_BROWSER;
pub const SV_TYPE_BACKUP_BROWSER = NET_SERVER_TYPE.BACKUP_BROWSER;
pub const SV_TYPE_MASTER_BROWSER = NET_SERVER_TYPE.MASTER_BROWSER;
pub const SV_TYPE_DOMAIN_MASTER = NET_SERVER_TYPE.DOMAIN_MASTER;
pub const SV_TYPE_SERVER_OSF = NET_SERVER_TYPE.SERVER_OSF;
pub const SV_TYPE_SERVER_VMS = NET_SERVER_TYPE.SERVER_VMS;
pub const SV_TYPE_WINDOWS = NET_SERVER_TYPE.WINDOWS;
pub const SV_TYPE_DFS = NET_SERVER_TYPE.DFS;
pub const SV_TYPE_CLUSTER_NT = NET_SERVER_TYPE.CLUSTER_NT;
pub const SV_TYPE_TERMINALSERVER = NET_SERVER_TYPE.TERMINALSERVER;
pub const SV_TYPE_CLUSTER_VS_NT = NET_SERVER_TYPE.CLUSTER_VS_NT;
pub const SV_TYPE_DCE = NET_SERVER_TYPE.DCE;
pub const SV_TYPE_ALTERNATE_XPORT = NET_SERVER_TYPE.ALTERNATE_XPORT;
pub const SV_TYPE_LOCAL_LIST_ONLY = NET_SERVER_TYPE.LOCAL_LIST_ONLY;
pub const SV_TYPE_DOMAIN_ENUM = NET_SERVER_TYPE.DOMAIN_ENUM;
pub const SV_TYPE_ALL = NET_SERVER_TYPE.ALL;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const NET_USER_ENUM_FILTER_FLAGS = extern enum(u32) {
    TEMP_DUPLICATE_ACCOUNT = 1,
    NORMAL_ACCOUNT = 2,
    INTERDOMAIN_TRUST_ACCOUNT = 8,
    WORKSTATION_TRUST_ACCOUNT = 16,
    SERVER_TRUST_ACCOUNT = 32,
    _,
};
pub const FILTER_TEMP_DUPLICATE_ACCOUNT = NET_USER_ENUM_FILTER_FLAGS.TEMP_DUPLICATE_ACCOUNT;
pub const FILTER_NORMAL_ACCOUNT = NET_USER_ENUM_FILTER_FLAGS.NORMAL_ACCOUNT;
pub const FILTER_INTERDOMAIN_TRUST_ACCOUNT = NET_USER_ENUM_FILTER_FLAGS.INTERDOMAIN_TRUST_ACCOUNT;
pub const FILTER_WORKSTATION_TRUST_ACCOUNT = NET_USER_ENUM_FILTER_FLAGS.WORKSTATION_TRUST_ACCOUNT;
pub const FILTER_SERVER_TRUST_ACCOUNT = NET_USER_ENUM_FILTER_FLAGS.SERVER_TRUST_ACCOUNT;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const NETSETUP_PROVISION = extern enum(u32) {
    DOWNLEVEL_PRIV_SUPPORT = 1,
    REUSE_ACCOUNT = 2,
    USE_DEFAULT_PASSWORD = 4,
    SKIP_ACCOUNT_SEARCH = 8,
    ROOT_CA_CERTS = 16,
    _,
};
pub const NETSETUP_PROVISION_DOWNLEVEL_PRIV_SUPPORT = NETSETUP_PROVISION.DOWNLEVEL_PRIV_SUPPORT;
pub const NETSETUP_PROVISION_REUSE_ACCOUNT = NETSETUP_PROVISION.REUSE_ACCOUNT;
pub const NETSETUP_PROVISION_USE_DEFAULT_PASSWORD = NETSETUP_PROVISION.USE_DEFAULT_PASSWORD;
pub const NETSETUP_PROVISION_SKIP_ACCOUNT_SEARCH = NETSETUP_PROVISION.SKIP_ACCOUNT_SEARCH;
pub const NETSETUP_PROVISION_ROOT_CA_CERTS = NETSETUP_PROVISION.ROOT_CA_CERTS;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const USER_ACCOUNT_FLAGS = extern enum(u32) {
    SCRIPT = 1,
    ACCOUNTDISABLE = 2,
    HOMEDIR_REQUIRED = 8,
    PASSWD_NOTREQD = 32,
    PASSWD_CANT_CHANGE = 64,
    LOCKOUT = 16,
    DONT_EXPIRE_PASSWD = 65536,
    ENCRYPTED_TEXT_PASSWORD_ALLOWED = 128,
    NOT_DELEGATED = 1048576,
    SMARTCARD_REQUIRED = 262144,
    USE_DES_KEY_ONLY = 2097152,
    DONT_REQUIRE_PREAUTH = 4194304,
    TRUSTED_FOR_DELEGATION = 524288,
    PASSWORD_EXPIRED = 8388608,
    TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION = 16777216,
    _,
};
pub const UF_SCRIPT = USER_ACCOUNT_FLAGS.SCRIPT;
pub const UF_ACCOUNTDISABLE = USER_ACCOUNT_FLAGS.ACCOUNTDISABLE;
pub const UF_HOMEDIR_REQUIRED = USER_ACCOUNT_FLAGS.HOMEDIR_REQUIRED;
pub const UF_PASSWD_NOTREQD = USER_ACCOUNT_FLAGS.PASSWD_NOTREQD;
pub const UF_PASSWD_CANT_CHANGE = USER_ACCOUNT_FLAGS.PASSWD_CANT_CHANGE;
pub const UF_LOCKOUT = USER_ACCOUNT_FLAGS.LOCKOUT;
pub const UF_DONT_EXPIRE_PASSWD = USER_ACCOUNT_FLAGS.DONT_EXPIRE_PASSWD;
pub const UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED = USER_ACCOUNT_FLAGS.ENCRYPTED_TEXT_PASSWORD_ALLOWED;
pub const UF_NOT_DELEGATED = USER_ACCOUNT_FLAGS.NOT_DELEGATED;
pub const UF_SMARTCARD_REQUIRED = USER_ACCOUNT_FLAGS.SMARTCARD_REQUIRED;
pub const UF_USE_DES_KEY_ONLY = USER_ACCOUNT_FLAGS.USE_DES_KEY_ONLY;
pub const UF_DONT_REQUIRE_PREAUTH = USER_ACCOUNT_FLAGS.DONT_REQUIRE_PREAUTH;
pub const UF_TRUSTED_FOR_DELEGATION = USER_ACCOUNT_FLAGS.TRUSTED_FOR_DELEGATION;
pub const UF_PASSWORD_EXPIRED = USER_ACCOUNT_FLAGS.PASSWORD_EXPIRED;
pub const UF_TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION = USER_ACCOUNT_FLAGS.TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const AF_OP = extern enum(u32) {
    PRINT = 1,
    COMM = 2,
    SERVER = 4,
    ACCOUNTS = 8,
    _,
};
pub const AF_OP_PRINT = AF_OP.PRINT;
pub const AF_OP_COMM = AF_OP.COMM;
pub const AF_OP_SERVER = AF_OP.SERVER;
pub const AF_OP_ACCOUNTS = AF_OP.ACCOUNTS;

pub const SERVER_INFO_SECURITY = extern enum(u32) {
    SHARESECURITY = 0,
    USERSECURITY = 1,
};
pub const SV_SHARESECURITY = SERVER_INFO_SECURITY.SHARESECURITY;
pub const SV_USERSECURITY = SERVER_INFO_SECURITY.USERSECURITY;

pub const USER_PRIV = extern enum(u32) {
    GUEST = 0,
    USER = 1,
    ADMIN = 2,
};
pub const USER_PRIV_GUEST = USER_PRIV.GUEST;
pub const USER_PRIV_USER = USER_PRIV.USER;
pub const USER_PRIV_ADMIN = USER_PRIV.ADMIN;

pub const USE_INFO_ASG_TYPE = extern enum(u32) {
    WILDCARD = 4294967295,
    DISKDEV = 0,
    SPOOLDEV = 1,
    IPC = 3,
};
pub const USE_WILDCARD = USE_INFO_ASG_TYPE.WILDCARD;
pub const USE_DISKDEV = USE_INFO_ASG_TYPE.DISKDEV;
pub const USE_SPOOLDEV = USE_INFO_ASG_TYPE.SPOOLDEV;
pub const USE_IPC = USE_INFO_ASG_TYPE.IPC;

pub const SERVER_INFO_HIDDEN = extern enum(u32) {
    VISIBLE = 0,
    HIDDEN = 1,
};
pub const SV_VISIBLE = SERVER_INFO_HIDDEN.VISIBLE;
pub const SV_HIDDEN = SERVER_INFO_HIDDEN.HIDDEN;

pub const USER_MODALS_ROLES = extern enum(u32) {
    STANDALONE = 0,
    MEMBER = 1,
    BACKUP = 2,
    PRIMARY = 3,
};
pub const UAS_ROLE_STANDALONE = USER_MODALS_ROLES.STANDALONE;
pub const UAS_ROLE_MEMBER = USER_MODALS_ROLES.MEMBER;
pub const UAS_ROLE_BACKUP = USER_MODALS_ROLES.BACKUP;
pub const UAS_ROLE_PRIMARY = USER_MODALS_ROLES.PRIMARY;


//--------------------------------------------------------------------------------
// Section: Functions (113)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows5.0'
pub extern "samcli" fn NetUserAdd(
    servername: ?[*:0]const u16,
    level: u32,
    buf: *u8,
    parm_err: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "samcli" fn NetUserEnum(
    servername: ?[*:0]const u16,
    level: u32,
    filter: NET_USER_ENUM_FILTER_FLAGS,
    bufptr: **u8,
    prefmaxlen: u32,
    entriesread: *u32,
    totalentries: *u32,
    resume_handle: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "samcli" fn NetUserGetInfo(
    servername: ?[*:0]const u16,
    username: [*:0]const u16,
    level: u32,
    bufptr: **u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "samcli" fn NetUserSetInfo(
    servername: ?[*:0]const u16,
    username: [*:0]const u16,
    level: u32,
    buf: *u8,
    parm_err: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "samcli" fn NetUserDel(
    servername: ?[*:0]const u16,
    username: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "samcli" fn NetUserGetGroups(
    servername: ?[*:0]const u16,
    username: [*:0]const u16,
    level: u32,
    bufptr: **u8,
    prefmaxlen: u32,
    entriesread: *u32,
    totalentries: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "samcli" fn NetUserSetGroups(
    servername: ?[*:0]const u16,
    username: [*:0]const u16,
    level: u32,
    buf: *u8,
    num_entries: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "samcli" fn NetUserGetLocalGroups(
    servername: ?[*:0]const u16,
    username: [*:0]const u16,
    level: u32,
    flags: u32,
    bufptr: **u8,
    prefmaxlen: u32,
    entriesread: *u32,
    totalentries: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "samcli" fn NetUserModalsGet(
    servername: ?[*:0]const u16,
    level: u32,
    bufptr: **u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "samcli" fn NetUserModalsSet(
    servername: ?[*:0]const u16,
    level: u32,
    buf: *u8,
    parm_err: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "samcli" fn NetUserChangePassword(
    domainname: ?[*:0]const u16,
    username: ?[*:0]const u16,
    oldpassword: [*:0]const u16,
    newpassword: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "samcli" fn NetGroupAdd(
    servername: ?[*:0]const u16,
    level: u32,
    buf: *u8,
    parm_err: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "samcli" fn NetGroupAddUser(
    servername: ?[*:0]const u16,
    GroupName: [*:0]const u16,
    username: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "samcli" fn NetGroupEnum(
    servername: ?[*:0]const u16,
    level: u32,
    bufptr: **u8,
    prefmaxlen: u32,
    entriesread: *u32,
    totalentries: *u32,
    resume_handle: ?*usize,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "samcli" fn NetGroupGetInfo(
    servername: ?[*:0]const u16,
    groupname: [*:0]const u16,
    level: u32,
    bufptr: **u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "samcli" fn NetGroupSetInfo(
    servername: ?[*:0]const u16,
    groupname: [*:0]const u16,
    level: u32,
    buf: *u8,
    parm_err: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "samcli" fn NetGroupDel(
    servername: ?[*:0]const u16,
    groupname: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "samcli" fn NetGroupDelUser(
    servername: ?[*:0]const u16,
    GroupName: [*:0]const u16,
    Username: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "samcli" fn NetGroupGetUsers(
    servername: ?[*:0]const u16,
    groupname: [*:0]const u16,
    level: u32,
    bufptr: **u8,
    prefmaxlen: u32,
    entriesread: *u32,
    totalentries: *u32,
    ResumeHandle: ?*usize,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "samcli" fn NetGroupSetUsers(
    servername: ?[*:0]const u16,
    groupname: [*:0]const u16,
    level: u32,
    buf: *u8,
    totalentries: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "samcli" fn NetLocalGroupAdd(
    servername: ?[*:0]const u16,
    level: u32,
    buf: *u8,
    parm_err: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "samcli" fn NetLocalGroupAddMember(
    servername: ?[*:0]const u16,
    groupname: [*:0]const u16,
    membersid: PSID,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "samcli" fn NetLocalGroupEnum(
    servername: ?[*:0]const u16,
    level: u32,
    bufptr: **u8,
    prefmaxlen: u32,
    entriesread: *u32,
    totalentries: *u32,
    resumehandle: ?*usize,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "samcli" fn NetLocalGroupGetInfo(
    servername: ?[*:0]const u16,
    groupname: [*:0]const u16,
    level: u32,
    bufptr: **u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "samcli" fn NetLocalGroupSetInfo(
    servername: ?[*:0]const u16,
    groupname: [*:0]const u16,
    level: u32,
    buf: *u8,
    parm_err: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "samcli" fn NetLocalGroupDel(
    servername: ?[*:0]const u16,
    groupname: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "samcli" fn NetLocalGroupDelMember(
    servername: ?[*:0]const u16,
    groupname: [*:0]const u16,
    membersid: PSID,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "samcli" fn NetLocalGroupGetMembers(
    servername: ?[*:0]const u16,
    localgroupname: [*:0]const u16,
    level: u32,
    bufptr: **u8,
    prefmaxlen: u32,
    entriesread: *u32,
    totalentries: *u32,
    resumehandle: ?*usize,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "samcli" fn NetLocalGroupSetMembers(
    servername: ?[*:0]const u16,
    groupname: [*:0]const u16,
    level: u32,
    buf: *u8,
    totalentries: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "samcli" fn NetLocalGroupAddMembers(
    servername: ?[*:0]const u16,
    groupname: [*:0]const u16,
    level: u32,
    buf: *u8,
    totalentries: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "samcli" fn NetLocalGroupDelMembers(
    servername: ?[*:0]const u16,
    groupname: [*:0]const u16,
    level: u32,
    buf: *u8,
    totalentries: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "samcli" fn NetQueryDisplayInformation(
    ServerName: [*:0]const u16,
    Level: u32,
    Index: u32,
    EntriesRequested: u32,
    PreferredMaximumLength: u32,
    ReturnedEntryCount: *u32,
    SortedBuffer: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "samcli" fn NetGetDisplayInformationIndex(
    ServerName: [*:0]const u16,
    Level: u32,
    Prefix: [*:0]const u16,
    Index: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "NETAPI32" fn NetAccessAdd(
    servername: ?[*:0]const u16,
    level: u32,
    buf: *u8,
    parm_err: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "NETAPI32" fn NetAccessEnum(
    servername: ?[*:0]const u16,
    BasePath: [*:0]const u16,
    Recursive: u32,
    level: u32,
    bufptr: **u8,
    prefmaxlen: u32,
    entriesread: *u32,
    totalentries: *u32,
    resume_handle: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "NETAPI32" fn NetAccessGetInfo(
    servername: ?[*:0]const u16,
    resource: [*:0]const u16,
    level: u32,
    bufptr: **u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "NETAPI32" fn NetAccessSetInfo(
    servername: ?[*:0]const u16,
    resource: [*:0]const u16,
    level: u32,
    buf: *u8,
    parm_err: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "NETAPI32" fn NetAccessDel(
    servername: [*:0]const u16,
    resource: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "NETAPI32" fn NetAccessGetUserPerms(
    servername: [*:0]const u16,
    UGname: [*:0]const u16,
    resource: [*:0]const u16,
    Perms: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windowsServer2003'
pub extern "samcli" fn NetValidatePasswordPolicy(
    ServerName: [*:0]const u16,
    Qualifier: *c_void,
    ValidationType: NET_VALIDATE_PASSWORD_TYPE,
    InputArg: *c_void,
    OutputArg: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windowsServer2003'
pub extern "samcli" fn NetValidatePasswordPolicyFree(
    OutputArg: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "logoncli" fn NetGetDCName(
    ServerName: ?[*:0]const u16,
    DomainName: ?[*:0]const u16,
    Buffer: **u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "logoncli" fn NetGetAnyDCName(
    ServerName: ?[*:0]const u16,
    DomainName: ?[*:0]const u16,
    Buffer: **u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "wkscli" fn NetJoinDomain(
    lpServer: ?[*:0]const u16,
    lpDomain: [*:0]const u16,
    lpMachineAccountOU: ?[*:0]const u16,
    lpAccount: ?[*:0]const u16,
    lpPassword: ?[*:0]const u16,
    fJoinOptions: NET_JOIN_DOMAIN_JOIN_OPTIONS,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "wkscli" fn NetUnjoinDomain(
    lpServer: ?[*:0]const u16,
    lpAccount: ?[*:0]const u16,
    lpPassword: ?[*:0]const u16,
    fUnjoinOptions: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "wkscli" fn NetRenameMachineInDomain(
    lpServer: ?[*:0]const u16,
    lpNewMachineName: ?[*:0]const u16,
    lpAccount: ?[*:0]const u16,
    lpPassword: ?[*:0]const u16,
    fRenameOptions: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "wkscli" fn NetValidateName(
    lpServer: ?[*:0]const u16,
    lpName: [*:0]const u16,
    lpAccount: ?[*:0]const u16,
    lpPassword: ?[*:0]const u16,
    NameType: NETSETUP_NAME_TYPE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "wkscli" fn NetGetJoinableOUs(
    lpServer: [*:0]const u16,
    lpDomain: [*:0]const u16,
    lpAccount: ?[*:0]const u16,
    lpPassword: ?[*:0]const u16,
    OUCount: *u32,
    OUs: **PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "wkscli" fn NetAddAlternateComputerName(
    Server: ?[*:0]const u16,
    AlternateName: [*:0]const u16,
    DomainAccount: ?[*:0]const u16,
    DomainAccountPassword: ?[*:0]const u16,
    Reserved: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "wkscli" fn NetRemoveAlternateComputerName(
    Server: ?[*:0]const u16,
    AlternateName: [*:0]const u16,
    DomainAccount: ?[*:0]const u16,
    DomainAccountPassword: ?[*:0]const u16,
    Reserved: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "wkscli" fn NetSetPrimaryComputerName(
    Server: ?[*:0]const u16,
    PrimaryName: [*:0]const u16,
    DomainAccount: ?[*:0]const u16,
    DomainAccountPassword: ?[*:0]const u16,
    Reserved: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "wkscli" fn NetEnumerateComputerNames(
    Server: ?[*:0]const u16,
    NameType: NET_COMPUTER_NAME_TYPE,
    Reserved: u32,
    EntryCount: *u32,
    ComputerNames: **PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "NETAPI32" fn NetProvisionComputerAccount(
    lpDomain: [*:0]const u16,
    lpMachineName: [*:0]const u16,
    lpMachineAccountOU: ?[*:0]const u16,
    lpDcName: ?[*:0]const u16,
    dwOptions: NETSETUP_PROVISION,
    pProvisionBinData: ?*?*u8,
    pdwProvisionBinDataSize: ?*u32,
    pProvisionTextData: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "NETAPI32" fn NetRequestOfflineDomainJoin(
    // TODO: what to do with BytesParamIndex 1?
    pProvisionBinData: *u8,
    cbProvisionBinDataSize: u32,
    dwOptions: NET_REQUEST_PROVISION_OPTIONS,
    lpWindowsPath: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "NETAPI32" fn NetCreateProvisioningPackage(
    pProvisioningParams: *NETSETUP_PROVISIONING_PARAMS,
    ppPackageBinData: ?*?*u8,
    pdwPackageBinDataSize: ?*u32,
    ppPackageTextData: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "NETAPI32" fn NetRequestProvisioningPackageInstall(
    // TODO: what to do with BytesParamIndex 1?
    pPackageBinData: *u8,
    dwPackageBinDataSize: u32,
    dwProvisionOptions: NET_REQUEST_PROVISION_OPTIONS,
    lpWindowsPath: [*:0]const u16,
    pvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows10.0.10240'
pub extern "NETAPI32" fn NetGetAadJoinInformation(
    pcszTenantId: ?[*:0]const u16,
    ppJoinInfo: ?*?*DSREG_JOIN_INFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.10240'
pub extern "NETAPI32" fn NetFreeAadJoinInformation(
    pJoinInfo: ?*DSREG_JOIN_INFO,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "wkscli" fn NetGetJoinInformation(
    lpServer: ?[*:0]const u16,
    lpNameBuffer: *PWSTR,
    BufferType: *NETSETUP_JOIN_STATUS,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "mstask" fn GetNetScheduleAccountInformation(
    pwszServerName: [*:0]const u16,
    ccAccount: u32,
    wszAccount: [*:0]u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "mstask" fn SetNetScheduleAccountInformation(
    pwszServerName: [*:0]const u16,
    pwszAccount: [*:0]const u16,
    pwszPassword: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "NETAPI32" fn NetAlertRaise(
    AlertType: [*:0]const u16,
    Buffer: *c_void,
    BufferSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "NETAPI32" fn NetAlertRaiseEx(
    AlertType: [*:0]const u16,
    VariableInfo: *c_void,
    VariableInfoSize: u32,
    ServiceName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "netutils" fn NetApiBufferAllocate(
    ByteCount: u32,
    Buffer: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "netutils" fn NetApiBufferFree(
    Buffer: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "netutils" fn NetApiBufferReallocate(
    OldBuffer: ?*c_void,
    NewByteCount: u32,
    NewBuffer: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "netutils" fn NetApiBufferSize(
    Buffer: *c_void,
    ByteCount: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "NETAPI32" fn NetAuditClear(
    server: [*:0]const u16,
    backupfile: [*:0]const u16,
    service: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "NETAPI32" fn NetAuditRead(
    server: [*:0]const u16,
    service: [*:0]const u16,
    auditloghandle: *HLOG,
    offset: u32,
    reserved1: *u32,
    reserved2: u32,
    offsetflag: u32,
    bufptr: **u8,
    prefmaxlen: u32,
    bytesread: *u32,
    totalavailable: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "NETAPI32" fn NetAuditWrite(
    type: u32,
    buf: *u8,
    numbytes: u32,
    service: [*:0]const u16,
    reserved: *u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "NETAPI32" fn NetConfigGet(
    server: [*:0]const u16,
    component: [*:0]const u16,
    parameter: [*:0]const u16,
    bufptr: **u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "NETAPI32" fn NetConfigGetAll(
    server: [*:0]const u16,
    component: [*:0]const u16,
    bufptr: **u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "NETAPI32" fn NetConfigSet(
    server: [*:0]const u16,
    reserved1: [*:0]const u16,
    component: [*:0]const u16,
    level: u32,
    reserved2: u32,
    buf: *u8,
    reserved3: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "NETAPI32" fn NetErrorLogClear(
    UncServerName: ?[*:0]const u16,
    BackupFile: ?[*:0]const u16,
    Reserved: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "NETAPI32" fn NetErrorLogRead(
    UncServerName: ?[*:0]const u16,
    Reserved1: ?PWSTR,
    ErrorLogHandle: *HLOG,
    Offset: u32,
    Reserved2: ?*u32,
    Reserved3: u32,
    OffsetFlag: u32,
    BufPtr: **u8,
    PrefMaxSize: u32,
    BytesRead: *u32,
    TotalAvailable: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "NETAPI32" fn NetErrorLogWrite(
    Reserved1: ?*u8,
    Code: u32,
    Component: [*:0]const u16,
    Buffer: *u8,
    NumBytes: u32,
    MsgBuf: *u8,
    StrCount: u32,
    Reserved2: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "NETAPI32" fn NetMessageNameAdd(
    servername: ?[*:0]const u16,
    msgname: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "NETAPI32" fn NetMessageNameEnum(
    servername: ?[*:0]const u16,
    level: u32,
    bufptr: **u8,
    prefmaxlen: u32,
    entriesread: *u32,
    totalentries: *u32,
    resume_handle: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "NETAPI32" fn NetMessageNameGetInfo(
    servername: ?[*:0]const u16,
    msgname: [*:0]const u16,
    level: u32,
    bufptr: **u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "NETAPI32" fn NetMessageNameDel(
    servername: ?[*:0]const u16,
    msgname: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "NETAPI32" fn NetMessageBufferSend(
    servername: ?[*:0]const u16,
    msgname: [*:0]const u16,
    fromname: [*:0]const u16,
    buf: *u8,
    buflen: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "srvcli" fn NetRemoteTOD(
    UncServerName: ?[*:0]const u16,
    BufferPtr: **u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "netutils" fn NetRemoteComputerSupports(
    UncServerName: [*:0]const u16,
    OptionsWanted: NET_REMOTE_COMPUTER_SUPPORTS_OPTIONS,
    OptionsSupported: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "schedcli" fn NetScheduleJobAdd(
    Servername: [*:0]const u16,
    Buffer: *u8,
    JobId: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "schedcli" fn NetScheduleJobDel(
    Servername: [*:0]const u16,
    MinJobId: u32,
    MaxJobId: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "schedcli" fn NetScheduleJobEnum(
    Servername: [*:0]const u16,
    PointerToBuffer: **u8,
    PrefferedMaximumLength: u32,
    EntriesRead: *u32,
    TotalEntries: *u32,
    ResumeHandle: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "schedcli" fn NetScheduleJobGetInfo(
    Servername: [*:0]const u16,
    JobId: u32,
    PointerToBuffer: **u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "NETAPI32" fn NetServerEnum(
    servername: ?[*:0]const u16,
    level: u32,
    bufptr: **u8,
    prefmaxlen: u32,
    entriesread: *u32,
    totalentries: *u32,
    servertype: NET_SERVER_TYPE,
    domain: ?[*:0]const u16,
    resume_handle: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "srvcli" fn NetServerGetInfo(
    servername: ?PWSTR,
    level: u32,
    bufptr: **u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "srvcli" fn NetServerSetInfo(
    servername: ?PWSTR,
    level: u32,
    buf: *u8,
    ParmError: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "srvcli" fn NetServerDiskEnum(
    servername: ?PWSTR,
    level: u32,
    bufptr: **u8,
    prefmaxlen: u32,
    entriesread: *u32,
    totalentries: *u32,
    resume_handle: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "srvcli" fn NetServerComputerNameAdd(
    ServerName: ?PWSTR,
    EmulatedDomainName: ?PWSTR,
    EmulatedServerName: PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "srvcli" fn NetServerComputerNameDel(
    ServerName: ?PWSTR,
    EmulatedServerName: PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "srvcli" fn NetServerTransportAdd(
    servername: ?PWSTR,
    level: u32,
    bufptr: *u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "srvcli" fn NetServerTransportAddEx(
    servername: ?PWSTR,
    level: u32,
    bufptr: *u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "srvcli" fn NetServerTransportDel(
    servername: ?PWSTR,
    level: u32,
    bufptr: *u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "srvcli" fn NetServerTransportEnum(
    servername: ?PWSTR,
    level: u32,
    bufptr: **u8,
    prefmaxlen: u32,
    entriesread: *u32,
    totalentries: *u32,
    resume_handle: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "NETAPI32" fn NetServiceControl(
    servername: ?[*:0]const u16,
    service: [*:0]const u16,
    opcode: u32,
    arg: u32,
    bufptr: **u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "NETAPI32" fn NetServiceEnum(
    servername: ?[*:0]const u16,
    level: u32,
    bufptr: **u8,
    prefmaxlen: u32,
    entriesread: *u32,
    totalentries: *u32,
    resume_handle: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "NETAPI32" fn NetServiceGetInfo(
    servername: ?[*:0]const u16,
    service: [*:0]const u16,
    level: u32,
    bufptr: **u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "NETAPI32" fn NetServiceInstall(
    servername: ?[*:0]const u16,
    service: [*:0]const u16,
    argc: u32,
    argv: [*]PWSTR,
    bufptr: **u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "wkscli" fn NetUseAdd(
    servername: ?*i8,
    LevelFlags: u32,
    buf: *u8,
    parm_err: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "wkscli" fn NetUseDel(
    UncServerName: ?PWSTR,
    UseName: PWSTR,
    ForceLevelFlags: FORCE_LEVEL_FLAGS,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "wkscli" fn NetUseEnum(
    UncServerName: ?PWSTR,
    LevelFlags: u32,
    BufPtr: ?*?*u8,
    PreferedMaximumSize: u32,
    EntriesRead: ?*u32,
    TotalEntries: *u32,
    ResumeHandle: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "wkscli" fn NetUseGetInfo(
    UncServerName: ?PWSTR,
    UseName: PWSTR,
    LevelFlags: u32,
    bufptr: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "wkscli" fn NetWkstaGetInfo(
    servername: ?PWSTR,
    level: u32,
    bufptr: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "wkscli" fn NetWkstaSetInfo(
    servername: ?PWSTR,
    level: u32,
    buffer: *u8,
    parm_err: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "wkscli" fn NetWkstaUserGetInfo(
    reserved: ?PWSTR,
    level: u32,
    bufptr: **u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "wkscli" fn NetWkstaUserSetInfo(
    reserved: ?PWSTR,
    level: u32,
    buf: *u8,
    parm_err: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "wkscli" fn NetWkstaUserEnum(
    servername: ?PWSTR,
    level: u32,
    bufptr: ?*?*u8,
    prefmaxlen: u32,
    entriesread: ?*u32,
    totalentries: *u32,
    resumehandle: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wkscli" fn NetWkstaTransportAdd(
    servername: ?*i8,
    level: u32,
    buf: *u8,
    parm_err: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wkscli" fn NetWkstaTransportDel(
    servername: ?PWSTR,
    transportname: ?PWSTR,
    ucond: FORCE_LEVEL_FLAGS,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "wkscli" fn NetWkstaTransportEnum(
    servername: ?*i8,
    level: u32,
    bufptr: **u8,
    prefmaxlen: u32,
    entriesread: *u32,
    totalentries: *u32,
    resume_handle: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (8)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const PWSTR = @import("system_services.zig").PWSTR;
const SID_NAME_USE = @import("security.zig").SID_NAME_USE;
const FILETIME = @import("windows_programming.zig").FILETIME;
const CERT_CONTEXT = @import("security.zig").CERT_CONTEXT;
const HRESULT = @import("com.zig").HRESULT;
const PSID = @import("security.zig").PSID;
const BOOL = @import("system_services.zig").BOOL;

test {
    @setEvalBranchQuota(
        @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("std").builtin.is_test) return;
    inline for (@import("std").meta.declarations(@This())) |decl| {
        if (decl.is_pub) {
            _ = decl;
        }
    }
}
