//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Functions (4)
//--------------------------------------------------------------------------------
pub extern "ADVAPI32" fn ChangeServiceConfigA(
    hService: *SC_HANDLE__,
    dwServiceType: u32,
    dwStartType: u32,
    dwErrorControl: u32,
    lpBinaryPathName: ?[*:0]const u8,
    lpLoadOrderGroup: ?[*:0]const u8,
    lpdwTagId: ?*u32,
    lpDependencies: ?[*:0]const u8,
    lpServiceStartName: ?[*:0]const u8,
    lpPassword: ?[*:0]const u8,
    lpDisplayName: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn ChangeServiceConfigW(
    hService: *SC_HANDLE__,
    dwServiceType: u32,
    dwStartType: u32,
    dwErrorControl: u32,
    lpBinaryPathName: ?[*:0]const u16,
    lpLoadOrderGroup: ?[*:0]const u16,
    lpdwTagId: ?*u32,
    lpDependencies: ?[*:0]const u16,
    lpServiceStartName: ?[*:0]const u16,
    lpPassword: ?[*:0]const u16,
    lpDisplayName: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CreateServiceA(
    hSCManager: *SC_HANDLE__,
    lpServiceName: [*:0]const u8,
    lpDisplayName: ?[*:0]const u8,
    dwDesiredAccess: u32,
    dwServiceType: u32,
    dwStartType: u32,
    dwErrorControl: u32,
    lpBinaryPathName: ?[*:0]const u8,
    lpLoadOrderGroup: ?[*:0]const u8,
    lpdwTagId: ?*u32,
    lpDependencies: ?[*:0]const u8,
    lpServiceStartName: ?[*:0]const u8,
    lpPassword: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) *SC_HANDLE__;

pub extern "ADVAPI32" fn CreateServiceW(
    hSCManager: *SC_HANDLE__,
    lpServiceName: [*:0]const u16,
    lpDisplayName: ?[*:0]const u16,
    dwDesiredAccess: u32,
    dwServiceType: u32,
    dwStartType: u32,
    dwErrorControl: u32,
    lpBinaryPathName: ?[*:0]const u16,
    lpLoadOrderGroup: ?[*:0]const u16,
    lpdwTagId: ?*u32,
    lpDependencies: ?[*:0]const u16,
    lpServiceStartName: ?[*:0]const u16,
    lpPassword: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) *SC_HANDLE__;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (2)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const ChangeServiceConfig = ChangeServiceConfigA;
        pub const CreateService = CreateServiceA;
    },
    .wide => struct {
        pub const ChangeServiceConfig = ChangeServiceConfigW;
        pub const CreateService = CreateServiceW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const ChangeServiceConfig = *opaque{};
        pub const CreateService = *opaque{};
    } else struct {
        pub const ChangeServiceConfig = @compileError("'ChangeServiceConfig' requires that UNICODE be set to true or false in the root module");
        pub const CreateService = @compileError("'CreateService' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (4)
//--------------------------------------------------------------------------------
const SC_HANDLE__ = @import("security.zig").SC_HANDLE__;
const PSTR = @import("system_services.zig").PSTR;
const PWSTR = @import("system_services.zig").PWSTR;
const BOOL = @import("system_services.zig").BOOL;

test {
    const constant_export_count = 0;
    const type_export_count = 0;
    const enum_value_export_count = 0;
    const com_iface_id_export_count = 0;
    const com_class_id_export_count = 0;
    const func_export_count = 4;
    const unicode_alias_count = 2;
    const import_count = 4;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
