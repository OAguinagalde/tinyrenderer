//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (78)
//--------------------------------------------------------------------------------
pub const PI_NOUI = @as(u32, 1);
pub const PI_APPLYPOLICY = @as(u32, 2);
pub const PT_TEMPORARY = @as(u32, 1);
pub const PT_ROAMING = @as(u32, 2);
pub const PT_MANDATORY = @as(u32, 4);
pub const PT_ROAMING_PREEXISTING = @as(u32, 8);
pub const RP_FORCE = @as(u32, 1);
pub const RP_SYNC = @as(u32, 2);
pub const GPC_BLOCK_POLICY = @as(u32, 1);
pub const GPO_FLAG_DISABLE = @as(u32, 1);
pub const GPO_FLAG_FORCE = @as(u32, 2);
pub const GPO_LIST_FLAG_MACHINE = @as(u32, 1);
pub const GPO_LIST_FLAG_SITEONLY = @as(u32, 2);
pub const GPO_LIST_FLAG_NO_WMIFILTERS = @as(u32, 4);
pub const GPO_LIST_FLAG_NO_SECURITYFILTERS = @as(u32, 8);
pub const GPO_INFO_FLAG_MACHINE = @as(u32, 1);
pub const GPO_INFO_FLAG_BACKGROUND = @as(u32, 16);
pub const GPO_INFO_FLAG_SLOWLINK = @as(u32, 32);
pub const GPO_INFO_FLAG_VERBOSE = @as(u32, 64);
pub const GPO_INFO_FLAG_NOCHANGES = @as(u32, 128);
pub const GPO_INFO_FLAG_LINKTRANSITION = @as(u32, 256);
pub const GPO_INFO_FLAG_LOGRSOP_TRANSITION = @as(u32, 512);
pub const GPO_INFO_FLAG_FORCED_REFRESH = @as(u32, 1024);
pub const GPO_INFO_FLAG_SAFEMODE_BOOT = @as(u32, 2048);
pub const GPO_INFO_FLAG_ASYNC_FOREGROUND = @as(u32, 4096);
pub const FLAG_NO_GPO_FILTER = @as(u32, 2147483648);
pub const FLAG_NO_CSE_INVOKE = @as(u32, 1073741824);
pub const FLAG_ASSUME_SLOW_LINK = @as(u32, 536870912);
pub const FLAG_LOOPBACK_MERGE = @as(u32, 268435456);
pub const FLAG_LOOPBACK_REPLACE = @as(u32, 134217728);
pub const FLAG_ASSUME_USER_WQLFILTER_TRUE = @as(u32, 67108864);
pub const FLAG_ASSUME_COMP_WQLFILTER_TRUE = @as(u32, 33554432);
pub const FLAG_PLANNING_MODE = @as(u32, 16777216);
pub const FLAG_NO_USER = @as(u32, 1);
pub const FLAG_NO_COMPUTER = @as(u32, 2);
pub const FLAG_FORCE_CREATENAMESPACE = @as(u32, 4);
pub const RSOP_USER_ACCESS_DENIED = @as(u32, 1);
pub const RSOP_COMPUTER_ACCESS_DENIED = @as(u32, 2);
pub const RSOP_TEMPNAMESPACE_EXISTS = @as(u32, 4);
pub const LOCALSTATE_ASSIGNED = @as(u32, 1);
pub const LOCALSTATE_PUBLISHED = @as(u32, 2);
pub const LOCALSTATE_UNINSTALL_UNMANAGED = @as(u32, 4);
pub const LOCALSTATE_POLICYREMOVE_ORPHAN = @as(u32, 8);
pub const LOCALSTATE_POLICYREMOVE_UNINSTALL = @as(u32, 16);
pub const LOCALSTATE_ORPHANED = @as(u32, 32);
pub const LOCALSTATE_UNINSTALLED = @as(u32, 64);
pub const MANAGED_APPS_USERAPPLICATIONS = @as(u32, 1);
pub const MANAGED_APPS_FROMCATEGORY = @as(u32, 2);
pub const MANAGED_APPS_INFOLEVEL_DEFAULT = @as(u32, 65536);
pub const MANAGED_APPTYPE_WINDOWSINSTALLER = @as(u32, 1);
pub const MANAGED_APPTYPE_SETUPEXE = @as(u32, 2);
pub const MANAGED_APPTYPE_UNSUPPORTED = @as(u32, 3);
pub const CLSID_GPESnapIn = Guid.initString("8fc0b734-a0e1-11d1-a7d3-0000f87571e3");
pub const NODEID_Machine = Guid.initString("8fc0b737-a0e1-11d1-a7d3-0000f87571e3");
pub const NODEID_MachineSWSettings = Guid.initString("8fc0b73a-a0e1-11d1-a7d3-0000f87571e3");
pub const NODEID_User = Guid.initString("8fc0b738-a0e1-11d1-a7d3-0000f87571e3");
pub const NODEID_UserSWSettings = Guid.initString("8fc0b73c-a0e1-11d1-a7d3-0000f87571e3");
pub const CLSID_GroupPolicyObject = Guid.initString("ea502722-a23d-11d1-a7d3-0000f87571e3");
pub const CLSID_RSOPSnapIn = Guid.initString("6dc3804b-7212-458d-adb0-9a07e2ae1fa2");
pub const NODEID_RSOPMachine = Guid.initString("bd4c1a2e-0b7a-4a62-a6b0-c0577539c97e");
pub const NODEID_RSOPMachineSWSettings = Guid.initString("6a76273e-eb8e-45db-94c5-25663a5f2c1a");
pub const NODEID_RSOPUser = Guid.initString("ab87364f-0cec-4cd8-9bf8-898f34628fb8");
pub const NODEID_RSOPUserSWSettings = Guid.initString("e52c5ce3-fd27-4402-84de-d9a5f2858910");
pub const GPO_SECTION_ROOT = @as(u32, 0);
pub const GPO_SECTION_USER = @as(u32, 1);
pub const GPO_SECTION_MACHINE = @as(u32, 2);
pub const GPO_OPEN_LOAD_REGISTRY = @as(u32, 1);
pub const GPO_OPEN_READ_ONLY = @as(u32, 2);
pub const GPO_OPTION_DISABLE_USER = @as(u32, 1);
pub const GPO_OPTION_DISABLE_MACHINE = @as(u32, 2);
pub const RSOP_INFO_FLAG_DIAGNOSTIC_MODE = @as(u32, 1);
pub const GPO_BROWSE_DISABLENEW = @as(u32, 1);
pub const GPO_BROWSE_NOCOMPUTERS = @as(u32, 2);
pub const GPO_BROWSE_NODSGPOS = @as(u32, 4);
pub const GPO_BROWSE_OPENBUTTON = @as(u32, 8);
pub const GPO_BROWSE_INITTOALL = @as(u32, 16);
pub const GPO_BROWSE_NOUSERGPOS = @as(u32, 32);
pub const GPO_BROWSE_SENDAPPLYONEDIT = @as(u32, 64);

//--------------------------------------------------------------------------------
// Section: Types (23)
//--------------------------------------------------------------------------------
// TODO: this type has a FreeFunc 'LeaveCriticalPolicySection', what can Zig do with this information?
pub const CriticalPolicySectionHandle = isize;

pub const GPO_LINK = extern enum(i32) {
    Unknown = 0,
    Machine = 1,
    Site = 2,
    Domain = 3,
    OrganizationalUnit = 4,
};
pub const GPLinkUnknown = GPO_LINK.Unknown;
pub const GPLinkMachine = GPO_LINK.Machine;
pub const GPLinkSite = GPO_LINK.Site;
pub const GPLinkDomain = GPO_LINK.Domain;
pub const GPLinkOrganizationalUnit = GPO_LINK.OrganizationalUnit;

pub const GROUP_POLICY_OBJECTA = extern struct {
    dwOptions: u32,
    dwVersion: u32,
    lpDSPath: PSTR,
    lpFileSysPath: PSTR,
    lpDisplayName: PSTR,
    szGPOName: [50]CHAR,
    GPOLink: GPO_LINK,
    lParam: LPARAM,
    pNext: *GROUP_POLICY_OBJECTA,
    pPrev: *GROUP_POLICY_OBJECTA,
    lpExtensions: PSTR,
    lParam2: LPARAM,
    lpLink: PSTR,
};

pub const GROUP_POLICY_OBJECTW = extern struct {
    dwOptions: u32,
    dwVersion: u32,
    lpDSPath: PWSTR,
    lpFileSysPath: PWSTR,
    lpDisplayName: PWSTR,
    szGPOName: [50]u16,
    GPOLink: GPO_LINK,
    lParam: LPARAM,
    pNext: *GROUP_POLICY_OBJECTW,
    pPrev: *GROUP_POLICY_OBJECTW,
    lpExtensions: PWSTR,
    lParam2: LPARAM,
    lpLink: PWSTR,
};

pub const PFNSTATUSMESSAGECALLBACK = fn(
    bVerbose: BOOL,
    lpMessage: PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PFNPROCESSGROUPPOLICY = fn(
    dwFlags: u32,
    hToken: HANDLE,
    hKeyRoot: HKEY,
    pDeletedGPOList: *GROUP_POLICY_OBJECTA,
    pChangedGPOList: *GROUP_POLICY_OBJECTA,
    pHandle: usize,
    pbAbort: *BOOL,
    pStatusCallback: ?PFNSTATUSMESSAGECALLBACK,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PFNPROCESSGROUPPOLICYEX = fn(
    dwFlags: u32,
    hToken: HANDLE,
    hKeyRoot: HKEY,
    pDeletedGPOList: *GROUP_POLICY_OBJECTA,
    pChangedGPOList: *GROUP_POLICY_OBJECTA,
    pHandle: usize,
    pbAbort: *BOOL,
    pStatusCallback: ?PFNSTATUSMESSAGECALLBACK,
    pWbemServices: ?*IWbemServices,
    pRsopStatus: *HRESULT,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const RSOP_TARGET = extern struct {
    pwszAccountName: PWSTR,
    pwszNewSOM: PWSTR,
    psaSecurityGroups: *SAFEARRAY,
    pRsopToken: *c_void,
    pGPOList: *GROUP_POLICY_OBJECTA,
    pWbemServices: *IWbemServices,
};

pub const PFNGENERATEGROUPPOLICY = fn(
    dwFlags: u32,
    pbAbort: *BOOL,
    pwszSite: ?PWSTR,
    pComputerTarget: ?*RSOP_TARGET,
    pUserTarget: ?*RSOP_TARGET,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const SETTINGSTATUS = extern enum(i32) {
    Unspecified = 0,
    Applied = 1,
    Ignored = 2,
    Failed = 3,
    SubsettingFailed = 4,
};
pub const RSOPUnspecified = SETTINGSTATUS.Unspecified;
pub const RSOPApplied = SETTINGSTATUS.Applied;
pub const RSOPIgnored = SETTINGSTATUS.Ignored;
pub const RSOPFailed = SETTINGSTATUS.Failed;
pub const RSOPSubsettingFailed = SETTINGSTATUS.SubsettingFailed;

pub const POLICYSETTINGSTATUSINFO = extern struct {
    szKey: PWSTR,
    szEventSource: PWSTR,
    szEventLogName: PWSTR,
    dwEventID: u32,
    dwErrorCode: u32,
    status: SETTINGSTATUS,
    timeLogged: SYSTEMTIME,
};

pub const INSTALLSPECTYPE = extern enum(i32) {
    APPNAME = 1,
    FILEEXT = 2,
    PROGID = 3,
    COMCLASS = 4,
};
pub const APPNAME = INSTALLSPECTYPE.APPNAME;
pub const FILEEXT = INSTALLSPECTYPE.FILEEXT;
pub const PROGID = INSTALLSPECTYPE.PROGID;
pub const COMCLASS = INSTALLSPECTYPE.COMCLASS;

pub const INSTALLSPEC = extern union {
    AppName: _AppName_e__Struct,
    FileExt: PWSTR,
    ProgId: PWSTR,
    COMClass: _COMClass_e__Struct,
    const _AppName_e__Struct = u32; // TODO: generate this nested type!
    const _COMClass_e__Struct = u32; // TODO: generate this nested type!
};

pub const INSTALLDATA = extern struct {
    Type: INSTALLSPECTYPE,
    Spec: INSTALLSPEC,
};

pub const APPSTATE = extern enum(i32) {
    ABSENT = 0,
    ASSIGNED = 1,
    PUBLISHED = 2,
};
pub const ABSENT = APPSTATE.ABSENT;
pub const ASSIGNED = APPSTATE.ASSIGNED;
pub const PUBLISHED = APPSTATE.PUBLISHED;

pub const LOCALMANAGEDAPPLICATION = extern struct {
    pszDeploymentName: PWSTR,
    pszPolicyName: PWSTR,
    pszProductId: PWSTR,
    dwState: u32,
};

pub const MANAGEDAPPLICATION = extern struct {
    pszPackageName: PWSTR,
    pszPublisher: PWSTR,
    dwVersionHi: u32,
    dwVersionLo: u32,
    dwRevision: u32,
    GpoId: Guid,
    pszPolicyName: PWSTR,
    ProductId: Guid,
    Language: u16,
    pszOwner: PWSTR,
    pszCompany: PWSTR,
    pszComments: PWSTR,
    pszContact: PWSTR,
    pszSupportUrl: PWSTR,
    dwPathType: u32,
    bInstalled: BOOL,
};

pub const GROUP_POLICY_OBJECT_TYPE = extern enum(i32) {
    Local = 0,
    Remote = 1,
    DS = 2,
    LocalUser = 3,
    LocalGroup = 4,
};
pub const GPOTypeLocal = GROUP_POLICY_OBJECT_TYPE.Local;
pub const GPOTypeRemote = GROUP_POLICY_OBJECT_TYPE.Remote;
pub const GPOTypeDS = GROUP_POLICY_OBJECT_TYPE.DS;
pub const GPOTypeLocalUser = GROUP_POLICY_OBJECT_TYPE.LocalUser;
pub const GPOTypeLocalGroup = GROUP_POLICY_OBJECT_TYPE.LocalGroup;

pub const GROUP_POLICY_HINT_TYPE = extern enum(i32) {
    Unknown = 0,
    Machine = 1,
    Site = 2,
    Domain = 3,
    OrganizationalUnit = 4,
};
pub const GPHintUnknown = GROUP_POLICY_HINT_TYPE.Unknown;
pub const GPHintMachine = GROUP_POLICY_HINT_TYPE.Machine;
pub const GPHintSite = GROUP_POLICY_HINT_TYPE.Site;
pub const GPHintDomain = GROUP_POLICY_HINT_TYPE.Domain;
pub const GPHintOrganizationalUnit = GROUP_POLICY_HINT_TYPE.OrganizationalUnit;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IGPEInformation_Value = @import("../zig.zig").Guid.initString("8fc0b735-a0e1-11d1-a7d3-0000f87571e3");
pub const IID_IGPEInformation = &IID_IGPEInformation_Value;
pub const IGPEInformation = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetName: fn(
            self: *const IGPEInformation,
            pszName: [*:0]u16,
            cchMaxLength: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDisplayName: fn(
            self: *const IGPEInformation,
            pszName: [*:0]u16,
            cchMaxLength: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRegistryKey: fn(
            self: *const IGPEInformation,
            dwSection: u32,
            hKey: *HKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDSPath: fn(
            self: *const IGPEInformation,
            dwSection: u32,
            pszPath: [*:0]u16,
            cchMaxPath: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileSysPath: fn(
            self: *const IGPEInformation,
            dwSection: u32,
            pszPath: [*:0]u16,
            cchMaxPath: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOptions: fn(
            self: *const IGPEInformation,
            dwOptions: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetType: fn(
            self: *const IGPEInformation,
            gpoType: *GROUP_POLICY_OBJECT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHint: fn(
            self: *const IGPEInformation,
            gpHint: *GROUP_POLICY_HINT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PolicyChanged: fn(
            self: *const IGPEInformation,
            bMachine: BOOL,
            bAdd: BOOL,
            pGuidExtension: *Guid,
            pGuidSnapin: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGPEInformation_GetName(self: *const T, pszName: [*:0]u16, cchMaxLength: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGPEInformation.VTable, self.vtable).GetName(@ptrCast(*const IGPEInformation, self), pszName, cchMaxLength);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGPEInformation_GetDisplayName(self: *const T, pszName: [*:0]u16, cchMaxLength: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGPEInformation.VTable, self.vtable).GetDisplayName(@ptrCast(*const IGPEInformation, self), pszName, cchMaxLength);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGPEInformation_GetRegistryKey(self: *const T, dwSection: u32, hKey: *HKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGPEInformation.VTable, self.vtable).GetRegistryKey(@ptrCast(*const IGPEInformation, self), dwSection, hKey);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGPEInformation_GetDSPath(self: *const T, dwSection: u32, pszPath: [*:0]u16, cchMaxPath: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGPEInformation.VTable, self.vtable).GetDSPath(@ptrCast(*const IGPEInformation, self), dwSection, pszPath, cchMaxPath);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGPEInformation_GetFileSysPath(self: *const T, dwSection: u32, pszPath: [*:0]u16, cchMaxPath: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGPEInformation.VTable, self.vtable).GetFileSysPath(@ptrCast(*const IGPEInformation, self), dwSection, pszPath, cchMaxPath);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGPEInformation_GetOptions(self: *const T, dwOptions: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGPEInformation.VTable, self.vtable).GetOptions(@ptrCast(*const IGPEInformation, self), dwOptions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGPEInformation_GetType(self: *const T, gpoType: *GROUP_POLICY_OBJECT_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGPEInformation.VTable, self.vtable).GetType(@ptrCast(*const IGPEInformation, self), gpoType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGPEInformation_GetHint(self: *const T, gpHint: *GROUP_POLICY_HINT_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGPEInformation.VTable, self.vtable).GetHint(@ptrCast(*const IGPEInformation, self), gpHint);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGPEInformation_PolicyChanged(self: *const T, bMachine: BOOL, bAdd: BOOL, pGuidExtension: *Guid, pGuidSnapin: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGPEInformation.VTable, self.vtable).PolicyChanged(@ptrCast(*const IGPEInformation, self), bMachine, bAdd, pGuidExtension, pGuidSnapin);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IGroupPolicyObject_Value = @import("../zig.zig").Guid.initString("ea502723-a23d-11d1-a7d3-0000f87571e3");
pub const IID_IGroupPolicyObject = &IID_IGroupPolicyObject_Value;
pub const IGroupPolicyObject = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        New: fn(
            self: *const IGroupPolicyObject,
            pszDomainName: PWSTR,
            pszDisplayName: ?PWSTR,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenDSGPO: fn(
            self: *const IGroupPolicyObject,
            pszPath: PWSTR,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenLocalMachineGPO: fn(
            self: *const IGroupPolicyObject,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenRemoteMachineGPO: fn(
            self: *const IGroupPolicyObject,
            pszComputerName: PWSTR,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Save: fn(
            self: *const IGroupPolicyObject,
            bMachine: BOOL,
            bAdd: BOOL,
            pGuidExtension: *Guid,
            pGuid: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: fn(
            self: *const IGroupPolicyObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetName: fn(
            self: *const IGroupPolicyObject,
            pszName: [*:0]u16,
            cchMaxLength: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDisplayName: fn(
            self: *const IGroupPolicyObject,
            pszName: [*:0]u16,
            cchMaxLength: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDisplayName: fn(
            self: *const IGroupPolicyObject,
            pszName: PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPath: fn(
            self: *const IGroupPolicyObject,
            pszPath: [*:0]u16,
            cchMaxLength: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDSPath: fn(
            self: *const IGroupPolicyObject,
            dwSection: u32,
            pszPath: [*:0]u16,
            cchMaxPath: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileSysPath: fn(
            self: *const IGroupPolicyObject,
            dwSection: u32,
            pszPath: [*:0]u16,
            cchMaxPath: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRegistryKey: fn(
            self: *const IGroupPolicyObject,
            dwSection: u32,
            hKey: *HKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOptions: fn(
            self: *const IGroupPolicyObject,
            dwOptions: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOptions: fn(
            self: *const IGroupPolicyObject,
            dwOptions: u32,
            dwMask: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetType: fn(
            self: *const IGroupPolicyObject,
            gpoType: *GROUP_POLICY_OBJECT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMachineName: fn(
            self: *const IGroupPolicyObject,
            pszName: [*:0]u16,
            cchMaxLength: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertySheetPages: fn(
            self: *const IGroupPolicyObject,
            hPages: **HPROPSHEETPAGE,
            uPageCount: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGroupPolicyObject_New(self: *const T, pszDomainName: PWSTR, pszDisplayName: ?PWSTR, dwFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGroupPolicyObject.VTable, self.vtable).New(@ptrCast(*const IGroupPolicyObject, self), pszDomainName, pszDisplayName, dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGroupPolicyObject_OpenDSGPO(self: *const T, pszPath: PWSTR, dwFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGroupPolicyObject.VTable, self.vtable).OpenDSGPO(@ptrCast(*const IGroupPolicyObject, self), pszPath, dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGroupPolicyObject_OpenLocalMachineGPO(self: *const T, dwFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGroupPolicyObject.VTable, self.vtable).OpenLocalMachineGPO(@ptrCast(*const IGroupPolicyObject, self), dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGroupPolicyObject_OpenRemoteMachineGPO(self: *const T, pszComputerName: PWSTR, dwFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGroupPolicyObject.VTable, self.vtable).OpenRemoteMachineGPO(@ptrCast(*const IGroupPolicyObject, self), pszComputerName, dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGroupPolicyObject_Save(self: *const T, bMachine: BOOL, bAdd: BOOL, pGuidExtension: *Guid, pGuid: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGroupPolicyObject.VTable, self.vtable).Save(@ptrCast(*const IGroupPolicyObject, self), bMachine, bAdd, pGuidExtension, pGuid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGroupPolicyObject_Delete(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGroupPolicyObject.VTable, self.vtable).Delete(@ptrCast(*const IGroupPolicyObject, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGroupPolicyObject_GetName(self: *const T, pszName: [*:0]u16, cchMaxLength: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGroupPolicyObject.VTable, self.vtable).GetName(@ptrCast(*const IGroupPolicyObject, self), pszName, cchMaxLength);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGroupPolicyObject_GetDisplayName(self: *const T, pszName: [*:0]u16, cchMaxLength: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGroupPolicyObject.VTable, self.vtable).GetDisplayName(@ptrCast(*const IGroupPolicyObject, self), pszName, cchMaxLength);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGroupPolicyObject_SetDisplayName(self: *const T, pszName: PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGroupPolicyObject.VTable, self.vtable).SetDisplayName(@ptrCast(*const IGroupPolicyObject, self), pszName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGroupPolicyObject_GetPath(self: *const T, pszPath: [*:0]u16, cchMaxLength: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGroupPolicyObject.VTable, self.vtable).GetPath(@ptrCast(*const IGroupPolicyObject, self), pszPath, cchMaxLength);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGroupPolicyObject_GetDSPath(self: *const T, dwSection: u32, pszPath: [*:0]u16, cchMaxPath: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGroupPolicyObject.VTable, self.vtable).GetDSPath(@ptrCast(*const IGroupPolicyObject, self), dwSection, pszPath, cchMaxPath);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGroupPolicyObject_GetFileSysPath(self: *const T, dwSection: u32, pszPath: [*:0]u16, cchMaxPath: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGroupPolicyObject.VTable, self.vtable).GetFileSysPath(@ptrCast(*const IGroupPolicyObject, self), dwSection, pszPath, cchMaxPath);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGroupPolicyObject_GetRegistryKey(self: *const T, dwSection: u32, hKey: *HKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGroupPolicyObject.VTable, self.vtable).GetRegistryKey(@ptrCast(*const IGroupPolicyObject, self), dwSection, hKey);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGroupPolicyObject_GetOptions(self: *const T, dwOptions: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGroupPolicyObject.VTable, self.vtable).GetOptions(@ptrCast(*const IGroupPolicyObject, self), dwOptions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGroupPolicyObject_SetOptions(self: *const T, dwOptions: u32, dwMask: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGroupPolicyObject.VTable, self.vtable).SetOptions(@ptrCast(*const IGroupPolicyObject, self), dwOptions, dwMask);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGroupPolicyObject_GetType(self: *const T, gpoType: *GROUP_POLICY_OBJECT_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGroupPolicyObject.VTable, self.vtable).GetType(@ptrCast(*const IGroupPolicyObject, self), gpoType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGroupPolicyObject_GetMachineName(self: *const T, pszName: [*:0]u16, cchMaxLength: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGroupPolicyObject.VTable, self.vtable).GetMachineName(@ptrCast(*const IGroupPolicyObject, self), pszName, cchMaxLength);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGroupPolicyObject_GetPropertySheetPages(self: *const T, hPages: **HPROPSHEETPAGE, uPageCount: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGroupPolicyObject.VTable, self.vtable).GetPropertySheetPages(@ptrCast(*const IGroupPolicyObject, self), hPages, uPageCount);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRSOPInformation_Value = @import("../zig.zig").Guid.initString("9a5a81b5-d9c7-49ef-9d11-ddf50968c48d");
pub const IID_IRSOPInformation = &IID_IRSOPInformation_Value;
pub const IRSOPInformation = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetNamespace: fn(
            self: *const IRSOPInformation,
            dwSection: u32,
            pszName: [*:0]u16,
            cchMaxLength: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFlags: fn(
            self: *const IRSOPInformation,
            pdwFlags: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEventLogEntryText: fn(
            self: *const IRSOPInformation,
            pszEventSource: PWSTR,
            pszEventLogName: PWSTR,
            pszEventTime: PWSTR,
            dwEventID: u32,
            ppszText: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRSOPInformation_GetNamespace(self: *const T, dwSection: u32, pszName: [*:0]u16, cchMaxLength: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRSOPInformation.VTable, self.vtable).GetNamespace(@ptrCast(*const IRSOPInformation, self), dwSection, pszName, cchMaxLength);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRSOPInformation_GetFlags(self: *const T, pdwFlags: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRSOPInformation.VTable, self.vtable).GetFlags(@ptrCast(*const IRSOPInformation, self), pdwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRSOPInformation_GetEventLogEntryText(self: *const T, pszEventSource: PWSTR, pszEventLogName: PWSTR, pszEventTime: PWSTR, dwEventID: u32, ppszText: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRSOPInformation.VTable, self.vtable).GetEventLogEntryText(@ptrCast(*const IRSOPInformation, self), pszEventSource, pszEventLogName, pszEventTime, dwEventID, ppszText);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const GPOBROWSEINFO = extern struct {
    dwSize: u32,
    dwFlags: u32,
    hwndOwner: HWND,
    lpTitle: PWSTR,
    lpInitialOU: PWSTR,
    lpDSPath: PWSTR,
    dwDSPathSize: u32,
    lpName: PWSTR,
    dwNameSize: u32,
    gpoType: GROUP_POLICY_OBJECT_TYPE,
    gpoHint: GROUP_POLICY_HINT_TYPE,
};


//--------------------------------------------------------------------------------
// Section: Functions (32)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "USERENV" fn RefreshPolicy(
    bMachine: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "USERENV" fn RefreshPolicyEx(
    bMachine: BOOL,
    dwOptions: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "USERENV" fn EnterCriticalPolicySection(
    bMachine: BOOL,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "USERENV" fn LeaveCriticalPolicySection(
    hSection: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "USERENV" fn RegisterGPNotification(
    hEvent: HANDLE,
    bMachine: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "USERENV" fn UnregisterGPNotification(
    hEvent: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "USERENV" fn GetGPOListA(
    hToken: HANDLE,
    lpName: ?[*:0]const u8,
    lpHostName: ?[*:0]const u8,
    lpComputerName: ?[*:0]const u8,
    dwFlags: u32,
    pGPOList: **GROUP_POLICY_OBJECTA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "USERENV" fn GetGPOListW(
    hToken: HANDLE,
    lpName: ?[*:0]const u16,
    lpHostName: ?[*:0]const u16,
    lpComputerName: ?[*:0]const u16,
    dwFlags: u32,
    pGPOList: **GROUP_POLICY_OBJECTW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "USERENV" fn FreeGPOListA(
    pGPOList: *GROUP_POLICY_OBJECTA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "USERENV" fn FreeGPOListW(
    pGPOList: *GROUP_POLICY_OBJECTW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "USERENV" fn GetAppliedGPOListA(
    dwFlags: u32,
    pMachineName: ?[*:0]const u8,
    pSidUser: PSID,
    pGuidExtension: *Guid,
    ppGPOList: **GROUP_POLICY_OBJECTA,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "USERENV" fn GetAppliedGPOListW(
    dwFlags: u32,
    pMachineName: ?[*:0]const u16,
    pSidUser: PSID,
    pGuidExtension: *Guid,
    ppGPOList: **GROUP_POLICY_OBJECTW,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "USERENV" fn ProcessGroupPolicyCompleted(
    extensionId: *Guid,
    pAsyncHandle: usize,
    dwStatus: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "USERENV" fn ProcessGroupPolicyCompletedEx(
    extensionId: *Guid,
    pAsyncHandle: usize,
    dwStatus: u32,
    RsopStatus: HRESULT,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "USERENV" fn RsopAccessCheckByType(
    pSecurityDescriptor: *SECURITY_DESCRIPTOR,
    pPrincipalSelfSid: PSID,
    pRsopToken: *c_void,
    dwDesiredAccessMask: u32,
    pObjectTypeList: ?[*]OBJECT_TYPE_LIST,
    ObjectTypeListLength: u32,
    pGenericMapping: *GENERIC_MAPPING,
    // TODO: what to do with BytesParamIndex 8?
    pPrivilegeSet: ?*PRIVILEGE_SET,
    pdwPrivilegeSetLength: ?*u32,
    pdwGrantedAccessMask: *u32,
    pbAccessStatus: *i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "USERENV" fn RsopFileAccessCheck(
    pszFileName: PWSTR,
    pRsopToken: *c_void,
    dwDesiredAccessMask: u32,
    pdwGrantedAccessMask: *u32,
    pbAccessStatus: *i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "USERENV" fn RsopSetPolicySettingStatus(
    dwFlags: u32,
    pServices: *IWbemServices,
    pSettingInstance: *IWbemClassObject,
    nInfo: u32,
    pStatus: [*]POLICYSETTINGSTATUSINFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "USERENV" fn RsopResetPolicySettingStatus(
    dwFlags: u32,
    pServices: *IWbemServices,
    pSettingInstance: *IWbemClassObject,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "USERENV" fn GenerateGPNotification(
    bMachine: BOOL,
    lpwszMgmtProduct: [*:0]const u16,
    dwMgmtProductOptions: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ADVAPI32" fn InstallApplication(
    pInstallInfo: *INSTALLDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ADVAPI32" fn UninstallApplication(
    ProductCode: PWSTR,
    dwStatus: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn CommandLineFromMsiDescriptor(
    Descriptor: PWSTR,
    CommandLine: [*:0]u16,
    CommandLineLength: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ADVAPI32" fn GetManagedApplications(
    pCategory: *Guid,
    dwQueryFlags: u32,
    dwInfoLevel: u32,
    pdwApps: *u32,
    prgManagedApps: **MANAGEDAPPLICATION,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ADVAPI32" fn GetLocalManagedApplications(
    bUserApps: BOOL,
    pdwApps: *u32,
    prgLocalApps: **LOCALMANAGEDAPPLICATION,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn GetLocalManagedApplicationData(
    ProductCode: PWSTR,
    DisplayName: *PWSTR,
    SupportUrl: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ADVAPI32" fn GetManagedApplicationCategories(
    dwReserved: u32,
    pAppCategory: *APPCATEGORYINFOLIST,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "GPEDIT" fn CreateGPOLink(
    lpGPO: PWSTR,
    lpContainer: PWSTR,
    fHighPriority: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "GPEDIT" fn DeleteGPOLink(
    lpGPO: PWSTR,
    lpContainer: PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "GPEDIT" fn DeleteAllGPOLinks(
    lpContainer: PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "GPEDIT" fn BrowseForGPO(
    lpBrowseInfo: *GPOBROWSEINFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "GPEDIT" fn ImportRSoPData(
    lpNameSpace: PWSTR,
    lpFileName: PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "GPEDIT" fn ExportRSoPData(
    lpNameSpace: PWSTR,
    lpFileName: PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (4)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const GROUP_POLICY_OBJECT = GROUP_POLICY_OBJECTA;
        pub const GetGPOList = GetGPOListA;
        pub const FreeGPOList = FreeGPOListA;
        pub const GetAppliedGPOList = GetAppliedGPOListA;
    },
    .wide => struct {
        pub const GROUP_POLICY_OBJECT = GROUP_POLICY_OBJECTW;
        pub const GetGPOList = GetGPOListW;
        pub const FreeGPOList = FreeGPOListW;
        pub const GetAppliedGPOList = GetAppliedGPOListW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const GROUP_POLICY_OBJECT = *opaque{};
        pub const GetGPOList = *opaque{};
        pub const FreeGPOList = *opaque{};
        pub const GetAppliedGPOList = *opaque{};
    } else struct {
        pub const GROUP_POLICY_OBJECT = @compileError("'GROUP_POLICY_OBJECT' requires that UNICODE be set to true or false in the root module");
        pub const GetGPOList = @compileError("'GetGPOList' requires that UNICODE be set to true or false in the root module");
        pub const FreeGPOList = @compileError("'FreeGPOList' requires that UNICODE be set to true or false in the root module");
        pub const GetAppliedGPOList = @compileError("'GetAppliedGPOList' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (22)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const LPARAM = @import("windows_and_messaging.zig").LPARAM;
const HKEY = @import("windows_programming.zig").HKEY;
const PWSTR = @import("system_services.zig").PWSTR;
const SAFEARRAY = @import("automation.zig").SAFEARRAY;
const CHAR = @import("system_services.zig").CHAR;
const IUnknown = @import("com.zig").IUnknown;
const SECURITY_DESCRIPTOR = @import("security.zig").SECURITY_DESCRIPTOR;
const HRESULT = @import("com.zig").HRESULT;
const OBJECT_TYPE_LIST = @import("security.zig").OBJECT_TYPE_LIST;
const IWbemClassObject = @import("wmi.zig").IWbemClassObject;
const APPCATEGORYINFOLIST = @import("shell.zig").APPCATEGORYINFOLIST;
const PSTR = @import("system_services.zig").PSTR;
const PSID = @import("security.zig").PSID;
const BOOL = @import("system_services.zig").BOOL;
const HWND = @import("windows_and_messaging.zig").HWND;
const GENERIC_MAPPING = @import("security.zig").GENERIC_MAPPING;
const PRIVILEGE_SET = @import("security.zig").PRIVILEGE_SET;
const IWbemServices = @import("wmi.zig").IWbemServices;
const SYSTEMTIME = @import("windows_programming.zig").SYSTEMTIME;
const HANDLE = @import("system_services.zig").HANDLE;
const HPROPSHEETPAGE = @import("controls.zig").HPROPSHEETPAGE;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "PFNSTATUSMESSAGECALLBACK")) { _ = PFNSTATUSMESSAGECALLBACK; }
    if (@hasDecl(@This(), "PFNPROCESSGROUPPOLICY")) { _ = PFNPROCESSGROUPPOLICY; }
    if (@hasDecl(@This(), "PFNPROCESSGROUPPOLICYEX")) { _ = PFNPROCESSGROUPPOLICYEX; }
    if (@hasDecl(@This(), "PFNGENERATEGROUPPOLICY")) { _ = PFNGENERATEGROUPPOLICY; }

    @setEvalBranchQuota(
        @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("std").builtin.is_test) return;
    inline for (@import("std").meta.declarations(@This())) |decl| {
        if (decl.is_pub) {
            _ = decl;
        }
    }
}
