//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (2207)
//--------------------------------------------------------------------------------
pub const L2_REASON_CODE_DOT11_AC_BASE = @as(u32, 131072);
pub const L2_REASON_CODE_DOT11_MSM_BASE = @as(u32, 196608);
pub const L2_REASON_CODE_DOT11_SECURITY_BASE = @as(u32, 262144);
pub const L2_REASON_CODE_ONEX_BASE = @as(u32, 327680);
pub const L2_REASON_CODE_DOT3_AC_BASE = @as(u32, 393216);
pub const L2_REASON_CODE_DOT3_MSM_BASE = @as(u32, 458752);
pub const L2_REASON_CODE_PROFILE_BASE = @as(u32, 524288);
pub const L2_REASON_CODE_IHV_BASE = @as(u32, 589824);
pub const L2_REASON_CODE_WIMAX_BASE = @as(u32, 655360);
pub const L2_REASON_CODE_RESERVED_BASE = @as(u32, 720896);
pub const WLAN_REASON_CODE_SUCCESS = @as(u32, 0);
pub const WLAN_REASON_CODE_UNKNOWN = @as(u32, 65537);
pub const WLAN_REASON_CODE_RANGE_SIZE = @as(u32, 65536);
pub const WLAN_REASON_CODE_BASE = @as(u32, 131072);
pub const WLAN_REASON_CODE_AC_BASE = @as(u32, 131072);
pub const WLAN_REASON_CODE_AC_CONNECT_BASE = @as(u32, 163840);
pub const WLAN_REASON_CODE_AC_END = @as(u32, 196607);
pub const WLAN_REASON_CODE_PROFILE_BASE = @as(u32, 524288);
pub const WLAN_REASON_CODE_PROFILE_CONNECT_BASE = @as(u32, 557056);
pub const WLAN_REASON_CODE_PROFILE_END = @as(u32, 589823);
pub const WLAN_REASON_CODE_MSM_BASE = @as(u32, 196608);
pub const WLAN_REASON_CODE_MSM_CONNECT_BASE = @as(u32, 229376);
pub const WLAN_REASON_CODE_MSM_END = @as(u32, 262143);
pub const WLAN_REASON_CODE_MSMSEC_BASE = @as(u32, 262144);
pub const WLAN_REASON_CODE_MSMSEC_CONNECT_BASE = @as(u32, 294912);
pub const WLAN_REASON_CODE_MSMSEC_END = @as(u32, 327679);
pub const WLAN_REASON_CODE_RESERVED_BASE = @as(u32, 720896);
pub const WLAN_REASON_CODE_RESERVED_END = @as(u32, 786431);
pub const L2_PROFILE_MAX_NAME_LENGTH = @as(u32, 256);
pub const L2_NOTIFICATION_SOURCE_NONE = @as(u32, 0);
pub const L2_NOTIFICATION_SOURCE_DOT3_AUTO_CONFIG = @as(u32, 1);
pub const L2_NOTIFICATION_SOURCE_SECURITY = @as(u32, 2);
pub const L2_NOTIFICATION_SOURCE_ONEX = @as(u32, 4);
pub const L2_NOTIFICATION_SOURCE_WLAN_ACM = @as(u32, 8);
pub const L2_NOTIFICATION_SOURCE_WLAN_MSM = @as(u32, 16);
pub const L2_NOTIFICATION_SOURCE_WLAN_SECURITY = @as(u32, 32);
pub const L2_NOTIFICATION_SOURCE_WLAN_IHV = @as(u32, 64);
pub const L2_NOTIFICATION_SOURCE_WLAN_HNWK = @as(u32, 128);
pub const L2_NOTIFICATION_SOURCE_WCM = @as(u32, 256);
pub const L2_NOTIFICATION_SOURCE_WCM_CSP = @as(u32, 512);
pub const L2_NOTIFICATION_SOURCE_WFD = @as(u32, 1024);
pub const L2_NOTIFICATION_SOURCE_WLAN_DEVICE_SERVICE = @as(u32, 2048);
pub const L2_NOTIFICATION_SOURCE_ALL = @as(u32, 65535);
pub const L2_NOTIFICATION_CODE_PUBLIC_BEGIN = @as(u32, 0);
pub const L2_NOTIFICATION_CODE_GROUP_SIZE = @as(u32, 4096);
pub const L2_REASON_CODE_GROUP_SIZE = @as(u32, 65536);
pub const L2_REASON_CODE_GEN_BASE = @as(u32, 65536);
pub const L2_REASON_CODE_SUCCESS = @as(u32, 0);
pub const L2_REASON_CODE_UNKNOWN = @as(u32, 65537);
pub const L2_REASON_CODE_PROFILE_MISSING = @as(u32, 1);
pub const DOT11_HESSID_LENGTH = @as(u32, 6);
pub const DOT11_RATE_SET_MAX_LENGTH = @as(u32, 126);
pub const DOT11_WFD_SERVICE_NAME_MAX_LENGTH = @as(u32, 255);
pub const DOT11_WFD_APS2_SERVICE_TYPE_MAX_LENGTH = @as(u32, 21);
pub const DOT11_WFD_ASP2_INSTANCE_NAME_MAX_LENGTH = @as(u32, 63);
pub const DOT11_WFD_SERVICE_INFORMATION_MAX_LENGTH = @as(u32, 65535);
pub const DOT11_MAX_REQUESTED_SERVICE_INFORMATION_LENGTH = @as(u32, 255);
pub const DOT11_WFD_SESSION_INFO_MAX_LENGTH = @as(u32, 144);
pub const DOT11_MAX_PDU_SIZE = @as(u32, 2346);
pub const DOT11_MIN_PDU_SIZE = @as(u32, 256);
pub const DOT11_MAX_NUM_DEFAULT_KEY = @as(u32, 4);
pub const DOT11_MAX_NUM_DEFAULT_KEY_MFP = @as(u32, 6);
pub const OID_DOT11_NDIS_START = @as(u32, 218170112);
pub const OID_DOT11_OFFLOAD_CAPABILITY = @as(u32, 218170112);
pub const OID_DOT11_CURRENT_OFFLOAD_CAPABILITY = @as(u32, 218170113);
pub const OID_DOT11_WEP_OFFLOAD = @as(u32, 218170114);
pub const OID_DOT11_WEP_UPLOAD = @as(u32, 218170115);
pub const OID_DOT11_DEFAULT_WEP_OFFLOAD = @as(u32, 218170116);
pub const OID_DOT11_DEFAULT_WEP_UPLOAD = @as(u32, 218170117);
pub const OID_DOT11_MPDU_MAX_LENGTH = @as(u32, 218170118);
pub const OID_DOT11_OPERATION_MODE_CAPABILITY = @as(u32, 218170119);
pub const OID_DOT11_CURRENT_OPERATION_MODE = @as(u32, 218170120);
pub const OID_DOT11_CURRENT_PACKET_FILTER = @as(u32, 218170121);
pub const OID_DOT11_ATIM_WINDOW = @as(u32, 218170122);
pub const OID_DOT11_SCAN_REQUEST = @as(u32, 218170123);
pub const OID_DOT11_CURRENT_PHY_TYPE = @as(u32, 218170124);
pub const OID_DOT11_JOIN_REQUEST = @as(u32, 218170125);
pub const OID_DOT11_START_REQUEST = @as(u32, 218170126);
pub const OID_DOT11_UPDATE_IE = @as(u32, 218170127);
pub const OID_DOT11_RESET_REQUEST = @as(u32, 218170128);
pub const OID_DOT11_NIC_POWER_STATE = @as(u32, 218170129);
pub const OID_DOT11_OPTIONAL_CAPABILITY = @as(u32, 218170130);
pub const OID_DOT11_CURRENT_OPTIONAL_CAPABILITY = @as(u32, 218170131);
pub const OID_DOT11_STATION_ID = @as(u32, 218170132);
pub const OID_DOT11_MEDIUM_OCCUPANCY_LIMIT = @as(u32, 218170133);
pub const OID_DOT11_CF_POLLABLE = @as(u32, 218170134);
pub const OID_DOT11_CFP_PERIOD = @as(u32, 218170135);
pub const OID_DOT11_CFP_MAX_DURATION = @as(u32, 218170136);
pub const OID_DOT11_POWER_MGMT_MODE = @as(u32, 218170137);
pub const OID_DOT11_OPERATIONAL_RATE_SET = @as(u32, 218170138);
pub const OID_DOT11_BEACON_PERIOD = @as(u32, 218170139);
pub const OID_DOT11_DTIM_PERIOD = @as(u32, 218170140);
pub const OID_DOT11_WEP_ICV_ERROR_COUNT = @as(u32, 218170141);
pub const OID_DOT11_MAC_ADDRESS = @as(u32, 218170142);
pub const OID_DOT11_RTS_THRESHOLD = @as(u32, 218170143);
pub const OID_DOT11_SHORT_RETRY_LIMIT = @as(u32, 218170144);
pub const OID_DOT11_LONG_RETRY_LIMIT = @as(u32, 218170145);
pub const OID_DOT11_FRAGMENTATION_THRESHOLD = @as(u32, 218170146);
pub const OID_DOT11_MAX_TRANSMIT_MSDU_LIFETIME = @as(u32, 218170147);
pub const OID_DOT11_MAX_RECEIVE_LIFETIME = @as(u32, 218170148);
pub const OID_DOT11_COUNTERS_ENTRY = @as(u32, 218170149);
pub const OID_DOT11_SUPPORTED_PHY_TYPES = @as(u32, 218170150);
pub const OID_DOT11_CURRENT_REG_DOMAIN = @as(u32, 218170151);
pub const OID_DOT11_TEMP_TYPE = @as(u32, 218170152);
pub const OID_DOT11_CURRENT_TX_ANTENNA = @as(u32, 218170153);
pub const OID_DOT11_DIVERSITY_SUPPORT = @as(u32, 218170154);
pub const OID_DOT11_CURRENT_RX_ANTENNA = @as(u32, 218170155);
pub const OID_DOT11_SUPPORTED_POWER_LEVELS = @as(u32, 218170156);
pub const OID_DOT11_CURRENT_TX_POWER_LEVEL = @as(u32, 218170157);
pub const OID_DOT11_HOP_TIME = @as(u32, 218170158);
pub const OID_DOT11_CURRENT_CHANNEL_NUMBER = @as(u32, 218170159);
pub const OID_DOT11_MAX_DWELL_TIME = @as(u32, 218170160);
pub const OID_DOT11_CURRENT_DWELL_TIME = @as(u32, 218170161);
pub const OID_DOT11_CURRENT_SET = @as(u32, 218170162);
pub const OID_DOT11_CURRENT_PATTERN = @as(u32, 218170163);
pub const OID_DOT11_CURRENT_INDEX = @as(u32, 218170164);
pub const OID_DOT11_CURRENT_CHANNEL = @as(u32, 218170165);
pub const OID_DOT11_CCA_MODE_SUPPORTED = @as(u32, 218170166);
pub const OID_DOT11_CURRENT_CCA_MODE = @as(u32, 218170167);
pub const OID_DOT11_ED_THRESHOLD = @as(u32, 218170168);
pub const OID_DOT11_CCA_WATCHDOG_TIMER_MAX = @as(u32, 218170169);
pub const OID_DOT11_CCA_WATCHDOG_COUNT_MAX = @as(u32, 218170170);
pub const OID_DOT11_CCA_WATCHDOG_TIMER_MIN = @as(u32, 218170171);
pub const OID_DOT11_CCA_WATCHDOG_COUNT_MIN = @as(u32, 218170172);
pub const OID_DOT11_REG_DOMAINS_SUPPORT_VALUE = @as(u32, 218170173);
pub const OID_DOT11_SUPPORTED_TX_ANTENNA = @as(u32, 218170174);
pub const OID_DOT11_SUPPORTED_RX_ANTENNA = @as(u32, 218170175);
pub const OID_DOT11_DIVERSITY_SELECTION_RX = @as(u32, 218170176);
pub const OID_DOT11_SUPPORTED_DATA_RATES_VALUE = @as(u32, 218170177);
pub const OID_DOT11_CURRENT_FREQUENCY = @as(u32, 218170178);
pub const OID_DOT11_TI_THRESHOLD = @as(u32, 218170179);
pub const OID_DOT11_FREQUENCY_BANDS_SUPPORTED = @as(u32, 218170180);
pub const OID_DOT11_SHORT_PREAMBLE_OPTION_IMPLEMENTED = @as(u32, 218170181);
pub const OID_DOT11_PBCC_OPTION_IMPLEMENTED = @as(u32, 218170182);
pub const OID_DOT11_CHANNEL_AGILITY_PRESENT = @as(u32, 218170183);
pub const OID_DOT11_CHANNEL_AGILITY_ENABLED = @as(u32, 218170184);
pub const OID_DOT11_HR_CCA_MODE_SUPPORTED = @as(u32, 218170185);
pub const OID_DOT11_MULTI_DOMAIN_CAPABILITY_IMPLEMENTED = @as(u32, 218170186);
pub const OID_DOT11_MULTI_DOMAIN_CAPABILITY_ENABLED = @as(u32, 218170187);
pub const OID_DOT11_COUNTRY_STRING = @as(u32, 218170188);
pub const OID_DOT11_MULTI_DOMAIN_CAPABILITY = @as(u32, 218170189);
pub const OID_DOT11_EHCC_PRIME_RADIX = @as(u32, 218170190);
pub const OID_DOT11_EHCC_NUMBER_OF_CHANNELS_FAMILY_INDEX = @as(u32, 218170191);
pub const OID_DOT11_EHCC_CAPABILITY_IMPLEMENTED = @as(u32, 218170192);
pub const OID_DOT11_EHCC_CAPABILITY_ENABLED = @as(u32, 218170193);
pub const OID_DOT11_HOP_ALGORITHM_ADOPTED = @as(u32, 218170194);
pub const OID_DOT11_RANDOM_TABLE_FLAG = @as(u32, 218170195);
pub const OID_DOT11_NUMBER_OF_HOPPING_SETS = @as(u32, 218170196);
pub const OID_DOT11_HOP_MODULUS = @as(u32, 218170197);
pub const OID_DOT11_HOP_OFFSET = @as(u32, 218170198);
pub const OID_DOT11_HOPPING_PATTERN = @as(u32, 218170199);
pub const OID_DOT11_RANDOM_TABLE_FIELD_NUMBER = @as(u32, 218170200);
pub const OID_DOT11_WPA_TSC = @as(u32, 218170201);
pub const OID_DOT11_RSSI_RANGE = @as(u32, 218170202);
pub const OID_DOT11_RF_USAGE = @as(u32, 218170203);
pub const OID_DOT11_NIC_SPECIFIC_EXTENSION = @as(u32, 218170204);
pub const OID_DOT11_AP_JOIN_REQUEST = @as(u32, 218170205);
pub const OID_DOT11_ERP_PBCC_OPTION_IMPLEMENTED = @as(u32, 218170206);
pub const OID_DOT11_ERP_PBCC_OPTION_ENABLED = @as(u32, 218170207);
pub const OID_DOT11_DSSS_OFDM_OPTION_IMPLEMENTED = @as(u32, 218170208);
pub const OID_DOT11_DSSS_OFDM_OPTION_ENABLED = @as(u32, 218170209);
pub const OID_DOT11_SHORT_SLOT_TIME_OPTION_IMPLEMENTED = @as(u32, 218170210);
pub const OID_DOT11_SHORT_SLOT_TIME_OPTION_ENABLED = @as(u32, 218170211);
pub const OID_DOT11_MAX_MAC_ADDRESS_STATES = @as(u32, 218170212);
pub const OID_DOT11_RECV_SENSITIVITY_LIST = @as(u32, 218170213);
pub const OID_DOT11_WME_IMPLEMENTED = @as(u32, 218170214);
pub const OID_DOT11_WME_ENABLED = @as(u32, 218170215);
pub const OID_DOT11_WME_AC_PARAMETERS = @as(u32, 218170216);
pub const OID_DOT11_WME_UPDATE_IE = @as(u32, 218170217);
pub const OID_DOT11_QOS_TX_QUEUES_SUPPORTED = @as(u32, 218170218);
pub const OID_DOT11_QOS_TX_DURATION = @as(u32, 218170219);
pub const OID_DOT11_QOS_TX_MEDIUM_TIME = @as(u32, 218170220);
pub const OID_DOT11_SUPPORTED_OFDM_FREQUENCY_LIST = @as(u32, 218170221);
pub const OID_DOT11_SUPPORTED_DSSS_CHANNEL_LIST = @as(u32, 218170222);
pub const DOT11_MAX_NUM_OF_FRAGMENTS = @as(u32, 16);
pub const DOT11_PRIORITY_CONTENTION = @as(u32, 0);
pub const DOT11_PRIORITY_CONTENTION_FREE = @as(u32, 1);
pub const DOT11_SERVICE_CLASS_REORDERABLE_MULTICAST = @as(u32, 0);
pub const DOT11_SERVICE_CLASS_STRICTLY_ORDERED = @as(u32, 1);
pub const DOT11_FLAGS_80211B_SHORT_PREAMBLE = @as(u32, 1);
pub const DOT11_FLAGS_80211B_PBCC = @as(u32, 2);
pub const DOT11_FLAGS_80211B_CHANNEL_AGILITY = @as(u32, 4);
pub const DOT11_FLAGS_PS_ON = @as(u32, 8);
pub const DOT11_FLAGS_80211G_DSSS_OFDM = @as(u32, 16);
pub const DOT11_FLAGS_80211G_USE_PROTECTION = @as(u32, 32);
pub const DOT11_FLAGS_80211G_NON_ERP_PRESENT = @as(u32, 64);
pub const DOT11_FLAGS_80211G_BARKER_PREAMBLE_MODE = @as(u32, 128);
pub const DOT11_WME_PACKET = @as(u32, 256);
pub const DOT11_EXTSTA_ATTRIBUTES_SAFEMODE_OID_SUPPORTED = @as(u32, 1);
pub const DOT11_EXTSTA_ATTRIBUTES_SAFEMODE_CERTIFIED = @as(u32, 2);
pub const DOT11_EXTSTA_ATTRIBUTES_SAFEMODE_RESERVED = @as(u32, 12);
pub const DOT11_STATUS_SUCCESS = @as(u32, 1);
pub const DOT11_STATUS_RETRY_LIMIT_EXCEEDED = @as(u32, 2);
pub const DOT11_STATUS_UNSUPPORTED_PRIORITY = @as(u32, 4);
pub const DOT11_STATUS_UNSUPPORTED_SERVICE_CLASS = @as(u32, 8);
pub const DOT11_STATUS_UNAVAILABLE_PRIORITY = @as(u32, 16);
pub const DOT11_STATUS_UNAVAILABLE_SERVICE_CLASS = @as(u32, 32);
pub const DOT11_STATUS_XMIT_MSDU_TIMER_EXPIRED = @as(u32, 64);
pub const DOT11_STATUS_UNAVAILABLE_BSS = @as(u32, 128);
pub const DOT11_STATUS_EXCESSIVE_DATA_LENGTH = @as(u32, 256);
pub const DOT11_STATUS_ENCRYPTION_FAILED = @as(u32, 512);
pub const DOT11_STATUS_WEP_KEY_UNAVAILABLE = @as(u32, 1024);
pub const DOT11_STATUS_ICV_VERIFIED = @as(u32, 2048);
pub const DOT11_STATUS_PACKET_REASSEMBLED = @as(u32, 4096);
pub const DOT11_STATUS_PACKET_NOT_REASSEMBLED = @as(u32, 8192);
pub const DOT11_STATUS_GENERATE_AUTH_FAILED = @as(u32, 16384);
pub const DOT11_STATUS_AUTH_NOT_VERIFIED = @as(u32, 32768);
pub const DOT11_STATUS_AUTH_VERIFIED = @as(u32, 65536);
pub const DOT11_STATUS_AUTH_FAILED = @as(u32, 131072);
pub const DOT11_STATUS_PS_LIFETIME_EXPIRED = @as(u32, 262144);
pub const DOT11_STATUS_RESET_CONFIRM = @as(u32, 4);
pub const DOT11_STATUS_SCAN_CONFIRM = @as(u32, 1);
pub const DOT11_STATUS_JOIN_CONFIRM = @as(u32, 2);
pub const DOT11_STATUS_START_CONFIRM = @as(u32, 3);
pub const DOT11_STATUS_AP_JOIN_CONFIRM = @as(u32, 5);
pub const DOT11_STATUS_MPDU_MAX_LENGTH_CHANGED = @as(u32, 6);
pub const DOT11_ENCAP_RFC_1042 = @as(u32, 1);
pub const DOT11_ENCAP_802_1H = @as(u32, 2);
pub const DOT11_ASSOC_STATUS_SUCCESS = @as(u32, 0);
pub const OID_DOT11_PRIVATE_OIDS_START = @as(u32, 218171136);
pub const OID_DOT11_CURRENT_ADDRESS = @as(u32, 218171138);
pub const OID_DOT11_PERMANENT_ADDRESS = @as(u32, 218171139);
pub const OID_DOT11_MULTICAST_LIST = @as(u32, 218171140);
pub const OID_DOT11_MAXIMUM_LIST_SIZE = @as(u32, 218171141);
pub const DOT11_EXTAP_ATTRIBUTES_REVISION_1 = @as(u32, 1);
pub const DOT11_INCOMING_ASSOC_STARTED_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const DOT11_INCOMING_ASSOC_REQUEST_RECEIVED_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const DOT11_ASSOC_ERROR_SOURCE_OS = @as(u32, 0);
pub const DOT11_ASSOC_ERROR_SOURCE_REMOTE = @as(u32, 1);
pub const DOT11_ASSOC_ERROR_SOURCE_OTHER = @as(u32, 255);
pub const DOT11_INCOMING_ASSOC_COMPLETION_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const DOT11_STOP_AP_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const DOT11_STOP_AP_REASON_FREQUENCY_NOT_AVAILABLE = @as(u32, 1);
pub const DOT11_STOP_AP_REASON_CHANNEL_NOT_AVAILABLE = @as(u32, 2);
pub const DOT11_STOP_AP_REASON_AP_ACTIVE = @as(u32, 3);
pub const DOT11_STOP_AP_REASON_IHV_START = @as(u32, 4278190080);
pub const DOT11_STOP_AP_REASON_IHV_END = @as(u32, 4294967295);
pub const DOT11_PHY_FREQUENCY_ADOPTED_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const DOT11_CAN_SUSTAIN_AP_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const DOT11_CAN_SUSTAIN_AP_REASON_IHV_START = @as(u32, 4278190080);
pub const DOT11_CAN_SUSTAIN_AP_REASON_IHV_END = @as(u32, 4294967295);
pub const DOT11_AVAILABLE_CHANNEL_LIST_REVISION_1 = @as(u32, 1);
pub const DOT11_AVAILABLE_FREQUENCY_LIST_REVISION_1 = @as(u32, 1);
pub const DOT11_DISASSOCIATE_PEER_REQUEST_REVISION_1 = @as(u32, 1);
pub const DOT11_INCOMING_ASSOC_DECISION_REVISION_1 = @as(u32, 1);
pub const DOT11_INCOMING_ASSOC_DECISION_REVISION_2 = @as(u32, 2);
pub const DOT11_ADDITIONAL_IE_REVISION_1 = @as(u32, 1);
pub const DOT11_EXTAP_SEND_CONTEXT_REVISION_1 = @as(u32, 1);
pub const DOT11_EXTAP_RECV_CONTEXT_REVISION_1 = @as(u32, 1);
pub const DOT11_PEER_INFO_LIST_REVISION_1 = @as(u32, 1);
pub const DOT11_VWIFI_COMBINATION_REVISION_1 = @as(u32, 1);
pub const DOT11_VWIFI_COMBINATION_REVISION_2 = @as(u32, 2);
pub const DOT11_VWIFI_COMBINATION_REVISION_3 = @as(u32, 3);
pub const DOT11_VWIFI_ATTRIBUTES_REVISION_1 = @as(u32, 1);
pub const DOT11_MAC_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const DOT11_WFD_ATTRIBUTES_REVISION_1 = @as(u32, 1);
pub const DOT11_WFD_STATUS_SUCCESS = @as(u32, 0);
pub const DOT11_WFD_STATUS_FAILED_INFORMATION_IS_UNAVAILABLE = @as(u32, 1);
pub const DOT11_WFD_STATUS_FAILED_INCOMPATIBLE_PARAMETERS = @as(u32, 2);
pub const DOT11_WFD_STATUS_FAILED_LIMIT_REACHED = @as(u32, 3);
pub const DOT11_WFD_STATUS_FAILED_INVALID_PARAMETERS = @as(u32, 4);
pub const DOT11_WFD_STATUS_FAILED_UNABLE_TO_ACCOMODATE_REQUEST = @as(u32, 5);
pub const DOT11_WFD_STATUS_FAILED_PREVIOUS_PROTOCOL_ERROR = @as(u32, 6);
pub const DOT11_WFD_STATUS_FAILED_NO_COMMON_CHANNELS = @as(u32, 7);
pub const DOT11_WFD_STATUS_FAILED_UNKNOWN_WFD_GROUP = @as(u32, 8);
pub const DOT11_WFD_STATUS_FAILED_MATCHING_MAX_INTENT = @as(u32, 9);
pub const DOT11_WFD_STATUS_FAILED_INCOMPATIBLE_PROVISIONING_METHOD = @as(u32, 10);
pub const DOT11_WFD_STATUS_FAILED_REJECTED_BY_USER = @as(u32, 11);
pub const DOT11_WFD_STATUS_SUCCESS_ACCEPTED_BY_USER = @as(u32, 12);
pub const DOT11_WFD_MINOR_REASON_SUCCESS = @as(u32, 0);
pub const DOT11_WFD_MINOR_REASON_DISASSOCIATED_FROM_WLAN_CROSS_CONNECTION_POLICY = @as(u32, 1);
pub const DOT11_WFD_MINOR_REASON_DISASSOCIATED_NOT_MANAGED_INFRASTRUCTURE_CAPABLE = @as(u32, 2);
pub const DOT11_WFD_MINOR_REASON_DISASSOCIATED_WFD_COEXISTENCE_POLICY = @as(u32, 3);
pub const DOT11_WFD_MINOR_REASON_DISASSOCIATED_INFRASTRUCTURE_MANAGED_POLICY = @as(u32, 4);
pub const DOT11_WPS_VERSION_1_0 = @as(u32, 1);
pub const DOT11_WPS_VERSION_2_0 = @as(u32, 2);
pub const DOT11_WFD_DEVICE_CAPABILITY_SERVICE_DISCOVERY = @as(u32, 1);
pub const DOT11_WFD_DEVICE_CAPABILITY_P2P_CLIENT_DISCOVERABILITY = @as(u32, 2);
pub const DOT11_WFD_DEVICE_CAPABILITY_CONCURRENT_OPERATION = @as(u32, 4);
pub const DOT11_WFD_DEVICE_CAPABILITY_P2P_INFRASTRUCTURE_MANAGED = @as(u32, 8);
pub const DOT11_WFD_DEVICE_CAPABILITY_P2P_DEVICE_LIMIT = @as(u32, 16);
pub const DOT11_WFD_DEVICE_CAPABILITY_P2P_INVITATION_PROCEDURE = @as(u32, 32);
pub const DOT11_WFD_DEVICE_CAPABILITY_RESERVED_6 = @as(u32, 64);
pub const DOT11_WFD_DEVICE_CAPABILITY_RESERVED_7 = @as(u32, 128);
pub const DOT11_WFD_GROUP_CAPABILITY_NONE = @as(u32, 0);
pub const DOT11_WFD_GROUP_CAPABILITY_GROUP_OWNER = @as(u32, 1);
pub const DOT11_WFD_GROUP_CAPABILITY_PERSISTENT_GROUP = @as(u32, 2);
pub const DOT11_WFD_GROUP_CAPABILITY_GROUP_LIMIT_REACHED = @as(u32, 4);
pub const DOT11_WFD_GROUP_CAPABILITY_INTRABSS_DISTRIBUTION_SUPPORTED = @as(u32, 8);
pub const DOT11_WFD_GROUP_CAPABILITY_CROSS_CONNECTION_SUPPORTED = @as(u32, 16);
pub const DOT11_WFD_GROUP_CAPABILITY_PERSISTENT_RECONNECT_SUPPORTED = @as(u32, 32);
pub const DOT11_WFD_GROUP_CAPABILITY_IN_GROUP_FORMATION = @as(u32, 64);
pub const DOT11_WFD_GROUP_CAPABILITY_RESERVED_7 = @as(u32, 128);
pub const DOT11_WFD_GROUP_CAPABILITY_EAPOL_KEY_IP_ADDRESS_ALLOCATION_SUPPORTED = @as(u32, 128);
pub const DOT11_WPS_DEVICE_NAME_MAX_LENGTH = @as(u32, 32);
pub const DOT11_WPS_MAX_PASSKEY_LENGTH = @as(u32, 8);
pub const DOT11_WPS_MAX_MODEL_NAME_LENGTH = @as(u32, 32);
pub const DOT11_WPS_MAX_MODEL_NUMBER_LENGTH = @as(u32, 32);
pub const WFDSVC_CONNECTION_CAPABILITY_NEW = @as(u32, 1);
pub const WFDSVC_CONNECTION_CAPABILITY_CLIENT = @as(u32, 2);
pub const WFDSVC_CONNECTION_CAPABILITY_GO = @as(u32, 4);
pub const DOT11_WFD_DISCOVER_COMPLETE_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const DOT11_WFD_DISCOVER_COMPLETE_MAX_LIST_SIZE = @as(u32, 128);
pub const DOT11_GO_NEGOTIATION_REQUEST_SEND_COMPLETE_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const DOT11_RECEIVED_GO_NEGOTIATION_REQUEST_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const DOT11_GO_NEGOTIATION_RESPONSE_SEND_COMPLETE_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const DOT11_RECEIVED_GO_NEGOTIATION_RESPONSE_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const DOT11_GO_NEGOTIATION_CONFIRMATION_SEND_COMPLETE_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const DOT11_RECEIVED_GO_NEGOTIATION_CONFIRMATION_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const DOT11_INVITATION_REQUEST_SEND_COMPLETE_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const DOT11_RECEIVED_INVITATION_REQUEST_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const DOT11_INVITATION_RESPONSE_SEND_COMPLETE_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const DOT11_RECEIVED_INVITATION_RESPONSE_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const DOT11_PROVISION_DISCOVERY_REQUEST_SEND_COMPLETE_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const DOT11_RECEIVED_PROVISION_DISCOVERY_REQUEST_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const DOT11_PROVISION_DISCOVERY_RESPONSE_SEND_COMPLETE_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const DOT11_RECEIVED_PROVISION_DISCOVERY_RESPONSE_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const DOT11_ANQP_QUERY_COMPLETE_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const DOT11_WFD_DEVICE_CAPABILITY_CONFIG_REVISION_1 = @as(u32, 1);
pub const DOT11_WFD_GROUP_OWNER_CAPABILITY_CONFIG_REVISION_1 = @as(u32, 1);
pub const DOT11_WFD_GROUP_OWNER_CAPABILITY_CONFIG_REVISION_2 = @as(u32, 2);
pub const DOT11_WFD_DEVICE_INFO_REVISION_1 = @as(u32, 1);
pub const DOT11_WFD_SECONDARY_DEVICE_TYPE_LIST_REVISION_1 = @as(u32, 1);
pub const DISCOVERY_FILTER_BITMASK_DEVICE = @as(u32, 1);
pub const DISCOVERY_FILTER_BITMASK_GO = @as(u32, 2);
pub const DISCOVERY_FILTER_BITMASK_ANY = @as(u32, 15);
pub const DOT11_WFD_DISCOVER_REQUEST_REVISION_1 = @as(u32, 1);
pub const DOT11_DEVICE_ENTRY_BYTE_ARRAY_REVISION_1 = @as(u32, 1);
pub const DOT11_WFD_ADDITIONAL_IE_REVISION_1 = @as(u32, 1);
pub const DOT11_SEND_GO_NEGOTIATION_REQUEST_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const DOT11_SEND_GO_NEGOTIATION_RESPONSE_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const DOT11_SEND_GO_NEGOTIATION_CONFIRMATION_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const DOT11_SEND_INVITATION_REQUEST_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const DOT11_SEND_INVITATION_RESPONSE_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const DOT11_SEND_PROVISION_DISCOVERY_REQUEST_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const DOT11_SEND_PROVISION_DISCOVERY_RESPONSE_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const DOT11_WFD_DEVICE_LISTEN_CHANNEL_REVISION_1 = @as(u32, 1);
pub const DOT11_WFD_GROUP_START_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const DOT11_WFD_GROUP_JOIN_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const DOT11_POWER_MGMT_AUTO_MODE_ENABLED_REVISION_1 = @as(u32, 1);
pub const DOT11_POWER_MGMT_MODE_STATUS_INFO_REVISION_1 = @as(u32, 1);
pub const DOT11_NLO_FLAG_STOP_NLO_INDICATION = @as(u32, 1);
pub const DOT11_NLO_FLAG_SCAN_ON_AOAC_PLATFORM = @as(u32, 2);
pub const DOT11_NLO_FLAG_SCAN_AT_SYSTEM_RESUME = @as(u32, 4);
pub const DOT11_OFFLOAD_NETWORK_LIST_REVISION_1 = @as(u32, 1);
pub const DOT11_OFFLOAD_NETWORK_STATUS_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const DOT11_MANUFACTURING_TEST_REVISION_1 = @as(u32, 1);
pub const DOT11_SSID_MAX_LENGTH = @as(u32, 32);
pub const DOT11_OI_MAX_LENGTH = @as(u32, 5);
pub const DOT11_OI_MIN_LENGTH = @as(u32, 3);
pub const NDIS_OBJECT_TYPE_DEFAULT = @as(u32, 128);
pub const NDIS_OBJECT_TYPE_MINIPORT_INIT_PARAMETERS = @as(u32, 129);
pub const NDIS_OBJECT_TYPE_SG_DMA_DESCRIPTION = @as(u32, 131);
pub const NDIS_OBJECT_TYPE_MINIPORT_INTERRUPT = @as(u32, 132);
pub const NDIS_OBJECT_TYPE_DEVICE_OBJECT_ATTRIBUTES = @as(u32, 133);
pub const NDIS_OBJECT_TYPE_BIND_PARAMETERS = @as(u32, 134);
pub const NDIS_OBJECT_TYPE_OPEN_PARAMETERS = @as(u32, 135);
pub const NDIS_OBJECT_TYPE_RSS_CAPABILITIES = @as(u32, 136);
pub const NDIS_OBJECT_TYPE_RSS_PARAMETERS = @as(u32, 137);
pub const NDIS_OBJECT_TYPE_MINIPORT_DRIVER_CHARACTERISTICS = @as(u32, 138);
pub const NDIS_OBJECT_TYPE_FILTER_DRIVER_CHARACTERISTICS = @as(u32, 139);
pub const NDIS_OBJECT_TYPE_FILTER_PARTIAL_CHARACTERISTICS = @as(u32, 140);
pub const NDIS_OBJECT_TYPE_FILTER_ATTRIBUTES = @as(u32, 141);
pub const NDIS_OBJECT_TYPE_CLIENT_CHIMNEY_OFFLOAD_GENERIC_CHARACTERISTICS = @as(u32, 142);
pub const NDIS_OBJECT_TYPE_PROVIDER_CHIMNEY_OFFLOAD_GENERIC_CHARACTERISTICS = @as(u32, 143);
pub const NDIS_OBJECT_TYPE_CO_PROTOCOL_CHARACTERISTICS = @as(u32, 144);
pub const NDIS_OBJECT_TYPE_CO_MINIPORT_CHARACTERISTICS = @as(u32, 145);
pub const NDIS_OBJECT_TYPE_MINIPORT_PNP_CHARACTERISTICS = @as(u32, 146);
pub const NDIS_OBJECT_TYPE_CLIENT_CHIMNEY_OFFLOAD_CHARACTERISTICS = @as(u32, 147);
pub const NDIS_OBJECT_TYPE_PROVIDER_CHIMNEY_OFFLOAD_CHARACTERISTICS = @as(u32, 148);
pub const NDIS_OBJECT_TYPE_PROTOCOL_DRIVER_CHARACTERISTICS = @as(u32, 149);
pub const NDIS_OBJECT_TYPE_REQUEST_EX = @as(u32, 150);
pub const NDIS_OBJECT_TYPE_OID_REQUEST = @as(u32, 150);
pub const NDIS_OBJECT_TYPE_TIMER_CHARACTERISTICS = @as(u32, 151);
pub const NDIS_OBJECT_TYPE_STATUS_INDICATION = @as(u32, 152);
pub const NDIS_OBJECT_TYPE_FILTER_ATTACH_PARAMETERS = @as(u32, 153);
pub const NDIS_OBJECT_TYPE_FILTER_PAUSE_PARAMETERS = @as(u32, 154);
pub const NDIS_OBJECT_TYPE_FILTER_RESTART_PARAMETERS = @as(u32, 155);
pub const NDIS_OBJECT_TYPE_PORT_CHARACTERISTICS = @as(u32, 156);
pub const NDIS_OBJECT_TYPE_PORT_STATE = @as(u32, 157);
pub const NDIS_OBJECT_TYPE_MINIPORT_ADAPTER_REGISTRATION_ATTRIBUTES = @as(u32, 158);
pub const NDIS_OBJECT_TYPE_MINIPORT_ADAPTER_GENERAL_ATTRIBUTES = @as(u32, 159);
pub const NDIS_OBJECT_TYPE_MINIPORT_ADAPTER_OFFLOAD_ATTRIBUTES = @as(u32, 160);
pub const NDIS_OBJECT_TYPE_MINIPORT_ADAPTER_NATIVE_802_11_ATTRIBUTES = @as(u32, 161);
pub const NDIS_OBJECT_TYPE_RESTART_GENERAL_ATTRIBUTES = @as(u32, 162);
pub const NDIS_OBJECT_TYPE_PROTOCOL_RESTART_PARAMETERS = @as(u32, 163);
pub const NDIS_OBJECT_TYPE_MINIPORT_ADD_DEVICE_REGISTRATION_ATTRIBUTES = @as(u32, 164);
pub const NDIS_OBJECT_TYPE_CO_CALL_MANAGER_OPTIONAL_HANDLERS = @as(u32, 165);
pub const NDIS_OBJECT_TYPE_CO_CLIENT_OPTIONAL_HANDLERS = @as(u32, 166);
pub const NDIS_OBJECT_TYPE_OFFLOAD = @as(u32, 167);
pub const NDIS_OBJECT_TYPE_OFFLOAD_ENCAPSULATION = @as(u32, 168);
pub const NDIS_OBJECT_TYPE_CONFIGURATION_OBJECT = @as(u32, 169);
pub const NDIS_OBJECT_TYPE_DRIVER_WRAPPER_OBJECT = @as(u32, 170);
pub const NDIS_OBJECT_TYPE_HD_SPLIT_ATTRIBUTES = @as(u32, 171);
pub const NDIS_OBJECT_TYPE_NSI_NETWORK_RW_STRUCT = @as(u32, 172);
pub const NDIS_OBJECT_TYPE_NSI_COMPARTMENT_RW_STRUCT = @as(u32, 173);
pub const NDIS_OBJECT_TYPE_NSI_INTERFACE_PERSIST_RW_STRUCT = @as(u32, 174);
pub const NDIS_OBJECT_TYPE_MINIPORT_ADAPTER_HARDWARE_ASSIST_ATTRIBUTES = @as(u32, 175);
pub const NDIS_OBJECT_TYPE_SHARED_MEMORY_PROVIDER_CHARACTERISTICS = @as(u32, 176);
pub const NDIS_OBJECT_TYPE_RSS_PROCESSOR_INFO = @as(u32, 177);
pub const NDIS_OBJECT_TYPE_NDK_PROVIDER_CHARACTERISTICS = @as(u32, 178);
pub const NDIS_OBJECT_TYPE_MINIPORT_ADAPTER_NDK_ATTRIBUTES = @as(u32, 179);
pub const NDIS_OBJECT_TYPE_MINIPORT_SS_CHARACTERISTICS = @as(u32, 180);
pub const NDIS_OBJECT_TYPE_QOS_CAPABILITIES = @as(u32, 181);
pub const NDIS_OBJECT_TYPE_QOS_PARAMETERS = @as(u32, 182);
pub const NDIS_OBJECT_TYPE_QOS_CLASSIFICATION_ELEMENT = @as(u32, 183);
pub const NDIS_OBJECT_TYPE_SWITCH_OPTIONAL_HANDLERS = @as(u32, 184);
pub const NDIS_OBJECT_TYPE_PD_TRANSMIT_QUEUE = @as(u32, 190);
pub const NDIS_OBJECT_TYPE_PD_RECEIVE_QUEUE = @as(u32, 191);
pub const NDIS_OBJECT_TYPE_MINIPORT_ADAPTER_PACKET_DIRECT_ATTRIBUTES = @as(u32, 197);
pub const NDIS_OBJECT_TYPE_MINIPORT_DEVICE_POWER_NOTIFICATION = @as(u32, 198);
pub const NDIS_OBJECT_TYPE_RSS_PARAMETERS_V2 = @as(u32, 200);
pub const NDIS_OBJECT_TYPE_RSS_SET_INDIRECTION_ENTRIES = @as(u32, 201);
pub const NDIS_OBJECT_REVISION_1 = @as(u32, 1);
pub const NDIS_STATISTICS_FLAGS_VALID_DIRECTED_FRAMES_RCV = @as(u32, 1);
pub const NDIS_STATISTICS_FLAGS_VALID_MULTICAST_FRAMES_RCV = @as(u32, 2);
pub const NDIS_STATISTICS_FLAGS_VALID_BROADCAST_FRAMES_RCV = @as(u32, 4);
pub const NDIS_STATISTICS_FLAGS_VALID_BYTES_RCV = @as(u32, 8);
pub const NDIS_STATISTICS_FLAGS_VALID_RCV_DISCARDS = @as(u32, 16);
pub const NDIS_STATISTICS_FLAGS_VALID_RCV_ERROR = @as(u32, 32);
pub const NDIS_STATISTICS_FLAGS_VALID_DIRECTED_FRAMES_XMIT = @as(u32, 64);
pub const NDIS_STATISTICS_FLAGS_VALID_MULTICAST_FRAMES_XMIT = @as(u32, 128);
pub const NDIS_STATISTICS_FLAGS_VALID_BROADCAST_FRAMES_XMIT = @as(u32, 256);
pub const NDIS_STATISTICS_FLAGS_VALID_BYTES_XMIT = @as(u32, 512);
pub const NDIS_STATISTICS_FLAGS_VALID_XMIT_ERROR = @as(u32, 1024);
pub const NDIS_STATISTICS_FLAGS_VALID_XMIT_DISCARDS = @as(u32, 32768);
pub const NDIS_STATISTICS_FLAGS_VALID_DIRECTED_BYTES_RCV = @as(u32, 65536);
pub const NDIS_STATISTICS_FLAGS_VALID_MULTICAST_BYTES_RCV = @as(u32, 131072);
pub const NDIS_STATISTICS_FLAGS_VALID_BROADCAST_BYTES_RCV = @as(u32, 262144);
pub const NDIS_STATISTICS_FLAGS_VALID_DIRECTED_BYTES_XMIT = @as(u32, 524288);
pub const NDIS_STATISTICS_FLAGS_VALID_MULTICAST_BYTES_XMIT = @as(u32, 1048576);
pub const NDIS_STATISTICS_FLAGS_VALID_BROADCAST_BYTES_XMIT = @as(u32, 2097152);
pub const NDIS_STATISTICS_INFO_REVISION_1 = @as(u32, 1);
pub const NDIS_RSC_STATISTICS_REVISION_1 = @as(u32, 1);
pub const NDIS_INTERRUPT_MODERATION_CHANGE_NEEDS_RESET = @as(u32, 1);
pub const NDIS_INTERRUPT_MODERATION_CHANGE_NEEDS_REINITIALIZE = @as(u32, 2);
pub const NDIS_INTERRUPT_MODERATION_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_TIMEOUT_DPC_REQUEST_CAPABILITIES_REVISION_1 = @as(u32, 1);
pub const NDIS_OBJECT_TYPE_PCI_DEVICE_CUSTOM_PROPERTIES_REVISION_1 = @as(u32, 1);
pub const NDIS_OBJECT_TYPE_PCI_DEVICE_CUSTOM_PROPERTIES_REVISION_2 = @as(u32, 2);
pub const OID_GEN_SUPPORTED_LIST = @as(u32, 65793);
pub const OID_GEN_HARDWARE_STATUS = @as(u32, 65794);
pub const OID_GEN_MEDIA_SUPPORTED = @as(u32, 65795);
pub const OID_GEN_MEDIA_IN_USE = @as(u32, 65796);
pub const OID_GEN_MAXIMUM_LOOKAHEAD = @as(u32, 65797);
pub const OID_GEN_MAXIMUM_FRAME_SIZE = @as(u32, 65798);
pub const OID_GEN_LINK_SPEED = @as(u32, 65799);
pub const OID_GEN_TRANSMIT_BUFFER_SPACE = @as(u32, 65800);
pub const OID_GEN_RECEIVE_BUFFER_SPACE = @as(u32, 65801);
pub const OID_GEN_TRANSMIT_BLOCK_SIZE = @as(u32, 65802);
pub const OID_GEN_RECEIVE_BLOCK_SIZE = @as(u32, 65803);
pub const OID_GEN_VENDOR_ID = @as(u32, 65804);
pub const OID_GEN_VENDOR_DESCRIPTION = @as(u32, 65805);
pub const OID_GEN_CURRENT_PACKET_FILTER = @as(u32, 65806);
pub const OID_GEN_CURRENT_LOOKAHEAD = @as(u32, 65807);
pub const OID_GEN_DRIVER_VERSION = @as(u32, 65808);
pub const OID_GEN_MAXIMUM_TOTAL_SIZE = @as(u32, 65809);
pub const OID_GEN_PROTOCOL_OPTIONS = @as(u32, 65810);
pub const OID_GEN_MAC_OPTIONS = @as(u32, 65811);
pub const OID_GEN_MEDIA_CONNECT_STATUS = @as(u32, 65812);
pub const OID_GEN_MAXIMUM_SEND_PACKETS = @as(u32, 65813);
pub const OID_GEN_VENDOR_DRIVER_VERSION = @as(u32, 65814);
pub const OID_GEN_SUPPORTED_GUIDS = @as(u32, 65815);
pub const OID_GEN_NETWORK_LAYER_ADDRESSES = @as(u32, 65816);
pub const OID_GEN_TRANSPORT_HEADER_OFFSET = @as(u32, 65817);
pub const OID_GEN_MEDIA_CAPABILITIES = @as(u32, 66049);
pub const OID_GEN_PHYSICAL_MEDIUM = @as(u32, 66050);
pub const OID_GEN_RECEIVE_SCALE_CAPABILITIES = @as(u32, 66051);
pub const OID_GEN_RECEIVE_SCALE_PARAMETERS = @as(u32, 66052);
pub const OID_GEN_MAC_ADDRESS = @as(u32, 66053);
pub const OID_GEN_MAX_LINK_SPEED = @as(u32, 66054);
pub const OID_GEN_LINK_STATE = @as(u32, 66055);
pub const OID_GEN_LINK_PARAMETERS = @as(u32, 66056);
pub const OID_GEN_INTERRUPT_MODERATION = @as(u32, 66057);
pub const OID_GEN_NDIS_RESERVED_3 = @as(u32, 66058);
pub const OID_GEN_NDIS_RESERVED_4 = @as(u32, 66059);
pub const OID_GEN_NDIS_RESERVED_5 = @as(u32, 66060);
pub const OID_GEN_ENUMERATE_PORTS = @as(u32, 66061);
pub const OID_GEN_PORT_STATE = @as(u32, 66062);
pub const OID_GEN_PORT_AUTHENTICATION_PARAMETERS = @as(u32, 66063);
pub const OID_GEN_TIMEOUT_DPC_REQUEST_CAPABILITIES = @as(u32, 66064);
pub const OID_GEN_PCI_DEVICE_CUSTOM_PROPERTIES = @as(u32, 66065);
pub const OID_GEN_NDIS_RESERVED_6 = @as(u32, 66066);
pub const OID_GEN_PHYSICAL_MEDIUM_EX = @as(u32, 66067);
pub const OID_GEN_RECEIVE_SCALE_PARAMETERS_V2 = @as(u32, 66068);
pub const OID_GEN_MACHINE_NAME = @as(u32, 66074);
pub const OID_GEN_RNDIS_CONFIG_PARAMETER = @as(u32, 66075);
pub const OID_GEN_VLAN_ID = @as(u32, 66076);
pub const OID_GEN_RECEIVE_HASH = @as(u32, 66079);
pub const OID_GEN_MINIPORT_RESTART_ATTRIBUTES = @as(u32, 66077);
pub const OID_GEN_HD_SPLIT_PARAMETERS = @as(u32, 66078);
pub const OID_GEN_HD_SPLIT_CURRENT_CONFIG = @as(u32, 66080);
pub const OID_GEN_PROMISCUOUS_MODE = @as(u32, 66176);
pub const OID_GEN_LAST_CHANGE = @as(u32, 66177);
pub const OID_GEN_DISCONTINUITY_TIME = @as(u32, 66178);
pub const OID_GEN_OPERATIONAL_STATUS = @as(u32, 66179);
pub const OID_GEN_XMIT_LINK_SPEED = @as(u32, 66180);
pub const OID_GEN_RCV_LINK_SPEED = @as(u32, 66181);
pub const OID_GEN_UNKNOWN_PROTOS = @as(u32, 66182);
pub const OID_GEN_INTERFACE_INFO = @as(u32, 66183);
pub const OID_GEN_ADMIN_STATUS = @as(u32, 66184);
pub const OID_GEN_ALIAS = @as(u32, 66185);
pub const OID_GEN_MEDIA_CONNECT_STATUS_EX = @as(u32, 66186);
pub const OID_GEN_LINK_SPEED_EX = @as(u32, 66187);
pub const OID_GEN_MEDIA_DUPLEX_STATE = @as(u32, 66188);
pub const OID_GEN_IP_OPER_STATUS = @as(u32, 66189);
pub const OID_WWAN_DRIVER_CAPS = @as(u32, 234946816);
pub const OID_WWAN_DEVICE_CAPS = @as(u32, 234946817);
pub const OID_WWAN_READY_INFO = @as(u32, 234946818);
pub const OID_WWAN_RADIO_STATE = @as(u32, 234946819);
pub const OID_WWAN_PIN = @as(u32, 234946820);
pub const OID_WWAN_PIN_LIST = @as(u32, 234946821);
pub const OID_WWAN_HOME_PROVIDER = @as(u32, 234946822);
pub const OID_WWAN_PREFERRED_PROVIDERS = @as(u32, 234946823);
pub const OID_WWAN_VISIBLE_PROVIDERS = @as(u32, 234946824);
pub const OID_WWAN_REGISTER_STATE = @as(u32, 234946825);
pub const OID_WWAN_PACKET_SERVICE = @as(u32, 234946826);
pub const OID_WWAN_SIGNAL_STATE = @as(u32, 234946827);
pub const OID_WWAN_CONNECT = @as(u32, 234946828);
pub const OID_WWAN_PROVISIONED_CONTEXTS = @as(u32, 234946829);
pub const OID_WWAN_SERVICE_ACTIVATION = @as(u32, 234946830);
pub const OID_WWAN_SMS_CONFIGURATION = @as(u32, 234946831);
pub const OID_WWAN_SMS_READ = @as(u32, 234946832);
pub const OID_WWAN_SMS_SEND = @as(u32, 234946833);
pub const OID_WWAN_SMS_DELETE = @as(u32, 234946834);
pub const OID_WWAN_SMS_STATUS = @as(u32, 234946835);
pub const OID_WWAN_VENDOR_SPECIFIC = @as(u32, 234946836);
pub const OID_WWAN_AUTH_CHALLENGE = @as(u32, 234946837);
pub const OID_WWAN_ENUMERATE_DEVICE_SERVICES = @as(u32, 234946838);
pub const OID_WWAN_SUBSCRIBE_DEVICE_SERVICE_EVENTS = @as(u32, 234946839);
pub const OID_WWAN_DEVICE_SERVICE_COMMAND = @as(u32, 234946840);
pub const OID_WWAN_USSD = @as(u32, 234946841);
pub const OID_WWAN_PIN_EX = @as(u32, 234946849);
pub const OID_WWAN_ENUMERATE_DEVICE_SERVICE_COMMANDS = @as(u32, 234946850);
pub const OID_WWAN_DEVICE_SERVICE_SESSION = @as(u32, 234946851);
pub const OID_WWAN_DEVICE_SERVICE_SESSION_WRITE = @as(u32, 234946852);
pub const OID_WWAN_PREFERRED_MULTICARRIER_PROVIDERS = @as(u32, 234946853);
pub const OID_WWAN_CREATE_MAC = @as(u32, 234946854);
pub const OID_WWAN_DELETE_MAC = @as(u32, 234946855);
pub const OID_WWAN_UICC_FILE_STATUS = @as(u32, 234946856);
pub const OID_WWAN_UICC_ACCESS_BINARY = @as(u32, 234946857);
pub const OID_WWAN_UICC_ACCESS_RECORD = @as(u32, 234946858);
pub const OID_WWAN_PIN_EX2 = @as(u32, 234946859);
pub const OID_WWAN_MBIM_VERSION = @as(u32, 234946860);
pub const OID_WWAN_SYS_CAPS = @as(u32, 234946861);
pub const OID_WWAN_DEVICE_CAPS_EX = @as(u32, 234946862);
pub const OID_WWAN_SYS_SLOTMAPPINGS = @as(u32, 234946863);
pub const OID_WWAN_SLOT_INFO_STATUS = @as(u32, 234946864);
pub const OID_WWAN_DEVICE_BINDINGS = @as(u32, 234946865);
pub const OID_WWAN_REGISTER_STATE_EX = @as(u32, 234946866);
pub const OID_WWAN_IMS_VOICE_STATE = @as(u32, 234946867);
pub const OID_WWAN_SIGNAL_STATE_EX = @as(u32, 234946868);
pub const OID_WWAN_LOCATION_STATE = @as(u32, 234946869);
pub const OID_WWAN_NITZ = @as(u32, 234946870);
pub const OID_WWAN_NETWORK_IDLE_HINT = @as(u32, 234946871);
pub const OID_WWAN_PRESHUTDOWN = @as(u32, 234946872);
pub const OID_WWAN_UICC_ATR = @as(u32, 234946873);
pub const OID_WWAN_UICC_OPEN_CHANNEL = @as(u32, 234946874);
pub const OID_WWAN_UICC_CLOSE_CHANNEL = @as(u32, 234946875);
pub const OID_WWAN_UICC_APDU = @as(u32, 234946876);
pub const OID_WWAN_UICC_TERMINAL_CAPABILITY = @as(u32, 234946877);
pub const OID_WWAN_PS_MEDIA_CONFIG = @as(u32, 234946878);
pub const OID_WWAN_SAR_CONFIG = @as(u32, 234946879);
pub const OID_WWAN_SAR_TRANSMISSION_STATUS = @as(u32, 234946880);
pub const OID_WWAN_NETWORK_BLACKLIST = @as(u32, 234946881);
pub const OID_WWAN_LTE_ATTACH_CONFIG = @as(u32, 234946882);
pub const OID_WWAN_LTE_ATTACH_STATUS = @as(u32, 234946883);
pub const OID_WWAN_MODEM_CONFIG_INFO = @as(u32, 234946884);
pub const OID_WWAN_PCO = @as(u32, 234946885);
pub const OID_WWAN_UICC_RESET = @as(u32, 234946886);
pub const OID_WWAN_DEVICE_RESET = @as(u32, 234946887);
pub const OID_WWAN_BASE_STATIONS_INFO = @as(u32, 234946888);
pub const OID_WWAN_MPDP = @as(u32, 234946889);
pub const OID_WWAN_UICC_APP_LIST = @as(u32, 234946890);
pub const OID_WWAN_MODEM_LOGGING_CONFIG = @as(u32, 234946891);
pub const OID_WWAN_REGISTER_PARAMS = @as(u32, 234946892);
pub const OID_WWAN_NETWORK_PARAMS = @as(u32, 234946893);
pub const OID_GEN_XMIT_OK = @as(u32, 131329);
pub const OID_GEN_RCV_OK = @as(u32, 131330);
pub const OID_GEN_XMIT_ERROR = @as(u32, 131331);
pub const OID_GEN_RCV_ERROR = @as(u32, 131332);
pub const OID_GEN_RCV_NO_BUFFER = @as(u32, 131333);
pub const OID_GEN_STATISTICS = @as(u32, 131334);
pub const OID_GEN_DIRECTED_BYTES_XMIT = @as(u32, 131585);
pub const OID_GEN_DIRECTED_FRAMES_XMIT = @as(u32, 131586);
pub const OID_GEN_MULTICAST_BYTES_XMIT = @as(u32, 131587);
pub const OID_GEN_MULTICAST_FRAMES_XMIT = @as(u32, 131588);
pub const OID_GEN_BROADCAST_BYTES_XMIT = @as(u32, 131589);
pub const OID_GEN_BROADCAST_FRAMES_XMIT = @as(u32, 131590);
pub const OID_GEN_DIRECTED_BYTES_RCV = @as(u32, 131591);
pub const OID_GEN_DIRECTED_FRAMES_RCV = @as(u32, 131592);
pub const OID_GEN_MULTICAST_BYTES_RCV = @as(u32, 131593);
pub const OID_GEN_MULTICAST_FRAMES_RCV = @as(u32, 131594);
pub const OID_GEN_BROADCAST_BYTES_RCV = @as(u32, 131595);
pub const OID_GEN_BROADCAST_FRAMES_RCV = @as(u32, 131596);
pub const OID_GEN_RCV_CRC_ERROR = @as(u32, 131597);
pub const OID_GEN_TRANSMIT_QUEUE_LENGTH = @as(u32, 131598);
pub const OID_GEN_GET_TIME_CAPS = @as(u32, 131599);
pub const OID_GEN_GET_NETCARD_TIME = @as(u32, 131600);
pub const OID_GEN_NETCARD_LOAD = @as(u32, 131601);
pub const OID_GEN_DEVICE_PROFILE = @as(u32, 131602);
pub const OID_GEN_INIT_TIME_MS = @as(u32, 131603);
pub const OID_GEN_RESET_COUNTS = @as(u32, 131604);
pub const OID_GEN_MEDIA_SENSE_COUNTS = @as(u32, 131605);
pub const OID_GEN_FRIENDLY_NAME = @as(u32, 131606);
pub const OID_GEN_NDIS_RESERVED_1 = @as(u32, 131607);
pub const OID_GEN_NDIS_RESERVED_2 = @as(u32, 131608);
pub const OID_GEN_BYTES_RCV = @as(u32, 131609);
pub const OID_GEN_BYTES_XMIT = @as(u32, 131610);
pub const OID_GEN_RCV_DISCARDS = @as(u32, 131611);
pub const OID_GEN_XMIT_DISCARDS = @as(u32, 131612);
pub const OID_TCP_RSC_STATISTICS = @as(u32, 131613);
pub const OID_GEN_NDIS_RESERVED_7 = @as(u32, 131614);
pub const OID_GEN_CO_MINIMUM_LINK_SPEED = @as(u32, 131360);
pub const OID_GEN_CO_BYTES_XMIT_OUTSTANDING = @as(u32, 131617);
pub const OID_802_3_PERMANENT_ADDRESS = @as(u32, 16843009);
pub const OID_802_3_CURRENT_ADDRESS = @as(u32, 16843010);
pub const OID_802_3_MULTICAST_LIST = @as(u32, 16843011);
pub const OID_802_3_MAXIMUM_LIST_SIZE = @as(u32, 16843012);
pub const OID_802_3_MAC_OPTIONS = @as(u32, 16843013);
pub const NDIS_802_3_MAC_OPTION_PRIORITY = @as(u32, 1);
pub const OID_802_3_RCV_ERROR_ALIGNMENT = @as(u32, 16908545);
pub const OID_802_3_XMIT_ONE_COLLISION = @as(u32, 16908546);
pub const OID_802_3_XMIT_MORE_COLLISIONS = @as(u32, 16908547);
pub const OID_802_3_XMIT_DEFERRED = @as(u32, 16908801);
pub const OID_802_3_XMIT_MAX_COLLISIONS = @as(u32, 16908802);
pub const OID_802_3_RCV_OVERRUN = @as(u32, 16908803);
pub const OID_802_3_XMIT_UNDERRUN = @as(u32, 16908804);
pub const OID_802_3_XMIT_HEARTBEAT_FAILURE = @as(u32, 16908805);
pub const OID_802_3_XMIT_TIMES_CRS_LOST = @as(u32, 16908806);
pub const OID_802_3_XMIT_LATE_COLLISIONS = @as(u32, 16908807);
pub const OID_802_3_ADD_MULTICAST_ADDRESS = @as(u32, 16843272);
pub const OID_802_3_DELETE_MULTICAST_ADDRESS = @as(u32, 16843273);
pub const OID_802_5_PERMANENT_ADDRESS = @as(u32, 33620225);
pub const OID_802_5_CURRENT_ADDRESS = @as(u32, 33620226);
pub const OID_802_5_CURRENT_FUNCTIONAL = @as(u32, 33620227);
pub const OID_802_5_CURRENT_GROUP = @as(u32, 33620228);
pub const OID_802_5_LAST_OPEN_STATUS = @as(u32, 33620229);
pub const OID_802_5_CURRENT_RING_STATUS = @as(u32, 33620230);
pub const OID_802_5_CURRENT_RING_STATE = @as(u32, 33620231);
pub const OID_802_5_LINE_ERRORS = @as(u32, 33685761);
pub const OID_802_5_LOST_FRAMES = @as(u32, 33685762);
pub const OID_802_5_BURST_ERRORS = @as(u32, 33686017);
pub const OID_802_5_AC_ERRORS = @as(u32, 33686018);
pub const OID_802_5_ABORT_DELIMETERS = @as(u32, 33686019);
pub const OID_802_5_FRAME_COPIED_ERRORS = @as(u32, 33686020);
pub const OID_802_5_FREQUENCY_ERRORS = @as(u32, 33686021);
pub const OID_802_5_TOKEN_ERRORS = @as(u32, 33686022);
pub const OID_802_5_INTERNAL_ERRORS = @as(u32, 33686023);
pub const OID_FDDI_LONG_PERMANENT_ADDR = @as(u32, 50397441);
pub const OID_FDDI_LONG_CURRENT_ADDR = @as(u32, 50397442);
pub const OID_FDDI_LONG_MULTICAST_LIST = @as(u32, 50397443);
pub const OID_FDDI_LONG_MAX_LIST_SIZE = @as(u32, 50397444);
pub const OID_FDDI_SHORT_PERMANENT_ADDR = @as(u32, 50397445);
pub const OID_FDDI_SHORT_CURRENT_ADDR = @as(u32, 50397446);
pub const OID_FDDI_SHORT_MULTICAST_LIST = @as(u32, 50397447);
pub const OID_FDDI_SHORT_MAX_LIST_SIZE = @as(u32, 50397448);
pub const OID_FDDI_ATTACHMENT_TYPE = @as(u32, 50462977);
pub const OID_FDDI_UPSTREAM_NODE_LONG = @as(u32, 50462978);
pub const OID_FDDI_DOWNSTREAM_NODE_LONG = @as(u32, 50462979);
pub const OID_FDDI_FRAME_ERRORS = @as(u32, 50462980);
pub const OID_FDDI_FRAMES_LOST = @as(u32, 50462981);
pub const OID_FDDI_RING_MGT_STATE = @as(u32, 50462982);
pub const OID_FDDI_LCT_FAILURES = @as(u32, 50462983);
pub const OID_FDDI_LEM_REJECTS = @as(u32, 50462984);
pub const OID_FDDI_LCONNECTION_STATE = @as(u32, 50462985);
pub const OID_FDDI_SMT_STATION_ID = @as(u32, 50528769);
pub const OID_FDDI_SMT_OP_VERSION_ID = @as(u32, 50528770);
pub const OID_FDDI_SMT_HI_VERSION_ID = @as(u32, 50528771);
pub const OID_FDDI_SMT_LO_VERSION_ID = @as(u32, 50528772);
pub const OID_FDDI_SMT_MANUFACTURER_DATA = @as(u32, 50528773);
pub const OID_FDDI_SMT_USER_DATA = @as(u32, 50528774);
pub const OID_FDDI_SMT_MIB_VERSION_ID = @as(u32, 50528775);
pub const OID_FDDI_SMT_MAC_CT = @as(u32, 50528776);
pub const OID_FDDI_SMT_NON_MASTER_CT = @as(u32, 50528777);
pub const OID_FDDI_SMT_MASTER_CT = @as(u32, 50528778);
pub const OID_FDDI_SMT_AVAILABLE_PATHS = @as(u32, 50528779);
pub const OID_FDDI_SMT_CONFIG_CAPABILITIES = @as(u32, 50528780);
pub const OID_FDDI_SMT_CONFIG_POLICY = @as(u32, 50528781);
pub const OID_FDDI_SMT_CONNECTION_POLICY = @as(u32, 50528782);
pub const OID_FDDI_SMT_T_NOTIFY = @as(u32, 50528783);
pub const OID_FDDI_SMT_STAT_RPT_POLICY = @as(u32, 50528784);
pub const OID_FDDI_SMT_TRACE_MAX_EXPIRATION = @as(u32, 50528785);
pub const OID_FDDI_SMT_PORT_INDEXES = @as(u32, 50528786);
pub const OID_FDDI_SMT_MAC_INDEXES = @as(u32, 50528787);
pub const OID_FDDI_SMT_BYPASS_PRESENT = @as(u32, 50528788);
pub const OID_FDDI_SMT_ECM_STATE = @as(u32, 50528789);
pub const OID_FDDI_SMT_CF_STATE = @as(u32, 50528790);
pub const OID_FDDI_SMT_HOLD_STATE = @as(u32, 50528791);
pub const OID_FDDI_SMT_REMOTE_DISCONNECT_FLAG = @as(u32, 50528792);
pub const OID_FDDI_SMT_STATION_STATUS = @as(u32, 50528793);
pub const OID_FDDI_SMT_PEER_WRAP_FLAG = @as(u32, 50528794);
pub const OID_FDDI_SMT_MSG_TIME_STAMP = @as(u32, 50528795);
pub const OID_FDDI_SMT_TRANSITION_TIME_STAMP = @as(u32, 50528796);
pub const OID_FDDI_SMT_SET_COUNT = @as(u32, 50528797);
pub const OID_FDDI_SMT_LAST_SET_STATION_ID = @as(u32, 50528798);
pub const OID_FDDI_MAC_FRAME_STATUS_FUNCTIONS = @as(u32, 50528799);
pub const OID_FDDI_MAC_BRIDGE_FUNCTIONS = @as(u32, 50528800);
pub const OID_FDDI_MAC_T_MAX_CAPABILITY = @as(u32, 50528801);
pub const OID_FDDI_MAC_TVX_CAPABILITY = @as(u32, 50528802);
pub const OID_FDDI_MAC_AVAILABLE_PATHS = @as(u32, 50528803);
pub const OID_FDDI_MAC_CURRENT_PATH = @as(u32, 50528804);
pub const OID_FDDI_MAC_UPSTREAM_NBR = @as(u32, 50528805);
pub const OID_FDDI_MAC_DOWNSTREAM_NBR = @as(u32, 50528806);
pub const OID_FDDI_MAC_OLD_UPSTREAM_NBR = @as(u32, 50528807);
pub const OID_FDDI_MAC_OLD_DOWNSTREAM_NBR = @as(u32, 50528808);
pub const OID_FDDI_MAC_DUP_ADDRESS_TEST = @as(u32, 50528809);
pub const OID_FDDI_MAC_REQUESTED_PATHS = @as(u32, 50528810);
pub const OID_FDDI_MAC_DOWNSTREAM_PORT_TYPE = @as(u32, 50528811);
pub const OID_FDDI_MAC_INDEX = @as(u32, 50528812);
pub const OID_FDDI_MAC_SMT_ADDRESS = @as(u32, 50528813);
pub const OID_FDDI_MAC_LONG_GRP_ADDRESS = @as(u32, 50528814);
pub const OID_FDDI_MAC_SHORT_GRP_ADDRESS = @as(u32, 50528815);
pub const OID_FDDI_MAC_T_REQ = @as(u32, 50528816);
pub const OID_FDDI_MAC_T_NEG = @as(u32, 50528817);
pub const OID_FDDI_MAC_T_MAX = @as(u32, 50528818);
pub const OID_FDDI_MAC_TVX_VALUE = @as(u32, 50528819);
pub const OID_FDDI_MAC_T_PRI0 = @as(u32, 50528820);
pub const OID_FDDI_MAC_T_PRI1 = @as(u32, 50528821);
pub const OID_FDDI_MAC_T_PRI2 = @as(u32, 50528822);
pub const OID_FDDI_MAC_T_PRI3 = @as(u32, 50528823);
pub const OID_FDDI_MAC_T_PRI4 = @as(u32, 50528824);
pub const OID_FDDI_MAC_T_PRI5 = @as(u32, 50528825);
pub const OID_FDDI_MAC_T_PRI6 = @as(u32, 50528826);
pub const OID_FDDI_MAC_FRAME_CT = @as(u32, 50528827);
pub const OID_FDDI_MAC_COPIED_CT = @as(u32, 50528828);
pub const OID_FDDI_MAC_TRANSMIT_CT = @as(u32, 50528829);
pub const OID_FDDI_MAC_TOKEN_CT = @as(u32, 50528830);
pub const OID_FDDI_MAC_ERROR_CT = @as(u32, 50528831);
pub const OID_FDDI_MAC_LOST_CT = @as(u32, 50528832);
pub const OID_FDDI_MAC_TVX_EXPIRED_CT = @as(u32, 50528833);
pub const OID_FDDI_MAC_NOT_COPIED_CT = @as(u32, 50528834);
pub const OID_FDDI_MAC_LATE_CT = @as(u32, 50528835);
pub const OID_FDDI_MAC_RING_OP_CT = @as(u32, 50528836);
pub const OID_FDDI_MAC_FRAME_ERROR_THRESHOLD = @as(u32, 50528837);
pub const OID_FDDI_MAC_FRAME_ERROR_RATIO = @as(u32, 50528838);
pub const OID_FDDI_MAC_NOT_COPIED_THRESHOLD = @as(u32, 50528839);
pub const OID_FDDI_MAC_NOT_COPIED_RATIO = @as(u32, 50528840);
pub const OID_FDDI_MAC_RMT_STATE = @as(u32, 50528841);
pub const OID_FDDI_MAC_DA_FLAG = @as(u32, 50528842);
pub const OID_FDDI_MAC_UNDA_FLAG = @as(u32, 50528843);
pub const OID_FDDI_MAC_FRAME_ERROR_FLAG = @as(u32, 50528844);
pub const OID_FDDI_MAC_NOT_COPIED_FLAG = @as(u32, 50528845);
pub const OID_FDDI_MAC_MA_UNITDATA_AVAILABLE = @as(u32, 50528846);
pub const OID_FDDI_MAC_HARDWARE_PRESENT = @as(u32, 50528847);
pub const OID_FDDI_MAC_MA_UNITDATA_ENABLE = @as(u32, 50528848);
pub const OID_FDDI_PATH_INDEX = @as(u32, 50528849);
pub const OID_FDDI_PATH_RING_LATENCY = @as(u32, 50528850);
pub const OID_FDDI_PATH_TRACE_STATUS = @as(u32, 50528851);
pub const OID_FDDI_PATH_SBA_PAYLOAD = @as(u32, 50528852);
pub const OID_FDDI_PATH_SBA_OVERHEAD = @as(u32, 50528853);
pub const OID_FDDI_PATH_CONFIGURATION = @as(u32, 50528854);
pub const OID_FDDI_PATH_T_R_MODE = @as(u32, 50528855);
pub const OID_FDDI_PATH_SBA_AVAILABLE = @as(u32, 50528856);
pub const OID_FDDI_PATH_TVX_LOWER_BOUND = @as(u32, 50528857);
pub const OID_FDDI_PATH_T_MAX_LOWER_BOUND = @as(u32, 50528858);
pub const OID_FDDI_PATH_MAX_T_REQ = @as(u32, 50528859);
pub const OID_FDDI_PORT_MY_TYPE = @as(u32, 50528860);
pub const OID_FDDI_PORT_NEIGHBOR_TYPE = @as(u32, 50528861);
pub const OID_FDDI_PORT_CONNECTION_POLICIES = @as(u32, 50528862);
pub const OID_FDDI_PORT_MAC_INDICATED = @as(u32, 50528863);
pub const OID_FDDI_PORT_CURRENT_PATH = @as(u32, 50528864);
pub const OID_FDDI_PORT_REQUESTED_PATHS = @as(u32, 50528865);
pub const OID_FDDI_PORT_MAC_PLACEMENT = @as(u32, 50528866);
pub const OID_FDDI_PORT_AVAILABLE_PATHS = @as(u32, 50528867);
pub const OID_FDDI_PORT_MAC_LOOP_TIME = @as(u32, 50528868);
pub const OID_FDDI_PORT_PMD_CLASS = @as(u32, 50528869);
pub const OID_FDDI_PORT_CONNECTION_CAPABILITIES = @as(u32, 50528870);
pub const OID_FDDI_PORT_INDEX = @as(u32, 50528871);
pub const OID_FDDI_PORT_MAINT_LS = @as(u32, 50528872);
pub const OID_FDDI_PORT_BS_FLAG = @as(u32, 50528873);
pub const OID_FDDI_PORT_PC_LS = @as(u32, 50528874);
pub const OID_FDDI_PORT_EB_ERROR_CT = @as(u32, 50528875);
pub const OID_FDDI_PORT_LCT_FAIL_CT = @as(u32, 50528876);
pub const OID_FDDI_PORT_LER_ESTIMATE = @as(u32, 50528877);
pub const OID_FDDI_PORT_LEM_REJECT_CT = @as(u32, 50528878);
pub const OID_FDDI_PORT_LEM_CT = @as(u32, 50528879);
pub const OID_FDDI_PORT_LER_CUTOFF = @as(u32, 50528880);
pub const OID_FDDI_PORT_LER_ALARM = @as(u32, 50528881);
pub const OID_FDDI_PORT_CONNNECT_STATE = @as(u32, 50528882);
pub const OID_FDDI_PORT_PCM_STATE = @as(u32, 50528883);
pub const OID_FDDI_PORT_PC_WITHHOLD = @as(u32, 50528884);
pub const OID_FDDI_PORT_LER_FLAG = @as(u32, 50528885);
pub const OID_FDDI_PORT_HARDWARE_PRESENT = @as(u32, 50528886);
pub const OID_FDDI_SMT_STATION_ACTION = @as(u32, 50528887);
pub const OID_FDDI_PORT_ACTION = @as(u32, 50528888);
pub const OID_FDDI_IF_DESCR = @as(u32, 50528889);
pub const OID_FDDI_IF_TYPE = @as(u32, 50528890);
pub const OID_FDDI_IF_MTU = @as(u32, 50528891);
pub const OID_FDDI_IF_SPEED = @as(u32, 50528892);
pub const OID_FDDI_IF_PHYS_ADDRESS = @as(u32, 50528893);
pub const OID_FDDI_IF_ADMIN_STATUS = @as(u32, 50528894);
pub const OID_FDDI_IF_OPER_STATUS = @as(u32, 50528895);
pub const OID_FDDI_IF_LAST_CHANGE = @as(u32, 50528896);
pub const OID_FDDI_IF_IN_OCTETS = @as(u32, 50528897);
pub const OID_FDDI_IF_IN_UCAST_PKTS = @as(u32, 50528898);
pub const OID_FDDI_IF_IN_NUCAST_PKTS = @as(u32, 50528899);
pub const OID_FDDI_IF_IN_DISCARDS = @as(u32, 50528900);
pub const OID_FDDI_IF_IN_ERRORS = @as(u32, 50528901);
pub const OID_FDDI_IF_IN_UNKNOWN_PROTOS = @as(u32, 50528902);
pub const OID_FDDI_IF_OUT_OCTETS = @as(u32, 50528903);
pub const OID_FDDI_IF_OUT_UCAST_PKTS = @as(u32, 50528904);
pub const OID_FDDI_IF_OUT_NUCAST_PKTS = @as(u32, 50528905);
pub const OID_FDDI_IF_OUT_DISCARDS = @as(u32, 50528906);
pub const OID_FDDI_IF_OUT_ERRORS = @as(u32, 50528907);
pub const OID_FDDI_IF_OUT_QLEN = @as(u32, 50528908);
pub const OID_FDDI_IF_SPECIFIC = @as(u32, 50528909);
pub const OID_WAN_PERMANENT_ADDRESS = @as(u32, 67174657);
pub const OID_WAN_CURRENT_ADDRESS = @as(u32, 67174658);
pub const OID_WAN_QUALITY_OF_SERVICE = @as(u32, 67174659);
pub const OID_WAN_PROTOCOL_TYPE = @as(u32, 67174660);
pub const OID_WAN_MEDIUM_SUBTYPE = @as(u32, 67174661);
pub const OID_WAN_HEADER_FORMAT = @as(u32, 67174662);
pub const OID_WAN_GET_INFO = @as(u32, 67174663);
pub const OID_WAN_SET_LINK_INFO = @as(u32, 67174664);
pub const OID_WAN_GET_LINK_INFO = @as(u32, 67174665);
pub const OID_WAN_LINE_COUNT = @as(u32, 67174666);
pub const OID_WAN_PROTOCOL_CAPS = @as(u32, 67174667);
pub const OID_WAN_GET_BRIDGE_INFO = @as(u32, 67174922);
pub const OID_WAN_SET_BRIDGE_INFO = @as(u32, 67174923);
pub const OID_WAN_GET_COMP_INFO = @as(u32, 67174924);
pub const OID_WAN_SET_COMP_INFO = @as(u32, 67174925);
pub const OID_WAN_GET_STATS_INFO = @as(u32, 67174926);
pub const OID_WAN_CO_GET_INFO = @as(u32, 67174784);
pub const OID_WAN_CO_SET_LINK_INFO = @as(u32, 67174785);
pub const OID_WAN_CO_GET_LINK_INFO = @as(u32, 67174786);
pub const OID_WAN_CO_GET_COMP_INFO = @as(u32, 67175040);
pub const OID_WAN_CO_SET_COMP_INFO = @as(u32, 67175041);
pub const OID_WAN_CO_GET_STATS_INFO = @as(u32, 67175042);
pub const OID_LTALK_CURRENT_NODE_ID = @as(u32, 83951874);
pub const OID_LTALK_IN_BROADCASTS = @as(u32, 84017409);
pub const OID_LTALK_IN_LENGTH_ERRORS = @as(u32, 84017410);
pub const OID_LTALK_OUT_NO_HANDLERS = @as(u32, 84017665);
pub const OID_LTALK_COLLISIONS = @as(u32, 84017666);
pub const OID_LTALK_DEFERS = @as(u32, 84017667);
pub const OID_LTALK_NO_DATA_ERRORS = @as(u32, 84017668);
pub const OID_LTALK_RANDOM_CTS_ERRORS = @as(u32, 84017669);
pub const OID_LTALK_FCS_ERRORS = @as(u32, 84017670);
pub const OID_ARCNET_PERMANENT_ADDRESS = @as(u32, 100729089);
pub const OID_ARCNET_CURRENT_ADDRESS = @as(u32, 100729090);
pub const OID_ARCNET_RECONFIGURATIONS = @as(u32, 100794881);
pub const OID_TAPI_ACCEPT = @as(u32, 117637377);
pub const OID_TAPI_ANSWER = @as(u32, 117637378);
pub const OID_TAPI_CLOSE = @as(u32, 117637379);
pub const OID_TAPI_CLOSE_CALL = @as(u32, 117637380);
pub const OID_TAPI_CONDITIONAL_MEDIA_DETECTION = @as(u32, 117637381);
pub const OID_TAPI_CONFIG_DIALOG = @as(u32, 117637382);
pub const OID_TAPI_DEV_SPECIFIC = @as(u32, 117637383);
pub const OID_TAPI_DIAL = @as(u32, 117637384);
pub const OID_TAPI_DROP = @as(u32, 117637385);
pub const OID_TAPI_GET_ADDRESS_CAPS = @as(u32, 117637386);
pub const OID_TAPI_GET_ADDRESS_ID = @as(u32, 117637387);
pub const OID_TAPI_GET_ADDRESS_STATUS = @as(u32, 117637388);
pub const OID_TAPI_GET_CALL_ADDRESS_ID = @as(u32, 117637389);
pub const OID_TAPI_GET_CALL_INFO = @as(u32, 117637390);
pub const OID_TAPI_GET_CALL_STATUS = @as(u32, 117637391);
pub const OID_TAPI_GET_DEV_CAPS = @as(u32, 117637392);
pub const OID_TAPI_GET_DEV_CONFIG = @as(u32, 117637393);
pub const OID_TAPI_GET_EXTENSION_ID = @as(u32, 117637394);
pub const OID_TAPI_GET_ID = @as(u32, 117637395);
pub const OID_TAPI_GET_LINE_DEV_STATUS = @as(u32, 117637396);
pub const OID_TAPI_MAKE_CALL = @as(u32, 117637397);
pub const OID_TAPI_NEGOTIATE_EXT_VERSION = @as(u32, 117637398);
pub const OID_TAPI_OPEN = @as(u32, 117637399);
pub const OID_TAPI_PROVIDER_INITIALIZE = @as(u32, 117637400);
pub const OID_TAPI_PROVIDER_SHUTDOWN = @as(u32, 117637401);
pub const OID_TAPI_SECURE_CALL = @as(u32, 117637402);
pub const OID_TAPI_SELECT_EXT_VERSION = @as(u32, 117637403);
pub const OID_TAPI_SEND_USER_USER_INFO = @as(u32, 117637404);
pub const OID_TAPI_SET_APP_SPECIFIC = @as(u32, 117637405);
pub const OID_TAPI_SET_CALL_PARAMS = @as(u32, 117637406);
pub const OID_TAPI_SET_DEFAULT_MEDIA_DETECTION = @as(u32, 117637407);
pub const OID_TAPI_SET_DEV_CONFIG = @as(u32, 117637408);
pub const OID_TAPI_SET_MEDIA_MODE = @as(u32, 117637409);
pub const OID_TAPI_SET_STATUS_MESSAGES = @as(u32, 117637410);
pub const OID_TAPI_GATHER_DIGITS = @as(u32, 117637411);
pub const OID_TAPI_MONITOR_DIGITS = @as(u32, 117637412);
pub const OID_ATM_SUPPORTED_VC_RATES = @as(u32, 134283521);
pub const OID_ATM_SUPPORTED_SERVICE_CATEGORY = @as(u32, 134283522);
pub const OID_ATM_SUPPORTED_AAL_TYPES = @as(u32, 134283523);
pub const OID_ATM_HW_CURRENT_ADDRESS = @as(u32, 134283524);
pub const OID_ATM_MAX_ACTIVE_VCS = @as(u32, 134283525);
pub const OID_ATM_MAX_ACTIVE_VCI_BITS = @as(u32, 134283526);
pub const OID_ATM_MAX_ACTIVE_VPI_BITS = @as(u32, 134283527);
pub const OID_ATM_MAX_AAL0_PACKET_SIZE = @as(u32, 134283528);
pub const OID_ATM_MAX_AAL1_PACKET_SIZE = @as(u32, 134283529);
pub const OID_ATM_MAX_AAL34_PACKET_SIZE = @as(u32, 134283530);
pub const OID_ATM_MAX_AAL5_PACKET_SIZE = @as(u32, 134283531);
pub const OID_ATM_SIGNALING_VPIVCI = @as(u32, 134283777);
pub const OID_ATM_ASSIGNED_VPI = @as(u32, 134283778);
pub const OID_ATM_ACQUIRE_ACCESS_NET_RESOURCES = @as(u32, 134283779);
pub const OID_ATM_RELEASE_ACCESS_NET_RESOURCES = @as(u32, 134283780);
pub const OID_ATM_ILMI_VPIVCI = @as(u32, 134283781);
pub const OID_ATM_DIGITAL_BROADCAST_VPIVCI = @as(u32, 134283782);
pub const OID_ATM_GET_NEAREST_FLOW = @as(u32, 134283783);
pub const OID_ATM_ALIGNMENT_REQUIRED = @as(u32, 134283784);
pub const OID_ATM_LECS_ADDRESS = @as(u32, 134283785);
pub const OID_ATM_SERVICE_ADDRESS = @as(u32, 134283786);
pub const OID_ATM_CALL_PROCEEDING = @as(u32, 134283787);
pub const OID_ATM_CALL_ALERTING = @as(u32, 134283788);
pub const OID_ATM_PARTY_ALERTING = @as(u32, 134283789);
pub const OID_ATM_CALL_NOTIFY = @as(u32, 134283790);
pub const OID_ATM_MY_IP_NM_ADDRESS = @as(u32, 134283791);
pub const OID_ATM_RCV_CELLS_OK = @as(u32, 134349057);
pub const OID_ATM_XMIT_CELLS_OK = @as(u32, 134349058);
pub const OID_ATM_RCV_CELLS_DROPPED = @as(u32, 134349059);
pub const OID_ATM_RCV_INVALID_VPI_VCI = @as(u32, 134349313);
pub const OID_ATM_CELLS_HEC_ERROR = @as(u32, 134349314);
pub const OID_ATM_RCV_REASSEMBLY_ERROR = @as(u32, 134349315);
pub const OID_802_11_BSSID = @as(u32, 218169601);
pub const OID_802_11_SSID = @as(u32, 218169602);
pub const OID_802_11_NETWORK_TYPES_SUPPORTED = @as(u32, 218169859);
pub const OID_802_11_NETWORK_TYPE_IN_USE = @as(u32, 218169860);
pub const OID_802_11_TX_POWER_LEVEL = @as(u32, 218169861);
pub const OID_802_11_RSSI = @as(u32, 218169862);
pub const OID_802_11_RSSI_TRIGGER = @as(u32, 218169863);
pub const OID_802_11_INFRASTRUCTURE_MODE = @as(u32, 218169608);
pub const OID_802_11_FRAGMENTATION_THRESHOLD = @as(u32, 218169865);
pub const OID_802_11_RTS_THRESHOLD = @as(u32, 218169866);
pub const OID_802_11_NUMBER_OF_ANTENNAS = @as(u32, 218169867);
pub const OID_802_11_RX_ANTENNA_SELECTED = @as(u32, 218169868);
pub const OID_802_11_TX_ANTENNA_SELECTED = @as(u32, 218169869);
pub const OID_802_11_SUPPORTED_RATES = @as(u32, 218169870);
pub const OID_802_11_DESIRED_RATES = @as(u32, 218169872);
pub const OID_802_11_CONFIGURATION = @as(u32, 218169873);
pub const OID_802_11_STATISTICS = @as(u32, 218235410);
pub const OID_802_11_ADD_WEP = @as(u32, 218169619);
pub const OID_802_11_REMOVE_WEP = @as(u32, 218169620);
pub const OID_802_11_DISASSOCIATE = @as(u32, 218169621);
pub const OID_802_11_POWER_MODE = @as(u32, 218169878);
pub const OID_802_11_BSSID_LIST = @as(u32, 218169879);
pub const OID_802_11_AUTHENTICATION_MODE = @as(u32, 218169624);
pub const OID_802_11_PRIVACY_FILTER = @as(u32, 218169625);
pub const OID_802_11_BSSID_LIST_SCAN = @as(u32, 218169626);
pub const OID_802_11_WEP_STATUS = @as(u32, 218169627);
pub const OID_802_11_RELOAD_DEFAULTS = @as(u32, 218169628);
pub const OID_802_11_ADD_KEY = @as(u32, 218169629);
pub const OID_802_11_REMOVE_KEY = @as(u32, 218169630);
pub const OID_802_11_ASSOCIATION_INFORMATION = @as(u32, 218169631);
pub const OID_802_11_TEST = @as(u32, 218169632);
pub const OID_802_11_MEDIA_STREAM_MODE = @as(u32, 218169633);
pub const OID_802_11_CAPABILITY = @as(u32, 218169634);
pub const OID_802_11_PMKID = @as(u32, 218169635);
pub const OID_802_11_NON_BCAST_SSID_LIST = @as(u32, 218169636);
pub const OID_802_11_RADIO_STATUS = @as(u32, 218169637);
pub const NDIS_ETH_TYPE_IPV4 = @as(u32, 2048);
pub const NDIS_ETH_TYPE_ARP = @as(u32, 2054);
pub const NDIS_ETH_TYPE_IPV6 = @as(u32, 34525);
pub const NDIS_ETH_TYPE_802_1X = @as(u32, 34958);
pub const NDIS_ETH_TYPE_802_1Q = @as(u32, 33024);
pub const NDIS_ETH_TYPE_SLOW_PROTOCOL = @as(u32, 34825);
pub const NDIS_802_11_LENGTH_SSID = @as(u32, 32);
pub const NDIS_802_11_LENGTH_RATES = @as(u32, 8);
pub const NDIS_802_11_LENGTH_RATES_EX = @as(u32, 16);
pub const NDIS_802_11_AUTH_REQUEST_AUTH_FIELDS = @as(u32, 15);
pub const NDIS_802_11_AUTH_REQUEST_REAUTH = @as(u32, 1);
pub const NDIS_802_11_AUTH_REQUEST_KEYUPDATE = @as(u32, 2);
pub const NDIS_802_11_AUTH_REQUEST_PAIRWISE_ERROR = @as(u32, 6);
pub const NDIS_802_11_AUTH_REQUEST_GROUP_ERROR = @as(u32, 14);
pub const NDIS_802_11_PMKID_CANDIDATE_PREAUTH_ENABLED = @as(u32, 1);
pub const NDIS_802_11_AI_REQFI_CAPABILITIES = @as(u32, 1);
pub const NDIS_802_11_AI_REQFI_LISTENINTERVAL = @as(u32, 2);
pub const NDIS_802_11_AI_REQFI_CURRENTAPADDRESS = @as(u32, 4);
pub const NDIS_802_11_AI_RESFI_CAPABILITIES = @as(u32, 1);
pub const NDIS_802_11_AI_RESFI_STATUSCODE = @as(u32, 2);
pub const NDIS_802_11_AI_RESFI_ASSOCIATIONID = @as(u32, 4);
pub const OID_IRDA_RECEIVING = @as(u32, 167837952);
pub const OID_IRDA_TURNAROUND_TIME = @as(u32, 167837953);
pub const OID_IRDA_SUPPORTED_SPEEDS = @as(u32, 167837954);
pub const OID_IRDA_LINK_SPEED = @as(u32, 167837955);
pub const OID_IRDA_MEDIA_BUSY = @as(u32, 167837956);
pub const OID_IRDA_EXTRA_RCV_BOFS = @as(u32, 167838208);
pub const OID_IRDA_RATE_SNIFF = @as(u32, 167838209);
pub const OID_IRDA_UNICAST_LIST = @as(u32, 167838210);
pub const OID_IRDA_MAX_UNICAST_LIST_SIZE = @as(u32, 167838211);
pub const OID_IRDA_MAX_RECEIVE_WINDOW_SIZE = @as(u32, 167838212);
pub const OID_IRDA_MAX_SEND_WINDOW_SIZE = @as(u32, 167838213);
pub const OID_IRDA_RESERVED1 = @as(u32, 167838218);
pub const OID_IRDA_RESERVED2 = @as(u32, 167838223);
pub const OID_1394_LOCAL_NODE_INFO = @as(u32, 201392385);
pub const OID_1394_VC_INFO = @as(u32, 201392386);
pub const OID_CO_ADD_PVC = @as(u32, 4261412865);
pub const OID_CO_DELETE_PVC = @as(u32, 4261412866);
pub const OID_CO_GET_CALL_INFORMATION = @as(u32, 4261412867);
pub const OID_CO_ADD_ADDRESS = @as(u32, 4261412868);
pub const OID_CO_DELETE_ADDRESS = @as(u32, 4261412869);
pub const OID_CO_GET_ADDRESSES = @as(u32, 4261412870);
pub const OID_CO_ADDRESS_CHANGE = @as(u32, 4261412871);
pub const OID_CO_SIGNALING_ENABLED = @as(u32, 4261412872);
pub const OID_CO_SIGNALING_DISABLED = @as(u32, 4261412873);
pub const OID_CO_AF_CLOSE = @as(u32, 4261412874);
pub const OID_CO_TAPI_CM_CAPS = @as(u32, 4261416961);
pub const OID_CO_TAPI_LINE_CAPS = @as(u32, 4261416962);
pub const OID_CO_TAPI_ADDRESS_CAPS = @as(u32, 4261416963);
pub const OID_CO_TAPI_TRANSLATE_TAPI_CALLPARAMS = @as(u32, 4261416964);
pub const OID_CO_TAPI_TRANSLATE_NDIS_CALLPARAMS = @as(u32, 4261416965);
pub const OID_CO_TAPI_TRANSLATE_TAPI_SAP = @as(u32, 4261416966);
pub const OID_CO_TAPI_GET_CALL_DIAGNOSTICS = @as(u32, 4261416967);
pub const OID_CO_TAPI_REPORT_DIGITS = @as(u32, 4261416968);
pub const OID_CO_TAPI_DONT_REPORT_DIGITS = @as(u32, 4261416969);
pub const OID_PNP_CAPABILITIES = @as(u32, 4244701440);
pub const OID_PNP_SET_POWER = @as(u32, 4244701441);
pub const OID_PNP_QUERY_POWER = @as(u32, 4244701442);
pub const OID_PNP_ADD_WAKE_UP_PATTERN = @as(u32, 4244701443);
pub const OID_PNP_REMOVE_WAKE_UP_PATTERN = @as(u32, 4244701444);
pub const OID_PNP_WAKE_UP_PATTERN_LIST = @as(u32, 4244701445);
pub const OID_PNP_ENABLE_WAKE_UP = @as(u32, 4244701446);
pub const OID_PNP_WAKE_UP_OK = @as(u32, 4244767232);
pub const OID_PNP_WAKE_UP_ERROR = @as(u32, 4244767233);
pub const OID_PM_CURRENT_CAPABILITIES = @as(u32, 4244701447);
pub const OID_PM_HARDWARE_CAPABILITIES = @as(u32, 4244701448);
pub const OID_PM_PARAMETERS = @as(u32, 4244701449);
pub const OID_PM_ADD_WOL_PATTERN = @as(u32, 4244701450);
pub const OID_PM_REMOVE_WOL_PATTERN = @as(u32, 4244701451);
pub const OID_PM_WOL_PATTERN_LIST = @as(u32, 4244701452);
pub const OID_PM_ADD_PROTOCOL_OFFLOAD = @as(u32, 4244701453);
pub const OID_PM_GET_PROTOCOL_OFFLOAD = @as(u32, 4244701454);
pub const OID_PM_REMOVE_PROTOCOL_OFFLOAD = @as(u32, 4244701455);
pub const OID_PM_PROTOCOL_OFFLOAD_LIST = @as(u32, 4244701456);
pub const OID_PM_RESERVED_1 = @as(u32, 4244701457);
pub const OID_RECEIVE_FILTER_HARDWARE_CAPABILITIES = @as(u32, 66081);
pub const OID_RECEIVE_FILTER_GLOBAL_PARAMETERS = @as(u32, 66082);
pub const OID_RECEIVE_FILTER_ALLOCATE_QUEUE = @as(u32, 66083);
pub const OID_RECEIVE_FILTER_FREE_QUEUE = @as(u32, 66084);
pub const OID_RECEIVE_FILTER_ENUM_QUEUES = @as(u32, 66085);
pub const OID_RECEIVE_FILTER_QUEUE_PARAMETERS = @as(u32, 66086);
pub const OID_RECEIVE_FILTER_SET_FILTER = @as(u32, 66087);
pub const OID_RECEIVE_FILTER_CLEAR_FILTER = @as(u32, 66088);
pub const OID_RECEIVE_FILTER_ENUM_FILTERS = @as(u32, 66089);
pub const OID_RECEIVE_FILTER_PARAMETERS = @as(u32, 66090);
pub const OID_RECEIVE_FILTER_QUEUE_ALLOCATION_COMPLETE = @as(u32, 66091);
pub const OID_RECEIVE_FILTER_CURRENT_CAPABILITIES = @as(u32, 66093);
pub const OID_NIC_SWITCH_HARDWARE_CAPABILITIES = @as(u32, 66094);
pub const OID_NIC_SWITCH_CURRENT_CAPABILITIES = @as(u32, 66095);
pub const OID_RECEIVE_FILTER_MOVE_FILTER = @as(u32, 66096);
pub const OID_VLAN_RESERVED1 = @as(u32, 66097);
pub const OID_VLAN_RESERVED2 = @as(u32, 66098);
pub const OID_VLAN_RESERVED3 = @as(u32, 66099);
pub const OID_VLAN_RESERVED4 = @as(u32, 66100);
pub const OID_PACKET_COALESCING_FILTER_MATCH_COUNT = @as(u32, 66101);
pub const OID_NIC_SWITCH_CREATE_SWITCH = @as(u32, 66103);
pub const OID_NIC_SWITCH_PARAMETERS = @as(u32, 66104);
pub const OID_NIC_SWITCH_DELETE_SWITCH = @as(u32, 66105);
pub const OID_NIC_SWITCH_ENUM_SWITCHES = @as(u32, 66112);
pub const OID_NIC_SWITCH_CREATE_VPORT = @as(u32, 66113);
pub const OID_NIC_SWITCH_VPORT_PARAMETERS = @as(u32, 66114);
pub const OID_NIC_SWITCH_ENUM_VPORTS = @as(u32, 66115);
pub const OID_NIC_SWITCH_DELETE_VPORT = @as(u32, 66116);
pub const OID_NIC_SWITCH_ALLOCATE_VF = @as(u32, 66117);
pub const OID_NIC_SWITCH_FREE_VF = @as(u32, 66118);
pub const OID_NIC_SWITCH_VF_PARAMETERS = @as(u32, 66119);
pub const OID_NIC_SWITCH_ENUM_VFS = @as(u32, 66120);
pub const OID_SRIOV_HARDWARE_CAPABILITIES = @as(u32, 66121);
pub const OID_SRIOV_CURRENT_CAPABILITIES = @as(u32, 66128);
pub const OID_SRIOV_READ_VF_CONFIG_SPACE = @as(u32, 66129);
pub const OID_SRIOV_WRITE_VF_CONFIG_SPACE = @as(u32, 66130);
pub const OID_SRIOV_READ_VF_CONFIG_BLOCK = @as(u32, 66131);
pub const OID_SRIOV_WRITE_VF_CONFIG_BLOCK = @as(u32, 66132);
pub const OID_SRIOV_RESET_VF = @as(u32, 66133);
pub const OID_SRIOV_SET_VF_POWER_STATE = @as(u32, 66134);
pub const OID_SRIOV_VF_VENDOR_DEVICE_ID = @as(u32, 66135);
pub const OID_SRIOV_PROBED_BARS = @as(u32, 66136);
pub const OID_SRIOV_BAR_RESOURCES = @as(u32, 66137);
pub const OID_SRIOV_PF_LUID = @as(u32, 66144);
pub const OID_SRIOV_CONFIG_STATE = @as(u32, 66145);
pub const OID_SRIOV_VF_SERIAL_NUMBER = @as(u32, 66146);
pub const OID_SRIOV_OVERLYING_ADAPTER_INFO = @as(u32, 66152);
pub const OID_SRIOV_VF_INVALIDATE_CONFIG_BLOCK = @as(u32, 66153);
pub const OID_SWITCH_PROPERTY_ADD = @as(u32, 66147);
pub const OID_SWITCH_PROPERTY_UPDATE = @as(u32, 66148);
pub const OID_SWITCH_PROPERTY_DELETE = @as(u32, 66149);
pub const OID_SWITCH_PROPERTY_ENUM = @as(u32, 66150);
pub const OID_SWITCH_FEATURE_STATUS_QUERY = @as(u32, 66151);
pub const OID_SWITCH_NIC_REQUEST = @as(u32, 66160);
pub const OID_SWITCH_PORT_PROPERTY_ADD = @as(u32, 66161);
pub const OID_SWITCH_PORT_PROPERTY_UPDATE = @as(u32, 66162);
pub const OID_SWITCH_PORT_PROPERTY_DELETE = @as(u32, 66163);
pub const OID_SWITCH_PORT_PROPERTY_ENUM = @as(u32, 66164);
pub const OID_SWITCH_PARAMETERS = @as(u32, 66165);
pub const OID_SWITCH_PORT_ARRAY = @as(u32, 66166);
pub const OID_SWITCH_NIC_ARRAY = @as(u32, 66167);
pub const OID_SWITCH_PORT_CREATE = @as(u32, 66168);
pub const OID_SWITCH_PORT_DELETE = @as(u32, 66169);
pub const OID_SWITCH_NIC_CREATE = @as(u32, 66170);
pub const OID_SWITCH_NIC_CONNECT = @as(u32, 66171);
pub const OID_SWITCH_NIC_DISCONNECT = @as(u32, 66172);
pub const OID_SWITCH_NIC_DELETE = @as(u32, 66173);
pub const OID_SWITCH_PORT_FEATURE_STATUS_QUERY = @as(u32, 66174);
pub const OID_SWITCH_PORT_TEARDOWN = @as(u32, 66175);
pub const OID_SWITCH_NIC_SAVE = @as(u32, 66192);
pub const OID_SWITCH_NIC_SAVE_COMPLETE = @as(u32, 66193);
pub const OID_SWITCH_NIC_RESTORE = @as(u32, 66194);
pub const OID_SWITCH_NIC_RESTORE_COMPLETE = @as(u32, 66195);
pub const OID_SWITCH_NIC_UPDATED = @as(u32, 66196);
pub const OID_SWITCH_PORT_UPDATED = @as(u32, 66197);
pub const OID_SWITCH_NIC_DIRECT_REQUEST = @as(u32, 66198);
pub const OID_SWITCH_NIC_SUSPEND = @as(u32, 66199);
pub const OID_SWITCH_NIC_RESUME = @as(u32, 66200);
pub const OID_SWITCH_NIC_SUSPENDED_LM_SOURCE_STARTED = @as(u32, 66201);
pub const OID_SWITCH_NIC_SUSPENDED_LM_SOURCE_FINISHED = @as(u32, 66202);
pub const OID_GEN_RSS_SET_INDIRECTION_TABLE_ENTRIES = @as(u32, 66240);
pub const OID_GEN_ISOLATION_PARAMETERS = @as(u32, 66304);
pub const OID_GFT_HARDWARE_CAPABILITIES = @as(u32, 66561);
pub const OID_GFT_CURRENT_CAPABILITIES = @as(u32, 66562);
pub const OID_GFT_GLOBAL_PARAMETERS = @as(u32, 66563);
pub const OID_GFT_CREATE_TABLE = @as(u32, 66564);
pub const OID_GFT_DELETE_TABLE = @as(u32, 66565);
pub const OID_GFT_ENUM_TABLES = @as(u32, 66566);
pub const OID_GFT_ALLOCATE_COUNTERS = @as(u32, 66567);
pub const OID_GFT_FREE_COUNTERS = @as(u32, 66568);
pub const OID_GFT_ENUM_COUNTERS = @as(u32, 66569);
pub const OID_GFT_COUNTER_VALUES = @as(u32, 66570);
pub const OID_GFT_STATISTICS = @as(u32, 66571);
pub const OID_GFT_ADD_FLOW_ENTRIES = @as(u32, 66572);
pub const OID_GFT_DELETE_FLOW_ENTRIES = @as(u32, 66573);
pub const OID_GFT_ENUM_FLOW_ENTRIES = @as(u32, 66574);
pub const OID_GFT_ACTIVATE_FLOW_ENTRIES = @as(u32, 66575);
pub const OID_GFT_DEACTIVATE_FLOW_ENTRIES = @as(u32, 66576);
pub const OID_GFT_FLOW_ENTRY_PARAMETERS = @as(u32, 66577);
pub const OID_GFT_EXACT_MATCH_PROFILE = @as(u32, 66578);
pub const OID_GFT_HEADER_TRANSPOSITION_PROFILE = @as(u32, 66579);
pub const OID_GFT_WILDCARD_MATCH_PROFILE = @as(u32, 66580);
pub const OID_GFT_ENUM_PROFILES = @as(u32, 66581);
pub const OID_GFT_DELETE_PROFILE = @as(u32, 66582);
pub const OID_GFT_VPORT_PARAMETERS = @as(u32, 66583);
pub const OID_GFT_CREATE_LOGICAL_VPORT = @as(u32, 66584);
pub const OID_GFT_DELETE_LOGICAL_VPORT = @as(u32, 66585);
pub const OID_GFT_ENUM_LOGICAL_VPORTS = @as(u32, 66586);
pub const OID_QOS_OFFLOAD_HARDWARE_CAPABILITIES = @as(u32, 67073);
pub const OID_QOS_OFFLOAD_CURRENT_CAPABILITIES = @as(u32, 67074);
pub const OID_QOS_OFFLOAD_CREATE_SQ = @as(u32, 67075);
pub const OID_QOS_OFFLOAD_DELETE_SQ = @as(u32, 67076);
pub const OID_QOS_OFFLOAD_UPDATE_SQ = @as(u32, 67077);
pub const OID_QOS_OFFLOAD_ENUM_SQS = @as(u32, 67078);
pub const OID_QOS_OFFLOAD_SQ_STATS = @as(u32, 67079);
pub const OID_PD_OPEN_PROVIDER = @as(u32, 66817);
pub const OID_PD_CLOSE_PROVIDER = @as(u32, 66818);
pub const OID_PD_QUERY_CURRENT_CONFIG = @as(u32, 66819);
pub const NDIS_PNP_WAKE_UP_MAGIC_PACKET = @as(u32, 1);
pub const NDIS_PNP_WAKE_UP_PATTERN_MATCH = @as(u32, 2);
pub const NDIS_PNP_WAKE_UP_LINK_CHANGE = @as(u32, 4);
pub const OID_TCP_TASK_OFFLOAD = @as(u32, 4227924481);
pub const OID_TCP_TASK_IPSEC_ADD_SA = @as(u32, 4227924482);
pub const OID_TCP_TASK_IPSEC_DELETE_SA = @as(u32, 4227924483);
pub const OID_TCP_SAN_SUPPORT = @as(u32, 4227924484);
pub const OID_TCP_TASK_IPSEC_ADD_UDPESP_SA = @as(u32, 4227924485);
pub const OID_TCP_TASK_IPSEC_DELETE_UDPESP_SA = @as(u32, 4227924486);
pub const OID_TCP4_OFFLOAD_STATS = @as(u32, 4227924487);
pub const OID_TCP6_OFFLOAD_STATS = @as(u32, 4227924488);
pub const OID_IP4_OFFLOAD_STATS = @as(u32, 4227924489);
pub const OID_IP6_OFFLOAD_STATS = @as(u32, 4227924490);
pub const OID_TCP_OFFLOAD_CURRENT_CONFIG = @as(u32, 4227924491);
pub const OID_TCP_OFFLOAD_PARAMETERS = @as(u32, 4227924492);
pub const OID_TCP_OFFLOAD_HARDWARE_CAPABILITIES = @as(u32, 4227924493);
pub const OID_TCP_CONNECTION_OFFLOAD_CURRENT_CONFIG = @as(u32, 4227924494);
pub const OID_TCP_CONNECTION_OFFLOAD_HARDWARE_CAPABILITIES = @as(u32, 4227924495);
pub const OID_OFFLOAD_ENCAPSULATION = @as(u32, 16843018);
pub const OID_TCP_TASK_IPSEC_OFFLOAD_V2_ADD_SA = @as(u32, 4228055554);
pub const OID_TCP_TASK_IPSEC_OFFLOAD_V2_DELETE_SA = @as(u32, 4228055555);
pub const OID_TCP_TASK_IPSEC_OFFLOAD_V2_UPDATE_SA = @as(u32, 4228055556);
pub const OID_TCP_TASK_IPSEC_OFFLOAD_V2_ADD_SA_EX = @as(u32, 4228055557);
pub const OID_FFP_SUPPORT = @as(u32, 4227924496);
pub const OID_FFP_FLUSH = @as(u32, 4227924497);
pub const OID_FFP_CONTROL = @as(u32, 4227924498);
pub const OID_FFP_PARAMS = @as(u32, 4227924499);
pub const OID_FFP_DATA = @as(u32, 4227924500);
pub const OID_FFP_DRIVER_STATS = @as(u32, 4227990032);
pub const OID_FFP_ADAPTER_STATS = @as(u32, 4227990033);
pub const OID_TCP_CONNECTION_OFFLOAD_PARAMETERS = @as(u32, 4228055553);
pub const OID_TUNNEL_INTERFACE_SET_OID = @as(u32, 251724038);
pub const OID_TUNNEL_INTERFACE_RELEASE_OID = @as(u32, 251724039);
pub const OID_QOS_RESERVED1 = @as(u32, 4211147008);
pub const OID_QOS_RESERVED2 = @as(u32, 4211147009);
pub const OID_QOS_RESERVED3 = @as(u32, 4211147010);
pub const OID_QOS_RESERVED4 = @as(u32, 4211147011);
pub const OID_QOS_RESERVED5 = @as(u32, 4211147012);
pub const OID_QOS_RESERVED6 = @as(u32, 4211147013);
pub const OID_QOS_RESERVED7 = @as(u32, 4211147014);
pub const OID_QOS_RESERVED8 = @as(u32, 4211147015);
pub const OID_QOS_RESERVED9 = @as(u32, 4211147016);
pub const OID_QOS_RESERVED10 = @as(u32, 4211147017);
pub const OID_QOS_RESERVED11 = @as(u32, 4211147018);
pub const OID_QOS_RESERVED12 = @as(u32, 4211147019);
pub const OID_QOS_RESERVED13 = @as(u32, 4211147020);
pub const OID_QOS_RESERVED14 = @as(u32, 4211147021);
pub const OID_QOS_RESERVED15 = @as(u32, 4211147022);
pub const OID_QOS_RESERVED16 = @as(u32, 4211147023);
pub const OID_QOS_RESERVED17 = @as(u32, 4211147024);
pub const OID_QOS_RESERVED18 = @as(u32, 4211147025);
pub const OID_QOS_RESERVED19 = @as(u32, 4211147026);
pub const OID_QOS_RESERVED20 = @as(u32, 4211147027);
pub const OID_XBOX_ACC_RESERVED0 = @as(u32, 4194304000);
pub const OFFLOAD_MAX_SAS = @as(u32, 3);
pub const OFFLOAD_INBOUND_SA = @as(u32, 1);
pub const OFFLOAD_OUTBOUND_SA = @as(u32, 2);
pub const NDIS_PROTOCOL_ID_DEFAULT = @as(u32, 0);
pub const NDIS_PROTOCOL_ID_TCP_IP = @as(u32, 2);
pub const NDIS_PROTOCOL_ID_IP6 = @as(u32, 3);
pub const NDIS_PROTOCOL_ID_IPX = @as(u32, 6);
pub const NDIS_PROTOCOL_ID_NBF = @as(u32, 7);
pub const NDIS_PROTOCOL_ID_MAX = @as(u32, 15);
pub const NDIS_PROTOCOL_ID_MASK = @as(u32, 15);
pub const READABLE_LOCAL_CLOCK = @as(u32, 1);
pub const CLOCK_NETWORK_DERIVED = @as(u32, 2);
pub const CLOCK_PRECISION = @as(u32, 4);
pub const RECEIVE_TIME_INDICATION_CAPABLE = @as(u32, 8);
pub const TIMED_SEND_CAPABLE = @as(u32, 16);
pub const TIME_STAMP_CAPABLE = @as(u32, 32);
pub const NDIS_DEVICE_WAKE_UP_ENABLE = @as(u32, 1);
pub const NDIS_DEVICE_WAKE_ON_PATTERN_MATCH_ENABLE = @as(u32, 2);
pub const NDIS_DEVICE_WAKE_ON_MAGIC_PACKET_ENABLE = @as(u32, 4);
pub const WAN_PROTOCOL_KEEPS_STATS = @as(u32, 1);
pub const NDIS_PACKET_TYPE_DIRECTED = @as(u32, 1);
pub const NDIS_PACKET_TYPE_MULTICAST = @as(u32, 2);
pub const NDIS_PACKET_TYPE_ALL_MULTICAST = @as(u32, 4);
pub const NDIS_PACKET_TYPE_BROADCAST = @as(u32, 8);
pub const NDIS_PACKET_TYPE_SOURCE_ROUTING = @as(u32, 16);
pub const NDIS_PACKET_TYPE_PROMISCUOUS = @as(u32, 32);
pub const NDIS_PACKET_TYPE_SMT = @as(u32, 64);
pub const NDIS_PACKET_TYPE_ALL_LOCAL = @as(u32, 128);
pub const NDIS_PACKET_TYPE_GROUP = @as(u32, 4096);
pub const NDIS_PACKET_TYPE_ALL_FUNCTIONAL = @as(u32, 8192);
pub const NDIS_PACKET_TYPE_FUNCTIONAL = @as(u32, 16384);
pub const NDIS_PACKET_TYPE_MAC_FRAME = @as(u32, 32768);
pub const NDIS_PACKET_TYPE_NO_LOCAL = @as(u32, 65536);
pub const NDIS_RING_SIGNAL_LOSS = @as(u32, 32768);
pub const NDIS_RING_HARD_ERROR = @as(u32, 16384);
pub const NDIS_RING_SOFT_ERROR = @as(u32, 8192);
pub const NDIS_RING_TRANSMIT_BEACON = @as(u32, 4096);
pub const NDIS_RING_LOBE_WIRE_FAULT = @as(u32, 2048);
pub const NDIS_RING_AUTO_REMOVAL_ERROR = @as(u32, 1024);
pub const NDIS_RING_REMOVE_RECEIVED = @as(u32, 512);
pub const NDIS_RING_COUNTER_OVERFLOW = @as(u32, 256);
pub const NDIS_RING_SINGLE_STATION = @as(u32, 128);
pub const NDIS_RING_RING_RECOVERY = @as(u32, 64);
pub const NDIS_PROT_OPTION_ESTIMATED_LENGTH = @as(u32, 1);
pub const NDIS_PROT_OPTION_NO_LOOPBACK = @as(u32, 2);
pub const NDIS_PROT_OPTION_NO_RSVD_ON_RCVPKT = @as(u32, 4);
pub const NDIS_PROT_OPTION_SEND_RESTRICTED = @as(u32, 8);
pub const NDIS_MAC_OPTION_COPY_LOOKAHEAD_DATA = @as(u32, 1);
pub const NDIS_MAC_OPTION_RECEIVE_SERIALIZED = @as(u32, 2);
pub const NDIS_MAC_OPTION_TRANSFERS_NOT_PEND = @as(u32, 4);
pub const NDIS_MAC_OPTION_NO_LOOPBACK = @as(u32, 8);
pub const NDIS_MAC_OPTION_FULL_DUPLEX = @as(u32, 16);
pub const NDIS_MAC_OPTION_EOTX_INDICATION = @as(u32, 32);
pub const NDIS_MAC_OPTION_8021P_PRIORITY = @as(u32, 64);
pub const NDIS_MAC_OPTION_SUPPORTS_MAC_ADDRESS_OVERWRITE = @as(u32, 128);
pub const NDIS_MAC_OPTION_RECEIVE_AT_DPC = @as(u32, 256);
pub const NDIS_MAC_OPTION_8021Q_VLAN = @as(u32, 512);
pub const NDIS_MAC_OPTION_RESERVED = @as(u32, 2147483648);
pub const NDIS_MEDIA_CAP_TRANSMIT = @as(u32, 1);
pub const NDIS_MEDIA_CAP_RECEIVE = @as(u32, 2);
pub const NDIS_CO_MAC_OPTION_DYNAMIC_LINK_SPEED = @as(u32, 1);
pub const NDIS_LINK_STATE_XMIT_LINK_SPEED_AUTO_NEGOTIATED = @as(u32, 1);
pub const NDIS_LINK_STATE_RCV_LINK_SPEED_AUTO_NEGOTIATED = @as(u32, 2);
pub const NDIS_LINK_STATE_DUPLEX_AUTO_NEGOTIATED = @as(u32, 4);
pub const NDIS_LINK_STATE_PAUSE_FUNCTIONS_AUTO_NEGOTIATED = @as(u32, 8);
pub const NDIS_LINK_STATE_REVISION_1 = @as(u32, 1);
pub const NDIS_LINK_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_OPER_STATE_REVISION_1 = @as(u32, 1);
pub const MAXIMUM_IP_OPER_STATUS_ADDRESS_FAMILIES_SUPPORTED = @as(u32, 32);
pub const NDIS_IP_OPER_STATUS_INFO_REVISION_1 = @as(u32, 1);
pub const NDIS_IP_OPER_STATE_REVISION_1 = @as(u32, 1);
pub const NDIS_OFFLOAD_PARAMETERS_NO_CHANGE = @as(u32, 0);
pub const NDIS_OFFLOAD_PARAMETERS_TX_RX_DISABLED = @as(u32, 1);
pub const NDIS_OFFLOAD_PARAMETERS_TX_ENABLED_RX_DISABLED = @as(u32, 2);
pub const NDIS_OFFLOAD_PARAMETERS_RX_ENABLED_TX_DISABLED = @as(u32, 3);
pub const NDIS_OFFLOAD_PARAMETERS_TX_RX_ENABLED = @as(u32, 4);
pub const NDIS_OFFLOAD_PARAMETERS_LSOV1_DISABLED = @as(u32, 1);
pub const NDIS_OFFLOAD_PARAMETERS_LSOV1_ENABLED = @as(u32, 2);
pub const NDIS_OFFLOAD_PARAMETERS_IPSECV1_DISABLED = @as(u32, 1);
pub const NDIS_OFFLOAD_PARAMETERS_IPSECV1_AH_ENABLED = @as(u32, 2);
pub const NDIS_OFFLOAD_PARAMETERS_IPSECV1_ESP_ENABLED = @as(u32, 3);
pub const NDIS_OFFLOAD_PARAMETERS_IPSECV1_AH_AND_ESP_ENABLED = @as(u32, 4);
pub const NDIS_OFFLOAD_PARAMETERS_LSOV2_DISABLED = @as(u32, 1);
pub const NDIS_OFFLOAD_PARAMETERS_LSOV2_ENABLED = @as(u32, 2);
pub const NDIS_OFFLOAD_PARAMETERS_IPSECV2_DISABLED = @as(u32, 1);
pub const NDIS_OFFLOAD_PARAMETERS_IPSECV2_AH_ENABLED = @as(u32, 2);
pub const NDIS_OFFLOAD_PARAMETERS_IPSECV2_ESP_ENABLED = @as(u32, 3);
pub const NDIS_OFFLOAD_PARAMETERS_IPSECV2_AH_AND_ESP_ENABLED = @as(u32, 4);
pub const NDIS_OFFLOAD_PARAMETERS_RSC_DISABLED = @as(u32, 1);
pub const NDIS_OFFLOAD_PARAMETERS_RSC_ENABLED = @as(u32, 2);
pub const NDIS_ENCAPSULATION_TYPE_GRE_MAC = @as(u32, 1);
pub const NDIS_ENCAPSULATION_TYPE_VXLAN = @as(u32, 2);
pub const NDIS_OFFLOAD_PARAMETERS_CONNECTION_OFFLOAD_DISABLED = @as(u32, 1);
pub const NDIS_OFFLOAD_PARAMETERS_CONNECTION_OFFLOAD_ENABLED = @as(u32, 2);
pub const NDIS_OFFLOAD_PARAMETERS_USO_DISABLED = @as(u32, 1);
pub const NDIS_OFFLOAD_PARAMETERS_USO_ENABLED = @as(u32, 2);
pub const NDIS_OFFLOAD_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_OFFLOAD_PARAMETERS_REVISION_2 = @as(u32, 2);
pub const NDIS_OFFLOAD_PARAMETERS_REVISION_3 = @as(u32, 3);
pub const NDIS_OFFLOAD_PARAMETERS_REVISION_4 = @as(u32, 4);
pub const NDIS_OFFLOAD_PARAMETERS_REVISION_5 = @as(u32, 5);
pub const NDIS_OFFLOAD_PARAMETERS_SKIP_REGISTRY_UPDATE = @as(u32, 1);
pub const NDIS_OFFLOAD_NOT_SUPPORTED = @as(u32, 0);
pub const NDIS_OFFLOAD_SUPPORTED = @as(u32, 1);
pub const NDIS_OFFLOAD_SET_NO_CHANGE = @as(u32, 0);
pub const NDIS_OFFLOAD_SET_ON = @as(u32, 1);
pub const NDIS_OFFLOAD_SET_OFF = @as(u32, 2);
pub const NDIS_ENCAPSULATION_NOT_SUPPORTED = @as(u32, 0);
pub const NDIS_ENCAPSULATION_NULL = @as(u32, 1);
pub const NDIS_ENCAPSULATION_IEEE_802_3 = @as(u32, 2);
pub const NDIS_ENCAPSULATION_IEEE_802_3_P_AND_Q = @as(u32, 4);
pub const NDIS_ENCAPSULATION_IEEE_802_3_P_AND_Q_IN_OOB = @as(u32, 8);
pub const NDIS_ENCAPSULATION_IEEE_LLC_SNAP_ROUTED = @as(u32, 16);
pub const IPSEC_OFFLOAD_V2_AUTHENTICATION_MD5 = @as(u32, 1);
pub const IPSEC_OFFLOAD_V2_AUTHENTICATION_SHA_1 = @as(u32, 2);
pub const IPSEC_OFFLOAD_V2_AUTHENTICATION_SHA_256 = @as(u32, 4);
pub const IPSEC_OFFLOAD_V2_AUTHENTICATION_AES_GCM_128 = @as(u32, 8);
pub const IPSEC_OFFLOAD_V2_AUTHENTICATION_AES_GCM_192 = @as(u32, 16);
pub const IPSEC_OFFLOAD_V2_AUTHENTICATION_AES_GCM_256 = @as(u32, 32);
pub const IPSEC_OFFLOAD_V2_ENCRYPTION_NONE = @as(u32, 1);
pub const IPSEC_OFFLOAD_V2_ENCRYPTION_DES_CBC = @as(u32, 2);
pub const IPSEC_OFFLOAD_V2_ENCRYPTION_3_DES_CBC = @as(u32, 4);
pub const IPSEC_OFFLOAD_V2_ENCRYPTION_AES_GCM_128 = @as(u32, 8);
pub const IPSEC_OFFLOAD_V2_ENCRYPTION_AES_GCM_192 = @as(u32, 16);
pub const IPSEC_OFFLOAD_V2_ENCRYPTION_AES_GCM_256 = @as(u32, 32);
pub const IPSEC_OFFLOAD_V2_ENCRYPTION_AES_CBC_128 = @as(u32, 64);
pub const IPSEC_OFFLOAD_V2_ENCRYPTION_AES_CBC_192 = @as(u32, 128);
pub const IPSEC_OFFLOAD_V2_ENCRYPTION_AES_CBC_256 = @as(u32, 256);
pub const NDIS_TCP_RECV_SEG_COALESC_OFFLOAD_REVISION_1 = @as(u32, 1);
pub const NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_NOT_SUPPORTED = @as(u32, 0);
pub const NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_INNER_IPV4 = @as(u32, 1);
pub const NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_OUTER_IPV4 = @as(u32, 2);
pub const NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_INNER_IPV6 = @as(u32, 4);
pub const NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_OUTER_IPV6 = @as(u32, 8);
pub const NDIS_OFFLOAD_FLAGS_GROUP_CHECKSUM_CAPABILITIES = @as(u32, 1);
pub const IPSEC_OFFLOAD_V2_AND_TCP_CHECKSUM_COEXISTENCE = @as(u32, 2);
pub const IPSEC_OFFLOAD_V2_AND_UDP_CHECKSUM_COEXISTENCE = @as(u32, 4);
pub const NDIS_OFFLOAD_REVISION_1 = @as(u32, 1);
pub const NDIS_OFFLOAD_REVISION_2 = @as(u32, 2);
pub const NDIS_OFFLOAD_REVISION_3 = @as(u32, 3);
pub const NDIS_OFFLOAD_REVISION_4 = @as(u32, 4);
pub const NDIS_OFFLOAD_REVISION_5 = @as(u32, 5);
pub const NDIS_OFFLOAD_REVISION_6 = @as(u32, 6);
pub const NDIS_TCP_CONNECTION_OFFLOAD_REVISION_1 = @as(u32, 1);
pub const NDIS_TCP_CONNECTION_OFFLOAD_REVISION_2 = @as(u32, 2);
pub const NDIS_MAXIMUM_PORTS = @as(u32, 16777216);
pub const NDIS_PORT_AUTHENTICATION_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_WMI_DEFAULT_METHOD_ID = @as(u32, 1);
pub const NDIS_WMI_OBJECT_TYPE_SET = @as(u32, 1);
pub const NDIS_WMI_OBJECT_TYPE_METHOD = @as(u32, 2);
pub const NDIS_WMI_OBJECT_TYPE_EVENT = @as(u32, 3);
pub const NDIS_WMI_OBJECT_TYPE_ENUM_ADAPTER = @as(u32, 4);
pub const NDIS_WMI_OBJECT_TYPE_OUTPUT_INFO = @as(u32, 5);
pub const NDIS_WMI_METHOD_HEADER_REVISION_1 = @as(u32, 1);
pub const NDIS_WMI_SET_HEADER_REVISION_1 = @as(u32, 1);
pub const NDIS_WMI_EVENT_HEADER_REVISION_1 = @as(u32, 1);
pub const NDIS_WMI_ENUM_ADAPTER_REVISION_1 = @as(u32, 1);
pub const NDIS_DEVICE_TYPE_ENDPOINT = @as(u32, 1);
pub const NDIS_HD_SPLIT_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_HD_SPLIT_COMBINE_ALL_HEADERS = @as(u32, 1);
pub const NDIS_HD_SPLIT_CURRENT_CONFIG_REVISION_1 = @as(u32, 1);
pub const NDIS_HD_SPLIT_CAPS_SUPPORTS_HEADER_DATA_SPLIT = @as(u32, 1);
pub const NDIS_HD_SPLIT_CAPS_SUPPORTS_IPV4_OPTIONS = @as(u32, 2);
pub const NDIS_HD_SPLIT_CAPS_SUPPORTS_IPV6_EXTENSION_HEADERS = @as(u32, 4);
pub const NDIS_HD_SPLIT_CAPS_SUPPORTS_TCP_OPTIONS = @as(u32, 8);
pub const NDIS_HD_SPLIT_ENABLE_HEADER_DATA_SPLIT = @as(u32, 1);
pub const NDIS_PM_WOL_BITMAP_PATTERN_SUPPORTED = @as(u32, 1);
pub const NDIS_PM_WOL_MAGIC_PACKET_SUPPORTED = @as(u32, 2);
pub const NDIS_PM_WOL_IPV4_TCP_SYN_SUPPORTED = @as(u32, 4);
pub const NDIS_PM_WOL_IPV6_TCP_SYN_SUPPORTED = @as(u32, 8);
pub const NDIS_PM_WOL_IPV4_DEST_ADDR_WILDCARD_SUPPORTED = @as(u32, 512);
pub const NDIS_PM_WOL_IPV6_DEST_ADDR_WILDCARD_SUPPORTED = @as(u32, 2048);
pub const NDIS_PM_WOL_EAPOL_REQUEST_ID_MESSAGE_SUPPORTED = @as(u32, 65536);
pub const NDIS_PM_PROTOCOL_OFFLOAD_ARP_SUPPORTED = @as(u32, 1);
pub const NDIS_PM_PROTOCOL_OFFLOAD_NS_SUPPORTED = @as(u32, 2);
pub const NDIS_PM_PROTOCOL_OFFLOAD_80211_RSN_REKEY_SUPPORTED = @as(u32, 128);
pub const NDIS_PM_WAKE_ON_MEDIA_CONNECT_SUPPORTED = @as(u32, 1);
pub const NDIS_PM_WAKE_ON_MEDIA_DISCONNECT_SUPPORTED = @as(u32, 2);
pub const NDIS_WLAN_WAKE_ON_NLO_DISCOVERY_SUPPORTED = @as(u32, 1);
pub const NDIS_WLAN_WAKE_ON_AP_ASSOCIATION_LOST_SUPPORTED = @as(u32, 2);
pub const NDIS_WLAN_WAKE_ON_GTK_HANDSHAKE_ERROR_SUPPORTED = @as(u32, 4);
pub const NDIS_WLAN_WAKE_ON_4WAY_HANDSHAKE_REQUEST_SUPPORTED = @as(u32, 8);
pub const NDIS_WWAN_WAKE_ON_REGISTER_STATE_SUPPORTED = @as(u32, 1);
pub const NDIS_WWAN_WAKE_ON_SMS_RECEIVE_SUPPORTED = @as(u32, 2);
pub const NDIS_WWAN_WAKE_ON_USSD_RECEIVE_SUPPORTED = @as(u32, 4);
pub const NDIS_WWAN_WAKE_ON_PACKET_STATE_SUPPORTED = @as(u32, 8);
pub const NDIS_WWAN_WAKE_ON_UICC_CHANGE_SUPPORTED = @as(u32, 16);
pub const NDIS_PM_WAKE_PACKET_INDICATION_SUPPORTED = @as(u32, 1);
pub const NDIS_PM_SELECTIVE_SUSPEND_SUPPORTED = @as(u32, 2);
pub const NDIS_PM_WOL_BITMAP_PATTERN_ENABLED = @as(u32, 1);
pub const NDIS_PM_WOL_MAGIC_PACKET_ENABLED = @as(u32, 2);
pub const NDIS_PM_WOL_IPV4_TCP_SYN_ENABLED = @as(u32, 4);
pub const NDIS_PM_WOL_IPV6_TCP_SYN_ENABLED = @as(u32, 8);
pub const NDIS_PM_WOL_IPV4_DEST_ADDR_WILDCARD_ENABLED = @as(u32, 512);
pub const NDIS_PM_WOL_IPV6_DEST_ADDR_WILDCARD_ENABLED = @as(u32, 2048);
pub const NDIS_PM_WOL_EAPOL_REQUEST_ID_MESSAGE_ENABLED = @as(u32, 65536);
pub const NDIS_PM_PROTOCOL_OFFLOAD_ARP_ENABLED = @as(u32, 1);
pub const NDIS_PM_PROTOCOL_OFFLOAD_NS_ENABLED = @as(u32, 2);
pub const NDIS_PM_PROTOCOL_OFFLOAD_80211_RSN_REKEY_ENABLED = @as(u32, 128);
pub const NDIS_PM_WAKE_ON_LINK_CHANGE_ENABLED = @as(u32, 1);
pub const NDIS_PM_WAKE_ON_MEDIA_DISCONNECT_ENABLED = @as(u32, 2);
pub const NDIS_PM_SELECTIVE_SUSPEND_ENABLED = @as(u32, 16);
pub const NDIS_WLAN_WAKE_ON_NLO_DISCOVERY_ENABLED = @as(u32, 1);
pub const NDIS_WLAN_WAKE_ON_AP_ASSOCIATION_LOST_ENABLED = @as(u32, 2);
pub const NDIS_WLAN_WAKE_ON_GTK_HANDSHAKE_ERROR_ENABLED = @as(u32, 4);
pub const NDIS_WLAN_WAKE_ON_4WAY_HANDSHAKE_REQUEST_ENABLED = @as(u32, 8);
pub const NDIS_WWAN_WAKE_ON_REGISTER_STATE_ENABLED = @as(u32, 1);
pub const NDIS_WWAN_WAKE_ON_SMS_RECEIVE_ENABLED = @as(u32, 2);
pub const NDIS_WWAN_WAKE_ON_USSD_RECEIVE_ENABLED = @as(u32, 4);
pub const NDIS_WWAN_WAKE_ON_PACKET_STATE_ENABLED = @as(u32, 8);
pub const NDIS_WWAN_WAKE_ON_UICC_CHANGE_ENABLED = @as(u32, 16);
pub const NDIS_PM_WOL_PRIORITY_LOWEST = @as(u32, 4294967295);
pub const NDIS_PM_WOL_PRIORITY_NORMAL = @as(u32, 268435456);
pub const NDIS_PM_WOL_PRIORITY_HIGHEST = @as(u32, 1);
pub const NDIS_PM_PROTOCOL_OFFLOAD_PRIORITY_LOWEST = @as(u32, 4294967295);
pub const NDIS_PM_PROTOCOL_OFFLOAD_PRIORITY_NORMAL = @as(u32, 268435456);
pub const NDIS_PM_PROTOCOL_OFFLOAD_PRIORITY_HIGHEST = @as(u32, 1);
pub const NDIS_PM_MAX_STRING_SIZE = @as(u32, 64);
pub const NDIS_PM_CAPABILITIES_REVISION_1 = @as(u32, 1);
pub const NDIS_PM_CAPABILITIES_REVISION_2 = @as(u32, 2);
pub const NDIS_PM_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_PM_PARAMETERS_REVISION_2 = @as(u32, 2);
pub const EAPOL_REQUEST_ID_WOL_FLAG_MUST_ENCRYPT = @as(u32, 1);
pub const NDIS_PM_MAX_PATTERN_ID = @as(u32, 65535);
pub const NDIS_PM_PRIVATE_PATTERN_ID = @as(u32, 1);
pub const NDIS_PM_WOL_PATTERN_REVISION_1 = @as(u32, 1);
pub const NDIS_PM_WOL_PATTERN_REVISION_2 = @as(u32, 2);
pub const DOT11_RSN_KCK_LENGTH = @as(u32, 16);
pub const DOT11_RSN_KEK_LENGTH = @as(u32, 16);
pub const DOT11_RSN_MAX_CIPHER_KEY_LENGTH = @as(u32, 32);
pub const NDIS_PM_PROTOCOL_OFFLOAD_REVISION_1 = @as(u32, 1);
pub const NDIS_PM_PROTOCOL_OFFLOAD_REVISION_2 = @as(u32, 2);
pub const NDIS_SIZEOF_NDIS_PM_PROTOCOL_OFFLOAD_REVISION_1 = @as(u32, 240);
pub const NDIS_PM_WAKE_REASON_REVISION_1 = @as(u32, 1);
pub const NDIS_PM_WAKE_PACKET_REVISION_1 = @as(u32, 1);
pub const NDIS_WMI_PM_ADMIN_CONFIG_REVISION_1 = @as(u32, 1);
pub const NDIS_WMI_PM_ACTIVE_CAPABILITIES_REVISION_1 = @as(u32, 1);
pub const NDIS_RECEIVE_FILTER_MAC_HEADER_SUPPORTED = @as(u32, 1);
pub const NDIS_RECEIVE_FILTER_IPV4_HEADER_SUPPORTED = @as(u32, 2);
pub const NDIS_RECEIVE_FILTER_IPV6_HEADER_SUPPORTED = @as(u32, 4);
pub const NDIS_RECEIVE_FILTER_ARP_HEADER_SUPPORTED = @as(u32, 8);
pub const NDIS_RECEIVE_FILTER_UDP_HEADER_SUPPORTED = @as(u32, 16);
pub const NDIS_RECEIVE_FILTER_MAC_HEADER_DEST_ADDR_SUPPORTED = @as(u32, 1);
pub const NDIS_RECEIVE_FILTER_MAC_HEADER_SOURCE_ADDR_SUPPORTED = @as(u32, 2);
pub const NDIS_RECEIVE_FILTER_MAC_HEADER_PROTOCOL_SUPPORTED = @as(u32, 4);
pub const NDIS_RECEIVE_FILTER_MAC_HEADER_VLAN_ID_SUPPORTED = @as(u32, 8);
pub const NDIS_RECEIVE_FILTER_MAC_HEADER_PRIORITY_SUPPORTED = @as(u32, 16);
pub const NDIS_RECEIVE_FILTER_MAC_HEADER_PACKET_TYPE_SUPPORTED = @as(u32, 32);
pub const NDIS_RECEIVE_FILTER_ARP_HEADER_OPERATION_SUPPORTED = @as(u32, 1);
pub const NDIS_RECEIVE_FILTER_ARP_HEADER_SPA_SUPPORTED = @as(u32, 2);
pub const NDIS_RECEIVE_FILTER_ARP_HEADER_TPA_SUPPORTED = @as(u32, 4);
pub const NDIS_RECEIVE_FILTER_IPV4_HEADER_PROTOCOL_SUPPORTED = @as(u32, 1);
pub const NDIS_RECEIVE_FILTER_IPV6_HEADER_PROTOCOL_SUPPORTED = @as(u32, 1);
pub const NDIS_RECEIVE_FILTER_UDP_HEADER_DEST_PORT_SUPPORTED = @as(u32, 1);
pub const NDIS_RECEIVE_FILTER_TEST_HEADER_FIELD_EQUAL_SUPPORTED = @as(u32, 1);
pub const NDIS_RECEIVE_FILTER_TEST_HEADER_FIELD_MASK_EQUAL_SUPPORTED = @as(u32, 2);
pub const NDIS_RECEIVE_FILTER_TEST_HEADER_FIELD_NOT_EQUAL_SUPPORTED = @as(u32, 4);
pub const NDIS_RECEIVE_FILTER_MSI_X_SUPPORTED = @as(u32, 1);
pub const NDIS_RECEIVE_FILTER_VM_QUEUE_SUPPORTED = @as(u32, 2);
pub const NDIS_RECEIVE_FILTER_LOOKAHEAD_SPLIT_SUPPORTED = @as(u32, 4);
pub const NDIS_RECEIVE_FILTER_DYNAMIC_PROCESSOR_AFFINITY_CHANGE_SUPPORTED = @as(u32, 8);
pub const NDIS_RECEIVE_FILTER_INTERRUPT_VECTOR_COALESCING_SUPPORTED = @as(u32, 16);
pub const NDIS_RECEIVE_FILTER_IMPLAT_MIN_OF_QUEUES_MODE = @as(u32, 64);
pub const NDIS_RECEIVE_FILTER_IMPLAT_SUM_OF_QUEUES_MODE = @as(u32, 128);
pub const NDIS_RECEIVE_FILTER_PACKET_COALESCING_SUPPORTED_ON_DEFAULT_QUEUE = @as(u32, 256);
pub const NDIS_RECEIVE_FILTER_ANY_VLAN_SUPPORTED = @as(u32, 32);
pub const NDIS_RECEIVE_FILTER_DYNAMIC_PROCESSOR_AFFINITY_CHANGE_FOR_DEFAULT_QUEUE_SUPPORTED = @as(u32, 64);
pub const NDIS_RECEIVE_FILTER_VMQ_FILTERS_ENABLED = @as(u32, 1);
pub const NDIS_RECEIVE_FILTER_PACKET_COALESCING_FILTERS_ENABLED = @as(u32, 2);
pub const NDIS_RECEIVE_FILTER_VM_QUEUES_ENABLED = @as(u32, 1);
pub const NDIS_RECEIVE_FILTER_CAPABILITIES_REVISION_1 = @as(u32, 1);
pub const NDIS_RECEIVE_FILTER_CAPABILITIES_REVISION_2 = @as(u32, 2);
pub const NDIS_NIC_SWITCH_CAPS_VLAN_SUPPORTED = @as(u32, 1);
pub const NDIS_NIC_SWITCH_CAPS_PER_VPORT_INTERRUPT_MODERATION_SUPPORTED = @as(u32, 2);
pub const NDIS_NIC_SWITCH_CAPS_ASYMMETRIC_QUEUE_PAIRS_FOR_NONDEFAULT_VPORT_SUPPORTED = @as(u32, 4);
pub const NDIS_NIC_SWITCH_CAPS_VF_RSS_SUPPORTED = @as(u32, 8);
pub const NDIS_NIC_SWITCH_CAPS_SINGLE_VPORT_POOL = @as(u32, 16);
pub const NDIS_NIC_SWITCH_CAPS_RSS_PARAMETERS_PER_PF_VPORT_SUPPORTED = @as(u32, 32);
pub const NDIS_NIC_SWITCH_CAPS_NIC_SWITCH_WITHOUT_IOV_SUPPORTED = @as(u32, 64);
pub const NDIS_NIC_SWITCH_CAPS_RSS_ON_PF_VPORTS_SUPPORTED = @as(u32, 128);
pub const NDIS_NIC_SWITCH_CAPS_RSS_PER_PF_VPORT_INDIRECTION_TABLE_SUPPORTED = @as(u32, 256);
pub const NDIS_NIC_SWITCH_CAPS_RSS_PER_PF_VPORT_HASH_FUNCTION_SUPPORTED = @as(u32, 512);
pub const NDIS_NIC_SWITCH_CAPS_RSS_PER_PF_VPORT_HASH_TYPE_SUPPORTED = @as(u32, 1024);
pub const NDIS_NIC_SWITCH_CAPS_RSS_PER_PF_VPORT_HASH_KEY_SUPPORTED = @as(u32, 2048);
pub const NDIS_NIC_SWITCH_CAPS_RSS_PER_PF_VPORT_INDIRECTION_TABLE_SIZE_RESTRICTED = @as(u32, 4096);
pub const NDIS_NIC_SWITCH_CAPABILITIES_REVISION_1 = @as(u32, 1);
pub const NDIS_NIC_SWITCH_CAPABILITIES_REVISION_2 = @as(u32, 2);
pub const NDIS_NIC_SWITCH_CAPABILITIES_REVISION_3 = @as(u32, 3);
pub const NDIS_RECEIVE_FILTER_GLOBAL_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_DEFAULT_RECEIVE_QUEUE_ID = @as(u32, 0);
pub const NDIS_DEFAULT_RECEIVE_QUEUE_GROUP_ID = @as(u32, 0);
pub const NDIS_DEFAULT_RECEIVE_FILTER_ID = @as(u32, 0);
pub const NDIS_RECEIVE_FILTER_FIELD_MAC_HEADER_VLAN_UNTAGGED_OR_ZERO = @as(u32, 1);
pub const NDIS_RECEIVE_FILTER_FIELD_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_RECEIVE_FILTER_FIELD_PARAMETERS_REVISION_2 = @as(u32, 2);
pub const NDIS_RECEIVE_FILTER_FLAGS_RESERVED = @as(u32, 1);
pub const NDIS_RECEIVE_FILTER_PACKET_ENCAPSULATION_GRE = @as(u32, 2);
pub const NDIS_RECEIVE_FILTER_PACKET_ENCAPSULATION = @as(u32, 2);
pub const NDIS_RECEIVE_FILTER_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_RECEIVE_FILTER_PARAMETERS_REVISION_2 = @as(u32, 2);
pub const NDIS_RECEIVE_FILTER_CLEAR_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_RECEIVE_QUEUE_PARAMETERS_PER_QUEUE_RECEIVE_INDICATION = @as(u32, 1);
pub const NDIS_RECEIVE_QUEUE_PARAMETERS_LOOKAHEAD_SPLIT_REQUIRED = @as(u32, 2);
pub const NDIS_RECEIVE_QUEUE_PARAMETERS_FLAGS_CHANGED = @as(u32, 65536);
pub const NDIS_RECEIVE_QUEUE_PARAMETERS_PROCESSOR_AFFINITY_CHANGED = @as(u32, 131072);
pub const NDIS_RECEIVE_QUEUE_PARAMETERS_SUGGESTED_RECV_BUFFER_NUMBERS_CHANGED = @as(u32, 262144);
pub const NDIS_RECEIVE_QUEUE_PARAMETERS_NAME_CHANGED = @as(u32, 524288);
pub const NDIS_RECEIVE_QUEUE_PARAMETERS_INTERRUPT_COALESCING_DOMAIN_ID_CHANGED = @as(u32, 1048576);
pub const NDIS_RECEIVE_QUEUE_PARAMETERS_QOS_SQ_ID_CHANGED = @as(u32, 2097152);
pub const NDIS_RECEIVE_QUEUE_PARAMETERS_CHANGE_MASK = @as(u32, 4294901760);
pub const NDIS_RECEIVE_QUEUE_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_RECEIVE_QUEUE_PARAMETERS_REVISION_2 = @as(u32, 2);
pub const NDIS_RECEIVE_QUEUE_PARAMETERS_REVISION_3 = @as(u32, 3);
pub const NDIS_RECEIVE_QUEUE_FREE_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_RECEIVE_QUEUE_INFO_REVISION_1 = @as(u32, 1);
pub const NDIS_RECEIVE_QUEUE_INFO_REVISION_2 = @as(u32, 2);
pub const NDIS_RECEIVE_QUEUE_INFO_ARRAY_REVISION_1 = @as(u32, 1);
pub const NDIS_RECEIVE_FILTER_INFO_REVISION_1 = @as(u32, 1);
pub const NDIS_RECEIVE_FILTER_INFO_ARRAY_REVISION_1 = @as(u32, 1);
pub const NDIS_RECEIVE_FILTER_INFO_ARRAY_REVISION_2 = @as(u32, 2);
pub const NDIS_RECEIVE_FILTER_INFO_ARRAY_VPORT_ID_SPECIFIED = @as(u32, 1);
pub const NDIS_RECEIVE_QUEUE_ALLOCATION_COMPLETE_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_RECEIVE_QUEUE_ALLOCATION_COMPLETE_ARRAY_REVISION_1 = @as(u32, 1);
pub const NDIS_RECEIVE_SCALE_CAPABILITIES_REVISION_1 = @as(u32, 1);
pub const NDIS_RECEIVE_SCALE_CAPABILITIES_REVISION_2 = @as(u32, 2);
pub const NDIS_RECEIVE_SCALE_CAPABILITIES_REVISION_3 = @as(u32, 3);
pub const NDIS_RSS_CAPS_HASH_TYPE_TCP_IPV4 = @as(u32, 256);
pub const NDIS_RSS_CAPS_HASH_TYPE_TCP_IPV6 = @as(u32, 512);
pub const NDIS_RSS_CAPS_HASH_TYPE_TCP_IPV6_EX = @as(u32, 1024);
pub const NDIS_RSS_CAPS_MESSAGE_SIGNALED_INTERRUPTS = @as(u32, 16777216);
pub const NDIS_RSS_CAPS_CLASSIFICATION_AT_ISR = @as(u32, 33554432);
pub const NDIS_RSS_CAPS_CLASSIFICATION_AT_DPC = @as(u32, 67108864);
pub const NdisHashFunctionToeplitz = @as(u32, 1);
pub const NdisHashFunctionReserved1 = @as(u32, 2);
pub const NdisHashFunctionReserved2 = @as(u32, 4);
pub const NdisHashFunctionReserved3 = @as(u32, 8);
pub const NDIS_HASH_FUNCTION_MASK = @as(u32, 255);
pub const NDIS_HASH_TYPE_MASK = @as(u32, 16776960);
pub const NDIS_HASH_IPV4 = @as(u32, 256);
pub const NDIS_HASH_TCP_IPV4 = @as(u32, 512);
pub const NDIS_HASH_IPV6 = @as(u32, 1024);
pub const NDIS_HASH_IPV6_EX = @as(u32, 2048);
pub const NDIS_HASH_TCP_IPV6 = @as(u32, 4096);
pub const NDIS_HASH_TCP_IPV6_EX = @as(u32, 8192);
pub const NDIS_RSS_PARAM_FLAG_BASE_CPU_UNCHANGED = @as(u32, 1);
pub const NDIS_RSS_PARAM_FLAG_HASH_INFO_UNCHANGED = @as(u32, 2);
pub const NDIS_RSS_PARAM_FLAG_ITABLE_UNCHANGED = @as(u32, 4);
pub const NDIS_RSS_PARAM_FLAG_HASH_KEY_UNCHANGED = @as(u32, 8);
pub const NDIS_RSS_PARAM_FLAG_DISABLE_RSS = @as(u32, 16);
pub const NDIS_RSS_PARAM_FLAG_DEFAULT_PROCESSOR_UNCHANGED = @as(u32, 32);
pub const NDIS_RSS_INDIRECTION_TABLE_SIZE_REVISION_1 = @as(u32, 128);
pub const NDIS_RSS_HASH_SECRET_KEY_SIZE_REVISION_1 = @as(u32, 40);
pub const NDIS_RECEIVE_SCALE_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_RECEIVE_SCALE_PARAMETERS_REVISION_2 = @as(u32, 2);
pub const NDIS_RECEIVE_SCALE_PARAMETERS_REVISION_3 = @as(u32, 3);
pub const NDIS_RSS_INDIRECTION_TABLE_MAX_SIZE_REVISION_1 = @as(u32, 128);
pub const NDIS_RSS_HASH_SECRET_KEY_MAX_SIZE_REVISION_1 = @as(u32, 40);
pub const NDIS_RSS_HASH_SECRET_KEY_MAX_SIZE_REVISION_2 = @as(u32, 40);
pub const NDIS_RSS_HASH_SECRET_KEY_MAX_SIZE_REVISION_3 = @as(u32, 40);
pub const NDIS_RECEIVE_SCALE_PARAMETERS_V2_REVISION_1 = @as(u32, 1);
pub const NDIS_RECEIVE_SCALE_PARAM_ENABLE_RSS = @as(u32, 1);
pub const NDIS_RECEIVE_SCALE_PARAM_HASH_INFO_CHANGED = @as(u32, 2);
pub const NDIS_RECEIVE_SCALE_PARAM_HASH_KEY_CHANGED = @as(u32, 4);
pub const NDIS_RECEIVE_SCALE_PARAM_NUMBER_OF_QUEUES_CHANGED = @as(u32, 8);
pub const NDIS_RECEIVE_SCALE_PARAM_NUMBER_OF_ENTRIES_CHANGED = @as(u32, 16);
pub const NDIS_RSS_SET_INDIRECTION_ENTRY_FLAG_PRIMARY_PROCESSOR = @as(u32, 1);
pub const NDIS_RSS_SET_INDIRECTION_ENTRY_FLAG_DEFAULT_PROCESSOR = @as(u32, 2);
pub const NDIS_RSS_SET_INDIRECTION_ENTRIES_REVISION_1 = @as(u32, 1);
pub const NDIS_RECEIVE_HASH_FLAG_ENABLE_HASH = @as(u32, 1);
pub const NDIS_RECEIVE_HASH_FLAG_HASH_INFO_UNCHANGED = @as(u32, 2);
pub const NDIS_RECEIVE_HASH_FLAG_HASH_KEY_UNCHANGED = @as(u32, 4);
pub const NDIS_RECEIVE_HASH_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_RSS_PROCESSOR_INFO_REVISION_1 = @as(u32, 1);
pub const NDIS_RSS_PROCESSOR_INFO_REVISION_2 = @as(u32, 2);
pub const NDIS_SYSTEM_PROCESSOR_INFO_EX_REVISION_1 = @as(u32, 1);
pub const NDIS_HYPERVISOR_INFO_FLAG_HYPERVISOR_PRESENT = @as(u32, 1);
pub const NDIS_HYPERVISOR_INFO_REVISION_1 = @as(u32, 1);
pub const NDIS_WMI_RECEIVE_QUEUE_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_WMI_RECEIVE_QUEUE_INFO_REVISION_1 = @as(u32, 1);
pub const NDIS_NDK_CAPABILITIES_REVISION_1 = @as(u32, 1);
pub const OID_NDK_SET_STATE = @as(u32, 4228121089);
pub const OID_NDK_STATISTICS = @as(u32, 4228121090);
pub const OID_NDK_CONNECTIONS = @as(u32, 4228121091);
pub const OID_NDK_LOCAL_ENDPOINTS = @as(u32, 4228121092);
pub const GUID_NDIS_NDK_CAPABILITIES = Guid.initString("7969ba4d-dd80-4bc7-b3e6-68043997e519");
pub const GUID_NDIS_NDK_STATE = Guid.initString("530c69c9-2f51-49de-a1af-088d54ffa474");
pub const NDIS_NDK_STATISTICS_INFO_REVISION_1 = @as(u32, 1);
pub const NDIS_NDK_CONNECTIONS_REVISION_1 = @as(u32, 1);
pub const NDIS_NDK_LOCAL_ENDPOINTS_REVISION_1 = @as(u32, 1);
pub const OID_QOS_HARDWARE_CAPABILITIES = @as(u32, 4228186113);
pub const OID_QOS_CURRENT_CAPABILITIES = @as(u32, 4228186114);
pub const OID_QOS_PARAMETERS = @as(u32, 4228186115);
pub const OID_QOS_OPERATIONAL_PARAMETERS = @as(u32, 4228186116);
pub const OID_QOS_REMOTE_PARAMETERS = @as(u32, 4228186117);
pub const NDIS_QOS_MAXIMUM_PRIORITIES = @as(u32, 8);
pub const NDIS_QOS_MAXIMUM_TRAFFIC_CLASSES = @as(u32, 8);
pub const NDIS_QOS_CAPABILITIES_STRICT_TSA_SUPPORTED = @as(u32, 1);
pub const NDIS_QOS_CAPABILITIES_MACSEC_BYPASS_SUPPORTED = @as(u32, 2);
pub const NDIS_QOS_CAPABILITIES_CEE_DCBX_SUPPORTED = @as(u32, 4);
pub const NDIS_QOS_CAPABILITIES_IEEE_DCBX_SUPPORTED = @as(u32, 8);
pub const NDIS_QOS_CAPABILITIES_REVISION_1 = @as(u32, 1);
pub const NDIS_QOS_CLASSIFICATION_SET_BY_MINIPORT_MASK = @as(u32, 4278190080);
pub const NDIS_QOS_CLASSIFICATION_ENFORCED_BY_MINIPORT = @as(u32, 16777216);
pub const NDIS_QOS_CONDITION_RESERVED = @as(u32, 0);
pub const NDIS_QOS_CONDITION_DEFAULT = @as(u32, 1);
pub const NDIS_QOS_CONDITION_TCP_PORT = @as(u32, 2);
pub const NDIS_QOS_CONDITION_UDP_PORT = @as(u32, 3);
pub const NDIS_QOS_CONDITION_TCP_OR_UDP_PORT = @as(u32, 4);
pub const NDIS_QOS_CONDITION_ETHERTYPE = @as(u32, 5);
pub const NDIS_QOS_CONDITION_NETDIRECT_PORT = @as(u32, 6);
pub const NDIS_QOS_CONDITION_MAXIMUM = @as(u32, 7);
pub const NDIS_QOS_ACTION_PRIORITY = @as(u32, 0);
pub const NDIS_QOS_ACTION_MAXIMUM = @as(u32, 1);
pub const NDIS_QOS_CLASSIFICATION_ELEMENT_REVISION_1 = @as(u32, 1);
pub const NDIS_QOS_PARAMETERS_ETS_CHANGED = @as(u32, 1);
pub const NDIS_QOS_PARAMETERS_ETS_CONFIGURED = @as(u32, 2);
pub const NDIS_QOS_PARAMETERS_PFC_CHANGED = @as(u32, 256);
pub const NDIS_QOS_PARAMETERS_PFC_CONFIGURED = @as(u32, 512);
pub const NDIS_QOS_PARAMETERS_CLASSIFICATION_CHANGED = @as(u32, 65536);
pub const NDIS_QOS_PARAMETERS_CLASSIFICATION_CONFIGURED = @as(u32, 131072);
pub const NDIS_QOS_PARAMETERS_WILLING = @as(u32, 2147483648);
pub const NDIS_QOS_TSA_STRICT = @as(u32, 0);
pub const NDIS_QOS_TSA_CBS = @as(u32, 1);
pub const NDIS_QOS_TSA_ETS = @as(u32, 2);
pub const NDIS_QOS_TSA_MAXIMUM = @as(u32, 3);
pub const NDIS_QOS_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_DEFAULT_VPORT_ID = @as(u32, 0);
pub const NDIS_DEFAULT_SWITCH_ID = @as(u32, 0);
pub const NDIS_NIC_SWITCH_PARAMETERS_CHANGE_MASK = @as(u32, 4294901760);
pub const NDIS_NIC_SWITCH_PARAMETERS_SWITCH_NAME_CHANGED = @as(u32, 65536);
pub const NDIS_NIC_SWITCH_PARAMETERS_DEFAULT_NUMBER_OF_QUEUE_PAIRS_FOR_DEFAULT_VPORT = @as(u32, 1);
pub const NDIS_NIC_SWITCH_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_NIC_SWITCH_PARAMETERS_REVISION_2 = @as(u32, 2);
pub const NDIS_NIC_SWITCH_DELETE_SWITCH_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_NIC_SWITCH_INFO_REVISION_1 = @as(u32, 1);
pub const NDIS_NIC_SWITCH_INFO_ARRAY_REVISION_1 = @as(u32, 1);
pub const NDIS_NIC_SWITCH_VPORT_PARAMS_LOOKAHEAD_SPLIT_ENABLED = @as(u32, 1);
pub const NDIS_NIC_SWITCH_VPORT_PARAMS_PACKET_DIRECT_RX_ONLY = @as(u32, 2);
pub const NDIS_NIC_SWITCH_VPORT_PARAMS_ENFORCE_MAX_SG_LIST = @as(u32, 32768);
pub const NDIS_NIC_SWITCH_VPORT_PARAMS_CHANGE_MASK = @as(u32, 4294901760);
pub const NDIS_NIC_SWITCH_VPORT_PARAMS_FLAGS_CHANGED = @as(u32, 65536);
pub const NDIS_NIC_SWITCH_VPORT_PARAMS_NAME_CHANGED = @as(u32, 131072);
pub const NDIS_NIC_SWITCH_VPORT_PARAMS_INT_MOD_CHANGED = @as(u32, 262144);
pub const NDIS_NIC_SWITCH_VPORT_PARAMS_STATE_CHANGED = @as(u32, 524288);
pub const NDIS_NIC_SWITCH_VPORT_PARAMS_PROCESSOR_AFFINITY_CHANGED = @as(u32, 1048576);
pub const NDIS_NIC_SWITCH_VPORT_PARAMS_NDK_PARAMS_CHANGED = @as(u32, 2097152);
pub const NDIS_NIC_SWITCH_VPORT_PARAMS_QOS_SQ_ID_CHANGED = @as(u32, 4194304);
pub const NDIS_NIC_SWITCH_VPORT_PARAMS_NUM_QUEUE_PAIRS_CHANGED = @as(u32, 8388608);
pub const NDIS_NIC_SWITCH_VPORT_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_NIC_SWITCH_VPORT_PARAMETERS_REVISION_2 = @as(u32, 2);
pub const NDIS_NIC_SWITCH_DELETE_VPORT_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_NIC_SWITCH_VPORT_INFO_LOOKAHEAD_SPLIT_ENABLED = @as(u32, 1);
pub const NDIS_NIC_SWITCH_VPORT_INFO_PACKET_DIRECT_RX_ONLY = @as(u32, 2);
pub const NDIS_NIC_SWITCH_VPORT_INFO_GFT_ENABLED = @as(u32, 4);
pub const NDIS_NIC_SWITCH_VPORT_INFO_REVISION_1 = @as(u32, 1);
pub const NDIS_NIC_SWITCH_VPORT_INFO_ARRAY_ENUM_ON_SPECIFIC_FUNCTION = @as(u32, 1);
pub const NDIS_NIC_SWITCH_VPORT_INFO_ARRAY_ENUM_ON_SPECIFIC_SWITCH = @as(u32, 2);
pub const NDIS_NIC_SWITCH_VPORT_INFO_ARRAY_REVISION_1 = @as(u32, 1);
pub const NDIS_NIC_SWITCH_VF_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_NIC_SWITCH_FREE_VF_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_NIC_SWITCH_VF_INFO_REVISION_1 = @as(u32, 1);
pub const NDIS_NIC_SWITCH_VF_INFO_ARRAY_ENUM_ON_SPECIFIC_SWITCH = @as(u32, 1);
pub const NDIS_NIC_SWITCH_VF_INFO_ARRAY_REVISION_1 = @as(u32, 1);
pub const NDIS_SRIOV_CAPS_SRIOV_SUPPORTED = @as(u32, 1);
pub const NDIS_SRIOV_CAPS_PF_MINIPORT = @as(u32, 2);
pub const NDIS_SRIOV_CAPS_VF_MINIPORT = @as(u32, 4);
pub const NDIS_SRIOV_CAPABILITIES_REVISION_1 = @as(u32, 1);
pub const NDIS_SRIOV_READ_VF_CONFIG_SPACE_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_SRIOV_WRITE_VF_CONFIG_SPACE_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_SRIOV_READ_VF_CONFIG_BLOCK_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_SRIOV_WRITE_VF_CONFIG_BLOCK_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_SRIOV_RESET_VF_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_SRIOV_SET_VF_POWER_STATE_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_SRIOV_CONFIG_STATE_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_SRIOV_VF_VENDOR_DEVICE_ID_INFO_REVISION_1 = @as(u32, 1);
pub const NDIS_SRIOV_PROBED_BARS_INFO_REVISION_1 = @as(u32, 1);
pub const NDIS_RECEIVE_FILTER_MOVE_FILTER_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_SRIOV_BAR_RESOURCES_INFO_REVISION_1 = @as(u32, 1);
pub const NDIS_SRIOV_PF_LUID_INFO_REVISION_1 = @as(u32, 1);
pub const NDIS_SRIOV_VF_SERIAL_NUMBER_INFO_REVISION_1 = @as(u32, 1);
pub const NDIS_SRIOV_VF_INVALIDATE_CONFIG_BLOCK_INFO_REVISION_1 = @as(u32, 1);
pub const NDIS_SRIOV_OVERLYING_ADAPTER_INFO_VERSION_1 = @as(u32, 1);
pub const NDIS_ISOLATION_NAME_MAX_STRING_SIZE = @as(u32, 127);
pub const NDIS_ROUTING_DOMAIN_ISOLATION_ENTRY_REVISION_1 = @as(u32, 1);
pub const NDIS_ROUTING_DOMAIN_ENTRY_REVISION_1 = @as(u32, 1);
pub const NDIS_ISOLATION_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_SWITCH_OBJECT_SERIALIZATION_VERSION_1 = @as(u32, 1);
pub const NDIS_SWITCH_PORT_PROPERTY_SECURITY_REVISION_1 = @as(u32, 1);
pub const NDIS_SWITCH_PORT_PROPERTY_SECURITY_REVISION_2 = @as(u32, 2);
pub const NDIS_SWITCH_PORT_PROPERTY_VLAN_REVISION_1 = @as(u32, 1);
pub const NDIS_SWITCH_PORT_PROPERTY_PROFILE_REVISION_1 = @as(u32, 1);
pub const NDIS_SWITCH_PORT_PROPERTY_ISOLATION_REVISION_1 = @as(u32, 1);
pub const NDIS_SWITCH_PORT_PROPERTY_ROUTING_DOMAIN_REVISION_1 = @as(u32, 1);
pub const NDIS_SWITCH_PORT_PROPERTY_CUSTOM_REVISION_1 = @as(u32, 1);
pub const NDIS_SWITCH_PORT_PROPERTY_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_SWITCH_PORT_PROPERTY_DELETE_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_SWITCH_PORT_PROPERTY_ENUM_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_SWITCH_PORT_PROPERTY_ENUM_INFO_REVISION_1 = @as(u32, 1);
pub const NDIS_SWITCH_PORT_FEATURE_STATUS_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_SWITCH_PORT_FEATURE_STATUS_CUSTOM_REVISION_1 = @as(u32, 1);
pub const NDIS_SWITCH_PROPERTY_CUSTOM_REVISION_1 = @as(u32, 1);
pub const NDIS_SWITCH_PROPERTY_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_SWITCH_PROPERTY_DELETE_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_SWITCH_PROPERTY_ENUM_INFO_REVISION_1 = @as(u32, 1);
pub const NDIS_SWITCH_PROPERTY_ENUM_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_SWITCH_FEATURE_STATUS_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_SWITCH_FEATURE_STATUS_CUSTOM_REVISION_1 = @as(u32, 1);
pub const NDIS_SWITCH_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_SWITCH_PORT_PARAMETERS_FLAG_UNTRUSTED_INTERNAL_PORT = @as(u32, 1);
pub const NDIS_SWITCH_PORT_PARAMETERS_FLAG_RESTORING_PORT = @as(u32, 2);
pub const NDIS_SWITCH_PORT_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_SWITCH_PORT_ARRAY_REVISION_1 = @as(u32, 1);
pub const NDIS_SWITCH_NIC_FLAGS_NIC_INITIALIZING = @as(u32, 1);
pub const NDIS_SWITCH_NIC_FLAGS_NIC_SUSPENDED = @as(u32, 2);
pub const NDIS_SWITCH_NIC_FLAGS_MAPPED_NIC_UPDATED = @as(u32, 4);
pub const NDIS_SWITCH_NIC_FLAGS_NIC_SUSPENDED_LM = @as(u32, 16);
pub const NDIS_SWITCH_NIC_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_SWITCH_NIC_ARRAY_REVISION_1 = @as(u32, 1);
pub const NDIS_SWITCH_NIC_OID_REQUEST_REVISION_1 = @as(u32, 1);
pub const NDIS_SWITCH_NIC_SAVE_STATE_REVISION_1 = @as(u32, 1);
pub const NDIS_SWITCH_NIC_SAVE_STATE_REVISION_2 = @as(u32, 2);
pub const NDIS_PORT_STATE_REVISION_1 = @as(u32, 1);
pub const NDIS_PORT_CHAR_USE_DEFAULT_AUTH_SETTINGS = @as(u32, 1);
pub const NDIS_PORT_CHARACTERISTICS_REVISION_1 = @as(u32, 1);
pub const NDIS_PORT_ARRAY_REVISION_1 = @as(u32, 1);
pub const ETHERNET_LENGTH_OF_ADDRESS = @as(u32, 6);
pub const NDIS_GFP_HEADER_PRESENT_ETHERNET = @as(u32, 1);
pub const NDIS_GFP_HEADER_PRESENT_IPV4 = @as(u32, 2);
pub const NDIS_GFP_HEADER_PRESENT_IPV6 = @as(u32, 4);
pub const NDIS_GFP_HEADER_PRESENT_TCP = @as(u32, 8);
pub const NDIS_GFP_HEADER_PRESENT_UDP = @as(u32, 16);
pub const NDIS_GFP_HEADER_PRESENT_ICMP = @as(u32, 32);
pub const NDIS_GFP_HEADER_PRESENT_NO_ENCAP = @as(u32, 64);
pub const NDIS_GFP_HEADER_PRESENT_IP_IN_IP_ENCAP = @as(u32, 128);
pub const NDIS_GFP_HEADER_PRESENT_IP_IN_GRE_ENCAP = @as(u32, 256);
pub const NDIS_GFP_HEADER_PRESENT_NVGRE_ENCAP = @as(u32, 512);
pub const NDIS_GFP_HEADER_PRESENT_VXLAN_ENCAP = @as(u32, 1024);
pub const NDIS_GFP_HEADER_PRESENT_ESP = @as(u32, 2048);
pub const NDIS_GFP_ENCAPSULATION_TYPE_NOT_ENCAPSULATED = @as(u32, 1);
pub const NDIS_GFP_ENCAPSULATION_TYPE_IP_IN_IP = @as(u32, 2);
pub const NDIS_GFP_ENCAPSULATION_TYPE_IP_IN_GRE = @as(u32, 4);
pub const NDIS_GFP_ENCAPSULATION_TYPE_NVGRE = @as(u32, 8);
pub const NDIS_GFP_ENCAPSULATION_TYPE_VXLAN = @as(u32, 16);
pub const NDIS_GFP_UNDEFINED_PROFILE_ID = @as(u32, 0);
pub const NDIS_GFP_HEADER_GROUP_EXACT_MATCH_PROFILE_IS_TTL_ONE = @as(u32, 1);
pub const NDIS_GFP_HEADER_GROUP_EXACT_MATCH_PROFILE_REVISION_1 = @as(u32, 1);
pub const NDIS_GFP_EXACT_MATCH_PROFILE_RDMA_FLOW = @as(u32, 1);
pub const NDIS_GFP_EXACT_MATCH_PROFILE_REVISION_1 = @as(u32, 1);
pub const NDIS_GFP_HEADER_GROUP_EXACT_MATCH_IS_TTL_ONE = @as(u32, 1);
pub const NDIS_GFP_HEADER_GROUP_EXACT_MATCH_REVISION_1 = @as(u32, 1);
pub const NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_PROFILE_IS_TTL_ONE = @as(u32, 1);
pub const NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_PROFILE_REVISION_1 = @as(u32, 1);
pub const NDIS_GFP_WILDCARD_MATCH_PROFILE_REVISION_1 = @as(u32, 1);
pub const NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_IS_TTL_ONE = @as(u32, 1);
pub const NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_REVISION_1 = @as(u32, 1);
pub const NDIS_PD_CAPS_RECEIVE_FILTER_COUNTERS_SUPPORTED = @as(u32, 1);
pub const NDIS_PD_CAPS_DRAIN_NOTIFICATIONS_SUPPORTED = @as(u32, 2);
pub const NDIS_PD_CAPS_NOTIFICATION_MODERATION_INTERVAL_SUPPORTED = @as(u32, 4);
pub const NDIS_PD_CAPS_NOTIFICATION_MODERATION_COUNT_SUPPORTED = @as(u32, 8);
pub const NDIS_PD_CAPABILITIES_REVISION_1 = @as(u32, 1);
pub const NDIS_PD_CONFIG_REVISION_1 = @as(u32, 1);
pub const NDIS_GFT_UNDEFINED_FLOW_ENTRY_ID = @as(u32, 0);
pub const NDIS_GFT_UNDEFINED_TABLE_ID = @as(u32, 0);
pub const NDIS_GFT_TABLE_INCLUDE_EXTERNAL_VPPORT = @as(u32, 1);
pub const NDIS_GFT_TABLE_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_GFT_TABLE_INFO_REVISION_1 = @as(u32, 1);
pub const NDIS_GFT_TABLE_INFO_ARRAY_REVISION_1 = @as(u32, 1);
pub const NDIS_GFT_DELETE_TABLE_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_GFT_UNDEFINED_COUNTER_ID = @as(u32, 0);
pub const NDIS_GFT_MAX_COUNTER_OBJECTS_PER_FLOW_ENTRY = @as(u32, 8);
pub const NDIS_GFT_COUNTER_PARAMETERS_CLIENT_SPECIFIED_ADDRESS = @as(u32, 1);
pub const NDIS_GFT_COUNTER_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_GFT_FREE_COUNTER_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_GFT_COUNTER_INFO_REVISION_1 = @as(u32, 1);
pub const NDIS_GFT_COUNTER_INFO_ARRAY_REVISION_1 = @as(u32, 1);
pub const NDIS_GFT_COUNTER_VALUE_ARRAY_UPDATE_MEMORY_MAPPED_COUNTERS = @as(u32, 1);
pub const NDIS_GFT_COUNTER_VALUE_ARRAY_GET_VALUES = @as(u32, 2);
pub const NDIS_GFT_COUNTER_VALUE_ARRAY_REVISION_1 = @as(u32, 1);
pub const NDIS_GFT_STATISTICS_REVISION_1 = @as(u32, 1);
pub const NDIS_GFT_HEADER_GROUP_TRANSPOSITION_PROFILE_DECREMENT_TTL_IF_NOT_ONE = @as(u32, 1);
pub const NDIS_GFT_HEADER_GROUP_TRANSPOSITION_PROFILE_REVISION_1 = @as(u32, 1);
pub const NDIS_GFT_UNDEFINED_CUSTOM_ACTION = @as(u32, 0);
pub const NDIS_GFT_RESERVED_CUSTOM_ACTIONS = @as(u32, 256);
pub const NDIS_GFT_CUSTOM_ACTION_PROFILE_REVISION_1 = @as(u32, 1);
pub const NDIS_GFT_HTP_REDIRECT_TO_INGRESS_QUEUE_OF_VPORT = @as(u32, 1);
pub const NDIS_GFT_HTP_REDIRECT_TO_EGRESS_QUEUE_OF_VPORT = @as(u32, 2);
pub const NDIS_GFT_HTP_REDIRECT_TO_INGRESS_QUEUE_OF_VPORT_IF_TTL_IS_ONE = @as(u32, 4);
pub const NDIS_GFT_HTP_REDIRECT_TO_EGRESS_QUEUE_OF_VPORT_IF_TTL_IS_ONE = @as(u32, 8);
pub const NDIS_GFT_HTP_COPY_ALL_PACKETS = @as(u32, 16);
pub const NDIS_GFT_HTP_COPY_FIRST_PACKET = @as(u32, 32);
pub const NDIS_GFT_HTP_COPY_WHEN_TCP_FLAG_SET = @as(u32, 64);
pub const NDIS_GFT_HTP_CUSTOM_ACTION_PRESENT = @as(u32, 128);
pub const NDIS_GFT_HTP_META_ACTION_BEFORE_HEADER_TRANSPOSITION = @as(u32, 256);
pub const NDIS_GFT_HEADER_TRANSPOSITION_PROFILE_REVISION_1 = @as(u32, 1);
pub const NDIS_GFT_HEADER_GROUP_TRANSPOSITION_DECREMENT_TTL_IF_NOT_ONE = @as(u32, 1);
pub const NDIS_GFT_HEADER_GROUP_TRANSPOSITION_REVISION_1 = @as(u32, 1);
pub const NDIS_GFT_CUSTOM_ACTION_LAST_ACTION = @as(u32, 1);
pub const NDIS_GFT_CUSTOM_ACTION_REVISION_1 = @as(u32, 1);
pub const NDIS_GFT_EMFE_ADD_IN_ACTIVATED_STATE = @as(u32, 1);
pub const NDIS_GFT_EMFE_MATCH_AND_ACTION_MUST_BE_SUPPORTED = @as(u32, 2);
pub const NDIS_GFT_EMFE_RDMA_FLOW = @as(u32, 4);
pub const NDIS_GFT_EMFE_REDIRECT_TO_INGRESS_QUEUE_OF_VPORT = @as(u32, 4096);
pub const NDIS_GFT_EMFE_REDIRECT_TO_EGRESS_QUEUE_OF_VPORT = @as(u32, 8192);
pub const NDIS_GFT_EMFE_REDIRECT_TO_INGRESS_QUEUE_OF_VPORT_IF_TTL_IS_ONE = @as(u32, 16384);
pub const NDIS_GFT_EMFE_REDIRECT_TO_EGRESS_QUEUE_OF_VPORT_IF_TTL_IS_ONE = @as(u32, 32768);
pub const NDIS_GFT_EMFE_COPY_ALL_PACKETS = @as(u32, 65536);
pub const NDIS_GFT_EMFE_COPY_FIRST_PACKET = @as(u32, 131072);
pub const NDIS_GFT_EMFE_COPY_WHEN_TCP_FLAG_SET = @as(u32, 262144);
pub const NDIS_GFT_EMFE_CUSTOM_ACTION_PRESENT = @as(u32, 524288);
pub const NDIS_GFT_EMFE_META_ACTION_BEFORE_HEADER_TRANSPOSITION = @as(u32, 1048576);
pub const NDIS_GFT_EMFE_COPY_AFTER_TCP_FIN_FLAG_SET = @as(u32, 2097152);
pub const NDIS_GFT_EMFE_COPY_AFTER_TCP_RST_FLAG_SET = @as(u32, 4194304);
pub const NDIS_GFT_EMFE_COPY_CONDITION_CHANGED = @as(u32, 16777216);
pub const NDIS_GFT_EMFE_ALL_VPORT_FLOW_ENTRIES = @as(u32, 33554432);
pub const NDIS_GFT_EMFE_COUNTER_ALLOCATE = @as(u32, 1);
pub const NDIS_GFT_EMFE_COUNTER_MEMORY_MAPPED = @as(u32, 2);
pub const NDIS_GFT_EMFE_COUNTER_CLIENT_SPECIFIED_ADDRESS = @as(u32, 4);
pub const NDIS_GFT_EMFE_COUNTER_TRACK_TCP_FLOW = @as(u32, 8);
pub const NDIS_GFT_EXACT_MATCH_FLOW_ENTRY_REVISION_1 = @as(u32, 1);
pub const NDIS_GFT_WCFE_ADD_IN_ACTIVATED_STATE = @as(u32, 1);
pub const NDIS_GFT_WCFE_REDIRECT_TO_INGRESS_QUEUE_OF_VPORT = @as(u32, 2);
pub const NDIS_GFT_WCFE_REDIRECT_TO_EGRESS_QUEUE_OF_VPORT = @as(u32, 4);
pub const NDIS_GFT_WCFE_REDIRECT_TO_INGRESS_QUEUE_OF_VPORT_IF_TTL_IS_ONE = @as(u32, 8);
pub const NDIS_GFT_WCFE_REDIRECT_TO_EGRESS_QUEUE_OF_VPORT_IF_TTL_IS_ONE = @as(u32, 16);
pub const NDIS_GFT_WCFE_COPY_ALL_PACKETS = @as(u32, 32);
pub const NDIS_GFT_WCFE_CUSTOM_ACTION_PRESENT = @as(u32, 64);
pub const NDIS_GFT_WCFE_COUNTER_ALLOCATE = @as(u32, 1);
pub const NDIS_GFT_WCFE_COUNTER_MEMORY_MAPPED = @as(u32, 2);
pub const NDIS_GFT_WCFE_COUNTER_CLIENT_SPECIFIED_ADDRESS = @as(u32, 4);
pub const NDIS_GFT_WILDCARD_MATCH_FLOW_ENTRY_REVISION_1 = @as(u32, 1);
pub const NDIS_GFT_PROFILE_INFO_REVISION_1 = @as(u32, 1);
pub const NDIS_GFT_PROFILE_INFO_ARRAY_REVISION_1 = @as(u32, 1);
pub const NDIS_GFT_DELETE_PROFILE_ALL_PROFILES = @as(u32, 1);
pub const NDIS_GFT_DELETE_PROFILE_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_GFT_FLOW_ENTRY_ARRAY_REVISION_1 = @as(u32, 1);
pub const NDIS_GFT_FLOW_ENTRY_INFO_ALL_FLOW_ENTRIES = @as(u32, 1);
pub const NDIS_GFT_FLOW_ENTRY_INFO_ARRAY_REVISION_1 = @as(u32, 1);
pub const NDIS_GFT_FLOW_ENTRY_ID_ALL_NIC_SWITCH_FLOW_ENTRIES = @as(u32, 1);
pub const NDIS_GFT_FLOW_ENTRY_ID_ALL_TABLE_FLOW_ENTRIES = @as(u32, 2);
pub const NDIS_GFT_FLOW_ENTRY_ID_ALL_VPORT_FLOW_ENTRIES = @as(u32, 4);
pub const NDIS_GFT_FLOW_ENTRY_ID_RANGE_DEFINED = @as(u32, 8);
pub const NDIS_GFT_FLOW_ENTRY_ID_ARRAY_DEFINED = @as(u32, 16);
pub const NDIS_GFT_FLOW_ENTRY_ID_ARRAY_COUNTER_VALUES = @as(u32, 65536);
pub const NDIS_GFT_FLOW_ENTRY_ID_ARRAY_REVISION_1 = @as(u32, 1);
pub const NDIS_GFT_OFFLOAD_PARAMETERS_ENABLE_OFFLOAD = @as(u32, 1);
pub const NDIS_GFT_OFFLOAD_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_GFT_OFFLOAD_CAPS_ADD_FLOW_ENTRY_DEACTIVATED_PREFERRED = @as(u32, 1);
pub const NDIS_GFT_OFFLOAD_CAPS_RATE_LIMITING_QUEUE_SUPPORTED = @as(u32, 2);
pub const NDIS_GFT_OFFLOAD_CAPS_MEMORY_MAPPED_COUNTERS = @as(u32, 1);
pub const NDIS_GFT_OFFLOAD_CAPS_MEMORY_MAPPED_PAKCET_AND_BYTE_COUNTERS = @as(u32, 2);
pub const NDIS_GFT_OFFLOAD_CAPS_PER_FLOW_ENTRY_COUNTERS = @as(u32, 4);
pub const NDIS_GFT_OFFLOAD_CAPS_PER_PACKET_COUNTER_UPDATE = @as(u32, 8);
pub const NDIS_GFT_OFFLOAD_CAPS_CLIENT_SPECIFIED_MEMORY_MAPPED_COUNTERS = @as(u32, 16);
pub const NDIS_GFT_OFFLOAD_CAPS_INGRESS_AGGREGATE_COUNTERS = @as(u32, 32);
pub const NDIS_GFT_OFFLOAD_CAPS_EGRESS_AGGREGATE_COUNTERS = @as(u32, 64);
pub const NDIS_GFT_OFFLOAD_CAPS_TRACK_TCP_FLOW_STATE = @as(u32, 128);
pub const NDIS_GFT_OFFLOAD_CAPS_COMBINED_COUNTER_AND_STATE = @as(u32, 256);
pub const NDIS_GFT_OFFLOAD_CAPS_INGRESS_WILDCARD_MATCH = @as(u32, 1);
pub const NDIS_GFT_OFFLOAD_CAPS_EGRESS_WILDCARD_MATCH = @as(u32, 2);
pub const NDIS_GFT_OFFLOAD_CAPS_INGRESS_EXACT_MATCH = @as(u32, 4);
pub const NDIS_GFT_OFFLOAD_CAPS_EGRESS_EXACT_MATCH = @as(u32, 8);
pub const NDIS_GFT_OFFLOAD_CAPS_EXT_VPORT_INGRESS_WILDCARD_MATCH = @as(u32, 16);
pub const NDIS_GFT_OFFLOAD_CAPS_EXT_VPORT_EGRESS_WILDCARD_MATCH = @as(u32, 32);
pub const NDIS_GFT_OFFLOAD_CAPS_EXT_VPORT_INGRESS_EXACT_MATCH = @as(u32, 64);
pub const NDIS_GFT_OFFLOAD_CAPS_EXT_VPORT_EGRESS_EXACT_MATCH = @as(u32, 128);
pub const NDIS_GFT_OFFLOAD_CAPS_POP = @as(u32, 1);
pub const NDIS_GFT_OFFLOAD_CAPS_PUSH = @as(u32, 2);
pub const NDIS_GFT_OFFLOAD_CAPS_MODIFY = @as(u32, 4);
pub const NDIS_GFT_OFFLOAD_CAPS_IGNORE_ACTION_SUPPORTED = @as(u32, 8);
pub const NDIS_GFT_OFFLOAD_CAPS_REDIRECT_TO_INGRESS_QUEUE_OF_VPORT = @as(u32, 16);
pub const NDIS_GFT_OFFLOAD_CAPS_REDIRECT_TO_EGRESS_QUEUE_OF_VPORT = @as(u32, 32);
pub const NDIS_GFT_OFFLOAD_CAPS_REDIRECT_TO_INGRESS_QUEUE_OF_VPORT_IF_TTL_IS_ONE = @as(u32, 64);
pub const NDIS_GFT_OFFLOAD_CAPS_REDIRECT_TO_EGRESS_QUEUE_OF_VPORT_IF_TTL_IS_ONE = @as(u32, 128);
pub const NDIS_GFT_OFFLOAD_CAPS_COPY_ALL = @as(u32, 256);
pub const NDIS_GFT_OFFLOAD_CAPS_COPY_FIRST = @as(u32, 512);
pub const NDIS_GFT_OFFLOAD_CAPS_COPY_WHEN_TCP_FLAG_SET = @as(u32, 1024);
pub const NDIS_GFT_OFFLOAD_CAPS_SAMPLE = @as(u32, 2048);
pub const NDIS_GFT_OFFLOAD_CAPS_META_ACTION_BEFORE_HEADER_TRANSPOSITION = @as(u32, 4096);
pub const NDIS_GFT_OFFLOAD_CAPS_META_ACTION_AFTER_HEADER_TRANSPOSITION = @as(u32, 8192);
pub const NDIS_GFT_OFFLOAD_CAPS_PER_VPORT_EXCEPTION_VPORT = @as(u32, 16384);
pub const NDIS_GFT_OFFLOAD_CAPS_DESIGNATED_EXCEPTION_VPORT = @as(u32, 32768);
pub const NDIS_GFT_OFFLOAD_CAPS_DSCP_MASK = @as(u32, 65536);
pub const NDIS_GFT_OFFLOAD_CAPS_8021P_PRIORITY_MASK = @as(u32, 131072);
pub const NDIS_GFT_OFFLOAD_CAPS_ALLOW = @as(u32, 262144);
pub const NDIS_GFT_OFFLOAD_CAPS_DROP = @as(u32, 524288);
pub const NDIS_GFT_OFFLOAD_CAPABILITIES_REVISION_1 = @as(u32, 1);
pub const NDIS_GFT_VPORT_ENABLE = @as(u32, 1);
pub const NDIS_GFT_VPORT_PARSE_VXLAN = @as(u32, 2);
pub const NDIS_GFT_VPORT_PARSE_VXLAN_NOT_IN_SRC_PORT_RANGE = @as(u32, 4);
pub const NDIS_GFT_VPORT_ENABLE_STATE_CHANGED = @as(u32, 1048576);
pub const NDIS_GFT_VPORT_EXCEPTION_VPORT_CHANGED = @as(u32, 2097152);
pub const NDIS_GFT_VPORT_SAMPLING_RATE_CHANGED = @as(u32, 4194304);
pub const NDIS_GFT_VPORT_DSCP_MASK_CHANGED = @as(u32, 8388608);
pub const NDIS_GFT_VPORT_PRIORITY_MASK_CHANGED = @as(u32, 16777216);
pub const NDIS_GFT_VPORT_VXLAN_SETTINGS_CHANGED = @as(u32, 33554432);
pub const NDIS_GFT_VPORT_DSCP_FLAGS_CHANGED = @as(u32, 67108864);
pub const NDIS_GFT_VPORT_PARAMS_CHANGE_MASK = @as(u32, 4293918720);
pub const NDIS_GFT_VPORT_MAX_DSCP_MASK_COUNTER_OBJECTS = @as(u32, 64);
pub const NDIS_GFT_VPORT_MAX_PRIORITY_MASK_COUNTER_OBJECTS = @as(u32, 8);
pub const NDIS_GFT_VPORT_DSCP_GUARD_ENABLE_RX = @as(u32, 1);
pub const NDIS_GFT_VPORT_DSCP_GUARD_ENABLE_TX = @as(u32, 2);
pub const NDIS_GFT_VPORT_DSCP_MASK_ENABLE_RX = @as(u32, 4);
pub const NDIS_GFT_VPORT_DSCP_MASK_ENABLE_TX = @as(u32, 8);
pub const NDIS_GFT_VPORT_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_QOS_DEFAULT_SQ_ID = @as(u32, 0);
pub const NDIS_QOS_SQ_PARAMETERS_REVISION_1 = @as(u32, 1);
pub const NDIS_QOS_SQ_PARAMETERS_REVISION_2 = @as(u32, 2);
pub const NDIS_QOS_SQ_TRANSMIT_CAP_ENABLED = @as(u32, 1);
pub const NDIS_QOS_SQ_TRANSMIT_RESERVATION_ENABLED = @as(u32, 2);
pub const NDIS_QOS_SQ_RECEIVE_CAP_ENABLED = @as(u32, 4);
pub const NDIS_QOS_SQ_PARAMETERS_ARRAY_REVISION_1 = @as(u32, 1);
pub const NDIS_QOS_SQ_ARRAY_REVISION_1 = @as(u32, 1);
pub const NDIS_QOS_OFFLOAD_CAPABILITIES_REVISION_1 = @as(u32, 1);
pub const NDIS_QOS_OFFLOAD_CAPABILITIES_REVISION_2 = @as(u32, 2);
pub const NDIS_QOS_OFFLOAD_CAPS_STANDARD_SQ = @as(u32, 1);
pub const NDIS_QOS_OFFLOAD_CAPS_GFT_SQ = @as(u32, 2);
pub const NDIS_QOS_SQ_STATS_REVISION_1 = @as(u32, 1);
pub const NDIS_TIMESTAMP_CAPABILITIES_REVISION_1 = @as(u32, 1);
pub const OID_TIMESTAMP_CAPABILITY = @as(u32, 10485761);
pub const OID_TIMESTAMP_CURRENT_CONFIG = @as(u32, 10485762);
pub const NDIS_HARDWARE_CROSSTIMESTAMP_REVISION_1 = @as(u32, 1);
pub const OID_TIMESTAMP_GET_CROSSTIMESTAMP = @as(u32, 10485763);
pub const DevProp_PciRootBus_SecondaryInterface_PciConventional = @as(u32, 0);
pub const DevProp_PciRootBus_SecondaryInterface_PciXMode1 = @as(u32, 1);
pub const DevProp_PciRootBus_SecondaryInterface_PciXMode2 = @as(u32, 2);
pub const DevProp_PciRootBus_SecondaryInterface_PciExpress = @as(u32, 3);
pub const DevProp_PciRootBus_CurrentSpeedAndMode_Pci_Conventional_33Mhz = @as(u32, 0);
pub const DevProp_PciRootBus_CurrentSpeedAndMode_Pci_Conventional_66Mhz = @as(u32, 1);
pub const DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_Mode1_66Mhz = @as(u32, 2);
pub const DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_Mode1_100Mhz = @as(u32, 3);
pub const DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_Mode1_133Mhz = @as(u32, 4);
pub const DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_Mode1_ECC_66Mhz = @as(u32, 5);
pub const DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_Mode1_ECC_100Mhz = @as(u32, 6);
pub const DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_Mode1_ECC_133Mhz = @as(u32, 7);
pub const DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_266_Mode2_66Mhz = @as(u32, 8);
pub const DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_266_Mode2_100Mhz = @as(u32, 9);
pub const DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_266_Mode2_133Mhz = @as(u32, 10);
pub const DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_533_Mode2_66Mhz = @as(u32, 11);
pub const DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_533_Mode2_100Mhz = @as(u32, 12);
pub const DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_533_Mode2_133Mhz = @as(u32, 13);
pub const DevProp_PciRootBus_SupportedSpeedsAndModes_Pci_Conventional_33Mhz = @as(u32, 1);
pub const DevProp_PciRootBus_SupportedSpeedsAndModes_Pci_Conventional_66Mhz = @as(u32, 2);
pub const DevProp_PciRootBus_SupportedSpeedsAndModes_Pci_X_66Mhz = @as(u32, 4);
pub const DevProp_PciRootBus_SupportedSpeedsAndModes_Pci_X_133Mhz = @as(u32, 8);
pub const DevProp_PciRootBus_SupportedSpeedsAndModes_Pci_X_266Mhz = @as(u32, 16);
pub const DevProp_PciRootBus_SupportedSpeedsAndModes_Pci_X_533Mhz = @as(u32, 32);
pub const DevProp_PciRootBus_BusWidth_32Bits = @as(u32, 0);
pub const DevProp_PciRootBus_BusWidth_64Bits = @as(u32, 1);
pub const DevProp_PciDevice_DeviceType_PciConventional = @as(u32, 0);
pub const DevProp_PciDevice_DeviceType_PciX = @as(u32, 1);
pub const DevProp_PciDevice_DeviceType_PciExpressEndpoint = @as(u32, 2);
pub const DevProp_PciDevice_DeviceType_PciExpressLegacyEndpoint = @as(u32, 3);
pub const DevProp_PciDevice_DeviceType_PciExpressRootComplexIntegratedEndpoint = @as(u32, 4);
pub const DevProp_PciDevice_DeviceType_PciExpressTreatedAsPci = @as(u32, 5);
pub const DevProp_PciDevice_BridgeType_PciConventional = @as(u32, 6);
pub const DevProp_PciDevice_BridgeType_PciX = @as(u32, 7);
pub const DevProp_PciDevice_BridgeType_PciExpressRootPort = @as(u32, 8);
pub const DevProp_PciDevice_BridgeType_PciExpressUpstreamSwitchPort = @as(u32, 9);
pub const DevProp_PciDevice_BridgeType_PciExpressDownstreamSwitchPort = @as(u32, 10);
pub const DevProp_PciDevice_BridgeType_PciExpressToPciXBridge = @as(u32, 11);
pub const DevProp_PciDevice_BridgeType_PciXToExpressBridge = @as(u32, 12);
pub const DevProp_PciDevice_BridgeType_PciExpressTreatedAsPci = @as(u32, 13);
pub const DevProp_PciDevice_BridgeType_PciExpressEventCollector = @as(u32, 14);
pub const DevProp_PciDevice_CurrentSpeedAndMode_Pci_Conventional_33MHz = @as(u32, 0);
pub const DevProp_PciDevice_CurrentSpeedAndMode_Pci_Conventional_66MHz = @as(u32, 1);
pub const DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode_Conventional_Pci = @as(u32, 0);
pub const DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode1_66Mhz = @as(u32, 1);
pub const DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode1_100Mhz = @as(u32, 2);
pub const DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode1_133MHZ = @as(u32, 3);
pub const DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode1_ECC_66Mhz = @as(u32, 5);
pub const DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode1_ECC_100Mhz = @as(u32, 6);
pub const DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode1_ECC_133Mhz = @as(u32, 7);
pub const DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode2_266_66MHz = @as(u32, 9);
pub const DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode2_266_100MHz = @as(u32, 10);
pub const DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode2_266_133MHz = @as(u32, 11);
pub const DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode2_533_66MHz = @as(u32, 13);
pub const DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode2_533_100MHz = @as(u32, 14);
pub const DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode2_533_133MHz = @as(u32, 15);
pub const DevProp_PciExpressDevice_PayloadOrRequestSize_128Bytes = @as(u32, 0);
pub const DevProp_PciExpressDevice_PayloadOrRequestSize_256Bytes = @as(u32, 1);
pub const DevProp_PciExpressDevice_PayloadOrRequestSize_512Bytes = @as(u32, 2);
pub const DevProp_PciExpressDevice_PayloadOrRequestSize_1024Bytes = @as(u32, 3);
pub const DevProp_PciExpressDevice_PayloadOrRequestSize_2048Bytes = @as(u32, 4);
pub const DevProp_PciExpressDevice_PayloadOrRequestSize_4096Bytes = @as(u32, 5);
pub const DevProp_PciExpressDevice_LinkSpeed_TwoAndHalf_Gbps = @as(u32, 1);
pub const DevProp_PciExpressDevice_LinkSpeed_Five_Gbps = @as(u32, 2);
pub const DevProp_PciExpressDevice_LinkWidth_By_1 = @as(u32, 1);
pub const DevProp_PciExpressDevice_LinkWidth_By_2 = @as(u32, 2);
pub const DevProp_PciExpressDevice_LinkWidth_By_4 = @as(u32, 4);
pub const DevProp_PciExpressDevice_LinkWidth_By_8 = @as(u32, 8);
pub const DevProp_PciExpressDevice_LinkWidth_By_12 = @as(u32, 12);
pub const DevProp_PciExpressDevice_LinkWidth_By_16 = @as(u32, 16);
pub const DevProp_PciExpressDevice_LinkWidth_By_32 = @as(u32, 32);
pub const DevProp_PciExpressDevice_Spec_Version_10 = @as(u32, 1);
pub const DevProp_PciExpressDevice_Spec_Version_11 = @as(u32, 2);
pub const DevProp_PciDevice_InterruptType_LineBased = @as(u32, 1);
pub const DevProp_PciDevice_InterruptType_Msi = @as(u32, 2);
pub const DevProp_PciDevice_InterruptType_MsiX = @as(u32, 4);
pub const DevProp_PciDevice_SriovSupport_Ok = @as(u32, 0);
pub const DevProp_PciDevice_SriovSupport_MissingAcs = @as(u32, 1);
pub const DevProp_PciDevice_SriovSupport_MissingPfDriver = @as(u32, 2);
pub const DevProp_PciDevice_SriovSupport_NoBusResource = @as(u32, 3);
pub const DevProp_PciDevice_SriovSupport_DidntGetVfBarSpace = @as(u32, 4);
pub const DevProp_PciDevice_AcsSupport_Present = @as(u32, 0);
pub const DevProp_PciDevice_AcsSupport_NotNeeded = @as(u32, 1);
pub const DevProp_PciDevice_AcsSupport_Missing = @as(u32, 2);
pub const DevProp_PciDevice_AcsCompatibleUpHierarchy_NotSupported = @as(u32, 0);
pub const DevProp_PciDevice_AcsCompatibleUpHierarchy_SingleFunctionSupported = @as(u32, 1);
pub const DevProp_PciDevice_AcsCompatibleUpHierarchy_NoP2PSupported = @as(u32, 2);
pub const DevProp_PciDevice_AcsCompatibleUpHierarchy_Supported = @as(u32, 3);
pub const WLAN_API_VERSION_1_0 = @as(u32, 1);
pub const WLAN_API_VERSION_2_0 = @as(u32, 2);
pub const WLAN_PROFILE_GROUP_POLICY = @as(u32, 1);
pub const WLAN_PROFILE_USER = @as(u32, 2);
pub const WLAN_PROFILE_GET_PLAINTEXT_KEY = @as(u32, 4);
pub const WLAN_PROFILE_CONNECTION_MODE_SET_BY_CLIENT = @as(u32, 65536);
pub const WLAN_PROFILE_CONNECTION_MODE_AUTO = @as(u32, 131072);
pub const DOT11_PSD_IE_MAX_DATA_SIZE = @as(u32, 240);
pub const DOT11_PSD_IE_MAX_ENTRY_NUMBER = @as(u32, 5);
pub const WLAN_REASON_CODE_NETWORK_NOT_COMPATIBLE = @as(u32, 131073);
pub const WLAN_REASON_CODE_PROFILE_NOT_COMPATIBLE = @as(u32, 131074);
pub const WLAN_REASON_CODE_NO_AUTO_CONNECTION = @as(u32, 163841);
pub const WLAN_REASON_CODE_NOT_VISIBLE = @as(u32, 163842);
pub const WLAN_REASON_CODE_GP_DENIED = @as(u32, 163843);
pub const WLAN_REASON_CODE_USER_DENIED = @as(u32, 163844);
pub const WLAN_REASON_CODE_BSS_TYPE_NOT_ALLOWED = @as(u32, 163845);
pub const WLAN_REASON_CODE_IN_FAILED_LIST = @as(u32, 163846);
pub const WLAN_REASON_CODE_IN_BLOCKED_LIST = @as(u32, 163847);
pub const WLAN_REASON_CODE_SSID_LIST_TOO_LONG = @as(u32, 163848);
pub const WLAN_REASON_CODE_CONNECT_CALL_FAIL = @as(u32, 163849);
pub const WLAN_REASON_CODE_SCAN_CALL_FAIL = @as(u32, 163850);
pub const WLAN_REASON_CODE_NETWORK_NOT_AVAILABLE = @as(u32, 163851);
pub const WLAN_REASON_CODE_PROFILE_CHANGED_OR_DELETED = @as(u32, 163852);
pub const WLAN_REASON_CODE_KEY_MISMATCH = @as(u32, 163853);
pub const WLAN_REASON_CODE_USER_NOT_RESPOND = @as(u32, 163854);
pub const WLAN_REASON_CODE_AP_PROFILE_NOT_ALLOWED_FOR_CLIENT = @as(u32, 163855);
pub const WLAN_REASON_CODE_AP_PROFILE_NOT_ALLOWED = @as(u32, 163856);
pub const WLAN_REASON_CODE_HOTSPOT2_PROFILE_DENIED = @as(u32, 163857);
pub const WLAN_REASON_CODE_INVALID_PROFILE_SCHEMA = @as(u32, 524289);
pub const WLAN_REASON_CODE_PROFILE_MISSING = @as(u32, 524290);
pub const WLAN_REASON_CODE_INVALID_PROFILE_NAME = @as(u32, 524291);
pub const WLAN_REASON_CODE_INVALID_PROFILE_TYPE = @as(u32, 524292);
pub const WLAN_REASON_CODE_INVALID_PHY_TYPE = @as(u32, 524293);
pub const WLAN_REASON_CODE_MSM_SECURITY_MISSING = @as(u32, 524294);
pub const WLAN_REASON_CODE_IHV_SECURITY_NOT_SUPPORTED = @as(u32, 524295);
pub const WLAN_REASON_CODE_IHV_OUI_MISMATCH = @as(u32, 524296);
pub const WLAN_REASON_CODE_IHV_OUI_MISSING = @as(u32, 524297);
pub const WLAN_REASON_CODE_IHV_SETTINGS_MISSING = @as(u32, 524298);
pub const WLAN_REASON_CODE_CONFLICT_SECURITY = @as(u32, 524299);
pub const WLAN_REASON_CODE_SECURITY_MISSING = @as(u32, 524300);
pub const WLAN_REASON_CODE_INVALID_BSS_TYPE = @as(u32, 524301);
pub const WLAN_REASON_CODE_INVALID_ADHOC_CONNECTION_MODE = @as(u32, 524302);
pub const WLAN_REASON_CODE_NON_BROADCAST_SET_FOR_ADHOC = @as(u32, 524303);
pub const WLAN_REASON_CODE_AUTO_SWITCH_SET_FOR_ADHOC = @as(u32, 524304);
pub const WLAN_REASON_CODE_AUTO_SWITCH_SET_FOR_MANUAL_CONNECTION = @as(u32, 524305);
pub const WLAN_REASON_CODE_IHV_SECURITY_ONEX_MISSING = @as(u32, 524306);
pub const WLAN_REASON_CODE_PROFILE_SSID_INVALID = @as(u32, 524307);
pub const WLAN_REASON_CODE_TOO_MANY_SSID = @as(u32, 524308);
pub const WLAN_REASON_CODE_IHV_CONNECTIVITY_NOT_SUPPORTED = @as(u32, 524309);
pub const WLAN_REASON_CODE_BAD_MAX_NUMBER_OF_CLIENTS_FOR_AP = @as(u32, 524310);
pub const WLAN_REASON_CODE_INVALID_CHANNEL = @as(u32, 524311);
pub const WLAN_REASON_CODE_OPERATION_MODE_NOT_SUPPORTED = @as(u32, 524312);
pub const WLAN_REASON_CODE_AUTO_AP_PROFILE_NOT_ALLOWED = @as(u32, 524313);
pub const WLAN_REASON_CODE_AUTO_CONNECTION_NOT_ALLOWED = @as(u32, 524314);
pub const WLAN_REASON_CODE_HOTSPOT2_PROFILE_NOT_ALLOWED = @as(u32, 524315);
pub const WLAN_REASON_CODE_UNSUPPORTED_SECURITY_SET_BY_OS = @as(u32, 196609);
pub const WLAN_REASON_CODE_UNSUPPORTED_SECURITY_SET = @as(u32, 196610);
pub const WLAN_REASON_CODE_BSS_TYPE_UNMATCH = @as(u32, 196611);
pub const WLAN_REASON_CODE_PHY_TYPE_UNMATCH = @as(u32, 196612);
pub const WLAN_REASON_CODE_DATARATE_UNMATCH = @as(u32, 196613);
pub const WLAN_REASON_CODE_USER_CANCELLED = @as(u32, 229377);
pub const WLAN_REASON_CODE_ASSOCIATION_FAILURE = @as(u32, 229378);
pub const WLAN_REASON_CODE_ASSOCIATION_TIMEOUT = @as(u32, 229379);
pub const WLAN_REASON_CODE_PRE_SECURITY_FAILURE = @as(u32, 229380);
pub const WLAN_REASON_CODE_START_SECURITY_FAILURE = @as(u32, 229381);
pub const WLAN_REASON_CODE_SECURITY_FAILURE = @as(u32, 229382);
pub const WLAN_REASON_CODE_SECURITY_TIMEOUT = @as(u32, 229383);
pub const WLAN_REASON_CODE_ROAMING_FAILURE = @as(u32, 229384);
pub const WLAN_REASON_CODE_ROAMING_SECURITY_FAILURE = @as(u32, 229385);
pub const WLAN_REASON_CODE_ADHOC_SECURITY_FAILURE = @as(u32, 229386);
pub const WLAN_REASON_CODE_DRIVER_DISCONNECTED = @as(u32, 229387);
pub const WLAN_REASON_CODE_DRIVER_OPERATION_FAILURE = @as(u32, 229388);
pub const WLAN_REASON_CODE_IHV_NOT_AVAILABLE = @as(u32, 229389);
pub const WLAN_REASON_CODE_IHV_NOT_RESPONDING = @as(u32, 229390);
pub const WLAN_REASON_CODE_DISCONNECT_TIMEOUT = @as(u32, 229391);
pub const WLAN_REASON_CODE_INTERNAL_FAILURE = @as(u32, 229392);
pub const WLAN_REASON_CODE_UI_REQUEST_TIMEOUT = @as(u32, 229393);
pub const WLAN_REASON_CODE_TOO_MANY_SECURITY_ATTEMPTS = @as(u32, 229394);
pub const WLAN_REASON_CODE_AP_STARTING_FAILURE = @as(u32, 229395);
pub const WLAN_REASON_CODE_MSMSEC_PROFILE_INVALID_KEY_INDEX = @as(u32, 262145);
pub const WLAN_REASON_CODE_MSMSEC_PROFILE_PSK_PRESENT = @as(u32, 262146);
pub const WLAN_REASON_CODE_MSMSEC_PROFILE_KEY_LENGTH = @as(u32, 262147);
pub const WLAN_REASON_CODE_MSMSEC_PROFILE_PSK_LENGTH = @as(u32, 262148);
pub const WLAN_REASON_CODE_MSMSEC_PROFILE_NO_AUTH_CIPHER_SPECIFIED = @as(u32, 262149);
pub const WLAN_REASON_CODE_MSMSEC_PROFILE_TOO_MANY_AUTH_CIPHER_SPECIFIED = @as(u32, 262150);
pub const WLAN_REASON_CODE_MSMSEC_PROFILE_DUPLICATE_AUTH_CIPHER = @as(u32, 262151);
pub const WLAN_REASON_CODE_MSMSEC_PROFILE_RAWDATA_INVALID = @as(u32, 262152);
pub const WLAN_REASON_CODE_MSMSEC_PROFILE_INVALID_AUTH_CIPHER = @as(u32, 262153);
pub const WLAN_REASON_CODE_MSMSEC_PROFILE_ONEX_DISABLED = @as(u32, 262154);
pub const WLAN_REASON_CODE_MSMSEC_PROFILE_ONEX_ENABLED = @as(u32, 262155);
pub const WLAN_REASON_CODE_MSMSEC_PROFILE_INVALID_PMKCACHE_MODE = @as(u32, 262156);
pub const WLAN_REASON_CODE_MSMSEC_PROFILE_INVALID_PMKCACHE_SIZE = @as(u32, 262157);
pub const WLAN_REASON_CODE_MSMSEC_PROFILE_INVALID_PMKCACHE_TTL = @as(u32, 262158);
pub const WLAN_REASON_CODE_MSMSEC_PROFILE_INVALID_PREAUTH_MODE = @as(u32, 262159);
pub const WLAN_REASON_CODE_MSMSEC_PROFILE_INVALID_PREAUTH_THROTTLE = @as(u32, 262160);
pub const WLAN_REASON_CODE_MSMSEC_PROFILE_PREAUTH_ONLY_ENABLED = @as(u32, 262161);
pub const WLAN_REASON_CODE_MSMSEC_CAPABILITY_NETWORK = @as(u32, 262162);
pub const WLAN_REASON_CODE_MSMSEC_CAPABILITY_NIC = @as(u32, 262163);
pub const WLAN_REASON_CODE_MSMSEC_CAPABILITY_PROFILE = @as(u32, 262164);
pub const WLAN_REASON_CODE_MSMSEC_CAPABILITY_DISCOVERY = @as(u32, 262165);
pub const WLAN_REASON_CODE_MSMSEC_PROFILE_PASSPHRASE_CHAR = @as(u32, 262166);
pub const WLAN_REASON_CODE_MSMSEC_PROFILE_KEYMATERIAL_CHAR = @as(u32, 262167);
pub const WLAN_REASON_CODE_MSMSEC_PROFILE_WRONG_KEYTYPE = @as(u32, 262168);
pub const WLAN_REASON_CODE_MSMSEC_MIXED_CELL = @as(u32, 262169);
pub const WLAN_REASON_CODE_MSMSEC_PROFILE_AUTH_TIMERS_INVALID = @as(u32, 262170);
pub const WLAN_REASON_CODE_MSMSEC_PROFILE_INVALID_GKEY_INTV = @as(u32, 262171);
pub const WLAN_REASON_CODE_MSMSEC_TRANSITION_NETWORK = @as(u32, 262172);
pub const WLAN_REASON_CODE_MSMSEC_PROFILE_KEY_UNMAPPED_CHAR = @as(u32, 262173);
pub const WLAN_REASON_CODE_MSMSEC_CAPABILITY_PROFILE_AUTH = @as(u32, 262174);
pub const WLAN_REASON_CODE_MSMSEC_CAPABILITY_PROFILE_CIPHER = @as(u32, 262175);
pub const WLAN_REASON_CODE_MSMSEC_PROFILE_SAFE_MODE = @as(u32, 262176);
pub const WLAN_REASON_CODE_MSMSEC_CAPABILITY_PROFILE_SAFE_MODE_NIC = @as(u32, 262177);
pub const WLAN_REASON_CODE_MSMSEC_CAPABILITY_PROFILE_SAFE_MODE_NW = @as(u32, 262178);
pub const WLAN_REASON_CODE_MSMSEC_PROFILE_UNSUPPORTED_AUTH = @as(u32, 262179);
pub const WLAN_REASON_CODE_MSMSEC_PROFILE_UNSUPPORTED_CIPHER = @as(u32, 262180);
pub const WLAN_REASON_CODE_MSMSEC_CAPABILITY_MFP_NW_NIC = @as(u32, 262181);
pub const WLAN_REASON_CODE_MSMSEC_UI_REQUEST_FAILURE = @as(u32, 294913);
pub const WLAN_REASON_CODE_MSMSEC_AUTH_START_TIMEOUT = @as(u32, 294914);
pub const WLAN_REASON_CODE_MSMSEC_AUTH_SUCCESS_TIMEOUT = @as(u32, 294915);
pub const WLAN_REASON_CODE_MSMSEC_KEY_START_TIMEOUT = @as(u32, 294916);
pub const WLAN_REASON_CODE_MSMSEC_KEY_SUCCESS_TIMEOUT = @as(u32, 294917);
pub const WLAN_REASON_CODE_MSMSEC_M3_MISSING_KEY_DATA = @as(u32, 294918);
pub const WLAN_REASON_CODE_MSMSEC_M3_MISSING_IE = @as(u32, 294919);
pub const WLAN_REASON_CODE_MSMSEC_M3_MISSING_GRP_KEY = @as(u32, 294920);
pub const WLAN_REASON_CODE_MSMSEC_PR_IE_MATCHING = @as(u32, 294921);
pub const WLAN_REASON_CODE_MSMSEC_SEC_IE_MATCHING = @as(u32, 294922);
pub const WLAN_REASON_CODE_MSMSEC_NO_PAIRWISE_KEY = @as(u32, 294923);
pub const WLAN_REASON_CODE_MSMSEC_G1_MISSING_KEY_DATA = @as(u32, 294924);
pub const WLAN_REASON_CODE_MSMSEC_G1_MISSING_GRP_KEY = @as(u32, 294925);
pub const WLAN_REASON_CODE_MSMSEC_PEER_INDICATED_INSECURE = @as(u32, 294926);
pub const WLAN_REASON_CODE_MSMSEC_NO_AUTHENTICATOR = @as(u32, 294927);
pub const WLAN_REASON_CODE_MSMSEC_NIC_FAILURE = @as(u32, 294928);
pub const WLAN_REASON_CODE_MSMSEC_CANCELLED = @as(u32, 294929);
pub const WLAN_REASON_CODE_MSMSEC_KEY_FORMAT = @as(u32, 294930);
pub const WLAN_REASON_CODE_MSMSEC_DOWNGRADE_DETECTED = @as(u32, 294931);
pub const WLAN_REASON_CODE_MSMSEC_PSK_MISMATCH_SUSPECTED = @as(u32, 294932);
pub const WLAN_REASON_CODE_MSMSEC_FORCED_FAILURE = @as(u32, 294933);
pub const WLAN_REASON_CODE_MSMSEC_M3_TOO_MANY_RSNIE = @as(u32, 294934);
pub const WLAN_REASON_CODE_MSMSEC_M2_MISSING_KEY_DATA = @as(u32, 294935);
pub const WLAN_REASON_CODE_MSMSEC_M2_MISSING_IE = @as(u32, 294936);
pub const WLAN_REASON_CODE_MSMSEC_AUTH_WCN_COMPLETED = @as(u32, 294937);
pub const WLAN_REASON_CODE_MSMSEC_M3_MISSING_MGMT_GRP_KEY = @as(u32, 294938);
pub const WLAN_REASON_CODE_MSMSEC_G1_MISSING_MGMT_GRP_KEY = @as(u32, 294939);
pub const WLAN_AVAILABLE_NETWORK_CONNECTED = @as(u32, 1);
pub const WLAN_AVAILABLE_NETWORK_HAS_PROFILE = @as(u32, 2);
pub const WLAN_AVAILABLE_NETWORK_CONSOLE_USER_PROFILE = @as(u32, 4);
pub const WLAN_AVAILABLE_NETWORK_INTERWORKING_SUPPORTED = @as(u32, 8);
pub const WLAN_AVAILABLE_NETWORK_HOTSPOT2_ENABLED = @as(u32, 16);
pub const WLAN_AVAILABLE_NETWORK_ANQP_SUPPORTED = @as(u32, 32);
pub const WLAN_AVAILABLE_NETWORK_HOTSPOT2_DOMAIN = @as(u32, 64);
pub const WLAN_AVAILABLE_NETWORK_HOTSPOT2_ROAMING = @as(u32, 128);
pub const WLAN_AVAILABLE_NETWORK_AUTO_CONNECT_FAILED = @as(u32, 256);
pub const WLAN_AVAILABLE_NETWORK_INCLUDE_ALL_ADHOC_PROFILES = @as(u32, 1);
pub const WLAN_AVAILABLE_NETWORK_INCLUDE_ALL_MANUAL_HIDDEN_PROFILES = @as(u32, 2);
pub const WLAN_MAX_PHY_TYPE_NUMBER = @as(u32, 8);
pub const WLAN_MAX_PHY_INDEX = @as(u32, 64);
pub const WLAN_CONNECTION_HIDDEN_NETWORK = @as(u32, 1);
pub const WLAN_CONNECTION_ADHOC_JOIN_ONLY = @as(u32, 2);
pub const WLAN_CONNECTION_IGNORE_PRIVACY_BIT = @as(u32, 4);
pub const WLAN_CONNECTION_EAPOL_PASSTHROUGH = @as(u32, 8);
pub const WLAN_CONNECTION_PERSIST_DISCOVERY_PROFILE = @as(u32, 16);
pub const WLAN_CONNECTION_PERSIST_DISCOVERY_PROFILE_CONNECTION_MODE_AUTO = @as(u32, 32);
pub const WLAN_CONNECTION_PERSIST_DISCOVERY_PROFILE_OVERWRITE_EXISTING = @as(u32, 64);
pub const WFD_API_VERSION_1_0 = @as(u32, 1);
pub const WLAN_UI_API_VERSION = @as(u32, 1);
pub const WLAN_UI_API_INITIAL_VERSION = @as(u32, 1);
pub const GUID_DEVINTERFACE_WIFIDIRECT_DEVICE = Guid.initString("439b20af-8955-405b-99f0-a62af0c68d43");
pub const GUID_AEPSERVICE_WIFIDIRECT_DEVICE = Guid.initString("cc29827c-9caf-4928-99a9-18f7c2381389");
pub const GUID_DEVINTERFACE_ASP_INFRA_DEVICE = Guid.initString("ff823995-7a72-4c80-8757-c67ee13d1a49");
pub const DEVPKEY_WiFiDirect_DeviceAddress = PROPERTYKEY { .fmtid = @import("../zig.zig").Guid.initString("1506935d-e3e7-450f-8637-82233ebe5f6e"), .pid = 1 };
pub const DEVPKEY_WiFiDirect_InterfaceAddress = PROPERTYKEY { .fmtid = @import("../zig.zig").Guid.initString("1506935d-e3e7-450f-8637-82233ebe5f6e"), .pid = 2 };
pub const DEVPKEY_WiFiDirect_InterfaceGuid = PROPERTYKEY { .fmtid = @import("../zig.zig").Guid.initString("1506935d-e3e7-450f-8637-82233ebe5f6e"), .pid = 3 };
pub const DEVPKEY_WiFiDirect_GroupId = PROPERTYKEY { .fmtid = @import("../zig.zig").Guid.initString("1506935d-e3e7-450f-8637-82233ebe5f6e"), .pid = 4 };
pub const DEVPKEY_WiFiDirect_IsConnected = PROPERTYKEY { .fmtid = @import("../zig.zig").Guid.initString("1506935d-e3e7-450f-8637-82233ebe5f6e"), .pid = 5 };
pub const DEVPKEY_WiFiDirect_IsVisible = PROPERTYKEY { .fmtid = @import("../zig.zig").Guid.initString("1506935d-e3e7-450f-8637-82233ebe5f6e"), .pid = 6 };
pub const DEVPKEY_WiFiDirect_IsLegacyDevice = PROPERTYKEY { .fmtid = @import("../zig.zig").Guid.initString("1506935d-e3e7-450f-8637-82233ebe5f6e"), .pid = 7 };
pub const DEVPKEY_WiFiDirect_MiracastVersion = PROPERTYKEY { .fmtid = @import("../zig.zig").Guid.initString("1506935d-e3e7-450f-8637-82233ebe5f6e"), .pid = 8 };
pub const DEVPKEY_WiFiDirect_IsMiracastLCPSupported = PROPERTYKEY { .fmtid = @import("../zig.zig").Guid.initString("1506935d-e3e7-450f-8637-82233ebe5f6e"), .pid = 9 };
pub const DEVPKEY_WiFiDirect_Services = PROPERTYKEY { .fmtid = @import("../zig.zig").Guid.initString("1506935d-e3e7-450f-8637-82233ebe5f6e"), .pid = 10 };
pub const DEVPKEY_WiFiDirect_SupportedChannelList = PROPERTYKEY { .fmtid = @import("../zig.zig").Guid.initString("1506935d-e3e7-450f-8637-82233ebe5f6e"), .pid = 11 };
pub const DEVPKEY_WiFiDirect_InformationElements = PROPERTYKEY { .fmtid = @import("../zig.zig").Guid.initString("1506935d-e3e7-450f-8637-82233ebe5f6e"), .pid = 12 };
pub const DEVPKEY_WiFiDirect_DeviceAddressCopy = PROPERTYKEY { .fmtid = @import("../zig.zig").Guid.initString("1506935d-e3e7-450f-8637-82233ebe5f6e"), .pid = 13 };
pub const DEVPKEY_WiFiDirect_IsRecentlyAssociated = PROPERTYKEY { .fmtid = @import("../zig.zig").Guid.initString("1506935d-e3e7-450f-8637-82233ebe5f6e"), .pid = 14 };
pub const DEVPKEY_WiFiDirect_Service_Aeps = PROPERTYKEY { .fmtid = @import("../zig.zig").Guid.initString("1506935d-e3e7-450f-8637-82233ebe5f6e"), .pid = 15 };
pub const DEVPKEY_WiFiDirect_NoMiracastAutoProject = PROPERTYKEY { .fmtid = @import("../zig.zig").Guid.initString("1506935d-e3e7-450f-8637-82233ebe5f6e"), .pid = 16 };
pub const DEVPKEY_InfraCast_Supported = PROPERTYKEY { .fmtid = @import("../zig.zig").Guid.initString("1506935d-e3e7-450f-8637-82233ebe5f6e"), .pid = 17 };
pub const DEVPKEY_InfraCast_StreamSecuritySupported = PROPERTYKEY { .fmtid = @import("../zig.zig").Guid.initString("1506935d-e3e7-450f-8637-82233ebe5f6e"), .pid = 18 };
pub const DEVPKEY_InfraCast_AccessPointBssid = PROPERTYKEY { .fmtid = @import("../zig.zig").Guid.initString("1506935d-e3e7-450f-8637-82233ebe5f6e"), .pid = 19 };
pub const DEVPKEY_InfraCast_SinkHostName = PROPERTYKEY { .fmtid = @import("../zig.zig").Guid.initString("1506935d-e3e7-450f-8637-82233ebe5f6e"), .pid = 20 };
pub const DEVPKEY_InfraCast_ChallengeAep = PROPERTYKEY { .fmtid = @import("../zig.zig").Guid.initString("1506935d-e3e7-450f-8637-82233ebe5f6e"), .pid = 21 };
pub const DEVPKEY_WiFiDirect_IsDMGCapable = PROPERTYKEY { .fmtid = @import("../zig.zig").Guid.initString("1506935d-e3e7-450f-8637-82233ebe5f6e"), .pid = 22 };
pub const DEVPKEY_InfraCast_DevnodeAep = PROPERTYKEY { .fmtid = @import("../zig.zig").Guid.initString("1506935d-e3e7-450f-8637-82233ebe5f6e"), .pid = 23 };
pub const DEVPKEY_WiFiDirect_FoundWsbService = PROPERTYKEY { .fmtid = @import("../zig.zig").Guid.initString("1506935d-e3e7-450f-8637-82233ebe5f6e"), .pid = 24 };
pub const DEVPKEY_InfraCast_HostName_ResolutionMode = PROPERTYKEY { .fmtid = @import("../zig.zig").Guid.initString("1506935d-e3e7-450f-8637-82233ebe5f6e"), .pid = 25 };
pub const DEVPKEY_InfraCast_SinkIpAddress = PROPERTYKEY { .fmtid = @import("../zig.zig").Guid.initString("1506935d-e3e7-450f-8637-82233ebe5f6e"), .pid = 26 };
pub const DEVPKEY_WiFiDirect_TransientAssociation = PROPERTYKEY { .fmtid = @import("../zig.zig").Guid.initString("1506935d-e3e7-450f-8637-82233ebe5f6e"), .pid = 27 };
pub const DEVPKEY_WiFiDirect_LinkQuality = PROPERTYKEY { .fmtid = @import("../zig.zig").Guid.initString("1506935d-e3e7-450f-8637-82233ebe5f6e"), .pid = 28 };
pub const DEVPKEY_InfraCast_PinSupported = PROPERTYKEY { .fmtid = @import("../zig.zig").Guid.initString("1506935d-e3e7-450f-8637-82233ebe5f6e"), .pid = 29 };
pub const DEVPKEY_WiFiDirectServices_ServiceAddress = PROPERTYKEY { .fmtid = @import("../zig.zig").Guid.initString("31b37743-7c5e-4005-93e6-e953f92b82e9"), .pid = 2 };
pub const DEVPKEY_WiFiDirectServices_ServiceName = PROPERTYKEY { .fmtid = @import("../zig.zig").Guid.initString("31b37743-7c5e-4005-93e6-e953f92b82e9"), .pid = 3 };
pub const DEVPKEY_WiFiDirectServices_ServiceInformation = PROPERTYKEY { .fmtid = @import("../zig.zig").Guid.initString("31b37743-7c5e-4005-93e6-e953f92b82e9"), .pid = 4 };
pub const DEVPKEY_WiFiDirectServices_AdvertisementId = PROPERTYKEY { .fmtid = @import("../zig.zig").Guid.initString("31b37743-7c5e-4005-93e6-e953f92b82e9"), .pid = 5 };
pub const DEVPKEY_WiFiDirectServices_ServiceConfigMethods = PROPERTYKEY { .fmtid = @import("../zig.zig").Guid.initString("31b37743-7c5e-4005-93e6-e953f92b82e9"), .pid = 6 };
pub const DEVPKEY_WiFiDirectServices_RequestServiceInformation = PROPERTYKEY { .fmtid = @import("../zig.zig").Guid.initString("31b37743-7c5e-4005-93e6-e953f92b82e9"), .pid = 7 };
pub const DEVPKEY_WiFi_InterfaceGuid = PROPERTYKEY { .fmtid = @import("../zig.zig").Guid.initString("ef1167eb-cbfc-4341-a568-a7c91a68982c"), .pid = 2 };

//--------------------------------------------------------------------------------
// Section: Types (458)
//--------------------------------------------------------------------------------
pub const DOT11_BSS_TYPE = extern enum(i32) {
    infrastructure = 1,
    independent = 2,
    any = 3,
};
pub const dot11_BSS_type_infrastructure = DOT11_BSS_TYPE.infrastructure;
pub const dot11_BSS_type_independent = DOT11_BSS_TYPE.independent;
pub const dot11_BSS_type_any = DOT11_BSS_TYPE.any;

pub const DOT11_SSID = extern struct {
    uSSIDLength: u32,
    ucSSID: [32]u8,
};

pub const DOT11_AUTH_ALGORITHM = extern enum(i32) {
    @"80211_OPEN" = 1,
    @"80211_SHARED_KEY" = 2,
    WPA = 3,
    WPA_PSK = 4,
    WPA_NONE = 5,
    RSNA = 6,
    RSNA_PSK = 7,
    WPA3 = 8,
    WPA3_SAE = 9,
    OWE = 10,
    IHV_START = -2147483648,
    IHV_END = -1,
};
pub const DOT11_AUTH_ALGO_80211_OPEN = DOT11_AUTH_ALGORITHM.@"80211_OPEN";
pub const DOT11_AUTH_ALGO_80211_SHARED_KEY = DOT11_AUTH_ALGORITHM.@"80211_SHARED_KEY";
pub const DOT11_AUTH_ALGO_WPA = DOT11_AUTH_ALGORITHM.WPA;
pub const DOT11_AUTH_ALGO_WPA_PSK = DOT11_AUTH_ALGORITHM.WPA_PSK;
pub const DOT11_AUTH_ALGO_WPA_NONE = DOT11_AUTH_ALGORITHM.WPA_NONE;
pub const DOT11_AUTH_ALGO_RSNA = DOT11_AUTH_ALGORITHM.RSNA;
pub const DOT11_AUTH_ALGO_RSNA_PSK = DOT11_AUTH_ALGORITHM.RSNA_PSK;
pub const DOT11_AUTH_ALGO_WPA3 = DOT11_AUTH_ALGORITHM.WPA3;
pub const DOT11_AUTH_ALGO_WPA3_SAE = DOT11_AUTH_ALGORITHM.WPA3_SAE;
pub const DOT11_AUTH_ALGO_OWE = DOT11_AUTH_ALGORITHM.OWE;
pub const DOT11_AUTH_ALGO_IHV_START = DOT11_AUTH_ALGORITHM.IHV_START;
pub const DOT11_AUTH_ALGO_IHV_END = DOT11_AUTH_ALGORITHM.IHV_END;

pub const DOT11_CIPHER_ALGORITHM = extern enum(i32) {
    NONE = 0,
    WEP40 = 1,
    TKIP = 2,
    CCMP = 4,
    WEP104 = 5,
    BIP = 6,
    GCMP = 8,
    GCMP_256 = 9,
    CCMP_256 = 10,
    BIP_GMAC_128 = 11,
    BIP_GMAC_256 = 12,
    BIP_CMAC_256 = 13,
    WPA_USE_GROUP = 256,
    RSN_USE_GROUP = 256,
    WEP = 257,
    IHV_START = -2147483648,
    IHV_END = -1,
};
pub const DOT11_CIPHER_ALGO_NONE = DOT11_CIPHER_ALGORITHM.NONE;
pub const DOT11_CIPHER_ALGO_WEP40 = DOT11_CIPHER_ALGORITHM.WEP40;
pub const DOT11_CIPHER_ALGO_TKIP = DOT11_CIPHER_ALGORITHM.TKIP;
pub const DOT11_CIPHER_ALGO_CCMP = DOT11_CIPHER_ALGORITHM.CCMP;
pub const DOT11_CIPHER_ALGO_WEP104 = DOT11_CIPHER_ALGORITHM.WEP104;
pub const DOT11_CIPHER_ALGO_BIP = DOT11_CIPHER_ALGORITHM.BIP;
pub const DOT11_CIPHER_ALGO_GCMP = DOT11_CIPHER_ALGORITHM.GCMP;
pub const DOT11_CIPHER_ALGO_GCMP_256 = DOT11_CIPHER_ALGORITHM.GCMP_256;
pub const DOT11_CIPHER_ALGO_CCMP_256 = DOT11_CIPHER_ALGORITHM.CCMP_256;
pub const DOT11_CIPHER_ALGO_BIP_GMAC_128 = DOT11_CIPHER_ALGORITHM.BIP_GMAC_128;
pub const DOT11_CIPHER_ALGO_BIP_GMAC_256 = DOT11_CIPHER_ALGORITHM.BIP_GMAC_256;
pub const DOT11_CIPHER_ALGO_BIP_CMAC_256 = DOT11_CIPHER_ALGORITHM.BIP_CMAC_256;
pub const DOT11_CIPHER_ALGO_WPA_USE_GROUP = DOT11_CIPHER_ALGORITHM.WPA_USE_GROUP;
pub const DOT11_CIPHER_ALGO_RSN_USE_GROUP = DOT11_CIPHER_ALGORITHM.RSN_USE_GROUP;
pub const DOT11_CIPHER_ALGO_WEP = DOT11_CIPHER_ALGORITHM.WEP;
pub const DOT11_CIPHER_ALGO_IHV_START = DOT11_CIPHER_ALGORITHM.IHV_START;
pub const DOT11_CIPHER_ALGO_IHV_END = DOT11_CIPHER_ALGORITHM.IHV_END;

pub const DOT11_AUTH_CIPHER_PAIR = extern struct {
    AuthAlgoId: DOT11_AUTH_ALGORITHM,
    CipherAlgoId: DOT11_CIPHER_ALGORITHM,
};

pub const DOT11_OI = extern struct {
    OILength: u16,
    OI: [5]u8,
};

pub const DOT11_ACCESSNETWORKOPTIONS = extern struct {
    AccessNetworkType: u8,
    Internet: u8,
    ASRA: u8,
    ESR: u8,
    UESA: u8,
};

pub const DOT11_VENUEINFO = extern struct {
    VenueGroup: u8,
    VenueType: u8,
};

pub const NDIS_STATISTICS_VALUE = extern struct {
    Oid: u32,
    DataLength: u32,
    Data: [1]u8,
};

pub const NDIS_STATISTICS_VALUE_EX = extern struct {
    Oid: u32,
    DataLength: u32,
    Length: u32,
    Data: [1]u8,
};

pub const NDIS_VAR_DATA_DESC = extern struct {
    Length: u16,
    MaximumLength: u16,
    Offset: usize,
};

pub const NDIS_OBJECT_HEADER = extern struct {
    Type: u8,
    Revision: u8,
    Size: u16,
};

pub const NDIS_REQUEST_TYPE = extern enum(i32) {
    QueryInformation = 0,
    SetInformation = 1,
    QueryStatistics = 2,
    Open = 3,
    Close = 4,
    Send = 5,
    TransferData = 6,
    Reset = 7,
    Generic1 = 8,
    Generic2 = 9,
    Generic3 = 10,
    Generic4 = 11,
};
pub const NdisRequestQueryInformation = NDIS_REQUEST_TYPE.QueryInformation;
pub const NdisRequestSetInformation = NDIS_REQUEST_TYPE.SetInformation;
pub const NdisRequestQueryStatistics = NDIS_REQUEST_TYPE.QueryStatistics;
pub const NdisRequestOpen = NDIS_REQUEST_TYPE.Open;
pub const NdisRequestClose = NDIS_REQUEST_TYPE.Close;
pub const NdisRequestSend = NDIS_REQUEST_TYPE.Send;
pub const NdisRequestTransferData = NDIS_REQUEST_TYPE.TransferData;
pub const NdisRequestReset = NDIS_REQUEST_TYPE.Reset;
pub const NdisRequestGeneric1 = NDIS_REQUEST_TYPE.Generic1;
pub const NdisRequestGeneric2 = NDIS_REQUEST_TYPE.Generic2;
pub const NdisRequestGeneric3 = NDIS_REQUEST_TYPE.Generic3;
pub const NdisRequestGeneric4 = NDIS_REQUEST_TYPE.Generic4;

pub const NDIS_STATISTICS_INFO = extern struct {
    Header: NDIS_OBJECT_HEADER,
    SupportedStatistics: u32,
    ifInDiscards: u64,
    ifInErrors: u64,
    ifHCInOctets: u64,
    ifHCInUcastPkts: u64,
    ifHCInMulticastPkts: u64,
    ifHCInBroadcastPkts: u64,
    ifHCOutOctets: u64,
    ifHCOutUcastPkts: u64,
    ifHCOutMulticastPkts: u64,
    ifHCOutBroadcastPkts: u64,
    ifOutErrors: u64,
    ifOutDiscards: u64,
    ifHCInUcastOctets: u64,
    ifHCInMulticastOctets: u64,
    ifHCInBroadcastOctets: u64,
    ifHCOutUcastOctets: u64,
    ifHCOutMulticastOctets: u64,
    ifHCOutBroadcastOctets: u64,
};

pub const NDIS_INTERRUPT_MODERATION = extern enum(i32) {
    Unknown = 0,
    NotSupported = 1,
    Enabled = 2,
    Disabled = 3,
};
pub const NdisInterruptModerationUnknown = NDIS_INTERRUPT_MODERATION.Unknown;
pub const NdisInterruptModerationNotSupported = NDIS_INTERRUPT_MODERATION.NotSupported;
pub const NdisInterruptModerationEnabled = NDIS_INTERRUPT_MODERATION.Enabled;
pub const NdisInterruptModerationDisabled = NDIS_INTERRUPT_MODERATION.Disabled;

pub const NDIS_INTERRUPT_MODERATION_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    Flags: u32,
    InterruptModeration: NDIS_INTERRUPT_MODERATION,
};

pub const NDIS_TIMEOUT_DPC_REQUEST_CAPABILITIES = extern struct {
    Header: NDIS_OBJECT_HEADER,
    Flags: u32,
    TimeoutArrayLength: u32,
    TimeoutArray: [1]u32,
};

pub const NDIS_PCI_DEVICE_CUSTOM_PROPERTIES = extern struct {
    Header: NDIS_OBJECT_HEADER,
    DeviceType: u32,
    CurrentSpeedAndMode: u32,
    CurrentPayloadSize: u32,
    MaxPayloadSize: u32,
    MaxReadRequestSize: u32,
    CurrentLinkSpeed: u32,
    CurrentLinkWidth: u32,
    MaxLinkSpeed: u32,
    MaxLinkWidth: u32,
    PciExpressVersion: u32,
    InterruptType: u32,
    MaxInterruptMessages: u32,
};

pub const NDIS_802_11_STATUS_TYPE = extern enum(i32) {
    _Authentication = 0,
    _MediaStreamMode = 1,
    _PMKID_CandidateList = 2,
    Max = 3,
};
pub const Ndis802_11StatusType_Authentication = NDIS_802_11_STATUS_TYPE._Authentication;
pub const Ndis802_11StatusType_MediaStreamMode = NDIS_802_11_STATUS_TYPE._MediaStreamMode;
pub const Ndis802_11StatusType_PMKID_CandidateList = NDIS_802_11_STATUS_TYPE._PMKID_CandidateList;
pub const Ndis802_11StatusTypeMax = NDIS_802_11_STATUS_TYPE.Max;

pub const NDIS_802_11_STATUS_INDICATION = extern struct {
    StatusType: NDIS_802_11_STATUS_TYPE,
};

pub const NDIS_802_11_AUTHENTICATION_REQUEST = extern struct {
    Length: u32,
    Bssid: [6]u8,
    Flags: u32,
};

pub const PMKID_CANDIDATE = extern struct {
    BSSID: [6]u8,
    Flags: u32,
};

pub const NDIS_802_11_PMKID_CANDIDATE_LIST = extern struct {
    Version: u32,
    NumCandidates: u32,
    CandidateList: [1]PMKID_CANDIDATE,
};

pub const NDIS_802_11_NETWORK_TYPE = extern enum(i32) {
    FH = 0,
    DS = 1,
    OFDM5 = 2,
    OFDM24 = 3,
    Automode = 4,
    NetworkTypeMax = 5,
};
pub const Ndis802_11FH = NDIS_802_11_NETWORK_TYPE.FH;
pub const Ndis802_11DS = NDIS_802_11_NETWORK_TYPE.DS;
pub const Ndis802_11OFDM5 = NDIS_802_11_NETWORK_TYPE.OFDM5;
pub const Ndis802_11OFDM24 = NDIS_802_11_NETWORK_TYPE.OFDM24;
pub const Ndis802_11Automode = NDIS_802_11_NETWORK_TYPE.Automode;
pub const Ndis802_11NetworkTypeMax = NDIS_802_11_NETWORK_TYPE.NetworkTypeMax;

pub const NDIS_802_11_NETWORK_TYPE_LIST = extern struct {
    NumberOfItems: u32,
    NetworkType: [1]NDIS_802_11_NETWORK_TYPE,
};

pub const NDIS_802_11_POWER_MODE = extern enum(i32) {
    CAM = 0,
    MAX_PSP = 1,
    Fast_PSP = 2,
    Max = 3,
};
pub const Ndis802_11PowerModeCAM = NDIS_802_11_POWER_MODE.CAM;
pub const Ndis802_11PowerModeMAX_PSP = NDIS_802_11_POWER_MODE.MAX_PSP;
pub const Ndis802_11PowerModeFast_PSP = NDIS_802_11_POWER_MODE.Fast_PSP;
pub const Ndis802_11PowerModeMax = NDIS_802_11_POWER_MODE.Max;

pub const NDIS_802_11_CONFIGURATION_FH = extern struct {
    Length: u32,
    HopPattern: u32,
    HopSet: u32,
    DwellTime: u32,
};

pub const NDIS_802_11_CONFIGURATION = extern struct {
    Length: u32,
    BeaconPeriod: u32,
    ATIMWindow: u32,
    DSConfig: u32,
    FHConfig: NDIS_802_11_CONFIGURATION_FH,
};

pub const NDIS_802_11_STATISTICS = extern struct {
    Length: u32,
    TransmittedFragmentCount: LARGE_INTEGER,
    MulticastTransmittedFrameCount: LARGE_INTEGER,
    FailedCount: LARGE_INTEGER,
    RetryCount: LARGE_INTEGER,
    MultipleRetryCount: LARGE_INTEGER,
    RTSSuccessCount: LARGE_INTEGER,
    RTSFailureCount: LARGE_INTEGER,
    ACKFailureCount: LARGE_INTEGER,
    FrameDuplicateCount: LARGE_INTEGER,
    ReceivedFragmentCount: LARGE_INTEGER,
    MulticastReceivedFrameCount: LARGE_INTEGER,
    FCSErrorCount: LARGE_INTEGER,
    TKIPLocalMICFailures: LARGE_INTEGER,
    TKIPICVErrorCount: LARGE_INTEGER,
    TKIPCounterMeasuresInvoked: LARGE_INTEGER,
    TKIPReplays: LARGE_INTEGER,
    CCMPFormatErrors: LARGE_INTEGER,
    CCMPReplays: LARGE_INTEGER,
    CCMPDecryptErrors: LARGE_INTEGER,
    FourWayHandshakeFailures: LARGE_INTEGER,
    WEPUndecryptableCount: LARGE_INTEGER,
    WEPICVErrorCount: LARGE_INTEGER,
    DecryptSuccessCount: LARGE_INTEGER,
    DecryptFailureCount: LARGE_INTEGER,
};

pub const NDIS_802_11_KEY = extern struct {
    Length: u32,
    KeyIndex: u32,
    KeyLength: u32,
    BSSID: [6]u8,
    KeyRSC: u64,
    KeyMaterial: [1]u8,
};

pub const NDIS_802_11_REMOVE_KEY = extern struct {
    Length: u32,
    KeyIndex: u32,
    BSSID: [6]u8,
};

pub const NDIS_802_11_WEP = extern struct {
    Length: u32,
    KeyIndex: u32,
    KeyLength: u32,
    KeyMaterial: [1]u8,
};

pub const NDIS_802_11_NETWORK_INFRASTRUCTURE = extern enum(i32) {
    IBSS = 0,
    Infrastructure = 1,
    AutoUnknown = 2,
    InfrastructureMax = 3,
};
pub const Ndis802_11IBSS = NDIS_802_11_NETWORK_INFRASTRUCTURE.IBSS;
pub const Ndis802_11Infrastructure = NDIS_802_11_NETWORK_INFRASTRUCTURE.Infrastructure;
pub const Ndis802_11AutoUnknown = NDIS_802_11_NETWORK_INFRASTRUCTURE.AutoUnknown;
pub const Ndis802_11InfrastructureMax = NDIS_802_11_NETWORK_INFRASTRUCTURE.InfrastructureMax;

pub const NDIS_802_11_AUTHENTICATION_MODE = extern enum(i32) {
    Open = 0,
    Shared = 1,
    AutoSwitch = 2,
    WPA = 3,
    WPAPSK = 4,
    WPANone = 5,
    WPA2 = 6,
    WPA2PSK = 7,
    WPA3 = 8,
    WPA3SAE = 9,
    Max = 10,
};
pub const Ndis802_11AuthModeOpen = NDIS_802_11_AUTHENTICATION_MODE.Open;
pub const Ndis802_11AuthModeShared = NDIS_802_11_AUTHENTICATION_MODE.Shared;
pub const Ndis802_11AuthModeAutoSwitch = NDIS_802_11_AUTHENTICATION_MODE.AutoSwitch;
pub const Ndis802_11AuthModeWPA = NDIS_802_11_AUTHENTICATION_MODE.WPA;
pub const Ndis802_11AuthModeWPAPSK = NDIS_802_11_AUTHENTICATION_MODE.WPAPSK;
pub const Ndis802_11AuthModeWPANone = NDIS_802_11_AUTHENTICATION_MODE.WPANone;
pub const Ndis802_11AuthModeWPA2 = NDIS_802_11_AUTHENTICATION_MODE.WPA2;
pub const Ndis802_11AuthModeWPA2PSK = NDIS_802_11_AUTHENTICATION_MODE.WPA2PSK;
pub const Ndis802_11AuthModeWPA3 = NDIS_802_11_AUTHENTICATION_MODE.WPA3;
pub const Ndis802_11AuthModeWPA3SAE = NDIS_802_11_AUTHENTICATION_MODE.WPA3SAE;
pub const Ndis802_11AuthModeMax = NDIS_802_11_AUTHENTICATION_MODE.Max;

pub const NDIS_802_11_SSID = extern struct {
    SsidLength: u32,
    Ssid: [32]u8,
};

pub const NDIS_WLAN_BSSID = extern struct {
    Length: u32,
    MacAddress: [6]u8,
    Reserved: [2]u8,
    Ssid: NDIS_802_11_SSID,
    Privacy: u32,
    Rssi: i32,
    NetworkTypeInUse: NDIS_802_11_NETWORK_TYPE,
    Configuration: NDIS_802_11_CONFIGURATION,
    InfrastructureMode: NDIS_802_11_NETWORK_INFRASTRUCTURE,
    SupportedRates: [8]u8,
};

pub const NDIS_802_11_BSSID_LIST = extern struct {
    NumberOfItems: u32,
    Bssid: [1]NDIS_WLAN_BSSID,
};

pub const NDIS_WLAN_BSSID_EX = extern struct {
    Length: u32,
    MacAddress: [6]u8,
    Reserved: [2]u8,
    Ssid: NDIS_802_11_SSID,
    Privacy: u32,
    Rssi: i32,
    NetworkTypeInUse: NDIS_802_11_NETWORK_TYPE,
    Configuration: NDIS_802_11_CONFIGURATION,
    InfrastructureMode: NDIS_802_11_NETWORK_INFRASTRUCTURE,
    SupportedRates: [16]u8,
    IELength: u32,
    IEs: [1]u8,
};

pub const NDIS_802_11_BSSID_LIST_EX = extern struct {
    NumberOfItems: u32,
    Bssid: [1]NDIS_WLAN_BSSID_EX,
};

pub const NDIS_802_11_FIXED_IEs = extern struct {
    Timestamp: [8]u8,
    BeaconInterval: u16,
    Capabilities: u16,
};

pub const NDIS_802_11_VARIABLE_IEs = extern struct {
    ElementID: u8,
    Length: u8,
    data: [1]u8,
};

pub const NDIS_802_11_PRIVACY_FILTER = extern enum(i32) {
    AcceptAll = 0,
    @"8021xWEP" = 1,
};
pub const Ndis802_11PrivFilterAcceptAll = NDIS_802_11_PRIVACY_FILTER.AcceptAll;
pub const Ndis802_11PrivFilter8021xWEP = NDIS_802_11_PRIVACY_FILTER.@"8021xWEP";

pub const NDIS_802_11_WEP_STATUS = extern enum(i32) {
    WEPEnabled = 0,
    Encryption1Enabled = 0,
    WEPDisabled = 1,
    EncryptionDisabled = 1,
    WEPKeyAbsent = 2,
    Encryption1KeyAbsent = 2,
    WEPNotSupported = 3,
    EncryptionNotSupported = 3,
    Encryption2Enabled = 4,
    Encryption2KeyAbsent = 5,
    Encryption3Enabled = 6,
    Encryption3KeyAbsent = 7,
};
pub const Ndis802_11WEPEnabled = NDIS_802_11_WEP_STATUS.WEPEnabled;
pub const Ndis802_11Encryption1Enabled = NDIS_802_11_WEP_STATUS.Encryption1Enabled;
pub const Ndis802_11WEPDisabled = NDIS_802_11_WEP_STATUS.WEPDisabled;
pub const Ndis802_11EncryptionDisabled = NDIS_802_11_WEP_STATUS.EncryptionDisabled;
pub const Ndis802_11WEPKeyAbsent = NDIS_802_11_WEP_STATUS.WEPKeyAbsent;
pub const Ndis802_11Encryption1KeyAbsent = NDIS_802_11_WEP_STATUS.Encryption1KeyAbsent;
pub const Ndis802_11WEPNotSupported = NDIS_802_11_WEP_STATUS.WEPNotSupported;
pub const Ndis802_11EncryptionNotSupported = NDIS_802_11_WEP_STATUS.EncryptionNotSupported;
pub const Ndis802_11Encryption2Enabled = NDIS_802_11_WEP_STATUS.Encryption2Enabled;
pub const Ndis802_11Encryption2KeyAbsent = NDIS_802_11_WEP_STATUS.Encryption2KeyAbsent;
pub const Ndis802_11Encryption3Enabled = NDIS_802_11_WEP_STATUS.Encryption3Enabled;
pub const Ndis802_11Encryption3KeyAbsent = NDIS_802_11_WEP_STATUS.Encryption3KeyAbsent;

pub const NDIS_802_11_RELOAD_DEFAULTS = extern enum(i32) {
    s = 0,
};
pub const Ndis802_11ReloadWEPKeys = NDIS_802_11_RELOAD_DEFAULTS.s;

pub const NDIS_802_11_AI_REQFI = extern struct {
    Capabilities: u16,
    ListenInterval: u16,
    CurrentAPAddress: [6]u8,
};

pub const NDIS_802_11_AI_RESFI = extern struct {
    Capabilities: u16,
    StatusCode: u16,
    AssociationId: u16,
};

pub const NDIS_802_11_ASSOCIATION_INFORMATION = extern struct {
    Length: u32,
    AvailableRequestFixedIEs: u16,
    RequestFixedIEs: NDIS_802_11_AI_REQFI,
    RequestIELength: u32,
    OffsetRequestIEs: u32,
    AvailableResponseFixedIEs: u16,
    ResponseFixedIEs: NDIS_802_11_AI_RESFI,
    ResponseIELength: u32,
    OffsetResponseIEs: u32,
};

pub const NDIS_802_11_AUTHENTICATION_EVENT = extern struct {
    Status: NDIS_802_11_STATUS_INDICATION,
    Request: [1]NDIS_802_11_AUTHENTICATION_REQUEST,
};

pub const NDIS_802_11_TEST = extern struct {
    Length: u32,
    Type: u32,
    Anonymous: _Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const NDIS_802_11_MEDIA_STREAM_MODE = extern enum(i32) {
    ff = 0,
    n = 1,
};
pub const Ndis802_11MediaStreamOff = NDIS_802_11_MEDIA_STREAM_MODE.ff;
pub const Ndis802_11MediaStreamOn = NDIS_802_11_MEDIA_STREAM_MODE.n;

pub const BSSID_INFO = extern struct {
    BSSID: [6]u8,
    PMKID: [16]u8,
};

pub const NDIS_802_11_PMKID = extern struct {
    Length: u32,
    BSSIDInfoCount: u32,
    BSSIDInfo: [1]BSSID_INFO,
};

pub const NDIS_802_11_AUTHENTICATION_ENCRYPTION = extern struct {
    AuthModeSupported: NDIS_802_11_AUTHENTICATION_MODE,
    EncryptStatusSupported: NDIS_802_11_WEP_STATUS,
};

pub const NDIS_802_11_CAPABILITY = extern struct {
    Length: u32,
    Version: u32,
    NoOfPMKIDs: u32,
    NoOfAuthEncryptPairsSupported: u32,
    AuthenticationEncryptionSupported: [1]NDIS_802_11_AUTHENTICATION_ENCRYPTION,
};

pub const NDIS_802_11_NON_BCAST_SSID_LIST = extern struct {
    NumberOfItems: u32,
    Non_Bcast_Ssid: [1]NDIS_802_11_SSID,
};

pub const NDIS_802_11_RADIO_STATUS = extern enum(i32) {
    On = 0,
    HardwareOff = 1,
    SoftwareOff = 2,
    HardwareSoftwareOff = 3,
    Max = 4,
};
pub const Ndis802_11RadioStatusOn = NDIS_802_11_RADIO_STATUS.On;
pub const Ndis802_11RadioStatusHardwareOff = NDIS_802_11_RADIO_STATUS.HardwareOff;
pub const Ndis802_11RadioStatusSoftwareOff = NDIS_802_11_RADIO_STATUS.SoftwareOff;
pub const Ndis802_11RadioStatusHardwareSoftwareOff = NDIS_802_11_RADIO_STATUS.HardwareSoftwareOff;
pub const Ndis802_11RadioStatusMax = NDIS_802_11_RADIO_STATUS.Max;

pub const NDIS_CO_DEVICE_PROFILE = extern struct {
    DeviceDescription: NDIS_VAR_DATA_DESC,
    DevSpecificInfo: NDIS_VAR_DATA_DESC,
    ulTAPISupplementaryPassThru: u32,
    ulAddressModes: u32,
    ulNumAddresses: u32,
    ulBearerModes: u32,
    ulMaxTxRate: u32,
    ulMinTxRate: u32,
    ulMaxRxRate: u32,
    ulMinRxRate: u32,
    ulMediaModes: u32,
    ulGenerateToneModes: u32,
    ulGenerateToneMaxNumFreq: u32,
    ulGenerateDigitModes: u32,
    ulMonitorToneMaxNumFreq: u32,
    ulMonitorToneMaxNumEntries: u32,
    ulMonitorDigitModes: u32,
    ulGatherDigitsMinTimeout: u32,
    ulGatherDigitsMaxTimeout: u32,
    ulDevCapFlags: u32,
    ulMaxNumActiveCalls: u32,
    ulAnswerMode: u32,
    ulUUIAcceptSize: u32,
    ulUUIAnswerSize: u32,
    ulUUIMakeCallSize: u32,
    ulUUIDropSize: u32,
    ulUUISendUserUserInfoSize: u32,
    ulUUICallInfoSize: u32,
};

pub const OFFLOAD_OPERATION_E = extern enum(i32) {
    AUTHENTICATE = 1,
    ENCRYPT = 2,
};
pub const AUTHENTICATE = OFFLOAD_OPERATION_E.AUTHENTICATE;
pub const ENCRYPT = OFFLOAD_OPERATION_E.ENCRYPT;

pub const OFFLOAD_ALGO_INFO = extern struct {
    algoIdentifier: u32,
    algoKeylen: u32,
    algoRounds: u32,
};

pub const OFFLOAD_CONF_ALGO = extern enum(i32) {
    NONE = 0,
    DES = 1,
    RESERVED = 2,
    @"3_DES" = 3,
    MAX = 4,
};
pub const OFFLOAD_IPSEC_CONF_NONE = OFFLOAD_CONF_ALGO.NONE;
pub const OFFLOAD_IPSEC_CONF_DES = OFFLOAD_CONF_ALGO.DES;
pub const OFFLOAD_IPSEC_CONF_RESERVED = OFFLOAD_CONF_ALGO.RESERVED;
pub const OFFLOAD_IPSEC_CONF_3_DES = OFFLOAD_CONF_ALGO.@"3_DES";
pub const OFFLOAD_IPSEC_CONF_MAX = OFFLOAD_CONF_ALGO.MAX;

pub const OFFLOAD_INTEGRITY_ALGO = extern enum(i32) {
    NONE = 0,
    MD5 = 1,
    SHA = 2,
    MAX = 3,
};
pub const OFFLOAD_IPSEC_INTEGRITY_NONE = OFFLOAD_INTEGRITY_ALGO.NONE;
pub const OFFLOAD_IPSEC_INTEGRITY_MD5 = OFFLOAD_INTEGRITY_ALGO.MD5;
pub const OFFLOAD_IPSEC_INTEGRITY_SHA = OFFLOAD_INTEGRITY_ALGO.SHA;
pub const OFFLOAD_IPSEC_INTEGRITY_MAX = OFFLOAD_INTEGRITY_ALGO.MAX;

pub const OFFLOAD_SECURITY_ASSOCIATION = extern struct {
    Operation: OFFLOAD_OPERATION_E,
    SPI: u32,
    IntegrityAlgo: OFFLOAD_ALGO_INFO,
    ConfAlgo: OFFLOAD_ALGO_INFO,
    Reserved: OFFLOAD_ALGO_INFO,
};

pub const OFFLOAD_IPSEC_ADD_SA = extern struct {
    SrcAddr: u32,
    SrcMask: u32,
    DestAddr: u32,
    DestMask: u32,
    Protocol: u32,
    SrcPort: u16,
    DestPort: u16,
    SrcTunnelAddr: u32,
    DestTunnelAddr: u32,
    Flags: u16,
    NumSAs: i16,
    SecAssoc: [3]OFFLOAD_SECURITY_ASSOCIATION,
    OffloadHandle: HANDLE,
    KeyLen: u32,
    KeyMat: [1]u8,
};

pub const OFFLOAD_IPSEC_DELETE_SA = extern struct {
    OffloadHandle: HANDLE,
};

pub const UDP_ENCAP_TYPE = extern enum(i32) {
    IKE = 0,
    OTHER = 1,
};
pub const OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_IKE = UDP_ENCAP_TYPE.IKE;
pub const OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_OTHER = UDP_ENCAP_TYPE.OTHER;

pub const OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_ENTRY = extern struct {
    UdpEncapType: UDP_ENCAP_TYPE,
    DstEncapPort: u16,
};

pub const OFFLOAD_IPSEC_ADD_UDPESP_SA = extern struct {
    SrcAddr: u32,
    SrcMask: u32,
    DstAddr: u32,
    DstMask: u32,
    Protocol: u32,
    SrcPort: u16,
    DstPort: u16,
    SrcTunnelAddr: u32,
    DstTunnelAddr: u32,
    Flags: u16,
    NumSAs: i16,
    SecAssoc: [3]OFFLOAD_SECURITY_ASSOCIATION,
    OffloadHandle: HANDLE,
    EncapTypeEntry: OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_ENTRY,
    EncapTypeEntryOffldHandle: HANDLE,
    KeyLen: u32,
    KeyMat: [1]u8,
};

pub const OFFLOAD_IPSEC_DELETE_UDPESP_SA = extern struct {
    OffloadHandle: HANDLE,
    EncapTypeEntryOffldHandle: HANDLE,
};

pub const NDIS_MEDIUM = extern enum(i32) {
    @"802_3" = 0,
    @"802_5" = 1,
    Fddi = 2,
    Wan = 3,
    LocalTalk = 4,
    Dix = 5,
    ArcnetRaw = 6,
    Arcnet878_2 = 7,
    Atm = 8,
    WirelessWan = 9,
    Irda = 10,
    Bpc = 11,
    CoWan = 12,
    @"1394" = 13,
    InfiniBand = 14,
    Tunnel = 15,
    Native802_11 = 16,
    Loopback = 17,
    WiMAX = 18,
    IP = 19,
    Max = 20,
};
pub const NdisMedium802_3 = NDIS_MEDIUM.@"802_3";
pub const NdisMedium802_5 = NDIS_MEDIUM.@"802_5";
pub const NdisMediumFddi = NDIS_MEDIUM.Fddi;
pub const NdisMediumWan = NDIS_MEDIUM.Wan;
pub const NdisMediumLocalTalk = NDIS_MEDIUM.LocalTalk;
pub const NdisMediumDix = NDIS_MEDIUM.Dix;
pub const NdisMediumArcnetRaw = NDIS_MEDIUM.ArcnetRaw;
pub const NdisMediumArcnet878_2 = NDIS_MEDIUM.Arcnet878_2;
pub const NdisMediumAtm = NDIS_MEDIUM.Atm;
pub const NdisMediumWirelessWan = NDIS_MEDIUM.WirelessWan;
pub const NdisMediumIrda = NDIS_MEDIUM.Irda;
pub const NdisMediumBpc = NDIS_MEDIUM.Bpc;
pub const NdisMediumCoWan = NDIS_MEDIUM.CoWan;
pub const NdisMedium1394 = NDIS_MEDIUM.@"1394";
pub const NdisMediumInfiniBand = NDIS_MEDIUM.InfiniBand;
pub const NdisMediumTunnel = NDIS_MEDIUM.Tunnel;
pub const NdisMediumNative802_11 = NDIS_MEDIUM.Native802_11;
pub const NdisMediumLoopback = NDIS_MEDIUM.Loopback;
pub const NdisMediumWiMAX = NDIS_MEDIUM.WiMAX;
pub const NdisMediumIP = NDIS_MEDIUM.IP;
pub const NdisMediumMax = NDIS_MEDIUM.Max;

pub const NDIS_PHYSICAL_MEDIUM = extern enum(i32) {
    Unspecified = 0,
    WirelessLan = 1,
    CableModem = 2,
    PhoneLine = 3,
    PowerLine = 4,
    DSL = 5,
    FibreChannel = 6,
    @"1394" = 7,
    WirelessWan = 8,
    Native802_11 = 9,
    Bluetooth = 10,
    Infiniband = 11,
    WiMax = 12,
    UWB = 13,
    @"802_3" = 14,
    @"802_5" = 15,
    Irda = 16,
    WiredWAN = 17,
    WiredCoWan = 18,
    Other = 19,
    Native802_15_4 = 20,
    Max = 21,
};
pub const NdisPhysicalMediumUnspecified = NDIS_PHYSICAL_MEDIUM.Unspecified;
pub const NdisPhysicalMediumWirelessLan = NDIS_PHYSICAL_MEDIUM.WirelessLan;
pub const NdisPhysicalMediumCableModem = NDIS_PHYSICAL_MEDIUM.CableModem;
pub const NdisPhysicalMediumPhoneLine = NDIS_PHYSICAL_MEDIUM.PhoneLine;
pub const NdisPhysicalMediumPowerLine = NDIS_PHYSICAL_MEDIUM.PowerLine;
pub const NdisPhysicalMediumDSL = NDIS_PHYSICAL_MEDIUM.DSL;
pub const NdisPhysicalMediumFibreChannel = NDIS_PHYSICAL_MEDIUM.FibreChannel;
pub const NdisPhysicalMedium1394 = NDIS_PHYSICAL_MEDIUM.@"1394";
pub const NdisPhysicalMediumWirelessWan = NDIS_PHYSICAL_MEDIUM.WirelessWan;
pub const NdisPhysicalMediumNative802_11 = NDIS_PHYSICAL_MEDIUM.Native802_11;
pub const NdisPhysicalMediumBluetooth = NDIS_PHYSICAL_MEDIUM.Bluetooth;
pub const NdisPhysicalMediumInfiniband = NDIS_PHYSICAL_MEDIUM.Infiniband;
pub const NdisPhysicalMediumWiMax = NDIS_PHYSICAL_MEDIUM.WiMax;
pub const NdisPhysicalMediumUWB = NDIS_PHYSICAL_MEDIUM.UWB;
pub const NdisPhysicalMedium802_3 = NDIS_PHYSICAL_MEDIUM.@"802_3";
pub const NdisPhysicalMedium802_5 = NDIS_PHYSICAL_MEDIUM.@"802_5";
pub const NdisPhysicalMediumIrda = NDIS_PHYSICAL_MEDIUM.Irda;
pub const NdisPhysicalMediumWiredWAN = NDIS_PHYSICAL_MEDIUM.WiredWAN;
pub const NdisPhysicalMediumWiredCoWan = NDIS_PHYSICAL_MEDIUM.WiredCoWan;
pub const NdisPhysicalMediumOther = NDIS_PHYSICAL_MEDIUM.Other;
pub const NdisPhysicalMediumNative802_15_4 = NDIS_PHYSICAL_MEDIUM.Native802_15_4;
pub const NdisPhysicalMediumMax = NDIS_PHYSICAL_MEDIUM.Max;

pub const TRANSPORT_HEADER_OFFSET = extern struct {
    ProtocolType: u16,
    HeaderOffset: u16,
};

pub const NETWORK_ADDRESS = extern struct {
    AddressLength: u16,
    AddressType: u16,
    Address: [1]u8,
};

pub const NETWORK_ADDRESS_LIST = extern struct {
    AddressCount: i32,
    AddressType: u16,
    Address: [1]NETWORK_ADDRESS,
};

pub const NETWORK_ADDRESS_IP = extern struct {
    sin_port: u16,
    IN_ADDR: u32,
    sin_zero: [8]u8,
};

pub const NETWORK_ADDRESS_IP6 = extern struct {
    sin6_port: u16,
    sin6_flowinfo: u32,
    sin6_addr: [8]u16,
    sin6_scope_id: u32,
};

pub const NETWORK_ADDRESS_IPX = extern struct {
    NetworkAddress: u32,
    NodeAddress: [6]u8,
    Socket: u16,
};

pub const NDIS_HARDWARE_STATUS = extern enum(i32) {
    Ready = 0,
    Initializing = 1,
    Reset = 2,
    Closing = 3,
    NotReady = 4,
};
pub const NdisHardwareStatusReady = NDIS_HARDWARE_STATUS.Ready;
pub const NdisHardwareStatusInitializing = NDIS_HARDWARE_STATUS.Initializing;
pub const NdisHardwareStatusReset = NDIS_HARDWARE_STATUS.Reset;
pub const NdisHardwareStatusClosing = NDIS_HARDWARE_STATUS.Closing;
pub const NdisHardwareStatusNotReady = NDIS_HARDWARE_STATUS.NotReady;

pub const GEN_GET_TIME_CAPS = extern struct {
    Flags: u32,
    ClockPrecision: u32,
};

pub const GEN_GET_NETCARD_TIME = extern struct {
    ReadTime: u64,
};

pub const NDIS_PM_PACKET_PATTERN = extern struct {
    Priority: u32,
    Reserved: u32,
    MaskSize: u32,
    PatternOffset: u32,
    PatternSize: u32,
    PatternFlags: u32,
};

pub const NDIS_DEVICE_POWER_STATE = extern enum(i32) {
    Unspecified = 0,
    D0 = 1,
    D1 = 2,
    D2 = 3,
    D3 = 4,
    Maximum = 5,
};
pub const NdisDeviceStateUnspecified = NDIS_DEVICE_POWER_STATE.Unspecified;
pub const NdisDeviceStateD0 = NDIS_DEVICE_POWER_STATE.D0;
pub const NdisDeviceStateD1 = NDIS_DEVICE_POWER_STATE.D1;
pub const NdisDeviceStateD2 = NDIS_DEVICE_POWER_STATE.D2;
pub const NdisDeviceStateD3 = NDIS_DEVICE_POWER_STATE.D3;
pub const NdisDeviceStateMaximum = NDIS_DEVICE_POWER_STATE.Maximum;

pub const NDIS_PM_WAKE_UP_CAPABILITIES = extern struct {
    MinMagicPacketWakeUp: NDIS_DEVICE_POWER_STATE,
    MinPatternWakeUp: NDIS_DEVICE_POWER_STATE,
    MinLinkChangeWakeUp: NDIS_DEVICE_POWER_STATE,
};

pub const NDIS_PNP_CAPABILITIES = extern struct {
    Flags: u32,
    WakeUpCapabilities: NDIS_PM_WAKE_UP_CAPABILITIES,
};

pub const NDIS_FDDI_ATTACHMENT_TYPE = extern enum(i32) {
    Isolated = 1,
    LocalA = 2,
    LocalB = 3,
    LocalAB = 4,
    LocalS = 5,
    WrapA = 6,
    WrapB = 7,
    WrapAB = 8,
    WrapS = 9,
    CWrapA = 10,
    CWrapB = 11,
    CWrapS = 12,
    Through = 13,
};
pub const NdisFddiTypeIsolated = NDIS_FDDI_ATTACHMENT_TYPE.Isolated;
pub const NdisFddiTypeLocalA = NDIS_FDDI_ATTACHMENT_TYPE.LocalA;
pub const NdisFddiTypeLocalB = NDIS_FDDI_ATTACHMENT_TYPE.LocalB;
pub const NdisFddiTypeLocalAB = NDIS_FDDI_ATTACHMENT_TYPE.LocalAB;
pub const NdisFddiTypeLocalS = NDIS_FDDI_ATTACHMENT_TYPE.LocalS;
pub const NdisFddiTypeWrapA = NDIS_FDDI_ATTACHMENT_TYPE.WrapA;
pub const NdisFddiTypeWrapB = NDIS_FDDI_ATTACHMENT_TYPE.WrapB;
pub const NdisFddiTypeWrapAB = NDIS_FDDI_ATTACHMENT_TYPE.WrapAB;
pub const NdisFddiTypeWrapS = NDIS_FDDI_ATTACHMENT_TYPE.WrapS;
pub const NdisFddiTypeCWrapA = NDIS_FDDI_ATTACHMENT_TYPE.CWrapA;
pub const NdisFddiTypeCWrapB = NDIS_FDDI_ATTACHMENT_TYPE.CWrapB;
pub const NdisFddiTypeCWrapS = NDIS_FDDI_ATTACHMENT_TYPE.CWrapS;
pub const NdisFddiTypeThrough = NDIS_FDDI_ATTACHMENT_TYPE.Through;

pub const NDIS_FDDI_RING_MGT_STATE = extern enum(i32) {
    Isolated = 1,
    NonOperational = 2,
    Operational = 3,
    Detect = 4,
    NonOperationalDup = 5,
    OperationalDup = 6,
    Directed = 7,
    Trace = 8,
};
pub const NdisFddiRingIsolated = NDIS_FDDI_RING_MGT_STATE.Isolated;
pub const NdisFddiRingNonOperational = NDIS_FDDI_RING_MGT_STATE.NonOperational;
pub const NdisFddiRingOperational = NDIS_FDDI_RING_MGT_STATE.Operational;
pub const NdisFddiRingDetect = NDIS_FDDI_RING_MGT_STATE.Detect;
pub const NdisFddiRingNonOperationalDup = NDIS_FDDI_RING_MGT_STATE.NonOperationalDup;
pub const NdisFddiRingOperationalDup = NDIS_FDDI_RING_MGT_STATE.OperationalDup;
pub const NdisFddiRingDirected = NDIS_FDDI_RING_MGT_STATE.Directed;
pub const NdisFddiRingTrace = NDIS_FDDI_RING_MGT_STATE.Trace;

pub const NDIS_FDDI_LCONNECTION_STATE = extern enum(i32) {
    Off = 1,
    Break = 2,
    Trace = 3,
    Connect = 4,
    Next = 5,
    Signal = 6,
    Join = 7,
    Verify = 8,
    Active = 9,
    Maintenance = 10,
};
pub const NdisFddiStateOff = NDIS_FDDI_LCONNECTION_STATE.Off;
pub const NdisFddiStateBreak = NDIS_FDDI_LCONNECTION_STATE.Break;
pub const NdisFddiStateTrace = NDIS_FDDI_LCONNECTION_STATE.Trace;
pub const NdisFddiStateConnect = NDIS_FDDI_LCONNECTION_STATE.Connect;
pub const NdisFddiStateNext = NDIS_FDDI_LCONNECTION_STATE.Next;
pub const NdisFddiStateSignal = NDIS_FDDI_LCONNECTION_STATE.Signal;
pub const NdisFddiStateJoin = NDIS_FDDI_LCONNECTION_STATE.Join;
pub const NdisFddiStateVerify = NDIS_FDDI_LCONNECTION_STATE.Verify;
pub const NdisFddiStateActive = NDIS_FDDI_LCONNECTION_STATE.Active;
pub const NdisFddiStateMaintenance = NDIS_FDDI_LCONNECTION_STATE.Maintenance;

pub const NDIS_WAN_MEDIUM_SUBTYPE = extern enum(i32) {
    Hub = 0,
    X_25 = 1,
    Isdn = 2,
    Serial = 3,
    FrameRelay = 4,
    Atm = 5,
    Sonet = 6,
    SW56K = 7,
    PPTP = 8,
    L2TP = 9,
    Irda = 10,
    Parallel = 11,
    Pppoe = 12,
    SSTP = 13,
    AgileVPN = 14,
    Gre = 15,
    SubTypeMax = 16,
};
pub const NdisWanMediumHub = NDIS_WAN_MEDIUM_SUBTYPE.Hub;
pub const NdisWanMediumX_25 = NDIS_WAN_MEDIUM_SUBTYPE.X_25;
pub const NdisWanMediumIsdn = NDIS_WAN_MEDIUM_SUBTYPE.Isdn;
pub const NdisWanMediumSerial = NDIS_WAN_MEDIUM_SUBTYPE.Serial;
pub const NdisWanMediumFrameRelay = NDIS_WAN_MEDIUM_SUBTYPE.FrameRelay;
pub const NdisWanMediumAtm = NDIS_WAN_MEDIUM_SUBTYPE.Atm;
pub const NdisWanMediumSonet = NDIS_WAN_MEDIUM_SUBTYPE.Sonet;
pub const NdisWanMediumSW56K = NDIS_WAN_MEDIUM_SUBTYPE.SW56K;
pub const NdisWanMediumPPTP = NDIS_WAN_MEDIUM_SUBTYPE.PPTP;
pub const NdisWanMediumL2TP = NDIS_WAN_MEDIUM_SUBTYPE.L2TP;
pub const NdisWanMediumIrda = NDIS_WAN_MEDIUM_SUBTYPE.Irda;
pub const NdisWanMediumParallel = NDIS_WAN_MEDIUM_SUBTYPE.Parallel;
pub const NdisWanMediumPppoe = NDIS_WAN_MEDIUM_SUBTYPE.Pppoe;
pub const NdisWanMediumSSTP = NDIS_WAN_MEDIUM_SUBTYPE.SSTP;
pub const NdisWanMediumAgileVPN = NDIS_WAN_MEDIUM_SUBTYPE.AgileVPN;
pub const NdisWanMediumGre = NDIS_WAN_MEDIUM_SUBTYPE.Gre;
pub const NdisWanMediumSubTypeMax = NDIS_WAN_MEDIUM_SUBTYPE.SubTypeMax;

pub const NDIS_WAN_HEADER_FORMAT = extern enum(i32) {
    Native = 0,
    Ethernet = 1,
};
pub const NdisWanHeaderNative = NDIS_WAN_HEADER_FORMAT.Native;
pub const NdisWanHeaderEthernet = NDIS_WAN_HEADER_FORMAT.Ethernet;

pub const NDIS_WAN_QUALITY = extern enum(i32) {
    Raw = 0,
    ErrorControl = 1,
    Reliable = 2,
};
pub const NdisWanRaw = NDIS_WAN_QUALITY.Raw;
pub const NdisWanErrorControl = NDIS_WAN_QUALITY.ErrorControl;
pub const NdisWanReliable = NDIS_WAN_QUALITY.Reliable;

pub const NDIS_WAN_PROTOCOL_CAPS = extern struct {
    Flags: u32,
    Reserved: u32,
};

pub const NDIS_802_5_RING_STATE = extern enum(i32) {
    Opened = 1,
    Closed = 2,
    Opening = 3,
    Closing = 4,
    OpenFailure = 5,
    RingFailure = 6,
};
pub const NdisRingStateOpened = NDIS_802_5_RING_STATE.Opened;
pub const NdisRingStateClosed = NDIS_802_5_RING_STATE.Closed;
pub const NdisRingStateOpening = NDIS_802_5_RING_STATE.Opening;
pub const NdisRingStateClosing = NDIS_802_5_RING_STATE.Closing;
pub const NdisRingStateOpenFailure = NDIS_802_5_RING_STATE.OpenFailure;
pub const NdisRingStateRingFailure = NDIS_802_5_RING_STATE.RingFailure;

pub const NDIS_MEDIA_STATE = extern enum(i32) {
    Connected = 0,
    Disconnected = 1,
};
pub const NdisMediaStateConnected = NDIS_MEDIA_STATE.Connected;
pub const NdisMediaStateDisconnected = NDIS_MEDIA_STATE.Disconnected;

pub const NDIS_CO_LINK_SPEED = extern struct {
    Outbound: u32,
    Inbound: u32,
};

pub const NDIS_LINK_SPEED = extern struct {
    XmitLinkSpeed: u64,
    RcvLinkSpeed: u64,
};

pub const NDIS_GUID = extern struct {
    Guid: Guid,
    Anonymous: _Anonymous_e__Union,
    Size: u32,
    Flags: u32,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const NDIS_IRDA_PACKET_INFO = extern struct {
    ExtraBOFs: u32,
    MinTurnAroundTime: u32,
};

pub const NDIS_SUPPORTED_PAUSE_FUNCTIONS = extern enum(i32) {
    Unsupported = 0,
    SendOnly = 1,
    ReceiveOnly = 2,
    SendAndReceive = 3,
    Unknown = 4,
};
pub const NdisPauseFunctionsUnsupported = NDIS_SUPPORTED_PAUSE_FUNCTIONS.Unsupported;
pub const NdisPauseFunctionsSendOnly = NDIS_SUPPORTED_PAUSE_FUNCTIONS.SendOnly;
pub const NdisPauseFunctionsReceiveOnly = NDIS_SUPPORTED_PAUSE_FUNCTIONS.ReceiveOnly;
pub const NdisPauseFunctionsSendAndReceive = NDIS_SUPPORTED_PAUSE_FUNCTIONS.SendAndReceive;
pub const NdisPauseFunctionsUnknown = NDIS_SUPPORTED_PAUSE_FUNCTIONS.Unknown;

pub const NDIS_LINK_STATE = extern struct {
    Header: NDIS_OBJECT_HEADER,
    MediaConnectState: NET_IF_MEDIA_CONNECT_STATE,
    MediaDuplexState: NET_IF_MEDIA_DUPLEX_STATE,
    XmitLinkSpeed: u64,
    RcvLinkSpeed: u64,
    PauseFunctions: NDIS_SUPPORTED_PAUSE_FUNCTIONS,
    AutoNegotiationFlags: u32,
};

pub const NDIS_LINK_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    MediaDuplexState: NET_IF_MEDIA_DUPLEX_STATE,
    XmitLinkSpeed: u64,
    RcvLinkSpeed: u64,
    PauseFunctions: NDIS_SUPPORTED_PAUSE_FUNCTIONS,
    AutoNegotiationFlags: u32,
};

pub const NDIS_OPER_STATE = extern struct {
    Header: NDIS_OBJECT_HEADER,
    OperationalStatus: NET_IF_OPER_STATUS,
    OperationalStatusFlags: u32,
};

pub const NDIS_IP_OPER_STATUS = extern struct {
    AddressFamily: u32,
    OperationalStatus: NET_IF_OPER_STATUS,
    OperationalStatusFlags: u32,
};

pub const NDIS_IP_OPER_STATUS_INFO = extern struct {
    Header: NDIS_OBJECT_HEADER,
    Flags: u32,
    NumberofAddressFamiliesReturned: u32,
    IpOperationalStatus: [32]NDIS_IP_OPER_STATUS,
};

pub const NDIS_IP_OPER_STATE = extern struct {
    Header: NDIS_OBJECT_HEADER,
    Flags: u32,
    IpOperationalStatus: NDIS_IP_OPER_STATUS,
};

pub const NDIS_OFFLOAD_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    IPv4Checksum: u8,
    TCPIPv4Checksum: u8,
    UDPIPv4Checksum: u8,
    TCPIPv6Checksum: u8,
    UDPIPv6Checksum: u8,
    LsoV1: u8,
    IPsecV1: u8,
    LsoV2IPv4: u8,
    LsoV2IPv6: u8,
    TcpConnectionIPv4: u8,
    TcpConnectionIPv6: u8,
    Flags: u32,
};

pub const NDIS_TCP_LARGE_SEND_OFFLOAD_V1 = extern struct {
    IPv4: _IPv4_e__Struct,
    const _IPv4_e__Struct = u32; // TODO: generate this nested type!
};

pub const NDIS_TCP_IP_CHECKSUM_OFFLOAD = extern struct {
    IPv4Transmit: _IPv4Transmit_e__Struct,
    IPv4Receive: _IPv4Receive_e__Struct,
    IPv6Transmit: _IPv6Transmit_e__Struct,
    IPv6Receive: _IPv6Receive_e__Struct,
    const _IPv6Transmit_e__Struct = u32; // TODO: generate this nested type!
    const _IPv4Transmit_e__Struct = u32; // TODO: generate this nested type!
    const _IPv6Receive_e__Struct = u32; // TODO: generate this nested type!
    const _IPv4Receive_e__Struct = u32; // TODO: generate this nested type!
};

pub const NDIS_IPSEC_OFFLOAD_V1 = extern struct {
    Supported: _Supported_e__Struct,
    IPv4AH: _IPv4AH_e__Struct,
    IPv4ESP: _IPv4ESP_e__Struct,
    const _IPv4ESP_e__Struct = u32; // TODO: generate this nested type!
    const _Supported_e__Struct = u32; // TODO: generate this nested type!
    const _IPv4AH_e__Struct = u32; // TODO: generate this nested type!
};

pub const NDIS_TCP_LARGE_SEND_OFFLOAD_V2 = extern struct {
    IPv4: _IPv4_e__Struct,
    IPv6: _IPv6_e__Struct,
    const _IPv6_e__Struct = u32; // TODO: generate this nested type!
    const _IPv4_e__Struct = u32; // TODO: generate this nested type!
};

pub const NDIS_OFFLOAD = extern struct {
    Header: NDIS_OBJECT_HEADER,
    Checksum: NDIS_TCP_IP_CHECKSUM_OFFLOAD,
    LsoV1: NDIS_TCP_LARGE_SEND_OFFLOAD_V1,
    IPsecV1: NDIS_IPSEC_OFFLOAD_V1,
    LsoV2: NDIS_TCP_LARGE_SEND_OFFLOAD_V2,
    Flags: u32,
};

pub const NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V1 = extern struct {
    IPv4: _IPv4_e__Struct,
    const _IPv4_e__Struct = u32; // TODO: generate this nested type!
};

pub const NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD = extern struct {
    IPv4Transmit: _IPv4Transmit_e__Struct,
    IPv4Receive: _IPv4Receive_e__Struct,
    IPv6Transmit: _IPv6Transmit_e__Struct,
    IPv6Receive: _IPv6Receive_e__Struct,
    const _IPv6Transmit_e__Struct = u32; // TODO: generate this nested type!
    const _IPv4Transmit_e__Struct = u32; // TODO: generate this nested type!
    const _IPv4Receive_e__Struct = u32; // TODO: generate this nested type!
    const _IPv6Receive_e__Struct = u32; // TODO: generate this nested type!
};

pub const NDIS_WMI_IPSEC_OFFLOAD_V1 = extern struct {
    Supported: _Supported_e__Struct,
    IPv4AH: _IPv4AH_e__Struct,
    IPv4ESP: _IPv4ESP_e__Struct,
    const _IPv4ESP_e__Struct = u32; // TODO: generate this nested type!
    const _Supported_e__Struct = u32; // TODO: generate this nested type!
    const _IPv4AH_e__Struct = u32; // TODO: generate this nested type!
};

pub const NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V2 = extern struct {
    IPv4: _IPv4_e__Struct,
    IPv6: _IPv6_e__Struct,
    const _IPv6_e__Struct = u32; // TODO: generate this nested type!
    const _IPv4_e__Struct = u32; // TODO: generate this nested type!
};

pub const NDIS_WMI_OFFLOAD = extern struct {
    Header: NDIS_OBJECT_HEADER,
    Checksum: NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD,
    LsoV1: NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V1,
    IPsecV1: NDIS_WMI_IPSEC_OFFLOAD_V1,
    LsoV2: NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V2,
    Flags: u32,
};

pub const NDIS_TCP_CONNECTION_OFFLOAD = extern struct {
    Header: NDIS_OBJECT_HEADER,
    Encapsulation: u32,
    _bitfield: u32,
    TcpConnectionOffloadCapacity: u32,
    Flags: u32,
};

pub const NDIS_WMI_TCP_CONNECTION_OFFLOAD = extern struct {
    Header: NDIS_OBJECT_HEADER,
    Encapsulation: u32,
    SupportIPv4: u32,
    SupportIPv6: u32,
    SupportIPv6ExtensionHeaders: u32,
    SupportSack: u32,
    TcpConnectionOffloadCapacity: u32,
    Flags: u32,
};

pub const NDIS_PORT_TYPE = extern enum(i32) {
    Undefined = 0,
    Bridge = 1,
    RasConnection = 2,
    @"8021xSupplicant" = 3,
    Max = 4,
};
pub const NdisPortTypeUndefined = NDIS_PORT_TYPE.Undefined;
pub const NdisPortTypeBridge = NDIS_PORT_TYPE.Bridge;
pub const NdisPortTypeRasConnection = NDIS_PORT_TYPE.RasConnection;
pub const NdisPortType8021xSupplicant = NDIS_PORT_TYPE.@"8021xSupplicant";
pub const NdisPortTypeMax = NDIS_PORT_TYPE.Max;

pub const NDIS_PORT_AUTHORIZATION_STATE = extern enum(i32) {
    AuthorizationUnknown = 0,
    Authorized = 1,
    Unauthorized = 2,
    Reauthorizing = 3,
};
pub const NdisPortAuthorizationUnknown = NDIS_PORT_AUTHORIZATION_STATE.AuthorizationUnknown;
pub const NdisPortAuthorized = NDIS_PORT_AUTHORIZATION_STATE.Authorized;
pub const NdisPortUnauthorized = NDIS_PORT_AUTHORIZATION_STATE.Unauthorized;
pub const NdisPortReauthorizing = NDIS_PORT_AUTHORIZATION_STATE.Reauthorizing;

pub const NDIS_PORT_CONTROL_STATE = extern enum(i32) {
    Unknown = 0,
    Controlled = 1,
    Uncontrolled = 2,
};
pub const NdisPortControlStateUnknown = NDIS_PORT_CONTROL_STATE.Unknown;
pub const NdisPortControlStateControlled = NDIS_PORT_CONTROL_STATE.Controlled;
pub const NdisPortControlStateUncontrolled = NDIS_PORT_CONTROL_STATE.Uncontrolled;

pub const NDIS_PORT_AUTHENTICATION_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    SendControlState: NDIS_PORT_CONTROL_STATE,
    RcvControlState: NDIS_PORT_CONTROL_STATE,
    SendAuthorizationState: NDIS_PORT_AUTHORIZATION_STATE,
    RcvAuthorizationState: NDIS_PORT_AUTHORIZATION_STATE,
};

pub const NDIS_NETWORK_CHANGE_TYPE = extern enum(i32) {
    PossibleNetworkChange = 1,
    DefinitelyNetworkChange = 2,
    NetworkChangeFromMediaConnect = 3,
    NetworkChangeMax = 4,
};
pub const NdisPossibleNetworkChange = NDIS_NETWORK_CHANGE_TYPE.PossibleNetworkChange;
pub const NdisDefinitelyNetworkChange = NDIS_NETWORK_CHANGE_TYPE.DefinitelyNetworkChange;
pub const NdisNetworkChangeFromMediaConnect = NDIS_NETWORK_CHANGE_TYPE.NetworkChangeFromMediaConnect;
pub const NdisNetworkChangeMax = NDIS_NETWORK_CHANGE_TYPE.NetworkChangeMax;

pub const NDIS_WMI_METHOD_HEADER = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PortNumber: u32,
    NetLuid: NET_LUID_LH,
    RequestId: u64,
    Timeout: u32,
    Padding: [4]u8,
};

pub const NDIS_WMI_SET_HEADER = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PortNumber: u32,
    NetLuid: NET_LUID_LH,
    RequestId: u64,
    Timeout: u32,
    Padding: [4]u8,
};

pub const NDIS_WMI_EVENT_HEADER = extern struct {
    Header: NDIS_OBJECT_HEADER,
    IfIndex: u32,
    NetLuid: NET_LUID_LH,
    RequestId: u64,
    PortNumber: u32,
    DeviceNameLength: u32,
    DeviceNameOffset: u32,
    Padding: [4]u8,
};

pub const NDIS_WMI_ENUM_ADAPTER = extern struct {
    Header: NDIS_OBJECT_HEADER,
    IfIndex: u32,
    NetLuid: NET_LUID_LH,
    DeviceNameLength: u16,
    DeviceName: [1]CHAR,
};

pub const NDIS_WMI_OUTPUT_INFO = extern struct {
    Header: NDIS_OBJECT_HEADER,
    Flags: u32,
    SupportedRevision: u8,
    DataOffset: u32,
};

pub const NDIS_RECEIVE_SCALE_CAPABILITIES = extern struct {
    Header: NDIS_OBJECT_HEADER,
    CapabilitiesFlags: u32,
    NumberOfInterruptMessages: u32,
    NumberOfReceiveQueues: u32,
};

pub const NDIS_RECEIVE_SCALE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    Flags: u16,
    BaseCpuNumber: u16,
    HashInformation: u32,
    IndirectionTableSize: u16,
    IndirectionTableOffset: u32,
    HashSecretKeySize: u16,
    HashSecretKeyOffset: u32,
};

pub const NDIS_RECEIVE_HASH_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    Flags: u32,
    HashInformation: u32,
    HashSecretKeySize: u16,
    HashSecretKeyOffset: u32,
};

pub const NDIS_PROCESSOR_VENDOR = extern enum(i32) {
    Unknown = 0,
    GenuinIntel = 1,
    GenuineIntel = 1,
    AuthenticAMD = 2,
};
pub const NdisProcessorVendorUnknown = NDIS_PROCESSOR_VENDOR.Unknown;
pub const NdisProcessorVendorGenuinIntel = NDIS_PROCESSOR_VENDOR.GenuinIntel;
pub const NdisProcessorVendorGenuineIntel = NDIS_PROCESSOR_VENDOR.GenuineIntel;
pub const NdisProcessorVendorAuthenticAMD = NDIS_PROCESSOR_VENDOR.AuthenticAMD;

pub const NDIS_PORT_STATE = extern struct {
    Header: NDIS_OBJECT_HEADER,
    MediaConnectState: NET_IF_MEDIA_CONNECT_STATE,
    XmitLinkSpeed: u64,
    RcvLinkSpeed: u64,
    Direction: NET_IF_DIRECTION_TYPE,
    SendControlState: NDIS_PORT_CONTROL_STATE,
    RcvControlState: NDIS_PORT_CONTROL_STATE,
    SendAuthorizationState: NDIS_PORT_AUTHORIZATION_STATE,
    RcvAuthorizationState: NDIS_PORT_AUTHORIZATION_STATE,
    Flags: u32,
};

pub const NDIS_PORT_CHARACTERISTICS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PortNumber: u32,
    Flags: u32,
    Type: NDIS_PORT_TYPE,
    MediaConnectState: NET_IF_MEDIA_CONNECT_STATE,
    XmitLinkSpeed: u64,
    RcvLinkSpeed: u64,
    Direction: NET_IF_DIRECTION_TYPE,
    SendControlState: NDIS_PORT_CONTROL_STATE,
    RcvControlState: NDIS_PORT_CONTROL_STATE,
    SendAuthorizationState: NDIS_PORT_AUTHORIZATION_STATE,
    RcvAuthorizationState: NDIS_PORT_AUTHORIZATION_STATE,
};

pub const NDIS_PORT = extern struct {
    Next: *NDIS_PORT,
    NdisReserved: *c_void,
    MiniportReserved: *c_void,
    ProtocolReserved: *c_void,
    PortCharacteristics: NDIS_PORT_CHARACTERISTICS,
};

pub const NDIS_PORT_ARRAY = extern struct {
    Header: NDIS_OBJECT_HEADER,
    NumberOfPorts: u32,
    OffsetFirstPort: u32,
    ElementSize: u32,
    Ports: [1]NDIS_PORT_CHARACTERISTICS,
};

pub const NDIS_TIMESTAMP_CAPABILITY_FLAGS = extern struct {
    PtpV2OverUdpIPv4EventMsgReceiveHw: u8,
    PtpV2OverUdpIPv4AllMsgReceiveHw: u8,
    PtpV2OverUdpIPv4EventMsgTransmitHw: u8,
    PtpV2OverUdpIPv4AllMsgTransmitHw: u8,
    PtpV2OverUdpIPv6EventMsgReceiveHw: u8,
    PtpV2OverUdpIPv6AllMsgReceiveHw: u8,
    PtpV2OverUdpIPv6EventMsgTransmitHw: u8,
    PtpV2OverUdpIPv6AllMsgTransmitHw: u8,
    AllReceiveHw: u8,
    AllTransmitHw: u8,
    TaggedTransmitHw: u8,
    AllReceiveSw: u8,
    AllTransmitSw: u8,
    TaggedTransmitSw: u8,
};

pub const NDIS_TIMESTAMP_CAPABILITIES = extern struct {
    Header: NDIS_OBJECT_HEADER,
    HardwareClockFrequencyHz: u64,
    CrossTimestamp: u8,
    Reserved1: u64,
    Reserved2: u64,
    TimestampFlags: NDIS_TIMESTAMP_CAPABILITY_FLAGS,
};

pub const NDIS_HARDWARE_CROSSTIMESTAMP = extern struct {
    Header: NDIS_OBJECT_HEADER,
    Flags: u32,
    SystemTimestamp1: u64,
    HardwareClockTimestamp: u64,
    SystemTimestamp2: u64,
};

pub const DOT11_BSSID_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    BSSIDs: [6]u8,
};

pub const DOT11_PHY_TYPE = extern enum(i32) {
    unknown = 0,
    any = 0,
    fhss = 1,
    dsss = 2,
    irbaseband = 3,
    ofdm = 4,
    hrdsss = 5,
    erp = 6,
    ht = 7,
    vht = 8,
    dmg = 9,
    he = 10,
    IHV_start = -2147483648,
    IHV_end = -1,
};
pub const dot11_phy_type_unknown = DOT11_PHY_TYPE.unknown;
pub const dot11_phy_type_any = DOT11_PHY_TYPE.any;
pub const dot11_phy_type_fhss = DOT11_PHY_TYPE.fhss;
pub const dot11_phy_type_dsss = DOT11_PHY_TYPE.dsss;
pub const dot11_phy_type_irbaseband = DOT11_PHY_TYPE.irbaseband;
pub const dot11_phy_type_ofdm = DOT11_PHY_TYPE.ofdm;
pub const dot11_phy_type_hrdsss = DOT11_PHY_TYPE.hrdsss;
pub const dot11_phy_type_erp = DOT11_PHY_TYPE.erp;
pub const dot11_phy_type_ht = DOT11_PHY_TYPE.ht;
pub const dot11_phy_type_vht = DOT11_PHY_TYPE.vht;
pub const dot11_phy_type_dmg = DOT11_PHY_TYPE.dmg;
pub const dot11_phy_type_he = DOT11_PHY_TYPE.he;
pub const dot11_phy_type_IHV_start = DOT11_PHY_TYPE.IHV_start;
pub const dot11_phy_type_IHV_end = DOT11_PHY_TYPE.IHV_end;

pub const DOT11_RATE_SET = extern struct {
    uRateSetLength: u32,
    ucRateSet: [126]u8,
};

pub const DOT11_WFD_SESSION_INFO = extern struct {
    uSessionInfoLength: u16,
    ucSessionInfo: [144]u8,
};

pub const DOT11_OFFLOAD_CAPABILITY = extern struct {
    uReserved: u32,
    uFlags: u32,
    uSupportedWEPAlgorithms: u32,
    uNumOfReplayWindows: u32,
    uMaxWEPKeyMappingLength: u32,
    uSupportedAuthAlgorithms: u32,
    uMaxAuthKeyMappingLength: u32,
};

pub const DOT11_CURRENT_OFFLOAD_CAPABILITY = extern struct {
    uReserved: u32,
    uFlags: u32,
};

pub const DOT11_OFFLOAD_TYPE = extern enum(i32) {
    wep = 1,
    auth = 2,
};
pub const dot11_offload_type_wep = DOT11_OFFLOAD_TYPE.wep;
pub const dot11_offload_type_auth = DOT11_OFFLOAD_TYPE.auth;

pub const DOT11_IV48_COUNTER = extern struct {
    uIV32Counter: u32,
    usIV16Counter: u16,
};

pub const DOT11_WEP_OFFLOAD = extern struct {
    uReserved: u32,
    hOffloadContext: HANDLE,
    hOffload: HANDLE,
    dot11OffloadType: DOT11_OFFLOAD_TYPE,
    dwAlgorithm: u32,
    bRowIsOutbound: u8,
    bUseDefault: u8,
    uFlags: u32,
    ucMacAddress: [6]u8,
    uNumOfRWsOnPeer: u32,
    uNumOfRWsOnMe: u32,
    dot11IV48Counters: [16]DOT11_IV48_COUNTER,
    usDot11RWBitMaps: [16]u16,
    usKeyLength: u16,
    ucKey: [1]u8,
};

pub const DOT11_WEP_UPLOAD = extern struct {
    uReserved: u32,
    dot11OffloadType: DOT11_OFFLOAD_TYPE,
    hOffload: HANDLE,
    uNumOfRWsUsed: u32,
    dot11IV48Counters: [16]DOT11_IV48_COUNTER,
    usDot11RWBitMaps: [16]u16,
};

pub const DOT11_KEY_DIRECTION = extern enum(i32) {
    both = 1,
    inbound = 2,
    outbound = 3,
};
pub const dot11_key_direction_both = DOT11_KEY_DIRECTION.both;
pub const dot11_key_direction_inbound = DOT11_KEY_DIRECTION.inbound;
pub const dot11_key_direction_outbound = DOT11_KEY_DIRECTION.outbound;

pub const DOT11_DEFAULT_WEP_OFFLOAD = extern struct {
    uReserved: u32,
    hOffloadContext: HANDLE,
    hOffload: HANDLE,
    dwIndex: u32,
    dot11OffloadType: DOT11_OFFLOAD_TYPE,
    dwAlgorithm: u32,
    uFlags: u32,
    dot11KeyDirection: DOT11_KEY_DIRECTION,
    ucMacAddress: [6]u8,
    uNumOfRWsOnMe: u32,
    dot11IV48Counters: [16]DOT11_IV48_COUNTER,
    usDot11RWBitMaps: [16]u16,
    usKeyLength: u16,
    ucKey: [1]u8,
};

pub const DOT11_DEFAULT_WEP_UPLOAD = extern struct {
    uReserved: u32,
    dot11OffloadType: DOT11_OFFLOAD_TYPE,
    hOffload: HANDLE,
    uNumOfRWsUsed: u32,
    dot11IV48Counters: [16]DOT11_IV48_COUNTER,
    usDot11RWBitMaps: [16]u16,
};

pub const DOT11_OPERATION_MODE_CAPABILITY = extern struct {
    uReserved: u32,
    uMajorVersion: u32,
    uMinorVersion: u32,
    uNumOfTXBuffers: u32,
    uNumOfRXBuffers: u32,
    uOpModeCapability: u32,
};

pub const DOT11_CURRENT_OPERATION_MODE = extern struct {
    uReserved: u32,
    uCurrentOpMode: u32,
};

pub const DOT11_SCAN_TYPE = extern enum(i32) {
    active = 1,
    passive = 2,
    auto = 3,
    forced = -2147483648,
};
pub const dot11_scan_type_active = DOT11_SCAN_TYPE.active;
pub const dot11_scan_type_passive = DOT11_SCAN_TYPE.passive;
pub const dot11_scan_type_auto = DOT11_SCAN_TYPE.auto;
pub const dot11_scan_type_forced = DOT11_SCAN_TYPE.forced;

pub const DOT11_SCAN_REQUEST = extern struct {
    dot11BSSType: DOT11_BSS_TYPE,
    dot11BSSID: [6]u8,
    dot11SSID: DOT11_SSID,
    dot11ScanType: DOT11_SCAN_TYPE,
    bRestrictedScan: u8,
    bUseRequestIE: u8,
    uRequestIDsOffset: u32,
    uNumOfRequestIDs: u32,
    uPhyTypesOffset: u32,
    uNumOfPhyTypes: u32,
    uIEsOffset: u32,
    uIEsLength: u32,
    ucBuffer: [1]u8,
};

pub const CH_DESCRIPTION_TYPE = extern enum(i32) {
    logical = 1,
    center_frequency = 2,
    phy_specific = 3,
};
pub const ch_description_type_logical = CH_DESCRIPTION_TYPE.logical;
pub const ch_description_type_center_frequency = CH_DESCRIPTION_TYPE.center_frequency;
pub const ch_description_type_phy_specific = CH_DESCRIPTION_TYPE.phy_specific;

pub const DOT11_PHY_TYPE_INFO = extern struct {
    dot11PhyType: DOT11_PHY_TYPE,
    bUseParameters: u8,
    uProbeDelay: u32,
    uMinChannelTime: u32,
    uMaxChannelTime: u32,
    ChDescriptionType: CH_DESCRIPTION_TYPE,
    uChannelListSize: u32,
    ucChannelListBuffer: [1]u8,
};

pub const DOT11_SCAN_REQUEST_V2 = extern struct {
    dot11BSSType: DOT11_BSS_TYPE,
    dot11BSSID: [6]u8,
    dot11ScanType: DOT11_SCAN_TYPE,
    bRestrictedScan: u8,
    udot11SSIDsOffset: u32,
    uNumOfdot11SSIDs: u32,
    bUseRequestIE: u8,
    uRequestIDsOffset: u32,
    uNumOfRequestIDs: u32,
    uPhyTypeInfosOffset: u32,
    uNumOfPhyTypeInfos: u32,
    uIEsOffset: u32,
    uIEsLength: u32,
    ucBuffer: [1]u8,
};

pub const DOT11_PHY_TYPE_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    dot11PhyType: [1]DOT11_PHY_TYPE,
};

pub const DOT11_BSS_DESCRIPTION = extern struct {
    uReserved: u32,
    dot11BSSID: [6]u8,
    dot11BSSType: DOT11_BSS_TYPE,
    usBeaconPeriod: u16,
    ullTimestamp: u64,
    usCapabilityInformation: u16,
    uBufferLength: u32,
    ucBuffer: [1]u8,
};

pub const DOT11_JOIN_REQUEST = extern struct {
    uJoinFailureTimeout: u32,
    OperationalRateSet: DOT11_RATE_SET,
    uChCenterFrequency: u32,
    dot11BSSDescription: DOT11_BSS_DESCRIPTION,
};

pub const DOT11_START_REQUEST = extern struct {
    uStartFailureTimeout: u32,
    OperationalRateSet: DOT11_RATE_SET,
    uChCenterFrequency: u32,
    dot11BSSDescription: DOT11_BSS_DESCRIPTION,
};

pub const DOT11_UPDATE_IE_OP = extern enum(i32) {
    create_replace = 1,
    delete = 2,
};
pub const dot11_update_ie_op_create_replace = DOT11_UPDATE_IE_OP.create_replace;
pub const dot11_update_ie_op_delete = DOT11_UPDATE_IE_OP.delete;

pub const DOT11_UPDATE_IE = extern struct {
    dot11UpdateIEOp: DOT11_UPDATE_IE_OP,
    uBufferLength: u32,
    ucBuffer: [1]u8,
};

pub const DOT11_RESET_TYPE = extern enum(i32) {
    phy = 1,
    mac = 2,
    phy_and_mac = 3,
};
pub const dot11_reset_type_phy = DOT11_RESET_TYPE.phy;
pub const dot11_reset_type_mac = DOT11_RESET_TYPE.mac;
pub const dot11_reset_type_phy_and_mac = DOT11_RESET_TYPE.phy_and_mac;

pub const DOT11_RESET_REQUEST = extern struct {
    dot11ResetType: DOT11_RESET_TYPE,
    dot11MacAddress: [6]u8,
    bSetDefaultMIB: u8,
};

pub const DOT11_OPTIONAL_CAPABILITY = extern struct {
    uReserved: u32,
    bDot11PCF: u8,
    bDot11PCFMPDUTransferToPC: u8,
    bStrictlyOrderedServiceClass: u8,
};

pub const DOT11_CURRENT_OPTIONAL_CAPABILITY = extern struct {
    uReserved: u32,
    bDot11CFPollable: u8,
    bDot11PCF: u8,
    bDot11PCFMPDUTransferToPC: u8,
    bStrictlyOrderedServiceClass: u8,
};

pub const DOT11_POWER_MODE = extern enum(i32) {
    unknown = 0,
    active = 1,
    powersave = 2,
};
pub const dot11_power_mode_unknown = DOT11_POWER_MODE.unknown;
pub const dot11_power_mode_active = DOT11_POWER_MODE.active;
pub const dot11_power_mode_powersave = DOT11_POWER_MODE.powersave;

pub const DOT11_POWER_MGMT_MODE = extern struct {
    dot11PowerMode: DOT11_POWER_MODE,
    uPowerSaveLevel: u32,
    usListenInterval: u16,
    usAID: u16,
    bReceiveDTIMs: u8,
};

pub const DOT11_COUNTERS_ENTRY = extern struct {
    uTransmittedFragmentCount: u32,
    uMulticastTransmittedFrameCount: u32,
    uFailedCount: u32,
    uRetryCount: u32,
    uMultipleRetryCount: u32,
    uFrameDuplicateCount: u32,
    uRTSSuccessCount: u32,
    uRTSFailureCount: u32,
    uACKFailureCount: u32,
    uReceivedFragmentCount: u32,
    uMulticastReceivedFrameCount: u32,
    uFCSErrorCount: u32,
    uTransmittedFrameCount: u32,
};

pub const DOT11_SUPPORTED_PHY_TYPES = extern struct {
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    dot11PHYType: [1]DOT11_PHY_TYPE,
};

pub const DOT11_TEMP_TYPE = extern enum(i32) {
    unknown = 0,
    @"1" = 1,
    @"2" = 2,
};
pub const dot11_temp_type_unknown = DOT11_TEMP_TYPE.unknown;
pub const dot11_temp_type_1 = DOT11_TEMP_TYPE.@"1";
pub const dot11_temp_type_2 = DOT11_TEMP_TYPE.@"2";

pub const DOT11_DIVERSITY_SUPPORT = extern enum(i32) {
    unknown = 0,
    fixedlist = 1,
    notsupported = 2,
    dynamic = 3,
};
pub const dot11_diversity_support_unknown = DOT11_DIVERSITY_SUPPORT.unknown;
pub const dot11_diversity_support_fixedlist = DOT11_DIVERSITY_SUPPORT.fixedlist;
pub const dot11_diversity_support_notsupported = DOT11_DIVERSITY_SUPPORT.notsupported;
pub const dot11_diversity_support_dynamic = DOT11_DIVERSITY_SUPPORT.dynamic;

pub const DOT11_SUPPORTED_POWER_LEVELS = extern struct {
    uNumOfSupportedPowerLevels: u32,
    uTxPowerLevelValues: [8]u32,
};

pub const DOT11_REG_DOMAIN_VALUE = extern struct {
    uRegDomainsSupportIndex: u32,
    uRegDomainsSupportValue: u32,
};

pub const DOT11_REG_DOMAINS_SUPPORT_VALUE = extern struct {
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    dot11RegDomainValue: [1]DOT11_REG_DOMAIN_VALUE,
};

pub const DOT11_SUPPORTED_ANTENNA = extern struct {
    uAntennaListIndex: u32,
    bSupportedAntenna: u8,
};

pub const DOT11_SUPPORTED_ANTENNA_LIST = extern struct {
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    dot11SupportedAntenna: [1]DOT11_SUPPORTED_ANTENNA,
};

pub const DOT11_DIVERSITY_SELECTION_RX = extern struct {
    uAntennaListIndex: u32,
    bDiversitySelectionRX: u8,
};

pub const DOT11_DIVERSITY_SELECTION_RX_LIST = extern struct {
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    dot11DiversitySelectionRx: [1]DOT11_DIVERSITY_SELECTION_RX,
};

pub const DOT11_SUPPORTED_DATA_RATES_VALUE = extern struct {
    ucSupportedTxDataRatesValue: [8]u8,
    ucSupportedRxDataRatesValue: [8]u8,
};

pub const DOT11_SUPPORTED_DATA_RATES_VALUE_V2 = extern struct {
    ucSupportedTxDataRatesValue: [255]u8,
    ucSupportedRxDataRatesValue: [255]u8,
};

pub const DOT11_MULTI_DOMAIN_CAPABILITY_ENTRY = extern struct {
    uMultiDomainCapabilityIndex: u32,
    uFirstChannelNumber: u32,
    uNumberOfChannels: u32,
    lMaximumTransmitPowerLevel: i32,
};

pub const DOT11_MD_CAPABILITY_ENTRY_LIST = extern struct {
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    dot11MDCapabilityEntry: [1]DOT11_MULTI_DOMAIN_CAPABILITY_ENTRY,
};

pub const DOT11_HOP_ALGO_ADOPTED = extern enum(i32) {
    current = 0,
    hop_index = 1,
    hcc = 2,
};
pub const dot11_hop_algo_current = DOT11_HOP_ALGO_ADOPTED.current;
pub const dot11_hop_algo_hop_index = DOT11_HOP_ALGO_ADOPTED.hop_index;
pub const dot11_hop_algo_hcc = DOT11_HOP_ALGO_ADOPTED.hcc;

pub const DOT11_HOPPING_PATTERN_ENTRY = extern struct {
    uHoppingPatternIndex: u32,
    uRandomTableFieldNumber: u32,
};

pub const DOT11_HOPPING_PATTERN_ENTRY_LIST = extern struct {
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    dot11HoppingPatternEntry: [1]DOT11_HOPPING_PATTERN_ENTRY,
};

pub const DOT11_WPA_TSC = extern struct {
    uReserved: u32,
    dot11OffloadType: DOT11_OFFLOAD_TYPE,
    hOffload: HANDLE,
    dot11IV48Counter: DOT11_IV48_COUNTER,
};

pub const DOT11_RSSI_RANGE = extern struct {
    dot11PhyType: DOT11_PHY_TYPE,
    uRSSIMin: u32,
    uRSSIMax: u32,
};

pub const DOT11_NIC_SPECIFIC_EXTENSION = extern struct {
    uBufferLength: u32,
    uTotalBufferLength: u32,
    ucBuffer: [1]u8,
};

pub const DOT11_AP_JOIN_REQUEST = extern struct {
    uJoinFailureTimeout: u32,
    OperationalRateSet: DOT11_RATE_SET,
    uChCenterFrequency: u32,
    dot11BSSDescription: DOT11_BSS_DESCRIPTION,
};

pub const DOT11_RECV_SENSITIVITY = extern struct {
    ucDataRate: u8,
    lRSSIMin: i32,
    lRSSIMax: i32,
};

pub const DOT11_RECV_SENSITIVITY_LIST = extern struct {
    Anonymous: _Anonymous_e__Union,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    dot11RecvSensitivity: [1]DOT11_RECV_SENSITIVITY,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const DOT11_AC_PARAM = extern enum(i32) {
    BE = 0,
    BK = 1,
    VI = 2,
    VO = 3,
    max = 4,
};
pub const dot11_AC_param_BE = DOT11_AC_PARAM.BE;
pub const dot11_AC_param_BK = DOT11_AC_PARAM.BK;
pub const dot11_AC_param_VI = DOT11_AC_PARAM.VI;
pub const dot11_AC_param_VO = DOT11_AC_PARAM.VO;
pub const dot11_AC_param_max = DOT11_AC_PARAM.max;

pub const DOT11_WME_AC_PARAMETERS = extern struct {
    ucAccessCategoryIndex: u8,
    ucAIFSN: u8,
    ucECWmin: u8,
    ucECWmax: u8,
    usTXOPLimit: u16,
};

pub const _DOT11_WME_AC_PARAMTERS_LIST = extern struct {
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    dot11WMEACParameters: [1]DOT11_WME_AC_PARAMETERS,
};

pub const DOT11_WME_UPDATE_IE = extern struct {
    uParamElemMinBeaconIntervals: u32,
    uWMEInfoElemOffset: u32,
    uWMEInfoElemLength: u32,
    uWMEParamElemOffset: u32,
    uWMEParamElemLength: u32,
    ucBuffer: [1]u8,
};

pub const DOT11_QOS_TX_DURATION = extern struct {
    uNominalMSDUSize: u32,
    uMinPHYRate: u32,
    uDuration: u32,
};

pub const DOT11_QOS_TX_MEDIUM_TIME = extern struct {
    dot11PeerAddress: [6]u8,
    ucQoSPriority: u8,
    uMediumTimeAdmited: u32,
};

pub const DOT11_SUPPORTED_OFDM_FREQUENCY = extern struct {
    uCenterFrequency: u32,
};

pub const DOT11_SUPPORTED_OFDM_FREQUENCY_LIST = extern struct {
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    dot11SupportedOFDMFrequency: [1]DOT11_SUPPORTED_OFDM_FREQUENCY,
};

pub const DOT11_SUPPORTED_DSSS_CHANNEL = extern struct {
    uChannel: u32,
};

pub const DOT11_SUPPORTED_DSSS_CHANNEL_LIST = extern struct {
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    dot11SupportedDSSSChannel: [1]DOT11_SUPPORTED_DSSS_CHANNEL,
};

pub const DOT11_BYTE_ARRAY = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfBytes: u32,
    uTotalNumOfBytes: u32,
    ucBuffer: [1]u8,
};

pub const DOT11_BSS_ENTRY_PHY_SPECIFIC_INFO = extern union {
    uChCenterFrequency: u32,
    FHSS: _FHSS_e__Struct,
    const _FHSS_e__Struct = u32; // TODO: generate this nested type!
};

pub const DOT11_BSS_ENTRY = extern struct {
    uPhyId: u32,
    PhySpecificInfo: DOT11_BSS_ENTRY_PHY_SPECIFIC_INFO,
    dot11BSSID: [6]u8,
    dot11BSSType: DOT11_BSS_TYPE,
    lRSSI: i32,
    uLinkQuality: u32,
    bInRegDomain: u8,
    usBeaconPeriod: u16,
    ullTimestamp: u64,
    ullHostTimestamp: u64,
    usCapabilityInformation: u16,
    uBufferLength: u32,
    ucBuffer: [1]u8,
};

pub const DOT11_SSID_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    SSIDs: [1]DOT11_SSID,
};

pub const DOT11_MAC_ADDRESS_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    MacAddrs: [6]u8,
};

pub const DOT11_PMKID_ENTRY = extern struct {
    BSSID: [6]u8,
    PMKID: [16]u8,
    uFlags: u32,
};

pub const DOT11_PMKID_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    PMKIDs: [1]DOT11_PMKID_ENTRY,
};

pub const DOT11_PHY_FRAME_STATISTICS = extern struct {
    ullTransmittedFrameCount: u64,
    ullMulticastTransmittedFrameCount: u64,
    ullFailedCount: u64,
    ullRetryCount: u64,
    ullMultipleRetryCount: u64,
    ullMaxTXLifetimeExceededCount: u64,
    ullTransmittedFragmentCount: u64,
    ullRTSSuccessCount: u64,
    ullRTSFailureCount: u64,
    ullACKFailureCount: u64,
    ullReceivedFrameCount: u64,
    ullMulticastReceivedFrameCount: u64,
    ullPromiscuousReceivedFrameCount: u64,
    ullMaxRXLifetimeExceededCount: u64,
    ullFrameDuplicateCount: u64,
    ullReceivedFragmentCount: u64,
    ullPromiscuousReceivedFragmentCount: u64,
    ullFCSErrorCount: u64,
};

pub const DOT11_MAC_FRAME_STATISTICS = extern struct {
    ullTransmittedFrameCount: u64,
    ullReceivedFrameCount: u64,
    ullTransmittedFailureFrameCount: u64,
    ullReceivedFailureFrameCount: u64,
    ullWEPExcludedCount: u64,
    ullTKIPLocalMICFailures: u64,
    ullTKIPReplays: u64,
    ullTKIPICVErrorCount: u64,
    ullCCMPReplays: u64,
    ullCCMPDecryptErrors: u64,
    ullWEPUndecryptableCount: u64,
    ullWEPICVErrorCount: u64,
    ullDecryptSuccessCount: u64,
    ullDecryptFailureCount: u64,
};

pub const DOT11_STATISTICS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    ullFourWayHandshakeFailures: u64,
    ullTKIPCounterMeasuresInvoked: u64,
    ullReserved: u64,
    MacUcastCounters: DOT11_MAC_FRAME_STATISTICS,
    MacMcastCounters: DOT11_MAC_FRAME_STATISTICS,
    PhyCounters: [1]DOT11_PHY_FRAME_STATISTICS,
};

pub const DOT11_PRIVACY_EXEMPTION = extern struct {
    usEtherType: u16,
    usExemptionActionType: u16,
    usExemptionPacketType: u16,
};

pub const DOT11_PRIVACY_EXEMPTION_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    PrivacyExemptionEntries: [1]DOT11_PRIVACY_EXEMPTION,
};

pub const DOT11_AUTH_ALGORITHM_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    AlgorithmIds: [1]DOT11_AUTH_ALGORITHM,
};

pub const DOT11_AUTH_CIPHER_PAIR_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    AuthCipherPairs: [1]DOT11_AUTH_CIPHER_PAIR,
};

pub const DOT11_CIPHER_ALGORITHM_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    AlgorithmIds: [1]DOT11_CIPHER_ALGORITHM,
};

pub const DOT11_CIPHER_DEFAULT_KEY_VALUE = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uKeyIndex: u32,
    AlgorithmId: DOT11_CIPHER_ALGORITHM,
    MacAddr: [6]u8,
    bDelete: u8,
    bStatic: u8,
    usKeyLength: u16,
    ucKey: [1]u8,
};

pub const DOT11_KEY_ALGO_TKIP_MIC = extern struct {
    ucIV48Counter: [6]u8,
    ulTKIPKeyLength: u32,
    ulMICKeyLength: u32,
    ucTKIPMICKeys: [1]u8,
};

pub const DOT11_KEY_ALGO_CCMP = extern struct {
    ucIV48Counter: [6]u8,
    ulCCMPKeyLength: u32,
    ucCCMPKey: [1]u8,
};

pub const DOT11_KEY_ALGO_GCMP = extern struct {
    ucIV48Counter: [6]u8,
    ulGCMPKeyLength: u32,
    ucGCMPKey: [1]u8,
};

pub const DOT11_KEY_ALGO_GCMP_256 = extern struct {
    ucIV48Counter: [6]u8,
    ulGCMP256KeyLength: u32,
    ucGCMP256Key: [1]u8,
};

pub const DOT11_KEY_ALGO_BIP = extern struct {
    ucIPN: [6]u8,
    ulBIPKeyLength: u32,
    ucBIPKey: [1]u8,
};

pub const DOT11_KEY_ALGO_BIP_GMAC_256 = extern struct {
    ucIPN: [6]u8,
    ulBIPGmac256KeyLength: u32,
    ucBIPGmac256Key: [1]u8,
};

pub const DOT11_DIRECTION = extern enum(i32) {
    INBOUND = 1,
    OUTBOUND = 2,
    BOTH = 3,
};
pub const DOT11_DIR_INBOUND = DOT11_DIRECTION.INBOUND;
pub const DOT11_DIR_OUTBOUND = DOT11_DIRECTION.OUTBOUND;
pub const DOT11_DIR_BOTH = DOT11_DIRECTION.BOTH;

pub const DOT11_CIPHER_KEY_MAPPING_KEY_VALUE = extern struct {
    PeerMacAddr: [6]u8,
    AlgorithmId: DOT11_CIPHER_ALGORITHM,
    Direction: DOT11_DIRECTION,
    bDelete: u8,
    bStatic: u8,
    usKeyLength: u16,
    ucKey: [1]u8,
};

pub const DOT11_ASSOCIATION_STATE = extern enum(i32) {
    zero = 0,
    unauth_unassoc = 1,
    auth_unassoc = 2,
    auth_assoc = 3,
};
pub const dot11_assoc_state_zero = DOT11_ASSOCIATION_STATE.zero;
pub const dot11_assoc_state_unauth_unassoc = DOT11_ASSOCIATION_STATE.unauth_unassoc;
pub const dot11_assoc_state_auth_unassoc = DOT11_ASSOCIATION_STATE.auth_unassoc;
pub const dot11_assoc_state_auth_assoc = DOT11_ASSOCIATION_STATE.auth_assoc;

pub const DOT11_ASSOCIATION_INFO_EX = extern struct {
    PeerMacAddress: [6]u8,
    BSSID: [6]u8,
    usCapabilityInformation: u16,
    usListenInterval: u16,
    ucPeerSupportedRates: [255]u8,
    usAssociationID: u16,
    dot11AssociationState: DOT11_ASSOCIATION_STATE,
    dot11PowerMode: DOT11_POWER_MODE,
    liAssociationUpTime: LARGE_INTEGER,
    ullNumOfTxPacketSuccesses: u64,
    ullNumOfTxPacketFailures: u64,
    ullNumOfRxPacketSuccesses: u64,
    ullNumOfRxPacketFailures: u64,
};

pub const DOT11_ASSOCIATION_INFO_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    dot11AssocInfo: [1]DOT11_ASSOCIATION_INFO_EX,
};

pub const DOT11_PHY_ID_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    dot11PhyId: [1]u32,
};

pub const DOT11_EXTSTA_CAPABILITY = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uScanSSIDListSize: u32,
    uDesiredBSSIDListSize: u32,
    uDesiredSSIDListSize: u32,
    uExcludedMacAddressListSize: u32,
    uPrivacyExemptionListSize: u32,
    uKeyMappingTableSize: u32,
    uDefaultKeyTableSize: u32,
    uWEPKeyValueMaxLength: u32,
    uPMKIDCacheSize: u32,
    uMaxNumPerSTADefaultKeyTables: u32,
};

pub const DOT11_DATA_RATE_MAPPING_ENTRY = extern struct {
    ucDataRateIndex: u8,
    ucDataRateFlag: u8,
    usDataRateValue: u16,
};

pub const DOT11_DATA_RATE_MAPPING_TABLE = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uDataRateMappingLength: u32,
    DataRateMappingEntries: [126]DOT11_DATA_RATE_MAPPING_ENTRY,
};

pub const DOT11_COUNTRY_OR_REGION_STRING_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    CountryOrRegionStrings: [3]u8,
};

pub const DOT11_PORT_STATE_NOTIFICATION = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerMac: [6]u8,
    bOpen: u8,
};

pub const DOT11_IBSS_PARAMS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    bJoinOnly: u8,
    uIEsOffset: u32,
    uIEsLength: u32,
};

pub const DOT11_QOS_PARAMS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    ucEnabledQoSProtocolFlags: u8,
};

pub const DOT11_ASSOCIATION_PARAMS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    BSSID: [6]u8,
    uAssocRequestIEsOffset: u32,
    uAssocRequestIEsLength: u32,
};

pub const DOT11_FRAGMENT_DESCRIPTOR = extern struct {
    uOffset: u32,
    uLength: u32,
};

pub const DOT11_PER_MSDU_COUNTERS = extern struct {
    uTransmittedFragmentCount: u32,
    uRetryCount: u32,
    uRTSSuccessCount: u32,
    uRTSFailureCount: u32,
    uACKFailureCount: u32,
};

pub const DOT11_HRDSSS_PHY_ATTRIBUTES = extern struct {
    bShortPreambleOptionImplemented: u8,
    bPBCCOptionImplemented: u8,
    bChannelAgilityPresent: u8,
    uHRCCAModeSupported: u32,
};

pub const DOT11_OFDM_PHY_ATTRIBUTES = extern struct {
    uFrequencyBandsSupported: u32,
};

pub const DOT11_ERP_PHY_ATTRIBUTES = extern struct {
    HRDSSSAttributes: DOT11_HRDSSS_PHY_ATTRIBUTES,
    bERPPBCCOptionImplemented: u8,
    bDSSSOFDMOptionImplemented: u8,
    bShortSlotTimeOptionImplemented: u8,
};

pub const DOT11_PHY_ATTRIBUTES = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PhyType: DOT11_PHY_TYPE,
    bHardwarePhyState: u8,
    bSoftwarePhyState: u8,
    bCFPollable: u8,
    uMPDUMaxLength: u32,
    TempType: DOT11_TEMP_TYPE,
    DiversitySupport: DOT11_DIVERSITY_SUPPORT,
    PhySpecificAttributes: _PhySpecificAttributes_e__Union,
    uNumberSupportedPowerLevels: u32,
    TxPowerLevels: [8]u32,
    uNumDataRateMappingEntries: u32,
    DataRateMappingEntries: [126]DOT11_DATA_RATE_MAPPING_ENTRY,
    SupportedDataRatesValue: DOT11_SUPPORTED_DATA_RATES_VALUE_V2,
    const _PhySpecificAttributes_e__Union = u32; // TODO: generate this nested type!
};

pub const DOT11_EXTSTA_ATTRIBUTES = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uScanSSIDListSize: u32,
    uDesiredBSSIDListSize: u32,
    uDesiredSSIDListSize: u32,
    uExcludedMacAddressListSize: u32,
    uPrivacyExemptionListSize: u32,
    uKeyMappingTableSize: u32,
    uDefaultKeyTableSize: u32,
    uWEPKeyValueMaxLength: u32,
    uPMKIDCacheSize: u32,
    uMaxNumPerSTADefaultKeyTables: u32,
    bStrictlyOrderedServiceClassImplemented: u8,
    ucSupportedQoSProtocolFlags: u8,
    bSafeModeImplemented: u8,
    uNumSupportedCountryOrRegionStrings: u32,
    pSupportedCountryOrRegionStrings: *u8,
    uInfraNumSupportedUcastAlgoPairs: u32,
    pInfraSupportedUcastAlgoPairs: *DOT11_AUTH_CIPHER_PAIR,
    uInfraNumSupportedMcastAlgoPairs: u32,
    pInfraSupportedMcastAlgoPairs: *DOT11_AUTH_CIPHER_PAIR,
    uAdhocNumSupportedUcastAlgoPairs: u32,
    pAdhocSupportedUcastAlgoPairs: *DOT11_AUTH_CIPHER_PAIR,
    uAdhocNumSupportedMcastAlgoPairs: u32,
    pAdhocSupportedMcastAlgoPairs: *DOT11_AUTH_CIPHER_PAIR,
    bAutoPowerSaveMode: u8,
    uMaxNetworkOffloadListSize: u32,
    bMFPCapable: u8,
    uInfraNumSupportedMcastMgmtAlgoPairs: u32,
    pInfraSupportedMcastMgmtAlgoPairs: *DOT11_AUTH_CIPHER_PAIR,
    bNeighborReportSupported: u8,
    bAPChannelReportSupported: u8,
    bActionFramesSupported: u8,
    bANQPQueryOffloadSupported: u8,
    bHESSIDConnectionSupported: u8,
};

pub const DOT11_RECV_EXTENSION_INFO = extern struct {
    uVersion: u32,
    pvReserved: *c_void,
    dot11PhyType: DOT11_PHY_TYPE,
    uChCenterFrequency: u32,
    lRSSI: i32,
    lRSSIMin: i32,
    lRSSIMax: i32,
    uRSSI: u32,
    ucPriority: u8,
    ucDataRate: u8,
    ucPeerMacAddress: [6]u8,
    dwExtendedStatus: u32,
    hWEPOffloadContext: HANDLE,
    hAuthOffloadContext: HANDLE,
    usWEPAppliedMask: u16,
    usWPAMSDUPriority: u16,
    dot11LowestIV48Counter: DOT11_IV48_COUNTER,
    usDot11LeftRWBitMap: u16,
    dot11HighestIV48Counter: DOT11_IV48_COUNTER,
    usDot11RightRWBitMap: u16,
    usNumberOfMPDUsReceived: u16,
    usNumberOfFragments: u16,
    pNdisPackets: [1]*c_void,
};

pub const DOT11_RECV_EXTENSION_INFO_V2 = extern struct {
    uVersion: u32,
    pvReserved: *c_void,
    dot11PhyType: DOT11_PHY_TYPE,
    uChCenterFrequency: u32,
    lRSSI: i32,
    uRSSI: u32,
    ucPriority: u8,
    ucDataRate: u8,
    ucPeerMacAddress: [6]u8,
    dwExtendedStatus: u32,
    hWEPOffloadContext: HANDLE,
    hAuthOffloadContext: HANDLE,
    usWEPAppliedMask: u16,
    usWPAMSDUPriority: u16,
    dot11LowestIV48Counter: DOT11_IV48_COUNTER,
    usDot11LeftRWBitMap: u16,
    dot11HighestIV48Counter: DOT11_IV48_COUNTER,
    usDot11RightRWBitMap: u16,
    usNumberOfMPDUsReceived: u16,
    usNumberOfFragments: u16,
    pNdisPackets: [1]*c_void,
};

pub const DOT11_STATUS_INDICATION = extern struct {
    uStatusType: u32,
    ndisStatus: i32,
};

pub const DOT11_MPDU_MAX_LENGTH_INDICATION = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uPhyId: u32,
    uMPDUMaxLength: u32,
};

pub const DOT11_ASSOCIATION_START_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    MacAddr: [6]u8,
    SSID: DOT11_SSID,
    uIHVDataOffset: u32,
    uIHVDataSize: u32,
};

pub const DOT11_ENCAP_ENTRY = extern struct {
    usEtherType: u16,
    usEncapType: u16,
};

pub const DOT11_DS_INFO = extern enum(i32) {
    CHANGED = 0,
    UNCHANGED = 1,
    UNKNOWN = 2,
};
pub const DOT11_DS_CHANGED = DOT11_DS_INFO.CHANGED;
pub const DOT11_DS_UNCHANGED = DOT11_DS_INFO.UNCHANGED;
pub const DOT11_DS_UNKNOWN = DOT11_DS_INFO.UNKNOWN;

pub const DOT11_ASSOCIATION_COMPLETION_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    MacAddr: [6]u8,
    uStatus: u32,
    bReAssocReq: u8,
    bReAssocResp: u8,
    uAssocReqOffset: u32,
    uAssocReqSize: u32,
    uAssocRespOffset: u32,
    uAssocRespSize: u32,
    uBeaconOffset: u32,
    uBeaconSize: u32,
    uIHVDataOffset: u32,
    uIHVDataSize: u32,
    AuthAlgo: DOT11_AUTH_ALGORITHM,
    UnicastCipher: DOT11_CIPHER_ALGORITHM,
    MulticastCipher: DOT11_CIPHER_ALGORITHM,
    uActivePhyListOffset: u32,
    uActivePhyListSize: u32,
    bFourAddressSupported: u8,
    bPortAuthorized: u8,
    ucActiveQoSProtocol: u8,
    DSInfo: DOT11_DS_INFO,
    uEncapTableOffset: u32,
    uEncapTableSize: u32,
    MulticastMgmtCipher: DOT11_CIPHER_ALGORITHM,
    uAssocComebackTime: u32,
};

pub const DOT11_CONNECTION_START_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    BSSType: DOT11_BSS_TYPE,
    AdhocBSSID: [6]u8,
    AdhocSSID: DOT11_SSID,
};

pub const DOT11_CONNECTION_COMPLETION_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uStatus: u32,
};

pub const DOT11_ROAMING_START_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    AdhocBSSID: [6]u8,
    AdhocSSID: DOT11_SSID,
    uRoamingReason: u32,
};

pub const DOT11_ROAMING_COMPLETION_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uStatus: u32,
};

pub const DOT11_DISASSOCIATION_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    MacAddr: [6]u8,
    uReason: u32,
    uIHVDataOffset: u32,
    uIHVDataSize: u32,
};

pub const DOT11_TKIPMIC_FAILURE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    bDefaultKeyFailure: u8,
    uKeyIndex: u32,
    PeerMac: [6]u8,
};

pub const DOT11_PMKID_CANDIDATE_LIST_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uCandidateListSize: u32,
    uCandidateListOffset: u32,
};

pub const DOT11_BSSID_CANDIDATE = extern struct {
    BSSID: [6]u8,
    uFlags: u32,
};

pub const DOT11_PHY_STATE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uPhyId: u32,
    bHardwarePhyState: u8,
    bSoftwarePhyState: u8,
};

pub const DOT11_LINK_QUALITY_ENTRY = extern struct {
    PeerMacAddr: [6]u8,
    ucLinkQuality: u8,
};

pub const DOT11_LINK_QUALITY_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uLinkQualityListSize: u32,
    uLinkQualityListOffset: u32,
};

pub const DOT11_EXTSTA_SEND_CONTEXT = extern struct {
    Header: NDIS_OBJECT_HEADER,
    usExemptionActionType: u16,
    uPhyId: u32,
    uDelayedSleepValue: u32,
    pvMediaSpecificInfo: *c_void,
    uSendFlags: u32,
};

pub const DOT11_EXTSTA_RECV_CONTEXT = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uReceiveFlags: u32,
    uPhyId: u32,
    uChCenterFrequency: u32,
    usNumberOfMPDUsReceived: u16,
    lRSSI: i32,
    ucDataRate: u8,
    uSizeMediaSpecificInfo: u32,
    pvMediaSpecificInfo: *c_void,
    ullTimestamp: u64,
};

pub const DOT11_EXTAP_ATTRIBUTES = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uScanSSIDListSize: u32,
    uDesiredSSIDListSize: u32,
    uPrivacyExemptionListSize: u32,
    uAssociationTableSize: u32,
    uDefaultKeyTableSize: u32,
    uWEPKeyValueMaxLength: u32,
    bStrictlyOrderedServiceClassImplemented: u8,
    uNumSupportedCountryOrRegionStrings: u32,
    pSupportedCountryOrRegionStrings: *u8,
    uInfraNumSupportedUcastAlgoPairs: u32,
    pInfraSupportedUcastAlgoPairs: *DOT11_AUTH_CIPHER_PAIR,
    uInfraNumSupportedMcastAlgoPairs: u32,
    pInfraSupportedMcastAlgoPairs: *DOT11_AUTH_CIPHER_PAIR,
};

pub const DOT11_INCOMING_ASSOC_STARTED_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerMacAddr: [6]u8,
};

pub const DOT11_INCOMING_ASSOC_REQUEST_RECEIVED_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerMacAddr: [6]u8,
    bReAssocReq: u8,
    uAssocReqOffset: u32,
    uAssocReqSize: u32,
};

pub const DOT11_INCOMING_ASSOC_COMPLETION_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerMacAddr: [6]u8,
    uStatus: u32,
    ucErrorSource: u8,
    bReAssocReq: u8,
    bReAssocResp: u8,
    uAssocReqOffset: u32,
    uAssocReqSize: u32,
    uAssocRespOffset: u32,
    uAssocRespSize: u32,
    AuthAlgo: DOT11_AUTH_ALGORITHM,
    UnicastCipher: DOT11_CIPHER_ALGORITHM,
    MulticastCipher: DOT11_CIPHER_ALGORITHM,
    uActivePhyListOffset: u32,
    uActivePhyListSize: u32,
    uBeaconOffset: u32,
    uBeaconSize: u32,
};

pub const DOT11_STOP_AP_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    ulReason: u32,
};

pub const DOT11_PHY_FREQUENCY_ADOPTED_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    ulPhyId: u32,
    Anonymous: _Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const DOT11_CAN_SUSTAIN_AP_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    ulReason: u32,
};

pub const DOT11_AVAILABLE_CHANNEL_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    uChannelNumber: [1]u32,
};

pub const DOT11_AVAILABLE_FREQUENCY_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    uFrequencyValue: [1]u32,
};

pub const DOT11_DISASSOCIATE_PEER_REQUEST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerMacAddr: [6]u8,
    usReason: u16,
};

pub const DOT11_INCOMING_ASSOC_DECISION = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerMacAddr: [6]u8,
    bAccept: u8,
    usReasonCode: u16,
    uAssocResponseIEsOffset: u32,
    uAssocResponseIEsLength: u32,
};

pub const DOT11_INCOMING_ASSOC_DECISION_V2 = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerMacAddr: [6]u8,
    bAccept: u8,
    usReasonCode: u16,
    uAssocResponseIEsOffset: u32,
    uAssocResponseIEsLength: u32,
    WFDStatus: u8,
};

pub const DOT11_ADDITIONAL_IE = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uBeaconIEsOffset: u32,
    uBeaconIEsLength: u32,
    uResponseIEsOffset: u32,
    uResponseIEsLength: u32,
};

pub const DOT11_PEER_STATISTICS = extern struct {
    ullDecryptSuccessCount: u64,
    ullDecryptFailureCount: u64,
    ullTxPacketSuccessCount: u64,
    ullTxPacketFailureCount: u64,
    ullRxPacketSuccessCount: u64,
    ullRxPacketFailureCount: u64,
};

pub const DOT11_PEER_INFO = extern struct {
    MacAddress: [6]u8,
    usCapabilityInformation: u16,
    AuthAlgo: DOT11_AUTH_ALGORITHM,
    UnicastCipherAlgo: DOT11_CIPHER_ALGORITHM,
    MulticastCipherAlgo: DOT11_CIPHER_ALGORITHM,
    bWpsEnabled: u8,
    usListenInterval: u16,
    ucSupportedRates: [255]u8,
    usAssociationID: u16,
    AssociationState: DOT11_ASSOCIATION_STATE,
    PowerMode: DOT11_POWER_MODE,
    liAssociationUpTime: LARGE_INTEGER,
    Statistics: DOT11_PEER_STATISTICS,
};

pub const DOT11_PEER_INFO_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    PeerInfo: [1]DOT11_PEER_INFO,
};

pub const DOT11_VWIFI_COMBINATION = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumInfrastructure: u32,
    uNumAdhoc: u32,
    uNumSoftAP: u32,
};

pub const DOT11_VWIFI_COMBINATION_V2 = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumInfrastructure: u32,
    uNumAdhoc: u32,
    uNumSoftAP: u32,
    uNumVirtualStation: u32,
};

pub const DOT11_VWIFI_COMBINATION_V3 = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumInfrastructure: u32,
    uNumAdhoc: u32,
    uNumSoftAP: u32,
    uNumVirtualStation: u32,
    uNumWFDGroup: u32,
};

pub const DOT11_VWIFI_ATTRIBUTES = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uTotalNumOfEntries: u32,
    Combinations: [1]DOT11_VWIFI_COMBINATION,
};

pub const DOT11_MAC_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uOpmodeMask: u32,
};

pub const DOT11_MAC_INFO = extern struct {
    uReserved: u32,
    uNdisPortNumber: u32,
    MacAddr: [6]u8,
};

pub const DOT11_WFD_ATTRIBUTES = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumConcurrentGORole: u32,
    uNumConcurrentClientRole: u32,
    WPSVersionsSupported: u32,
    bServiceDiscoverySupported: u8,
    bClientDiscoverabilitySupported: u8,
    bInfrastructureManagementSupported: u8,
    uMaxSecondaryDeviceTypeListSize: u32,
    DeviceAddress: [6]u8,
    uInterfaceAddressListCount: u32,
    pInterfaceAddressList: *u8,
    uNumSupportedCountryOrRegionStrings: u32,
    pSupportedCountryOrRegionStrings: *u8,
    uDiscoveryFilterListSize: u32,
    uGORoleClientTableSize: u32,
};

pub const DOT11_WFD_DEVICE_TYPE = extern struct {
    CategoryID: u16,
    SubCategoryID: u16,
    OUI: [4]u8,
};

pub const DOT11_WPS_DEVICE_NAME = extern struct {
    uDeviceNameLength: u32,
    ucDeviceName: [32]u8,
};

pub const DOT11_WFD_CONFIGURATION_TIMEOUT = extern struct {
    GOTimeout: u8,
    ClientTimeout: u8,
};

pub const DOT11_WFD_GROUP_ID = extern struct {
    DeviceAddress: [6]u8,
    SSID: DOT11_SSID,
};

pub const DOT11_WFD_GO_INTENT = extern struct {
    _bitfield: u8,
};

pub const DOT11_WFD_CHANNEL = extern struct {
    CountryRegionString: [3]u8,
    OperatingClass: u8,
    ChannelNumber: u8,
};

pub const DOT11_WPS_CONFIG_METHOD = extern enum(i32) {
    NULL = 0,
    DISPLAY = 8,
    NFC_TAG = 32,
    NFC_INTERFACE = 64,
    PUSHBUTTON = 128,
    KEYPAD = 256,
    WFDS_DEFAULT = 4096,
};
pub const DOT11_WPS_CONFIG_METHOD_NULL = DOT11_WPS_CONFIG_METHOD.NULL;
pub const DOT11_WPS_CONFIG_METHOD_DISPLAY = DOT11_WPS_CONFIG_METHOD.DISPLAY;
pub const DOT11_WPS_CONFIG_METHOD_NFC_TAG = DOT11_WPS_CONFIG_METHOD.NFC_TAG;
pub const DOT11_WPS_CONFIG_METHOD_NFC_INTERFACE = DOT11_WPS_CONFIG_METHOD.NFC_INTERFACE;
pub const DOT11_WPS_CONFIG_METHOD_PUSHBUTTON = DOT11_WPS_CONFIG_METHOD.PUSHBUTTON;
pub const DOT11_WPS_CONFIG_METHOD_KEYPAD = DOT11_WPS_CONFIG_METHOD.KEYPAD;
pub const DOT11_WPS_CONFIG_METHOD_WFDS_DEFAULT = DOT11_WPS_CONFIG_METHOD.WFDS_DEFAULT;

pub const DOT11_WPS_DEVICE_PASSWORD_ID = extern enum(i32) {
    DEFAULT = 0,
    USER_SPECIFIED = 1,
    MACHINE_SPECIFIED = 2,
    REKEY = 3,
    PUSHBUTTON = 4,
    REGISTRAR_SPECIFIED = 5,
    NFC_CONNECTION_HANDOVER = 7,
    WFD_SERVICES = 8,
    OOB_RANGE_MIN = 16,
    OOB_RANGE_MAX = 65535,
};
pub const DOT11_WPS_PASSWORD_ID_DEFAULT = DOT11_WPS_DEVICE_PASSWORD_ID.DEFAULT;
pub const DOT11_WPS_PASSWORD_ID_USER_SPECIFIED = DOT11_WPS_DEVICE_PASSWORD_ID.USER_SPECIFIED;
pub const DOT11_WPS_PASSWORD_ID_MACHINE_SPECIFIED = DOT11_WPS_DEVICE_PASSWORD_ID.MACHINE_SPECIFIED;
pub const DOT11_WPS_PASSWORD_ID_REKEY = DOT11_WPS_DEVICE_PASSWORD_ID.REKEY;
pub const DOT11_WPS_PASSWORD_ID_PUSHBUTTON = DOT11_WPS_DEVICE_PASSWORD_ID.PUSHBUTTON;
pub const DOT11_WPS_PASSWORD_ID_REGISTRAR_SPECIFIED = DOT11_WPS_DEVICE_PASSWORD_ID.REGISTRAR_SPECIFIED;
pub const DOT11_WPS_PASSWORD_ID_NFC_CONNECTION_HANDOVER = DOT11_WPS_DEVICE_PASSWORD_ID.NFC_CONNECTION_HANDOVER;
pub const DOT11_WPS_PASSWORD_ID_WFD_SERVICES = DOT11_WPS_DEVICE_PASSWORD_ID.WFD_SERVICES;
pub const DOT11_WPS_PASSWORD_ID_OOB_RANGE_MIN = DOT11_WPS_DEVICE_PASSWORD_ID.OOB_RANGE_MIN;
pub const DOT11_WPS_PASSWORD_ID_OOB_RANGE_MAX = DOT11_WPS_DEVICE_PASSWORD_ID.OOB_RANGE_MAX;

pub const WFDSVC_CONNECTION_CAPABILITY = extern struct {
    bNew: u8,
    bClient: u8,
    bGO: u8,
};

pub const DOT11_WFD_SERVICE_HASH_LIST = extern struct {
    ServiceHashCount: u16,
    ServiceHash: [6]u8,
};

pub const DOT11_WFD_ADVERTISEMENT_ID = extern struct {
    AdvertisementID: u32,
    ServiceAddress: [6]u8,
};

pub const DOT11_WFD_SESSION_ID = extern struct {
    SessionID: u32,
    SessionAddress: [6]u8,
};

pub const DOT11_WFD_ADVERTISED_SERVICE_DESCRIPTOR = extern struct {
    AdvertisementID: u32,
    ConfigMethods: u16,
    ServiceNameLength: u8,
    ServiceName: [255]u8,
};

pub const DOT11_WFD_ADVERTISED_SERVICE_LIST = extern struct {
    ServiceCount: u16,
    AdvertisedService: [1]DOT11_WFD_ADVERTISED_SERVICE_DESCRIPTOR,
};

pub const DOT11_WFD_DISCOVER_COMPLETE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    Status: i32,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    uListOffset: u32,
    uListLength: u32,
};

pub const DOT11_GO_NEGOTIATION_REQUEST_SEND_COMPLETE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerDeviceAddress: [6]u8,
    DialogToken: u8,
    Status: i32,
    uIEsOffset: u32,
    uIEsLength: u32,
};

pub const DOT11_RECEIVED_GO_NEGOTIATION_REQUEST_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerDeviceAddress: [6]u8,
    DialogToken: u8,
    RequestContext: *c_void,
    uIEsOffset: u32,
    uIEsLength: u32,
};

pub const DOT11_GO_NEGOTIATION_RESPONSE_SEND_COMPLETE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerDeviceAddress: [6]u8,
    DialogToken: u8,
    Status: i32,
    uIEsOffset: u32,
    uIEsLength: u32,
};

pub const DOT11_RECEIVED_GO_NEGOTIATION_RESPONSE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerDeviceAddress: [6]u8,
    DialogToken: u8,
    ResponseContext: *c_void,
    uIEsOffset: u32,
    uIEsLength: u32,
};

pub const DOT11_GO_NEGOTIATION_CONFIRMATION_SEND_COMPLETE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerDeviceAddress: [6]u8,
    DialogToken: u8,
    Status: i32,
    uIEsOffset: u32,
    uIEsLength: u32,
};

pub const DOT11_RECEIVED_GO_NEGOTIATION_CONFIRMATION_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerDeviceAddress: [6]u8,
    DialogToken: u8,
    uIEsOffset: u32,
    uIEsLength: u32,
};

pub const DOT11_INVITATION_REQUEST_SEND_COMPLETE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerDeviceAddress: [6]u8,
    ReceiverAddress: [6]u8,
    DialogToken: u8,
    Status: i32,
    uIEsOffset: u32,
    uIEsLength: u32,
};

pub const DOT11_RECEIVED_INVITATION_REQUEST_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    TransmitterDeviceAddress: [6]u8,
    BSSID: [6]u8,
    DialogToken: u8,
    RequestContext: *c_void,
    uIEsOffset: u32,
    uIEsLength: u32,
};

pub const DOT11_INVITATION_RESPONSE_SEND_COMPLETE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    ReceiverDeviceAddress: [6]u8,
    DialogToken: u8,
    Status: i32,
    uIEsOffset: u32,
    uIEsLength: u32,
};

pub const DOT11_RECEIVED_INVITATION_RESPONSE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    TransmitterDeviceAddress: [6]u8,
    BSSID: [6]u8,
    DialogToken: u8,
    uIEsOffset: u32,
    uIEsLength: u32,
};

pub const DOT11_PROVISION_DISCOVERY_REQUEST_SEND_COMPLETE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerDeviceAddress: [6]u8,
    ReceiverAddress: [6]u8,
    DialogToken: u8,
    Status: i32,
    uIEsOffset: u32,
    uIEsLength: u32,
};

pub const DOT11_RECEIVED_PROVISION_DISCOVERY_REQUEST_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    TransmitterDeviceAddress: [6]u8,
    BSSID: [6]u8,
    DialogToken: u8,
    RequestContext: *c_void,
    uIEsOffset: u32,
    uIEsLength: u32,
};

pub const DOT11_PROVISION_DISCOVERY_RESPONSE_SEND_COMPLETE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    ReceiverDeviceAddress: [6]u8,
    DialogToken: u8,
    Status: i32,
    uIEsOffset: u32,
    uIEsLength: u32,
};

pub const DOT11_RECEIVED_PROVISION_DISCOVERY_RESPONSE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    TransmitterDeviceAddress: [6]u8,
    BSSID: [6]u8,
    DialogToken: u8,
    uIEsOffset: u32,
    uIEsLength: u32,
};

pub const DOT11_ANQP_QUERY_RESULT = extern enum(i32) {
    success = 0,
    failure = 1,
    timed_out = 2,
    resources = 3,
    advertisement_protocol_not_supported_on_remote = 4,
    gas_protocol_failure = 5,
    advertisement_server_not_responding = 6,
    access_issues = 7,
};
pub const dot11_ANQP_query_result_success = DOT11_ANQP_QUERY_RESULT.success;
pub const dot11_ANQP_query_result_failure = DOT11_ANQP_QUERY_RESULT.failure;
pub const dot11_ANQP_query_result_timed_out = DOT11_ANQP_QUERY_RESULT.timed_out;
pub const dot11_ANQP_query_result_resources = DOT11_ANQP_QUERY_RESULT.resources;
pub const dot11_ANQP_query_result_advertisement_protocol_not_supported_on_remote = DOT11_ANQP_QUERY_RESULT.advertisement_protocol_not_supported_on_remote;
pub const dot11_ANQP_query_result_gas_protocol_failure = DOT11_ANQP_QUERY_RESULT.gas_protocol_failure;
pub const dot11_ANQP_query_result_advertisement_server_not_responding = DOT11_ANQP_QUERY_RESULT.advertisement_server_not_responding;
pub const dot11_ANQP_query_result_access_issues = DOT11_ANQP_QUERY_RESULT.access_issues;

pub const DOT11_ANQP_QUERY_COMPLETE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    Status: DOT11_ANQP_QUERY_RESULT,
    hContext: HANDLE,
    uResponseLength: u32,
};

pub const DOT11_WFD_DEVICE_CAPABILITY_CONFIG = extern struct {
    Header: NDIS_OBJECT_HEADER,
    bServiceDiscoveryEnabled: u8,
    bClientDiscoverabilityEnabled: u8,
    bConcurrentOperationSupported: u8,
    bInfrastructureManagementEnabled: u8,
    bDeviceLimitReached: u8,
    bInvitationProcedureEnabled: u8,
    WPSVersionsEnabled: u32,
};

pub const DOT11_WFD_GROUP_OWNER_CAPABILITY_CONFIG = extern struct {
    Header: NDIS_OBJECT_HEADER,
    bPersistentGroupEnabled: u8,
    bIntraBSSDistributionSupported: u8,
    bCrossConnectionSupported: u8,
    bPersistentReconnectSupported: u8,
    bGroupFormationEnabled: u8,
    uMaximumGroupLimit: u32,
};

pub const DOT11_WFD_GROUP_OWNER_CAPABILITY_CONFIG_V2 = extern struct {
    Header: NDIS_OBJECT_HEADER,
    bPersistentGroupEnabled: u8,
    bIntraBSSDistributionSupported: u8,
    bCrossConnectionSupported: u8,
    bPersistentReconnectSupported: u8,
    bGroupFormationEnabled: u8,
    uMaximumGroupLimit: u32,
    bEapolKeyIpAddressAllocationSupported: u8,
};

pub const DOT11_WFD_DEVICE_INFO = extern struct {
    Header: NDIS_OBJECT_HEADER,
    DeviceAddress: [6]u8,
    ConfigMethods: u16,
    PrimaryDeviceType: DOT11_WFD_DEVICE_TYPE,
    DeviceName: DOT11_WPS_DEVICE_NAME,
};

pub const DOT11_WFD_SECONDARY_DEVICE_TYPE_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    SecondaryDeviceTypes: [1]DOT11_WFD_DEVICE_TYPE,
};

pub const DOT11_WFD_DISCOVER_TYPE = extern enum(i32) {
    scan_only = 1,
    find_only = 2,
    auto = 3,
    scan_social_channels = 4,
    forced = -2147483648,
};
pub const dot11_wfd_discover_type_scan_only = DOT11_WFD_DISCOVER_TYPE.scan_only;
pub const dot11_wfd_discover_type_find_only = DOT11_WFD_DISCOVER_TYPE.find_only;
pub const dot11_wfd_discover_type_auto = DOT11_WFD_DISCOVER_TYPE.auto;
pub const dot11_wfd_discover_type_scan_social_channels = DOT11_WFD_DISCOVER_TYPE.scan_social_channels;
pub const dot11_wfd_discover_type_forced = DOT11_WFD_DISCOVER_TYPE.forced;

pub const DOT11_WFD_SCAN_TYPE = extern enum(i32) {
    active = 1,
    passive = 2,
    auto = 3,
};
pub const dot11_wfd_scan_type_active = DOT11_WFD_SCAN_TYPE.active;
pub const dot11_wfd_scan_type_passive = DOT11_WFD_SCAN_TYPE.passive;
pub const dot11_wfd_scan_type_auto = DOT11_WFD_SCAN_TYPE.auto;

pub const DOT11_WFD_DISCOVER_DEVICE_FILTER = extern struct {
    DeviceID: [6]u8,
    ucBitmask: u8,
    GroupSSID: DOT11_SSID,
};

pub const DOT11_WFD_DISCOVER_REQUEST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    DiscoverType: DOT11_WFD_DISCOVER_TYPE,
    ScanType: DOT11_WFD_SCAN_TYPE,
    uDiscoverTimeout: u32,
    uDeviceFilterListOffset: u32,
    uNumDeviceFilters: u32,
    uIEsOffset: u32,
    uIEsLength: u32,
    bForceScanLegacyNetworks: u8,
};

pub const DOT11_WFD_DEVICE_ENTRY = extern struct {
    uPhyId: u32,
    PhySpecificInfo: DOT11_BSS_ENTRY_PHY_SPECIFIC_INFO,
    dot11BSSID: [6]u8,
    dot11BSSType: DOT11_BSS_TYPE,
    TransmitterAddress: [6]u8,
    lRSSI: i32,
    uLinkQuality: u32,
    usBeaconPeriod: u16,
    ullTimestamp: u64,
    ullBeaconHostTimestamp: u64,
    ullProbeResponseHostTimestamp: u64,
    usCapabilityInformation: u16,
    uBeaconIEsOffset: u32,
    uBeaconIEsLength: u32,
    uProbeResponseIEsOffset: u32,
    uProbeResponseIEsLength: u32,
};

pub const DOT11_WFD_ADDITIONAL_IE = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uBeaconIEsOffset: u32,
    uBeaconIEsLength: u32,
    uProbeResponseIEsOffset: u32,
    uProbeResponseIEsLength: u32,
    uDefaultRequestIEsOffset: u32,
    uDefaultRequestIEsLength: u32,
};

pub const DOT11_SEND_GO_NEGOTIATION_REQUEST_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerDeviceAddress: [6]u8,
    DialogToken: u8,
    uSendTimeout: u32,
    GroupOwnerIntent: DOT11_WFD_GO_INTENT,
    MinimumConfigTimeout: DOT11_WFD_CONFIGURATION_TIMEOUT,
    IntendedInterfaceAddress: [6]u8,
    GroupCapability: u8,
    uIEsOffset: u32,
    uIEsLength: u32,
};

pub const DOT11_SEND_GO_NEGOTIATION_RESPONSE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerDeviceAddress: [6]u8,
    DialogToken: u8,
    RequestContext: *c_void,
    uSendTimeout: u32,
    Status: u8,
    GroupOwnerIntent: DOT11_WFD_GO_INTENT,
    MinimumConfigTimeout: DOT11_WFD_CONFIGURATION_TIMEOUT,
    IntendedInterfaceAddress: [6]u8,
    GroupCapability: u8,
    GroupID: DOT11_WFD_GROUP_ID,
    bUseGroupID: u8,
    uIEsOffset: u32,
    uIEsLength: u32,
};

pub const DOT11_SEND_GO_NEGOTIATION_CONFIRMATION_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerDeviceAddress: [6]u8,
    DialogToken: u8,
    ResponseContext: *c_void,
    uSendTimeout: u32,
    Status: u8,
    GroupCapability: u8,
    GroupID: DOT11_WFD_GROUP_ID,
    bUseGroupID: u8,
    uIEsOffset: u32,
    uIEsLength: u32,
};

pub const DOT11_WFD_INVITATION_FLAGS = extern struct {
    _bitfield: u8,
};

pub const DOT11_SEND_INVITATION_REQUEST_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    DialogToken: u8,
    PeerDeviceAddress: [6]u8,
    uSendTimeout: u32,
    MinimumConfigTimeout: DOT11_WFD_CONFIGURATION_TIMEOUT,
    InvitationFlags: DOT11_WFD_INVITATION_FLAGS,
    GroupBSSID: [6]u8,
    bUseGroupBSSID: u8,
    OperatingChannel: DOT11_WFD_CHANNEL,
    bUseSpecifiedOperatingChannel: u8,
    GroupID: DOT11_WFD_GROUP_ID,
    bLocalGO: u8,
    uIEsOffset: u32,
    uIEsLength: u32,
};

pub const DOT11_SEND_INVITATION_RESPONSE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    ReceiverDeviceAddress: [6]u8,
    DialogToken: u8,
    RequestContext: *c_void,
    uSendTimeout: u32,
    Status: u8,
    MinimumConfigTimeout: DOT11_WFD_CONFIGURATION_TIMEOUT,
    GroupBSSID: [6]u8,
    bUseGroupBSSID: u8,
    OperatingChannel: DOT11_WFD_CHANNEL,
    bUseSpecifiedOperatingChannel: u8,
    uIEsOffset: u32,
    uIEsLength: u32,
};

pub const DOT11_SEND_PROVISION_DISCOVERY_REQUEST_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    DialogToken: u8,
    PeerDeviceAddress: [6]u8,
    uSendTimeout: u32,
    GroupCapability: u8,
    GroupID: DOT11_WFD_GROUP_ID,
    bUseGroupID: u8,
    uIEsOffset: u32,
    uIEsLength: u32,
};

pub const DOT11_SEND_PROVISION_DISCOVERY_RESPONSE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    ReceiverDeviceAddress: [6]u8,
    DialogToken: u8,
    RequestContext: *c_void,
    uSendTimeout: u32,
    uIEsOffset: u32,
    uIEsLength: u32,
};

pub const DOT11_WFD_DEVICE_LISTEN_CHANNEL = extern struct {
    Header: NDIS_OBJECT_HEADER,
    ChannelNumber: u8,
};

pub const DOT11_WFD_GROUP_START_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    AdvertisedOperatingChannel: DOT11_WFD_CHANNEL,
};

pub const DOT11_WFD_GROUP_JOIN_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    GOOperatingChannel: DOT11_WFD_CHANNEL,
    GOConfigTime: u32,
    bInGroupFormation: u8,
    bWaitForWPSReady: u8,
};

pub const DOT11_POWER_MGMT_AUTO_MODE_ENABLED_INFO = extern struct {
    Header: NDIS_OBJECT_HEADER,
    bEnabled: u8,
};

pub const DOT11_POWER_MODE_REASON = extern enum(i32) {
    no_change = 0,
    noncompliant_AP = 1,
    legacy_WFD_device = 2,
    compliant_AP = 3,
    compliant_WFD_device = 4,
    others = 5,
};
pub const dot11_power_mode_reason_no_change = DOT11_POWER_MODE_REASON.no_change;
pub const dot11_power_mode_reason_noncompliant_AP = DOT11_POWER_MODE_REASON.noncompliant_AP;
pub const dot11_power_mode_reason_legacy_WFD_device = DOT11_POWER_MODE_REASON.legacy_WFD_device;
pub const dot11_power_mode_reason_compliant_AP = DOT11_POWER_MODE_REASON.compliant_AP;
pub const dot11_power_mode_reason_compliant_WFD_device = DOT11_POWER_MODE_REASON.compliant_WFD_device;
pub const dot11_power_mode_reason_others = DOT11_POWER_MODE_REASON.others;

pub const DOT11_POWER_MGMT_MODE_STATUS_INFO = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PowerSaveMode: DOT11_POWER_MODE,
    uPowerSaveLevel: u32,
    Reason: DOT11_POWER_MODE_REASON,
};

pub const DOT11_CHANNEL_HINT = extern struct {
    Dot11PhyType: DOT11_PHY_TYPE,
    uChannelNumber: u32,
};

pub const DOT11_OFFLOAD_NETWORK = extern struct {
    Ssid: DOT11_SSID,
    UnicastCipher: DOT11_CIPHER_ALGORITHM,
    AuthAlgo: DOT11_AUTH_ALGORITHM,
    Dot11ChannelHints: [4]DOT11_CHANNEL_HINT,
};

pub const DOT11_OFFLOAD_NETWORK_LIST_INFO = extern struct {
    Header: NDIS_OBJECT_HEADER,
    ulFlags: u32,
    FastScanPeriod: u32,
    FastScanIterations: u32,
    SlowScanPeriod: u32,
    uNumOfEntries: u32,
    offloadNetworkList: [1]DOT11_OFFLOAD_NETWORK,
};

pub const DOT11_OFFLOAD_NETWORK_STATUS_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    Status: i32,
};

pub const DOT11_MANUFACTURING_TEST_TYPE = extern enum(i32) {
    unknown = 0,
    self_start = 1,
    self_query_result = 2,
    rx = 3,
    tx = 4,
    query_adc = 5,
    set_data = 6,
    query_data = 7,
    sleep = 8,
    awake = 9,
    IHV_start = -2147483648,
    IHV_end = -1,
};
pub const dot11_manufacturing_test_unknown = DOT11_MANUFACTURING_TEST_TYPE.unknown;
pub const dot11_manufacturing_test_self_start = DOT11_MANUFACTURING_TEST_TYPE.self_start;
pub const dot11_manufacturing_test_self_query_result = DOT11_MANUFACTURING_TEST_TYPE.self_query_result;
pub const dot11_manufacturing_test_rx = DOT11_MANUFACTURING_TEST_TYPE.rx;
pub const dot11_manufacturing_test_tx = DOT11_MANUFACTURING_TEST_TYPE.tx;
pub const dot11_manufacturing_test_query_adc = DOT11_MANUFACTURING_TEST_TYPE.query_adc;
pub const dot11_manufacturing_test_set_data = DOT11_MANUFACTURING_TEST_TYPE.set_data;
pub const dot11_manufacturing_test_query_data = DOT11_MANUFACTURING_TEST_TYPE.query_data;
pub const dot11_manufacturing_test_sleep = DOT11_MANUFACTURING_TEST_TYPE.sleep;
pub const dot11_manufacturing_test_awake = DOT11_MANUFACTURING_TEST_TYPE.awake;
pub const dot11_manufacturing_test_IHV_start = DOT11_MANUFACTURING_TEST_TYPE.IHV_start;
pub const dot11_manufacturing_test_IHV_end = DOT11_MANUFACTURING_TEST_TYPE.IHV_end;

pub const DOT11_MANUFACTURING_TEST = extern struct {
    dot11ManufacturingTestType: DOT11_MANUFACTURING_TEST_TYPE,
    uBufferLength: u32,
    ucBuffer: [1]u8,
};

pub const DOT11_MANUFACTURING_SELF_TEST_TYPE = extern enum(i32) {
    INTERFACE = 1,
    RF_INTERFACE = 2,
    BT_COEXISTENCE = 3,
};
pub const DOT11_MANUFACTURING_SELF_TEST_TYPE_INTERFACE = DOT11_MANUFACTURING_SELF_TEST_TYPE.INTERFACE;
pub const DOT11_MANUFACTURING_SELF_TEST_TYPE_RF_INTERFACE = DOT11_MANUFACTURING_SELF_TEST_TYPE.RF_INTERFACE;
pub const DOT11_MANUFACTURING_SELF_TEST_TYPE_BT_COEXISTENCE = DOT11_MANUFACTURING_SELF_TEST_TYPE.BT_COEXISTENCE;

pub const DOT11_MANUFACTURING_SELF_TEST_SET_PARAMS = extern struct {
    SelfTestType: DOT11_MANUFACTURING_SELF_TEST_TYPE,
    uTestID: u32,
    uPinBitMask: u32,
    pvContext: *c_void,
    uBufferLength: u32,
    ucBufferIn: [1]u8,
};

pub const DOT11_MANUFACTURING_SELF_TEST_QUERY_RESULTS = extern struct {
    SelfTestType: DOT11_MANUFACTURING_SELF_TEST_TYPE,
    uTestID: u32,
    bResult: u8,
    uPinFailedBitMask: u32,
    pvContext: *c_void,
    uBytesWrittenOut: u32,
    ucBufferOut: [1]u8,
};

pub const DOT11_BAND = extern enum(i32) {
    @"2p4g" = 1,
    @"4p9g" = 2,
    @"5g" = 3,
};
pub const dot11_band_2p4g = DOT11_BAND.@"2p4g";
pub const dot11_band_4p9g = DOT11_BAND.@"4p9g";
pub const dot11_band_5g = DOT11_BAND.@"5g";

pub const DOT11_MANUFACTURING_FUNCTIONAL_TEST_RX = extern struct {
    bEnabled: u8,
    Dot11Band: DOT11_BAND,
    uChannel: u32,
    PowerLevel: i32,
};

pub const DOT11_MANUFACTURING_FUNCTIONAL_TEST_TX = extern struct {
    bEnable: u8,
    bOpenLoop: u8,
    Dot11Band: DOT11_BAND,
    uChannel: u32,
    uSetPowerLevel: u32,
    ADCPowerLevel: i32,
};

pub const DOT11_MANUFACTURING_FUNCTIONAL_TEST_QUERY_ADC = extern struct {
    Dot11Band: DOT11_BAND,
    uChannel: u32,
    ADCPowerLevel: i32,
};

pub const DOT11_MANUFACTURING_TEST_SET_DATA = extern struct {
    uKey: u32,
    uOffset: u32,
    uBufferLength: u32,
    ucBufferIn: [1]u8,
};

pub const DOT11_MANUFACTURING_TEST_QUERY_DATA = extern struct {
    uKey: u32,
    uOffset: u32,
    uBufferLength: u32,
    uBytesRead: u32,
    ucBufferOut: [1]u8,
};

pub const DOT11_MANUFACTURING_TEST_SLEEP = extern struct {
    uSleepTime: u32,
    pvContext: *c_void,
};

pub const DOT11_MANUFACTURING_CALLBACK_TYPE = extern enum(i32) {
    unknown = 0,
    self_test_complete = 1,
    sleep_complete = 2,
    IHV_start = -2147483648,
    IHV_end = -1,
};
pub const dot11_manufacturing_callback_unknown = DOT11_MANUFACTURING_CALLBACK_TYPE.unknown;
pub const dot11_manufacturing_callback_self_test_complete = DOT11_MANUFACTURING_CALLBACK_TYPE.self_test_complete;
pub const dot11_manufacturing_callback_sleep_complete = DOT11_MANUFACTURING_CALLBACK_TYPE.sleep_complete;
pub const dot11_manufacturing_callback_IHV_start = DOT11_MANUFACTURING_CALLBACK_TYPE.IHV_start;
pub const dot11_manufacturing_callback_IHV_end = DOT11_MANUFACTURING_CALLBACK_TYPE.IHV_end;

pub const DOT11_MANUFACTURING_CALLBACK_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    dot11ManufacturingCallbackType: DOT11_MANUFACTURING_CALLBACK_TYPE,
    uStatus: u32,
    pvContext: *c_void,
};

pub const WLAN_PROFILE_INFO = extern struct {
    strProfileName: [256]u16,
    dwFlags: u32,
};

pub const DOT11_NETWORK = extern struct {
    dot11Ssid: DOT11_SSID,
    dot11BssType: DOT11_BSS_TYPE,
};

pub const WLAN_RAW_DATA = extern struct {
    dwDataSize: u32,
    DataBlob: [1]u8,
};

pub const WLAN_RAW_DATA_LIST = extern struct {
    dwTotalSize: u32,
    dwNumberOfItems: u32,
    DataList: [1]_Anonymous_e__Struct,
    const _Anonymous_e__Struct = u32; // TODO: generate this nested type!
};

pub const WLAN_CONNECTION_MODE = extern enum(i32) {
    profile = 0,
    temporary_profile = 1,
    discovery_secure = 2,
    discovery_unsecure = 3,
    auto = 4,
    invalid = 5,
};
pub const wlan_connection_mode_profile = WLAN_CONNECTION_MODE.profile;
pub const wlan_connection_mode_temporary_profile = WLAN_CONNECTION_MODE.temporary_profile;
pub const wlan_connection_mode_discovery_secure = WLAN_CONNECTION_MODE.discovery_secure;
pub const wlan_connection_mode_discovery_unsecure = WLAN_CONNECTION_MODE.discovery_unsecure;
pub const wlan_connection_mode_auto = WLAN_CONNECTION_MODE.auto;
pub const wlan_connection_mode_invalid = WLAN_CONNECTION_MODE.invalid;

pub const WLAN_RATE_SET = extern struct {
    uRateSetLength: u32,
    usRateSet: [126]u16,
};

pub const WLAN_AVAILABLE_NETWORK = extern struct {
    strProfileName: [256]u16,
    dot11Ssid: DOT11_SSID,
    dot11BssType: DOT11_BSS_TYPE,
    uNumberOfBssids: u32,
    bNetworkConnectable: BOOL,
    wlanNotConnectableReason: u32,
    uNumberOfPhyTypes: u32,
    dot11PhyTypes: [8]DOT11_PHY_TYPE,
    bMorePhyTypes: BOOL,
    wlanSignalQuality: u32,
    bSecurityEnabled: BOOL,
    dot11DefaultAuthAlgorithm: DOT11_AUTH_ALGORITHM,
    dot11DefaultCipherAlgorithm: DOT11_CIPHER_ALGORITHM,
    dwFlags: u32,
    dwReserved: u32,
};

pub const WLAN_AVAILABLE_NETWORK_V2 = extern struct {
    strProfileName: [256]u16,
    dot11Ssid: DOT11_SSID,
    dot11BssType: DOT11_BSS_TYPE,
    uNumberOfBssids: u32,
    bNetworkConnectable: BOOL,
    wlanNotConnectableReason: u32,
    uNumberOfPhyTypes: u32,
    dot11PhyTypes: [8]DOT11_PHY_TYPE,
    bMorePhyTypes: BOOL,
    wlanSignalQuality: u32,
    bSecurityEnabled: BOOL,
    dot11DefaultAuthAlgorithm: DOT11_AUTH_ALGORITHM,
    dot11DefaultCipherAlgorithm: DOT11_CIPHER_ALGORITHM,
    dwFlags: u32,
    AccessNetworkOptions: DOT11_ACCESSNETWORKOPTIONS,
    dot11HESSID: [6]u8,
    VenueInfo: DOT11_VENUEINFO,
    dwReserved: u32,
};

pub const WLAN_BSS_ENTRY = extern struct {
    dot11Ssid: DOT11_SSID,
    uPhyId: u32,
    dot11Bssid: [6]u8,
    dot11BssType: DOT11_BSS_TYPE,
    dot11BssPhyType: DOT11_PHY_TYPE,
    lRssi: i32,
    uLinkQuality: u32,
    bInRegDomain: u8,
    usBeaconPeriod: u16,
    ullTimestamp: u64,
    ullHostTimestamp: u64,
    usCapabilityInformation: u16,
    ulChCenterFrequency: u32,
    wlanRateSet: WLAN_RATE_SET,
    ulIeOffset: u32,
    ulIeSize: u32,
};

pub const WLAN_BSS_LIST = extern struct {
    dwTotalSize: u32,
    dwNumberOfItems: u32,
    wlanBssEntries: [1]WLAN_BSS_ENTRY,
};

pub const WLAN_INTERFACE_STATE = extern enum(i32) {
    not_ready = 0,
    connected = 1,
    ad_hoc_network_formed = 2,
    disconnecting = 3,
    disconnected = 4,
    associating = 5,
    discovering = 6,
    authenticating = 7,
};
pub const wlan_interface_state_not_ready = WLAN_INTERFACE_STATE.not_ready;
pub const wlan_interface_state_connected = WLAN_INTERFACE_STATE.connected;
pub const wlan_interface_state_ad_hoc_network_formed = WLAN_INTERFACE_STATE.ad_hoc_network_formed;
pub const wlan_interface_state_disconnecting = WLAN_INTERFACE_STATE.disconnecting;
pub const wlan_interface_state_disconnected = WLAN_INTERFACE_STATE.disconnected;
pub const wlan_interface_state_associating = WLAN_INTERFACE_STATE.associating;
pub const wlan_interface_state_discovering = WLAN_INTERFACE_STATE.discovering;
pub const wlan_interface_state_authenticating = WLAN_INTERFACE_STATE.authenticating;

pub const WLAN_ADHOC_NETWORK_STATE = extern enum(i32) {
    formed = 0,
    connected = 1,
};
pub const wlan_adhoc_network_state_formed = WLAN_ADHOC_NETWORK_STATE.formed;
pub const wlan_adhoc_network_state_connected = WLAN_ADHOC_NETWORK_STATE.connected;

pub const WLAN_INTERFACE_INFO = extern struct {
    InterfaceGuid: Guid,
    strInterfaceDescription: [256]u16,
    isState: WLAN_INTERFACE_STATE,
};

pub const WLAN_ASSOCIATION_ATTRIBUTES = extern struct {
    dot11Ssid: DOT11_SSID,
    dot11BssType: DOT11_BSS_TYPE,
    dot11Bssid: [6]u8,
    dot11PhyType: DOT11_PHY_TYPE,
    uDot11PhyIndex: u32,
    wlanSignalQuality: u32,
    ulRxRate: u32,
    ulTxRate: u32,
};

pub const WLAN_SECURITY_ATTRIBUTES = extern struct {
    bSecurityEnabled: BOOL,
    bOneXEnabled: BOOL,
    dot11AuthAlgorithm: DOT11_AUTH_ALGORITHM,
    dot11CipherAlgorithm: DOT11_CIPHER_ALGORITHM,
};

pub const WLAN_CONNECTION_ATTRIBUTES = extern struct {
    isState: WLAN_INTERFACE_STATE,
    wlanConnectionMode: WLAN_CONNECTION_MODE,
    strProfileName: [256]u16,
    wlanAssociationAttributes: WLAN_ASSOCIATION_ATTRIBUTES,
    wlanSecurityAttributes: WLAN_SECURITY_ATTRIBUTES,
};

pub const DOT11_RADIO_STATE = extern enum(i32) {
    unknown = 0,
    on = 1,
    off = 2,
};
pub const dot11_radio_state_unknown = DOT11_RADIO_STATE.unknown;
pub const dot11_radio_state_on = DOT11_RADIO_STATE.on;
pub const dot11_radio_state_off = DOT11_RADIO_STATE.off;

pub const WLAN_PHY_RADIO_STATE = extern struct {
    dwPhyIndex: u32,
    dot11SoftwareRadioState: DOT11_RADIO_STATE,
    dot11HardwareRadioState: DOT11_RADIO_STATE,
};

pub const WLAN_RADIO_STATE = extern struct {
    dwNumberOfPhys: u32,
    PhyRadioState: [64]WLAN_PHY_RADIO_STATE,
};

pub const WLAN_OPERATIONAL_STATE = extern enum(i32) {
    unknown = 0,
    off = 1,
    on = 2,
    going_off = 3,
    going_on = 4,
};
pub const wlan_operational_state_unknown = WLAN_OPERATIONAL_STATE.unknown;
pub const wlan_operational_state_off = WLAN_OPERATIONAL_STATE.off;
pub const wlan_operational_state_on = WLAN_OPERATIONAL_STATE.on;
pub const wlan_operational_state_going_off = WLAN_OPERATIONAL_STATE.going_off;
pub const wlan_operational_state_going_on = WLAN_OPERATIONAL_STATE.going_on;

pub const WLAN_INTERFACE_TYPE = extern enum(i32) {
    emulated_802_11 = 0,
    native_802_11 = 1,
    invalid = 2,
};
pub const wlan_interface_type_emulated_802_11 = WLAN_INTERFACE_TYPE.emulated_802_11;
pub const wlan_interface_type_native_802_11 = WLAN_INTERFACE_TYPE.native_802_11;
pub const wlan_interface_type_invalid = WLAN_INTERFACE_TYPE.invalid;

pub const WLAN_INTERFACE_CAPABILITY = extern struct {
    interfaceType: WLAN_INTERFACE_TYPE,
    bDot11DSupported: BOOL,
    dwMaxDesiredSsidListSize: u32,
    dwMaxDesiredBssidListSize: u32,
    dwNumberOfSupportedPhys: u32,
    dot11PhyTypes: [64]DOT11_PHY_TYPE,
};

pub const WLAN_AUTH_CIPHER_PAIR_LIST = extern struct {
    dwNumberOfItems: u32,
    pAuthCipherPairList: [1]DOT11_AUTH_CIPHER_PAIR,
};

pub const WLAN_COUNTRY_OR_REGION_STRING_LIST = extern struct {
    dwNumberOfItems: u32,
    pCountryOrRegionStringList: [3]u8,
};

pub const WLAN_PROFILE_INFO_LIST = extern struct {
    dwNumberOfItems: u32,
    dwIndex: u32,
    ProfileInfo: [1]WLAN_PROFILE_INFO,
};

pub const WLAN_AVAILABLE_NETWORK_LIST = extern struct {
    dwNumberOfItems: u32,
    dwIndex: u32,
    Network: [1]WLAN_AVAILABLE_NETWORK,
};

pub const WLAN_AVAILABLE_NETWORK_LIST_V2 = extern struct {
    dwNumberOfItems: u32,
    dwIndex: u32,
    Network: [1]WLAN_AVAILABLE_NETWORK_V2,
};

pub const WLAN_INTERFACE_INFO_LIST = extern struct {
    dwNumberOfItems: u32,
    dwIndex: u32,
    InterfaceInfo: [1]WLAN_INTERFACE_INFO,
};

pub const DOT11_NETWORK_LIST = extern struct {
    dwNumberOfItems: u32,
    dwIndex: u32,
    Network: [1]DOT11_NETWORK,
};

pub const WLAN_POWER_SETTING = extern enum(i32) {
    no_saving = 0,
    low_saving = 1,
    medium_saving = 2,
    maximum_saving = 3,
    invalid = 4,
};
pub const wlan_power_setting_no_saving = WLAN_POWER_SETTING.no_saving;
pub const wlan_power_setting_low_saving = WLAN_POWER_SETTING.low_saving;
pub const wlan_power_setting_medium_saving = WLAN_POWER_SETTING.medium_saving;
pub const wlan_power_setting_maximum_saving = WLAN_POWER_SETTING.maximum_saving;
pub const wlan_power_setting_invalid = WLAN_POWER_SETTING.invalid;

pub const WLAN_CONNECTION_PARAMETERS = extern struct {
    wlanConnectionMode: WLAN_CONNECTION_MODE,
    strProfile: [*:0]const u16,
    pDot11Ssid: *DOT11_SSID,
    pDesiredBssidList: *DOT11_BSSID_LIST,
    dot11BssType: DOT11_BSS_TYPE,
    dwFlags: u32,
};

pub const WLAN_CONNECTION_PARAMETERS_V2 = extern struct {
    wlanConnectionMode: WLAN_CONNECTION_MODE,
    strProfile: [*:0]const u16,
    pDot11Ssid: *DOT11_SSID,
    pDot11Hessid: *u8,
    pDesiredBssidList: *DOT11_BSSID_LIST,
    dot11BssType: DOT11_BSS_TYPE,
    dwFlags: u32,
    pDot11AccessNetworkOptions: *DOT11_ACCESSNETWORKOPTIONS,
};

pub const WLAN_MSM_NOTIFICATION_DATA = extern struct {
    wlanConnectionMode: WLAN_CONNECTION_MODE,
    strProfileName: [256]u16,
    dot11Ssid: DOT11_SSID,
    dot11BssType: DOT11_BSS_TYPE,
    dot11MacAddr: [6]u8,
    bSecurityEnabled: BOOL,
    bFirstPeer: BOOL,
    bLastPeer: BOOL,
    wlanReasonCode: u32,
};

pub const WLAN_CONNECTION_NOTIFICATION_DATA = extern struct {
    wlanConnectionMode: WLAN_CONNECTION_MODE,
    strProfileName: [256]u16,
    dot11Ssid: DOT11_SSID,
    dot11BssType: DOT11_BSS_TYPE,
    bSecurityEnabled: BOOL,
    wlanReasonCode: u32,
    dwFlags: WLAN_CONNECTION_NOTIFICATION_FLAGS,
    strProfileXml: [1]u16,
};

pub const WLAN_DEVICE_SERVICE_NOTIFICATION_DATA = extern struct {
    DeviceService: Guid,
    dwOpCode: u32,
    dwDataSize: u32,
    DataBlob: [1]u8,
};

pub const WLAN_NOTIFICATION_ACM = extern enum(i32) {
    start = 0,
    autoconf_enabled = 1,
    autoconf_disabled = 2,
    background_scan_enabled = 3,
    background_scan_disabled = 4,
    bss_type_change = 5,
    power_setting_change = 6,
    scan_complete = 7,
    scan_fail = 8,
    connection_start = 9,
    connection_complete = 10,
    connection_attempt_fail = 11,
    filter_list_change = 12,
    interface_arrival = 13,
    interface_removal = 14,
    profile_change = 15,
    profile_name_change = 16,
    profiles_exhausted = 17,
    network_not_available = 18,
    network_available = 19,
    disconnecting = 20,
    disconnected = 21,
    adhoc_network_state_change = 22,
    profile_unblocked = 23,
    screen_power_change = 24,
    profile_blocked = 25,
    scan_list_refresh = 26,
    operational_state_change = 27,
    end = 28,
};
pub const wlan_notification_acm_start = WLAN_NOTIFICATION_ACM.start;
pub const wlan_notification_acm_autoconf_enabled = WLAN_NOTIFICATION_ACM.autoconf_enabled;
pub const wlan_notification_acm_autoconf_disabled = WLAN_NOTIFICATION_ACM.autoconf_disabled;
pub const wlan_notification_acm_background_scan_enabled = WLAN_NOTIFICATION_ACM.background_scan_enabled;
pub const wlan_notification_acm_background_scan_disabled = WLAN_NOTIFICATION_ACM.background_scan_disabled;
pub const wlan_notification_acm_bss_type_change = WLAN_NOTIFICATION_ACM.bss_type_change;
pub const wlan_notification_acm_power_setting_change = WLAN_NOTIFICATION_ACM.power_setting_change;
pub const wlan_notification_acm_scan_complete = WLAN_NOTIFICATION_ACM.scan_complete;
pub const wlan_notification_acm_scan_fail = WLAN_NOTIFICATION_ACM.scan_fail;
pub const wlan_notification_acm_connection_start = WLAN_NOTIFICATION_ACM.connection_start;
pub const wlan_notification_acm_connection_complete = WLAN_NOTIFICATION_ACM.connection_complete;
pub const wlan_notification_acm_connection_attempt_fail = WLAN_NOTIFICATION_ACM.connection_attempt_fail;
pub const wlan_notification_acm_filter_list_change = WLAN_NOTIFICATION_ACM.filter_list_change;
pub const wlan_notification_acm_interface_arrival = WLAN_NOTIFICATION_ACM.interface_arrival;
pub const wlan_notification_acm_interface_removal = WLAN_NOTIFICATION_ACM.interface_removal;
pub const wlan_notification_acm_profile_change = WLAN_NOTIFICATION_ACM.profile_change;
pub const wlan_notification_acm_profile_name_change = WLAN_NOTIFICATION_ACM.profile_name_change;
pub const wlan_notification_acm_profiles_exhausted = WLAN_NOTIFICATION_ACM.profiles_exhausted;
pub const wlan_notification_acm_network_not_available = WLAN_NOTIFICATION_ACM.network_not_available;
pub const wlan_notification_acm_network_available = WLAN_NOTIFICATION_ACM.network_available;
pub const wlan_notification_acm_disconnecting = WLAN_NOTIFICATION_ACM.disconnecting;
pub const wlan_notification_acm_disconnected = WLAN_NOTIFICATION_ACM.disconnected;
pub const wlan_notification_acm_adhoc_network_state_change = WLAN_NOTIFICATION_ACM.adhoc_network_state_change;
pub const wlan_notification_acm_profile_unblocked = WLAN_NOTIFICATION_ACM.profile_unblocked;
pub const wlan_notification_acm_screen_power_change = WLAN_NOTIFICATION_ACM.screen_power_change;
pub const wlan_notification_acm_profile_blocked = WLAN_NOTIFICATION_ACM.profile_blocked;
pub const wlan_notification_acm_scan_list_refresh = WLAN_NOTIFICATION_ACM.scan_list_refresh;
pub const wlan_notification_acm_operational_state_change = WLAN_NOTIFICATION_ACM.operational_state_change;
pub const wlan_notification_acm_end = WLAN_NOTIFICATION_ACM.end;

pub const WLAN_NOTIFICATION_MSM = extern enum(i32) {
    start = 0,
    associating = 1,
    associated = 2,
    authenticating = 3,
    connected = 4,
    roaming_start = 5,
    roaming_end = 6,
    radio_state_change = 7,
    signal_quality_change = 8,
    disassociating = 9,
    disconnected = 10,
    peer_join = 11,
    peer_leave = 12,
    adapter_removal = 13,
    adapter_operation_mode_change = 14,
    link_degraded = 15,
    link_improved = 16,
    end = 17,
};
pub const wlan_notification_msm_start = WLAN_NOTIFICATION_MSM.start;
pub const wlan_notification_msm_associating = WLAN_NOTIFICATION_MSM.associating;
pub const wlan_notification_msm_associated = WLAN_NOTIFICATION_MSM.associated;
pub const wlan_notification_msm_authenticating = WLAN_NOTIFICATION_MSM.authenticating;
pub const wlan_notification_msm_connected = WLAN_NOTIFICATION_MSM.connected;
pub const wlan_notification_msm_roaming_start = WLAN_NOTIFICATION_MSM.roaming_start;
pub const wlan_notification_msm_roaming_end = WLAN_NOTIFICATION_MSM.roaming_end;
pub const wlan_notification_msm_radio_state_change = WLAN_NOTIFICATION_MSM.radio_state_change;
pub const wlan_notification_msm_signal_quality_change = WLAN_NOTIFICATION_MSM.signal_quality_change;
pub const wlan_notification_msm_disassociating = WLAN_NOTIFICATION_MSM.disassociating;
pub const wlan_notification_msm_disconnected = WLAN_NOTIFICATION_MSM.disconnected;
pub const wlan_notification_msm_peer_join = WLAN_NOTIFICATION_MSM.peer_join;
pub const wlan_notification_msm_peer_leave = WLAN_NOTIFICATION_MSM.peer_leave;
pub const wlan_notification_msm_adapter_removal = WLAN_NOTIFICATION_MSM.adapter_removal;
pub const wlan_notification_msm_adapter_operation_mode_change = WLAN_NOTIFICATION_MSM.adapter_operation_mode_change;
pub const wlan_notification_msm_link_degraded = WLAN_NOTIFICATION_MSM.link_degraded;
pub const wlan_notification_msm_link_improved = WLAN_NOTIFICATION_MSM.link_improved;
pub const wlan_notification_msm_end = WLAN_NOTIFICATION_MSM.end;

pub const WLAN_NOTIFICATION_SECURITY = extern enum(i32) {
    start = 0,
    end = 1,
};
pub const wlan_notification_security_start = WLAN_NOTIFICATION_SECURITY.start;
pub const wlan_notification_security_end = WLAN_NOTIFICATION_SECURITY.end;

pub const WLAN_NOTIFICATION_CALLBACK = fn(
    param0: *L2_NOTIFICATION_DATA,
    param1: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const WLAN_OPCODE_VALUE_TYPE = extern enum(i32) {
    query_only = 0,
    set_by_group_policy = 1,
    set_by_user = 2,
    invalid = 3,
};
pub const wlan_opcode_value_type_query_only = WLAN_OPCODE_VALUE_TYPE.query_only;
pub const wlan_opcode_value_type_set_by_group_policy = WLAN_OPCODE_VALUE_TYPE.set_by_group_policy;
pub const wlan_opcode_value_type_set_by_user = WLAN_OPCODE_VALUE_TYPE.set_by_user;
pub const wlan_opcode_value_type_invalid = WLAN_OPCODE_VALUE_TYPE.invalid;

pub const WLAN_INTF_OPCODE = extern enum(i32) {
    autoconf_start = 0,
    autoconf_enabled = 1,
    background_scan_enabled = 2,
    media_streaming_mode = 3,
    radio_state = 4,
    bss_type = 5,
    interface_state = 6,
    current_connection = 7,
    channel_number = 8,
    supported_infrastructure_auth_cipher_pairs = 9,
    supported_adhoc_auth_cipher_pairs = 10,
    supported_country_or_region_string_list = 11,
    current_operation_mode = 12,
    supported_safe_mode = 13,
    certified_safe_mode = 14,
    hosted_network_capable = 15,
    management_frame_protection_capable = 16,
    autoconf_end = 268435455,
    msm_start = 268435712,
    statistics = 268435713,
    rssi = 268435714,
    msm_end = 536870911,
    security_start = 536936448,
    security_end = 805306367,
    ihv_start = 805306368,
    ihv_end = 1073741823,
};
pub const wlan_intf_opcode_autoconf_start = WLAN_INTF_OPCODE.autoconf_start;
pub const wlan_intf_opcode_autoconf_enabled = WLAN_INTF_OPCODE.autoconf_enabled;
pub const wlan_intf_opcode_background_scan_enabled = WLAN_INTF_OPCODE.background_scan_enabled;
pub const wlan_intf_opcode_media_streaming_mode = WLAN_INTF_OPCODE.media_streaming_mode;
pub const wlan_intf_opcode_radio_state = WLAN_INTF_OPCODE.radio_state;
pub const wlan_intf_opcode_bss_type = WLAN_INTF_OPCODE.bss_type;
pub const wlan_intf_opcode_interface_state = WLAN_INTF_OPCODE.interface_state;
pub const wlan_intf_opcode_current_connection = WLAN_INTF_OPCODE.current_connection;
pub const wlan_intf_opcode_channel_number = WLAN_INTF_OPCODE.channel_number;
pub const wlan_intf_opcode_supported_infrastructure_auth_cipher_pairs = WLAN_INTF_OPCODE.supported_infrastructure_auth_cipher_pairs;
pub const wlan_intf_opcode_supported_adhoc_auth_cipher_pairs = WLAN_INTF_OPCODE.supported_adhoc_auth_cipher_pairs;
pub const wlan_intf_opcode_supported_country_or_region_string_list = WLAN_INTF_OPCODE.supported_country_or_region_string_list;
pub const wlan_intf_opcode_current_operation_mode = WLAN_INTF_OPCODE.current_operation_mode;
pub const wlan_intf_opcode_supported_safe_mode = WLAN_INTF_OPCODE.supported_safe_mode;
pub const wlan_intf_opcode_certified_safe_mode = WLAN_INTF_OPCODE.certified_safe_mode;
pub const wlan_intf_opcode_hosted_network_capable = WLAN_INTF_OPCODE.hosted_network_capable;
pub const wlan_intf_opcode_management_frame_protection_capable = WLAN_INTF_OPCODE.management_frame_protection_capable;
pub const wlan_intf_opcode_autoconf_end = WLAN_INTF_OPCODE.autoconf_end;
pub const wlan_intf_opcode_msm_start = WLAN_INTF_OPCODE.msm_start;
pub const wlan_intf_opcode_statistics = WLAN_INTF_OPCODE.statistics;
pub const wlan_intf_opcode_rssi = WLAN_INTF_OPCODE.rssi;
pub const wlan_intf_opcode_msm_end = WLAN_INTF_OPCODE.msm_end;
pub const wlan_intf_opcode_security_start = WLAN_INTF_OPCODE.security_start;
pub const wlan_intf_opcode_security_end = WLAN_INTF_OPCODE.security_end;
pub const wlan_intf_opcode_ihv_start = WLAN_INTF_OPCODE.ihv_start;
pub const wlan_intf_opcode_ihv_end = WLAN_INTF_OPCODE.ihv_end;

pub const WLAN_AUTOCONF_OPCODE = extern enum(i32) {
    start = 0,
    show_denied_networks = 1,
    power_setting = 2,
    only_use_gp_profiles_for_allowed_networks = 3,
    allow_explicit_creds = 4,
    block_period = 5,
    allow_virtual_station_extensibility = 6,
    end = 7,
};
pub const wlan_autoconf_opcode_start = WLAN_AUTOCONF_OPCODE.start;
pub const wlan_autoconf_opcode_show_denied_networks = WLAN_AUTOCONF_OPCODE.show_denied_networks;
pub const wlan_autoconf_opcode_power_setting = WLAN_AUTOCONF_OPCODE.power_setting;
pub const wlan_autoconf_opcode_only_use_gp_profiles_for_allowed_networks = WLAN_AUTOCONF_OPCODE.only_use_gp_profiles_for_allowed_networks;
pub const wlan_autoconf_opcode_allow_explicit_creds = WLAN_AUTOCONF_OPCODE.allow_explicit_creds;
pub const wlan_autoconf_opcode_block_period = WLAN_AUTOCONF_OPCODE.block_period;
pub const wlan_autoconf_opcode_allow_virtual_station_extensibility = WLAN_AUTOCONF_OPCODE.allow_virtual_station_extensibility;
pub const wlan_autoconf_opcode_end = WLAN_AUTOCONF_OPCODE.end;

pub const WLAN_IHV_CONTROL_TYPE = extern enum(i32) {
    service = 0,
    driver = 1,
};
pub const wlan_ihv_control_type_service = WLAN_IHV_CONTROL_TYPE.service;
pub const wlan_ihv_control_type_driver = WLAN_IHV_CONTROL_TYPE.driver;

pub const WLAN_FILTER_LIST_TYPE = extern enum(i32) {
    gp_permit = 0,
    gp_deny = 1,
    user_permit = 2,
    user_deny = 3,
};
pub const wlan_filter_list_type_gp_permit = WLAN_FILTER_LIST_TYPE.gp_permit;
pub const wlan_filter_list_type_gp_deny = WLAN_FILTER_LIST_TYPE.gp_deny;
pub const wlan_filter_list_type_user_permit = WLAN_FILTER_LIST_TYPE.user_permit;
pub const wlan_filter_list_type_user_deny = WLAN_FILTER_LIST_TYPE.user_deny;

pub const WLAN_PHY_FRAME_STATISTICS = extern struct {
    ullTransmittedFrameCount: u64,
    ullMulticastTransmittedFrameCount: u64,
    ullFailedCount: u64,
    ullRetryCount: u64,
    ullMultipleRetryCount: u64,
    ullMaxTXLifetimeExceededCount: u64,
    ullTransmittedFragmentCount: u64,
    ullRTSSuccessCount: u64,
    ullRTSFailureCount: u64,
    ullACKFailureCount: u64,
    ullReceivedFrameCount: u64,
    ullMulticastReceivedFrameCount: u64,
    ullPromiscuousReceivedFrameCount: u64,
    ullMaxRXLifetimeExceededCount: u64,
    ullFrameDuplicateCount: u64,
    ullReceivedFragmentCount: u64,
    ullPromiscuousReceivedFragmentCount: u64,
    ullFCSErrorCount: u64,
};

pub const WLAN_MAC_FRAME_STATISTICS = extern struct {
    ullTransmittedFrameCount: u64,
    ullReceivedFrameCount: u64,
    ullWEPExcludedCount: u64,
    ullTKIPLocalMICFailures: u64,
    ullTKIPReplays: u64,
    ullTKIPICVErrorCount: u64,
    ullCCMPReplays: u64,
    ullCCMPDecryptErrors: u64,
    ullWEPUndecryptableCount: u64,
    ullWEPICVErrorCount: u64,
    ullDecryptSuccessCount: u64,
    ullDecryptFailureCount: u64,
};

pub const WLAN_STATISTICS = extern struct {
    ullFourWayHandshakeFailures: u64,
    ullTKIPCounterMeasuresInvoked: u64,
    ullReserved: u64,
    MacUcastCounters: WLAN_MAC_FRAME_STATISTICS,
    MacMcastCounters: WLAN_MAC_FRAME_STATISTICS,
    dwNumberOfPhys: u32,
    PhyCounters: [1]WLAN_PHY_FRAME_STATISTICS,
};

pub const WLAN_SECURABLE_OBJECT = extern enum(i32) {
    wlan_secure_permit_list = 0,
    wlan_secure_deny_list = 1,
    wlan_secure_ac_enabled = 2,
    wlan_secure_bc_scan_enabled = 3,
    wlan_secure_bss_type = 4,
    wlan_secure_show_denied = 5,
    wlan_secure_interface_properties = 6,
    wlan_secure_ihv_control = 7,
    wlan_secure_all_user_profiles_order = 8,
    wlan_secure_add_new_all_user_profiles = 9,
    wlan_secure_add_new_per_user_profiles = 10,
    wlan_secure_media_streaming_mode_enabled = 11,
    wlan_secure_current_operation_mode = 12,
    wlan_secure_get_plaintext_key = 13,
    wlan_secure_hosted_network_elevated_access = 14,
    wlan_secure_virtual_station_extensibility = 15,
    wlan_secure_wfd_elevated_access = 16,
    WLAN_SECURABLE_OBJECT_COUNT = 17,
};
pub const wlan_secure_permit_list = WLAN_SECURABLE_OBJECT.wlan_secure_permit_list;
pub const wlan_secure_deny_list = WLAN_SECURABLE_OBJECT.wlan_secure_deny_list;
pub const wlan_secure_ac_enabled = WLAN_SECURABLE_OBJECT.wlan_secure_ac_enabled;
pub const wlan_secure_bc_scan_enabled = WLAN_SECURABLE_OBJECT.wlan_secure_bc_scan_enabled;
pub const wlan_secure_bss_type = WLAN_SECURABLE_OBJECT.wlan_secure_bss_type;
pub const wlan_secure_show_denied = WLAN_SECURABLE_OBJECT.wlan_secure_show_denied;
pub const wlan_secure_interface_properties = WLAN_SECURABLE_OBJECT.wlan_secure_interface_properties;
pub const wlan_secure_ihv_control = WLAN_SECURABLE_OBJECT.wlan_secure_ihv_control;
pub const wlan_secure_all_user_profiles_order = WLAN_SECURABLE_OBJECT.wlan_secure_all_user_profiles_order;
pub const wlan_secure_add_new_all_user_profiles = WLAN_SECURABLE_OBJECT.wlan_secure_add_new_all_user_profiles;
pub const wlan_secure_add_new_per_user_profiles = WLAN_SECURABLE_OBJECT.wlan_secure_add_new_per_user_profiles;
pub const wlan_secure_media_streaming_mode_enabled = WLAN_SECURABLE_OBJECT.wlan_secure_media_streaming_mode_enabled;
pub const wlan_secure_current_operation_mode = WLAN_SECURABLE_OBJECT.wlan_secure_current_operation_mode;
pub const wlan_secure_get_plaintext_key = WLAN_SECURABLE_OBJECT.wlan_secure_get_plaintext_key;
pub const wlan_secure_hosted_network_elevated_access = WLAN_SECURABLE_OBJECT.wlan_secure_hosted_network_elevated_access;
pub const wlan_secure_virtual_station_extensibility = WLAN_SECURABLE_OBJECT.wlan_secure_virtual_station_extensibility;
pub const wlan_secure_wfd_elevated_access = WLAN_SECURABLE_OBJECT.wlan_secure_wfd_elevated_access;
pub const WLAN_SECURABLE_OBJECT_COUNT = WLAN_SECURABLE_OBJECT.WLAN_SECURABLE_OBJECT_COUNT;

pub const WLAN_DEVICE_SERVICE_GUID_LIST = extern struct {
    dwNumberOfItems: u32,
    dwIndex: u32,
    DeviceService: [1]Guid,
};

pub const WFD_ROLE_TYPE = extern enum(i32) {
    NONE = 0,
    DEVICE = 1,
    GROUP_OWNER = 2,
    CLIENT = 4,
    MAX = 5,
};
pub const WFD_ROLE_TYPE_NONE = WFD_ROLE_TYPE.NONE;
pub const WFD_ROLE_TYPE_DEVICE = WFD_ROLE_TYPE.DEVICE;
pub const WFD_ROLE_TYPE_GROUP_OWNER = WFD_ROLE_TYPE.GROUP_OWNER;
pub const WFD_ROLE_TYPE_CLIENT = WFD_ROLE_TYPE.CLIENT;
pub const WFD_ROLE_TYPE_MAX = WFD_ROLE_TYPE.MAX;

pub const WFD_GROUP_ID = extern struct {
    DeviceAddress: [6]u8,
    GroupSSID: DOT11_SSID,
};

pub const WL_DISPLAY_PAGES = extern enum(i32) {
    ConnectionPage = 0,
    SecurityPage = 1,
    AdvPage = 2,
};
pub const WLConnectionPage = WL_DISPLAY_PAGES.ConnectionPage;
pub const WLSecurityPage = WL_DISPLAY_PAGES.SecurityPage;
pub const WLAdvPage = WL_DISPLAY_PAGES.AdvPage;

pub const WLAN_HOSTED_NETWORK_STATE = extern enum(i32) {
    unavailable = 0,
    idle = 1,
    active = 2,
};
pub const wlan_hosted_network_unavailable = WLAN_HOSTED_NETWORK_STATE.unavailable;
pub const wlan_hosted_network_idle = WLAN_HOSTED_NETWORK_STATE.idle;
pub const wlan_hosted_network_active = WLAN_HOSTED_NETWORK_STATE.active;

pub const WLAN_HOSTED_NETWORK_REASON = extern enum(i32) {
    success = 0,
    unspecified = 1,
    bad_parameters = 2,
    service_shutting_down = 3,
    insufficient_resources = 4,
    elevation_required = 5,
    read_only = 6,
    persistence_failed = 7,
    crypt_error = 8,
    impersonation = 9,
    stop_before_start = 10,
    interface_available = 11,
    interface_unavailable = 12,
    miniport_stopped = 13,
    miniport_started = 14,
    incompatible_connection_started = 15,
    incompatible_connection_stopped = 16,
    user_action = 17,
    client_abort = 18,
    ap_start_failed = 19,
    peer_arrived = 20,
    peer_departed = 21,
    peer_timeout = 22,
    gp_denied = 23,
    service_unavailable = 24,
    device_change = 25,
    properties_change = 26,
    virtual_station_blocking_use = 27,
    service_available_on_virtual_station = 28,
};
pub const wlan_hosted_network_reason_success = WLAN_HOSTED_NETWORK_REASON.success;
pub const wlan_hosted_network_reason_unspecified = WLAN_HOSTED_NETWORK_REASON.unspecified;
pub const wlan_hosted_network_reason_bad_parameters = WLAN_HOSTED_NETWORK_REASON.bad_parameters;
pub const wlan_hosted_network_reason_service_shutting_down = WLAN_HOSTED_NETWORK_REASON.service_shutting_down;
pub const wlan_hosted_network_reason_insufficient_resources = WLAN_HOSTED_NETWORK_REASON.insufficient_resources;
pub const wlan_hosted_network_reason_elevation_required = WLAN_HOSTED_NETWORK_REASON.elevation_required;
pub const wlan_hosted_network_reason_read_only = WLAN_HOSTED_NETWORK_REASON.read_only;
pub const wlan_hosted_network_reason_persistence_failed = WLAN_HOSTED_NETWORK_REASON.persistence_failed;
pub const wlan_hosted_network_reason_crypt_error = WLAN_HOSTED_NETWORK_REASON.crypt_error;
pub const wlan_hosted_network_reason_impersonation = WLAN_HOSTED_NETWORK_REASON.impersonation;
pub const wlan_hosted_network_reason_stop_before_start = WLAN_HOSTED_NETWORK_REASON.stop_before_start;
pub const wlan_hosted_network_reason_interface_available = WLAN_HOSTED_NETWORK_REASON.interface_available;
pub const wlan_hosted_network_reason_interface_unavailable = WLAN_HOSTED_NETWORK_REASON.interface_unavailable;
pub const wlan_hosted_network_reason_miniport_stopped = WLAN_HOSTED_NETWORK_REASON.miniport_stopped;
pub const wlan_hosted_network_reason_miniport_started = WLAN_HOSTED_NETWORK_REASON.miniport_started;
pub const wlan_hosted_network_reason_incompatible_connection_started = WLAN_HOSTED_NETWORK_REASON.incompatible_connection_started;
pub const wlan_hosted_network_reason_incompatible_connection_stopped = WLAN_HOSTED_NETWORK_REASON.incompatible_connection_stopped;
pub const wlan_hosted_network_reason_user_action = WLAN_HOSTED_NETWORK_REASON.user_action;
pub const wlan_hosted_network_reason_client_abort = WLAN_HOSTED_NETWORK_REASON.client_abort;
pub const wlan_hosted_network_reason_ap_start_failed = WLAN_HOSTED_NETWORK_REASON.ap_start_failed;
pub const wlan_hosted_network_reason_peer_arrived = WLAN_HOSTED_NETWORK_REASON.peer_arrived;
pub const wlan_hosted_network_reason_peer_departed = WLAN_HOSTED_NETWORK_REASON.peer_departed;
pub const wlan_hosted_network_reason_peer_timeout = WLAN_HOSTED_NETWORK_REASON.peer_timeout;
pub const wlan_hosted_network_reason_gp_denied = WLAN_HOSTED_NETWORK_REASON.gp_denied;
pub const wlan_hosted_network_reason_service_unavailable = WLAN_HOSTED_NETWORK_REASON.service_unavailable;
pub const wlan_hosted_network_reason_device_change = WLAN_HOSTED_NETWORK_REASON.device_change;
pub const wlan_hosted_network_reason_properties_change = WLAN_HOSTED_NETWORK_REASON.properties_change;
pub const wlan_hosted_network_reason_virtual_station_blocking_use = WLAN_HOSTED_NETWORK_REASON.virtual_station_blocking_use;
pub const wlan_hosted_network_reason_service_available_on_virtual_station = WLAN_HOSTED_NETWORK_REASON.service_available_on_virtual_station;

pub const WLAN_HOSTED_NETWORK_PEER_AUTH_STATE = extern enum(i32) {
    invalid = 0,
    authenticated = 1,
};
pub const wlan_hosted_network_peer_state_invalid = WLAN_HOSTED_NETWORK_PEER_AUTH_STATE.invalid;
pub const wlan_hosted_network_peer_state_authenticated = WLAN_HOSTED_NETWORK_PEER_AUTH_STATE.authenticated;

pub const WLAN_HOSTED_NETWORK_PEER_STATE = extern struct {
    PeerMacAddress: [6]u8,
    PeerAuthState: WLAN_HOSTED_NETWORK_PEER_AUTH_STATE,
};

pub const WLAN_HOSTED_NETWORK_RADIO_STATE = extern struct {
    dot11SoftwareRadioState: DOT11_RADIO_STATE,
    dot11HardwareRadioState: DOT11_RADIO_STATE,
};

pub const WLAN_HOSTED_NETWORK_NOTIFICATION_CODE = extern enum(i32) {
    state_change = 4096,
    peer_state_change = 4097,
    radio_state_change = 4098,
};
pub const wlan_hosted_network_state_change = WLAN_HOSTED_NETWORK_NOTIFICATION_CODE.state_change;
pub const wlan_hosted_network_peer_state_change = WLAN_HOSTED_NETWORK_NOTIFICATION_CODE.peer_state_change;
pub const wlan_hosted_network_radio_state_change = WLAN_HOSTED_NETWORK_NOTIFICATION_CODE.radio_state_change;

pub const WLAN_HOSTED_NETWORK_STATE_CHANGE = extern struct {
    OldState: WLAN_HOSTED_NETWORK_STATE,
    NewState: WLAN_HOSTED_NETWORK_STATE,
    StateChangeReason: WLAN_HOSTED_NETWORK_REASON,
};

pub const WLAN_HOSTED_NETWORK_DATA_PEER_STATE_CHANGE = extern struct {
    OldState: WLAN_HOSTED_NETWORK_PEER_STATE,
    NewState: WLAN_HOSTED_NETWORK_PEER_STATE,
    PeerStateChangeReason: WLAN_HOSTED_NETWORK_REASON,
};

pub const WLAN_HOSTED_NETWORK_OPCODE = extern enum(i32) {
    connection_settings = 0,
    security_settings = 1,
    station_profile = 2,
    enable = 3,
};
pub const wlan_hosted_network_opcode_connection_settings = WLAN_HOSTED_NETWORK_OPCODE.connection_settings;
pub const wlan_hosted_network_opcode_security_settings = WLAN_HOSTED_NETWORK_OPCODE.security_settings;
pub const wlan_hosted_network_opcode_station_profile = WLAN_HOSTED_NETWORK_OPCODE.station_profile;
pub const wlan_hosted_network_opcode_enable = WLAN_HOSTED_NETWORK_OPCODE.enable;

pub const WLAN_HOSTED_NETWORK_CONNECTION_SETTINGS = extern struct {
    hostedNetworkSSID: DOT11_SSID,
    dwMaxNumberOfPeers: u32,
};

pub const WLAN_HOSTED_NETWORK_SECURITY_SETTINGS = extern struct {
    dot11AuthAlgo: DOT11_AUTH_ALGORITHM,
    dot11CipherAlgo: DOT11_CIPHER_ALGORITHM,
};

pub const WLAN_HOSTED_NETWORK_STATUS = extern struct {
    HostedNetworkState: WLAN_HOSTED_NETWORK_STATE,
    IPDeviceID: Guid,
    wlanHostedNetworkBSSID: [6]u8,
    dot11PhyType: DOT11_PHY_TYPE,
    ulChannelFrequency: u32,
    dwNumberOfPeers: u32,
    PeerList: [1]WLAN_HOSTED_NETWORK_PEER_STATE,
};

pub const WFD_OPEN_SESSION_COMPLETE_CALLBACK = fn(
    hSessionHandle: HANDLE,
    pvContext: *c_void,
    guidSessionInterface: Guid,
    dwError: u32,
    dwReasonCode: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const ONEX_AUTH_IDENTITY = extern enum(i32) {
    None = 0,
    Machine = 1,
    User = 2,
    ExplicitUser = 3,
    Guest = 4,
    Invalid = 5,
};
pub const OneXAuthIdentityNone = ONEX_AUTH_IDENTITY.None;
pub const OneXAuthIdentityMachine = ONEX_AUTH_IDENTITY.Machine;
pub const OneXAuthIdentityUser = ONEX_AUTH_IDENTITY.User;
pub const OneXAuthIdentityExplicitUser = ONEX_AUTH_IDENTITY.ExplicitUser;
pub const OneXAuthIdentityGuest = ONEX_AUTH_IDENTITY.Guest;
pub const OneXAuthIdentityInvalid = ONEX_AUTH_IDENTITY.Invalid;

pub const ONEX_AUTH_STATUS = extern enum(i32) {
    NotStarted = 0,
    InProgress = 1,
    NoAuthenticatorFound = 2,
    Success = 3,
    Failure = 4,
    Invalid = 5,
};
pub const OneXAuthNotStarted = ONEX_AUTH_STATUS.NotStarted;
pub const OneXAuthInProgress = ONEX_AUTH_STATUS.InProgress;
pub const OneXAuthNoAuthenticatorFound = ONEX_AUTH_STATUS.NoAuthenticatorFound;
pub const OneXAuthSuccess = ONEX_AUTH_STATUS.Success;
pub const OneXAuthFailure = ONEX_AUTH_STATUS.Failure;
pub const OneXAuthInvalid = ONEX_AUTH_STATUS.Invalid;

pub const ONEX_REASON_CODE = extern enum(i32) {
    REASON_CODE_SUCCESS = 0,
    REASON_START = 327680,
    UNABLE_TO_IDENTIFY_USER = 327681,
    IDENTITY_NOT_FOUND = 327682,
    UI_DISABLED = 327683,
    UI_FAILURE = 327684,
    EAP_FAILURE_RECEIVED = 327685,
    AUTHENTICATOR_NO_LONGER_PRESENT = 327686,
    NO_RESPONSE_TO_IDENTITY = 327687,
    PROFILE_VERSION_NOT_SUPPORTED = 327688,
    PROFILE_INVALID_LENGTH = 327689,
    PROFILE_DISALLOWED_EAP_TYPE = 327690,
    PROFILE_INVALID_EAP_TYPE_OR_FLAG = 327691,
    PROFILE_INVALID_ONEX_FLAGS = 327692,
    PROFILE_INVALID_TIMER_VALUE = 327693,
    PROFILE_INVALID_SUPPLICANT_MODE = 327694,
    PROFILE_INVALID_AUTH_MODE = 327695,
    PROFILE_INVALID_EAP_CONNECTION_PROPERTIES = 327696,
    UI_CANCELLED = 327697,
    PROFILE_INVALID_EXPLICIT_CREDENTIALS = 327698,
    PROFILE_EXPIRED_EXPLICIT_CREDENTIALS = 327699,
    UI_NOT_PERMITTED = 327700,
};
pub const ONEX_REASON_CODE_SUCCESS = ONEX_REASON_CODE.REASON_CODE_SUCCESS;
pub const ONEX_REASON_START = ONEX_REASON_CODE.REASON_START;
pub const ONEX_UNABLE_TO_IDENTIFY_USER = ONEX_REASON_CODE.UNABLE_TO_IDENTIFY_USER;
pub const ONEX_IDENTITY_NOT_FOUND = ONEX_REASON_CODE.IDENTITY_NOT_FOUND;
pub const ONEX_UI_DISABLED = ONEX_REASON_CODE.UI_DISABLED;
pub const ONEX_UI_FAILURE = ONEX_REASON_CODE.UI_FAILURE;
pub const ONEX_EAP_FAILURE_RECEIVED = ONEX_REASON_CODE.EAP_FAILURE_RECEIVED;
pub const ONEX_AUTHENTICATOR_NO_LONGER_PRESENT = ONEX_REASON_CODE.AUTHENTICATOR_NO_LONGER_PRESENT;
pub const ONEX_NO_RESPONSE_TO_IDENTITY = ONEX_REASON_CODE.NO_RESPONSE_TO_IDENTITY;
pub const ONEX_PROFILE_VERSION_NOT_SUPPORTED = ONEX_REASON_CODE.PROFILE_VERSION_NOT_SUPPORTED;
pub const ONEX_PROFILE_INVALID_LENGTH = ONEX_REASON_CODE.PROFILE_INVALID_LENGTH;
pub const ONEX_PROFILE_DISALLOWED_EAP_TYPE = ONEX_REASON_CODE.PROFILE_DISALLOWED_EAP_TYPE;
pub const ONEX_PROFILE_INVALID_EAP_TYPE_OR_FLAG = ONEX_REASON_CODE.PROFILE_INVALID_EAP_TYPE_OR_FLAG;
pub const ONEX_PROFILE_INVALID_ONEX_FLAGS = ONEX_REASON_CODE.PROFILE_INVALID_ONEX_FLAGS;
pub const ONEX_PROFILE_INVALID_TIMER_VALUE = ONEX_REASON_CODE.PROFILE_INVALID_TIMER_VALUE;
pub const ONEX_PROFILE_INVALID_SUPPLICANT_MODE = ONEX_REASON_CODE.PROFILE_INVALID_SUPPLICANT_MODE;
pub const ONEX_PROFILE_INVALID_AUTH_MODE = ONEX_REASON_CODE.PROFILE_INVALID_AUTH_MODE;
pub const ONEX_PROFILE_INVALID_EAP_CONNECTION_PROPERTIES = ONEX_REASON_CODE.PROFILE_INVALID_EAP_CONNECTION_PROPERTIES;
pub const ONEX_UI_CANCELLED = ONEX_REASON_CODE.UI_CANCELLED;
pub const ONEX_PROFILE_INVALID_EXPLICIT_CREDENTIALS = ONEX_REASON_CODE.PROFILE_INVALID_EXPLICIT_CREDENTIALS;
pub const ONEX_PROFILE_EXPIRED_EXPLICIT_CREDENTIALS = ONEX_REASON_CODE.PROFILE_EXPIRED_EXPLICIT_CREDENTIALS;
pub const ONEX_UI_NOT_PERMITTED = ONEX_REASON_CODE.UI_NOT_PERMITTED;

pub const ONEX_NOTIFICATION_TYPE = extern enum(i32) {
    PublicNotificationBase = 0,
    NotificationTypeResultUpdate = 1,
    NotificationTypeAuthRestarted = 2,
    NotificationTypeEventInvalid = 3,
    NumNotifications = 3,
};
pub const OneXPublicNotificationBase = ONEX_NOTIFICATION_TYPE.PublicNotificationBase;
pub const OneXNotificationTypeResultUpdate = ONEX_NOTIFICATION_TYPE.NotificationTypeResultUpdate;
pub const OneXNotificationTypeAuthRestarted = ONEX_NOTIFICATION_TYPE.NotificationTypeAuthRestarted;
pub const OneXNotificationTypeEventInvalid = ONEX_NOTIFICATION_TYPE.NotificationTypeEventInvalid;
pub const OneXNumNotifications = ONEX_NOTIFICATION_TYPE.NumNotifications;

pub const ONEX_AUTH_RESTART_REASON = extern enum(i32) {
    PeerInitiated = 0,
    MsmInitiated = 1,
    OneXHeldStateTimeout = 2,
    OneXAuthTimeout = 3,
    OneXConfigurationChanged = 4,
    OneXUserChanged = 5,
    QuarantineStateChanged = 6,
    AltCredsTrial = 7,
    Invalid = 8,
};
pub const OneXRestartReasonPeerInitiated = ONEX_AUTH_RESTART_REASON.PeerInitiated;
pub const OneXRestartReasonMsmInitiated = ONEX_AUTH_RESTART_REASON.MsmInitiated;
pub const OneXRestartReasonOneXHeldStateTimeout = ONEX_AUTH_RESTART_REASON.OneXHeldStateTimeout;
pub const OneXRestartReasonOneXAuthTimeout = ONEX_AUTH_RESTART_REASON.OneXAuthTimeout;
pub const OneXRestartReasonOneXConfigurationChanged = ONEX_AUTH_RESTART_REASON.OneXConfigurationChanged;
pub const OneXRestartReasonOneXUserChanged = ONEX_AUTH_RESTART_REASON.OneXUserChanged;
pub const OneXRestartReasonQuarantineStateChanged = ONEX_AUTH_RESTART_REASON.QuarantineStateChanged;
pub const OneXRestartReasonAltCredsTrial = ONEX_AUTH_RESTART_REASON.AltCredsTrial;
pub const OneXRestartReasonInvalid = ONEX_AUTH_RESTART_REASON.Invalid;

pub const ONEX_VARIABLE_BLOB = extern struct {
    dwSize: u32,
    dwOffset: u32,
};

pub const ONEX_AUTH_PARAMS = extern struct {
    fUpdatePending: BOOL,
    oneXConnProfile: ONEX_VARIABLE_BLOB,
    authIdentity: ONEX_AUTH_IDENTITY,
    dwQuarantineState: u32,
    _bitfield: u32,
    dwSessionId: u32,
    hUserToken: HANDLE,
    OneXUserProfile: ONEX_VARIABLE_BLOB,
    Identity: ONEX_VARIABLE_BLOB,
    UserName: ONEX_VARIABLE_BLOB,
    Domain: ONEX_VARIABLE_BLOB,
};

pub const ONEX_EAP_ERROR = extern struct {
    dwWinError: u32,
    type: EAP_METHOD_TYPE,
    dwReasonCode: u32,
    rootCauseGuid: Guid,
    repairGuid: Guid,
    helpLinkGuid: Guid,
    _bitfield: u32,
    RootCauseString: ONEX_VARIABLE_BLOB,
    RepairString: ONEX_VARIABLE_BLOB,
};

pub const ONEX_STATUS = extern struct {
    authStatus: ONEX_AUTH_STATUS,
    dwReason: u32,
    dwError: u32,
};

pub const ONEX_EAP_METHOD_BACKEND_SUPPORT = extern enum(i32) {
    SupportUnknown = 0,
    Supported = 1,
    Unsupported = 2,
};
pub const OneXEapMethodBackendSupportUnknown = ONEX_EAP_METHOD_BACKEND_SUPPORT.SupportUnknown;
pub const OneXEapMethodBackendSupported = ONEX_EAP_METHOD_BACKEND_SUPPORT.Supported;
pub const OneXEapMethodBackendUnsupported = ONEX_EAP_METHOD_BACKEND_SUPPORT.Unsupported;

pub const ONEX_RESULT_UPDATE_DATA = extern struct {
    oneXStatus: ONEX_STATUS,
    BackendSupport: ONEX_EAP_METHOD_BACKEND_SUPPORT,
    fBackendEngaged: BOOL,
    _bitfield: u32,
    authParams: ONEX_VARIABLE_BLOB,
    eapError: ONEX_VARIABLE_BLOB,
};

pub const ONEX_USER_INFO = extern struct {
    authIdentity: ONEX_AUTH_IDENTITY,
    _bitfield: u32,
    UserName: ONEX_VARIABLE_BLOB,
    DomainName: ONEX_VARIABLE_BLOB,
};

const CLSID_Dot11AdHocManager_Value = @import("../zig.zig").Guid.initString("dd06a84f-83bd-4d01-8ab9-2389fea0869e");
pub const CLSID_Dot11AdHocManager = &CLSID_Dot11AdHocManager_Value;

pub const DOT11_ADHOC_CIPHER_ALGORITHM = extern enum(i32) {
    INVALID = -1,
    NONE = 0,
    CCMP = 4,
    WEP = 257,
};
pub const DOT11_ADHOC_CIPHER_ALGO_INVALID = DOT11_ADHOC_CIPHER_ALGORITHM.INVALID;
pub const DOT11_ADHOC_CIPHER_ALGO_NONE = DOT11_ADHOC_CIPHER_ALGORITHM.NONE;
pub const DOT11_ADHOC_CIPHER_ALGO_CCMP = DOT11_ADHOC_CIPHER_ALGORITHM.CCMP;
pub const DOT11_ADHOC_CIPHER_ALGO_WEP = DOT11_ADHOC_CIPHER_ALGORITHM.WEP;

pub const DOT11_ADHOC_AUTH_ALGORITHM = extern enum(i32) {
    INVALID = -1,
    @"80211_OPEN" = 1,
    RSNA_PSK = 7,
};
pub const DOT11_ADHOC_AUTH_ALGO_INVALID = DOT11_ADHOC_AUTH_ALGORITHM.INVALID;
pub const DOT11_ADHOC_AUTH_ALGO_80211_OPEN = DOT11_ADHOC_AUTH_ALGORITHM.@"80211_OPEN";
pub const DOT11_ADHOC_AUTH_ALGO_RSNA_PSK = DOT11_ADHOC_AUTH_ALGORITHM.RSNA_PSK;

pub const DOT11_ADHOC_NETWORK_CONNECTION_STATUS = extern enum(i32) {
    INVALID = 0,
    DISCONNECTED = 11,
    CONNECTING = 12,
    CONNECTED = 13,
    FORMED = 14,
};
pub const DOT11_ADHOC_NETWORK_CONNECTION_STATUS_INVALID = DOT11_ADHOC_NETWORK_CONNECTION_STATUS.INVALID;
pub const DOT11_ADHOC_NETWORK_CONNECTION_STATUS_DISCONNECTED = DOT11_ADHOC_NETWORK_CONNECTION_STATUS.DISCONNECTED;
pub const DOT11_ADHOC_NETWORK_CONNECTION_STATUS_CONNECTING = DOT11_ADHOC_NETWORK_CONNECTION_STATUS.CONNECTING;
pub const DOT11_ADHOC_NETWORK_CONNECTION_STATUS_CONNECTED = DOT11_ADHOC_NETWORK_CONNECTION_STATUS.CONNECTED;
pub const DOT11_ADHOC_NETWORK_CONNECTION_STATUS_FORMED = DOT11_ADHOC_NETWORK_CONNECTION_STATUS.FORMED;

pub const DOT11_ADHOC_CONNECT_FAIL_REASON = extern enum(i32) {
    DOMAIN_MISMATCH = 0,
    PASSPHRASE_MISMATCH = 1,
    OTHER = 2,
};
pub const DOT11_ADHOC_CONNECT_FAIL_DOMAIN_MISMATCH = DOT11_ADHOC_CONNECT_FAIL_REASON.DOMAIN_MISMATCH;
pub const DOT11_ADHOC_CONNECT_FAIL_PASSPHRASE_MISMATCH = DOT11_ADHOC_CONNECT_FAIL_REASON.PASSPHRASE_MISMATCH;
pub const DOT11_ADHOC_CONNECT_FAIL_OTHER = DOT11_ADHOC_CONNECT_FAIL_REASON.OTHER;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDot11AdHocManager_Value = @import("../zig.zig").Guid.initString("8f10cc26-cf0d-42a0-acbe-e2de7007384d");
pub const IID_IDot11AdHocManager = &IID_IDot11AdHocManager_Value;
pub const IDot11AdHocManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateNetwork: fn(
            self: *const IDot11AdHocManager,
            Name: [*:0]const u16,
            Password: [*:0]const u16,
            GeographicalId: i32,
            pInterface: *IDot11AdHocInterface,
            pSecurity: *IDot11AdHocSecuritySettings,
            pContextGuid: *Guid,
            pIAdHoc: **IDot11AdHocNetwork,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CommitCreatedNetwork: fn(
            self: *const IDot11AdHocManager,
            pIAdHoc: *IDot11AdHocNetwork,
            fSaveProfile: u8,
            fMakeSavedProfileUserSpecific: u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIEnumDot11AdHocNetworks: fn(
            self: *const IDot11AdHocManager,
            pContextGuid: *Guid,
            ppEnum: **IEnumDot11AdHocNetworks,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIEnumDot11AdHocInterfaces: fn(
            self: *const IDot11AdHocManager,
            ppEnum: **IEnumDot11AdHocInterfaces,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNetwork: fn(
            self: *const IDot11AdHocManager,
            NetworkSignature: *Guid,
            pNetwork: **IDot11AdHocNetwork,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocManager_CreateNetwork(self: *const T, Name: [*:0]const u16, Password: [*:0]const u16, GeographicalId: i32, pInterface: *IDot11AdHocInterface, pSecurity: *IDot11AdHocSecuritySettings, pContextGuid: *Guid, pIAdHoc: **IDot11AdHocNetwork) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocManager.VTable, self.vtable).CreateNetwork(@ptrCast(*const IDot11AdHocManager, self), Name, Password, GeographicalId, pInterface, pSecurity, pContextGuid, pIAdHoc);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocManager_CommitCreatedNetwork(self: *const T, pIAdHoc: *IDot11AdHocNetwork, fSaveProfile: u8, fMakeSavedProfileUserSpecific: u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocManager.VTable, self.vtable).CommitCreatedNetwork(@ptrCast(*const IDot11AdHocManager, self), pIAdHoc, fSaveProfile, fMakeSavedProfileUserSpecific);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocManager_GetIEnumDot11AdHocNetworks(self: *const T, pContextGuid: *Guid, ppEnum: **IEnumDot11AdHocNetworks) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocManager.VTable, self.vtable).GetIEnumDot11AdHocNetworks(@ptrCast(*const IDot11AdHocManager, self), pContextGuid, ppEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocManager_GetIEnumDot11AdHocInterfaces(self: *const T, ppEnum: **IEnumDot11AdHocInterfaces) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocManager.VTable, self.vtable).GetIEnumDot11AdHocInterfaces(@ptrCast(*const IDot11AdHocManager, self), ppEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocManager_GetNetwork(self: *const T, NetworkSignature: *Guid, pNetwork: **IDot11AdHocNetwork) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocManager.VTable, self.vtable).GetNetwork(@ptrCast(*const IDot11AdHocManager, self), NetworkSignature, pNetwork);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDot11AdHocManagerNotificationSink_Value = @import("../zig.zig").Guid.initString("8f10cc27-cf0d-42a0-acbe-e2de7007384d");
pub const IID_IDot11AdHocManagerNotificationSink = &IID_IDot11AdHocManagerNotificationSink_Value;
pub const IDot11AdHocManagerNotificationSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnNetworkAdd: fn(
            self: *const IDot11AdHocManagerNotificationSink,
            pIAdHocNetwork: *IDot11AdHocNetwork,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnNetworkRemove: fn(
            self: *const IDot11AdHocManagerNotificationSink,
            Signature: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnInterfaceAdd: fn(
            self: *const IDot11AdHocManagerNotificationSink,
            pIAdHocInterface: *IDot11AdHocInterface,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnInterfaceRemove: fn(
            self: *const IDot11AdHocManagerNotificationSink,
            Signature: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocManagerNotificationSink_OnNetworkAdd(self: *const T, pIAdHocNetwork: *IDot11AdHocNetwork) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocManagerNotificationSink.VTable, self.vtable).OnNetworkAdd(@ptrCast(*const IDot11AdHocManagerNotificationSink, self), pIAdHocNetwork);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocManagerNotificationSink_OnNetworkRemove(self: *const T, Signature: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocManagerNotificationSink.VTable, self.vtable).OnNetworkRemove(@ptrCast(*const IDot11AdHocManagerNotificationSink, self), Signature);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocManagerNotificationSink_OnInterfaceAdd(self: *const T, pIAdHocInterface: *IDot11AdHocInterface) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocManagerNotificationSink.VTable, self.vtable).OnInterfaceAdd(@ptrCast(*const IDot11AdHocManagerNotificationSink, self), pIAdHocInterface);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocManagerNotificationSink_OnInterfaceRemove(self: *const T, Signature: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocManagerNotificationSink.VTable, self.vtable).OnInterfaceRemove(@ptrCast(*const IDot11AdHocManagerNotificationSink, self), Signature);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IEnumDot11AdHocNetworks_Value = @import("../zig.zig").Guid.initString("8f10cc28-cf0d-42a0-acbe-e2de7007384d");
pub const IID_IEnumDot11AdHocNetworks = &IID_IEnumDot11AdHocNetworks_Value;
pub const IEnumDot11AdHocNetworks = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: fn(
            self: *const IEnumDot11AdHocNetworks,
            cElt: u32,
            rgElt: [*]*IDot11AdHocNetwork,
            pcEltFetched: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumDot11AdHocNetworks,
            cElt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumDot11AdHocNetworks,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IEnumDot11AdHocNetworks,
            ppEnum: **IEnumDot11AdHocNetworks,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumDot11AdHocNetworks_Next(self: *const T, cElt: u32, rgElt: [*]*IDot11AdHocNetwork, pcEltFetched: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumDot11AdHocNetworks.VTable, self.vtable).Next(@ptrCast(*const IEnumDot11AdHocNetworks, self), cElt, rgElt, pcEltFetched);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumDot11AdHocNetworks_Skip(self: *const T, cElt: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumDot11AdHocNetworks.VTable, self.vtable).Skip(@ptrCast(*const IEnumDot11AdHocNetworks, self), cElt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumDot11AdHocNetworks_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumDot11AdHocNetworks.VTable, self.vtable).Reset(@ptrCast(*const IEnumDot11AdHocNetworks, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumDot11AdHocNetworks_Clone(self: *const T, ppEnum: **IEnumDot11AdHocNetworks) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumDot11AdHocNetworks.VTable, self.vtable).Clone(@ptrCast(*const IEnumDot11AdHocNetworks, self), ppEnum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDot11AdHocNetwork_Value = @import("../zig.zig").Guid.initString("8f10cc29-cf0d-42a0-acbe-e2de7007384d");
pub const IID_IDot11AdHocNetwork = &IID_IDot11AdHocNetwork_Value;
pub const IDot11AdHocNetwork = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetStatus: fn(
            self: *const IDot11AdHocNetwork,
            eStatus: *DOT11_ADHOC_NETWORK_CONNECTION_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSSID: fn(
            self: *const IDot11AdHocNetwork,
            ppszwSSID: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HasProfile: fn(
            self: *const IDot11AdHocNetwork,
            pf11d: *u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProfileName: fn(
            self: *const IDot11AdHocNetwork,
            ppszwProfileName: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteProfile: fn(
            self: *const IDot11AdHocNetwork,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignalQuality: fn(
            self: *const IDot11AdHocNetwork,
            puStrengthValue: *u32,
            puStrengthMax: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSecuritySetting: fn(
            self: *const IDot11AdHocNetwork,
            pAdHocSecuritySetting: **IDot11AdHocSecuritySettings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContextGuid: fn(
            self: *const IDot11AdHocNetwork,
            pContextGuid: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignature: fn(
            self: *const IDot11AdHocNetwork,
            pSignature: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInterface: fn(
            self: *const IDot11AdHocNetwork,
            pAdHocInterface: **IDot11AdHocInterface,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Connect: fn(
            self: *const IDot11AdHocNetwork,
            Passphrase: [*:0]const u16,
            GeographicalId: i32,
            fSaveProfile: u8,
            fMakeSavedProfileUserSpecific: u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Disconnect: fn(
            self: *const IDot11AdHocNetwork,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocNetwork_GetStatus(self: *const T, eStatus: *DOT11_ADHOC_NETWORK_CONNECTION_STATUS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocNetwork.VTable, self.vtable).GetStatus(@ptrCast(*const IDot11AdHocNetwork, self), eStatus);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocNetwork_GetSSID(self: *const T, ppszwSSID: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocNetwork.VTable, self.vtable).GetSSID(@ptrCast(*const IDot11AdHocNetwork, self), ppszwSSID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocNetwork_HasProfile(self: *const T, pf11d: *u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocNetwork.VTable, self.vtable).HasProfile(@ptrCast(*const IDot11AdHocNetwork, self), pf11d);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocNetwork_GetProfileName(self: *const T, ppszwProfileName: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocNetwork.VTable, self.vtable).GetProfileName(@ptrCast(*const IDot11AdHocNetwork, self), ppszwProfileName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocNetwork_DeleteProfile(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocNetwork.VTable, self.vtable).DeleteProfile(@ptrCast(*const IDot11AdHocNetwork, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocNetwork_GetSignalQuality(self: *const T, puStrengthValue: *u32, puStrengthMax: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocNetwork.VTable, self.vtable).GetSignalQuality(@ptrCast(*const IDot11AdHocNetwork, self), puStrengthValue, puStrengthMax);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocNetwork_GetSecuritySetting(self: *const T, pAdHocSecuritySetting: **IDot11AdHocSecuritySettings) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocNetwork.VTable, self.vtable).GetSecuritySetting(@ptrCast(*const IDot11AdHocNetwork, self), pAdHocSecuritySetting);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocNetwork_GetContextGuid(self: *const T, pContextGuid: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocNetwork.VTable, self.vtable).GetContextGuid(@ptrCast(*const IDot11AdHocNetwork, self), pContextGuid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocNetwork_GetSignature(self: *const T, pSignature: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocNetwork.VTable, self.vtable).GetSignature(@ptrCast(*const IDot11AdHocNetwork, self), pSignature);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocNetwork_GetInterface(self: *const T, pAdHocInterface: **IDot11AdHocInterface) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocNetwork.VTable, self.vtable).GetInterface(@ptrCast(*const IDot11AdHocNetwork, self), pAdHocInterface);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocNetwork_Connect(self: *const T, Passphrase: [*:0]const u16, GeographicalId: i32, fSaveProfile: u8, fMakeSavedProfileUserSpecific: u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocNetwork.VTable, self.vtable).Connect(@ptrCast(*const IDot11AdHocNetwork, self), Passphrase, GeographicalId, fSaveProfile, fMakeSavedProfileUserSpecific);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocNetwork_Disconnect(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocNetwork.VTable, self.vtable).Disconnect(@ptrCast(*const IDot11AdHocNetwork, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDot11AdHocNetworkNotificationSink_Value = @import("../zig.zig").Guid.initString("8f10cc2a-cf0d-42a0-acbe-e2de7007384d");
pub const IID_IDot11AdHocNetworkNotificationSink = &IID_IDot11AdHocNetworkNotificationSink_Value;
pub const IDot11AdHocNetworkNotificationSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnStatusChange: fn(
            self: *const IDot11AdHocNetworkNotificationSink,
            eStatus: DOT11_ADHOC_NETWORK_CONNECTION_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnConnectFail: fn(
            self: *const IDot11AdHocNetworkNotificationSink,
            eFailReason: DOT11_ADHOC_CONNECT_FAIL_REASON,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocNetworkNotificationSink_OnStatusChange(self: *const T, eStatus: DOT11_ADHOC_NETWORK_CONNECTION_STATUS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocNetworkNotificationSink.VTable, self.vtable).OnStatusChange(@ptrCast(*const IDot11AdHocNetworkNotificationSink, self), eStatus);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocNetworkNotificationSink_OnConnectFail(self: *const T, eFailReason: DOT11_ADHOC_CONNECT_FAIL_REASON) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocNetworkNotificationSink.VTable, self.vtable).OnConnectFail(@ptrCast(*const IDot11AdHocNetworkNotificationSink, self), eFailReason);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDot11AdHocInterface_Value = @import("../zig.zig").Guid.initString("8f10cc2b-cf0d-42a0-acbe-e2de7007384d");
pub const IID_IDot11AdHocInterface = &IID_IDot11AdHocInterface_Value;
pub const IDot11AdHocInterface = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDeviceSignature: fn(
            self: *const IDot11AdHocInterface,
            pSignature: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFriendlyName: fn(
            self: *const IDot11AdHocInterface,
            ppszName: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsDot11d: fn(
            self: *const IDot11AdHocInterface,
            pf11d: *u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsAdHocCapable: fn(
            self: *const IDot11AdHocInterface,
            pfAdHocCapable: *u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsRadioOn: fn(
            self: *const IDot11AdHocInterface,
            pfIsRadioOn: *u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetActiveNetwork: fn(
            self: *const IDot11AdHocInterface,
            ppNetwork: **IDot11AdHocNetwork,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIEnumSecuritySettings: fn(
            self: *const IDot11AdHocInterface,
            ppEnum: **IEnumDot11AdHocSecuritySettings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIEnumDot11AdHocNetworks: fn(
            self: *const IDot11AdHocInterface,
            pFilterGuid: *Guid,
            ppEnum: **IEnumDot11AdHocNetworks,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStatus: fn(
            self: *const IDot11AdHocInterface,
            pState: *DOT11_ADHOC_NETWORK_CONNECTION_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocInterface_GetDeviceSignature(self: *const T, pSignature: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocInterface.VTable, self.vtable).GetDeviceSignature(@ptrCast(*const IDot11AdHocInterface, self), pSignature);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocInterface_GetFriendlyName(self: *const T, ppszName: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocInterface.VTable, self.vtable).GetFriendlyName(@ptrCast(*const IDot11AdHocInterface, self), ppszName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocInterface_IsDot11d(self: *const T, pf11d: *u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocInterface.VTable, self.vtable).IsDot11d(@ptrCast(*const IDot11AdHocInterface, self), pf11d);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocInterface_IsAdHocCapable(self: *const T, pfAdHocCapable: *u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocInterface.VTable, self.vtable).IsAdHocCapable(@ptrCast(*const IDot11AdHocInterface, self), pfAdHocCapable);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocInterface_IsRadioOn(self: *const T, pfIsRadioOn: *u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocInterface.VTable, self.vtable).IsRadioOn(@ptrCast(*const IDot11AdHocInterface, self), pfIsRadioOn);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocInterface_GetActiveNetwork(self: *const T, ppNetwork: **IDot11AdHocNetwork) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocInterface.VTable, self.vtable).GetActiveNetwork(@ptrCast(*const IDot11AdHocInterface, self), ppNetwork);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocInterface_GetIEnumSecuritySettings(self: *const T, ppEnum: **IEnumDot11AdHocSecuritySettings) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocInterface.VTable, self.vtable).GetIEnumSecuritySettings(@ptrCast(*const IDot11AdHocInterface, self), ppEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocInterface_GetIEnumDot11AdHocNetworks(self: *const T, pFilterGuid: *Guid, ppEnum: **IEnumDot11AdHocNetworks) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocInterface.VTable, self.vtable).GetIEnumDot11AdHocNetworks(@ptrCast(*const IDot11AdHocInterface, self), pFilterGuid, ppEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocInterface_GetStatus(self: *const T, pState: *DOT11_ADHOC_NETWORK_CONNECTION_STATUS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocInterface.VTable, self.vtable).GetStatus(@ptrCast(*const IDot11AdHocInterface, self), pState);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IEnumDot11AdHocInterfaces_Value = @import("../zig.zig").Guid.initString("8f10cc2c-cf0d-42a0-acbe-e2de7007384d");
pub const IID_IEnumDot11AdHocInterfaces = &IID_IEnumDot11AdHocInterfaces_Value;
pub const IEnumDot11AdHocInterfaces = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: fn(
            self: *const IEnumDot11AdHocInterfaces,
            cElt: u32,
            rgElt: [*]*IDot11AdHocInterface,
            pcEltFetched: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumDot11AdHocInterfaces,
            cElt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumDot11AdHocInterfaces,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IEnumDot11AdHocInterfaces,
            ppEnum: **IEnumDot11AdHocInterfaces,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumDot11AdHocInterfaces_Next(self: *const T, cElt: u32, rgElt: [*]*IDot11AdHocInterface, pcEltFetched: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumDot11AdHocInterfaces.VTable, self.vtable).Next(@ptrCast(*const IEnumDot11AdHocInterfaces, self), cElt, rgElt, pcEltFetched);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumDot11AdHocInterfaces_Skip(self: *const T, cElt: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumDot11AdHocInterfaces.VTable, self.vtable).Skip(@ptrCast(*const IEnumDot11AdHocInterfaces, self), cElt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumDot11AdHocInterfaces_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumDot11AdHocInterfaces.VTable, self.vtable).Reset(@ptrCast(*const IEnumDot11AdHocInterfaces, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumDot11AdHocInterfaces_Clone(self: *const T, ppEnum: **IEnumDot11AdHocInterfaces) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumDot11AdHocInterfaces.VTable, self.vtable).Clone(@ptrCast(*const IEnumDot11AdHocInterfaces, self), ppEnum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IEnumDot11AdHocSecuritySettings_Value = @import("../zig.zig").Guid.initString("8f10cc2d-cf0d-42a0-acbe-e2de7007384d");
pub const IID_IEnumDot11AdHocSecuritySettings = &IID_IEnumDot11AdHocSecuritySettings_Value;
pub const IEnumDot11AdHocSecuritySettings = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: fn(
            self: *const IEnumDot11AdHocSecuritySettings,
            cElt: u32,
            rgElt: [*]*IDot11AdHocSecuritySettings,
            pcEltFetched: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumDot11AdHocSecuritySettings,
            cElt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumDot11AdHocSecuritySettings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IEnumDot11AdHocSecuritySettings,
            ppEnum: **IEnumDot11AdHocSecuritySettings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumDot11AdHocSecuritySettings_Next(self: *const T, cElt: u32, rgElt: [*]*IDot11AdHocSecuritySettings, pcEltFetched: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumDot11AdHocSecuritySettings.VTable, self.vtable).Next(@ptrCast(*const IEnumDot11AdHocSecuritySettings, self), cElt, rgElt, pcEltFetched);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumDot11AdHocSecuritySettings_Skip(self: *const T, cElt: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumDot11AdHocSecuritySettings.VTable, self.vtable).Skip(@ptrCast(*const IEnumDot11AdHocSecuritySettings, self), cElt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumDot11AdHocSecuritySettings_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumDot11AdHocSecuritySettings.VTable, self.vtable).Reset(@ptrCast(*const IEnumDot11AdHocSecuritySettings, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumDot11AdHocSecuritySettings_Clone(self: *const T, ppEnum: **IEnumDot11AdHocSecuritySettings) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumDot11AdHocSecuritySettings.VTable, self.vtable).Clone(@ptrCast(*const IEnumDot11AdHocSecuritySettings, self), ppEnum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDot11AdHocSecuritySettings_Value = @import("../zig.zig").Guid.initString("8f10cc2e-cf0d-42a0-acbe-e2de7007384d");
pub const IID_IDot11AdHocSecuritySettings = &IID_IDot11AdHocSecuritySettings_Value;
pub const IDot11AdHocSecuritySettings = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDot11AuthAlgorithm: fn(
            self: *const IDot11AdHocSecuritySettings,
            pAuth: *DOT11_ADHOC_AUTH_ALGORITHM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDot11CipherAlgorithm: fn(
            self: *const IDot11AdHocSecuritySettings,
            pCipher: *DOT11_ADHOC_CIPHER_ALGORITHM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocSecuritySettings_GetDot11AuthAlgorithm(self: *const T, pAuth: *DOT11_ADHOC_AUTH_ALGORITHM) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocSecuritySettings.VTable, self.vtable).GetDot11AuthAlgorithm(@ptrCast(*const IDot11AdHocSecuritySettings, self), pAuth);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocSecuritySettings_GetDot11CipherAlgorithm(self: *const T, pCipher: *DOT11_ADHOC_CIPHER_ALGORITHM) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocSecuritySettings.VTable, self.vtable).GetDot11CipherAlgorithm(@ptrCast(*const IDot11AdHocSecuritySettings, self), pCipher);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDot11AdHocInterfaceNotificationSink_Value = @import("../zig.zig").Guid.initString("8f10cc2f-cf0d-42a0-acbe-e2de7007384d");
pub const IID_IDot11AdHocInterfaceNotificationSink = &IID_IDot11AdHocInterfaceNotificationSink_Value;
pub const IDot11AdHocInterfaceNotificationSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnConnectionStatusChange: fn(
            self: *const IDot11AdHocInterfaceNotificationSink,
            eStatus: DOT11_ADHOC_NETWORK_CONNECTION_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocInterfaceNotificationSink_OnConnectionStatusChange(self: *const T, eStatus: DOT11_ADHOC_NETWORK_CONNECTION_STATUS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocInterfaceNotificationSink.VTable, self.vtable).OnConnectionStatusChange(@ptrCast(*const IDot11AdHocInterfaceNotificationSink, self), eStatus);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const WLAN_SET_EAPHOST_FLAGS = extern enum(u32) {
    S = 1,
};
pub const WLAN_SET_EAPHOST_DATA_ALL_USERS = WLAN_SET_EAPHOST_FLAGS.S;

pub const WLAN_CONNECTION_NOTIFICATION_FLAGS = extern enum(u32) {
    ADHOC_NETWORK_FORMED = 1,
    CONSOLE_USER_PROFILE = 4,
};
pub const WLAN_CONNECTION_NOTIFICATION_ADHOC_NETWORK_FORMED = WLAN_CONNECTION_NOTIFICATION_FLAGS.ADHOC_NETWORK_FORMED;
pub const WLAN_CONNECTION_NOTIFICATION_CONSOLE_USER_PROFILE = WLAN_CONNECTION_NOTIFICATION_FLAGS.CONSOLE_USER_PROFILE;


//--------------------------------------------------------------------------------
// Section: Functions (61)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wlanapi" fn WlanOpenHandle(
    dwClientVersion: u32,
    pReserved: *c_void,
    pdwNegotiatedVersion: *u32,
    phClientHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wlanapi" fn WlanCloseHandle(
    hClientHandle: HANDLE,
    pReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wlanapi" fn WlanEnumInterfaces(
    hClientHandle: HANDLE,
    pReserved: *c_void,
    ppInterfaceList: **WLAN_INTERFACE_INFO_LIST,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wlanapi" fn WlanSetAutoConfigParameter(
    hClientHandle: HANDLE,
    OpCode: WLAN_AUTOCONF_OPCODE,
    dwDataSize: u32,
    // TODO: what to do with BytesParamIndex 2?
    pData: *const c_void,
    pReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wlanapi" fn WlanQueryAutoConfigParameter(
    hClientHandle: HANDLE,
    OpCode: WLAN_AUTOCONF_OPCODE,
    pReserved: *c_void,
    pdwDataSize: *u32,
    ppData: **c_void,
    pWlanOpcodeValueType: ?*WLAN_OPCODE_VALUE_TYPE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wlanapi" fn WlanGetInterfaceCapability(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    pReserved: *c_void,
    ppCapability: **WLAN_INTERFACE_CAPABILITY,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wlanapi" fn WlanSetInterface(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    OpCode: WLAN_INTF_OPCODE,
    dwDataSize: u32,
    // TODO: what to do with BytesParamIndex 3?
    pData: *const c_void,
    pReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wlanapi" fn WlanQueryInterface(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    OpCode: WLAN_INTF_OPCODE,
    pReserved: *c_void,
    pdwDataSize: *u32,
    ppData: **c_void,
    pWlanOpcodeValueType: ?*WLAN_OPCODE_VALUE_TYPE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wlanapi" fn WlanIhvControl(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    Type: WLAN_IHV_CONTROL_TYPE,
    dwInBufferSize: u32,
    // TODO: what to do with BytesParamIndex 3?
    pInBuffer: *c_void,
    dwOutBufferSize: u32,
    // TODO: what to do with BytesParamIndex 5?
    pOutBuffer: ?*c_void,
    pdwBytesReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wlanapi" fn WlanScan(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    pDot11Ssid: ?*const DOT11_SSID,
    pIeData: ?*const WLAN_RAW_DATA,
    pReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wlanapi" fn WlanGetAvailableNetworkList(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    dwFlags: u32,
    pReserved: *c_void,
    ppAvailableNetworkList: **WLAN_AVAILABLE_NETWORK_LIST,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanGetAvailableNetworkList2(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    dwFlags: u32,
    pReserved: *c_void,
    ppAvailableNetworkList: **WLAN_AVAILABLE_NETWORK_LIST_V2,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wlanapi" fn WlanGetNetworkBssList(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    pDot11Ssid: ?*const DOT11_SSID,
    dot11BssType: DOT11_BSS_TYPE,
    bSecurityEnabled: BOOL,
    pReserved: *c_void,
    ppWlanBssList: **WLAN_BSS_LIST,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wlanapi" fn WlanConnect(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    pConnectionParameters: *const WLAN_CONNECTION_PARAMETERS,
    pReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanConnect2(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    pConnectionParameters: *const WLAN_CONNECTION_PARAMETERS_V2,
    pReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wlanapi" fn WlanDisconnect(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    pReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wlanapi" fn WlanRegisterNotification(
    hClientHandle: HANDLE,
    dwNotifSource: u32,
    bIgnoreDuplicate: BOOL,
    funcCallback: ?WLAN_NOTIFICATION_CALLBACK,
    pCallbackContext: ?*c_void,
    pReserved: *c_void,
    pdwPrevNotifSource: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wlanapi" fn WlanGetProfile(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    strProfileName: [*:0]const u16,
    pReserved: *c_void,
    pstrProfileXml: *PWSTR,
    pdwFlags: ?*u32,
    pdwGrantedAccess: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wlanapi" fn WlanSetProfileEapUserData(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    strProfileName: [*:0]const u16,
    eapType: EAP_METHOD_TYPE,
    dwFlags: WLAN_SET_EAPHOST_FLAGS,
    dwEapUserDataSize: u32,
    // TODO: what to do with BytesParamIndex 5?
    pbEapUserData: ?*const u8,
    pReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wlanapi" fn WlanSetProfileEapXmlUserData(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    strProfileName: [*:0]const u16,
    dwFlags: WLAN_SET_EAPHOST_FLAGS,
    strEapXmlUserData: [*:0]const u16,
    pReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wlanapi" fn WlanSetProfile(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    dwFlags: u32,
    strProfileXml: [*:0]const u16,
    strAllUserProfileSecurity: ?[*:0]const u16,
    bOverwrite: BOOL,
    pReserved: *c_void,
    pdwReasonCode: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wlanapi" fn WlanDeleteProfile(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    strProfileName: [*:0]const u16,
    pReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wlanapi" fn WlanRenameProfile(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    strOldProfileName: [*:0]const u16,
    strNewProfileName: [*:0]const u16,
    pReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wlanapi" fn WlanGetProfileList(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    pReserved: *c_void,
    ppProfileList: **WLAN_PROFILE_INFO_LIST,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wlanapi" fn WlanSetProfileList(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    dwItems: u32,
    strProfileNames: [*]PWSTR,
    pReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wlanapi" fn WlanSetProfilePosition(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    strProfileName: [*:0]const u16,
    dwPosition: u32,
    pReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wlanapi" fn WlanSetProfileCustomUserData(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    strProfileName: [*:0]const u16,
    dwDataSize: u32,
    // TODO: what to do with BytesParamIndex 3?
    pData: *const u8,
    pReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wlanapi" fn WlanGetProfileCustomUserData(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    strProfileName: [*:0]const u16,
    pReserved: *c_void,
    pdwDataSize: *u32,
    ppData: **u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wlanapi" fn WlanSetFilterList(
    hClientHandle: HANDLE,
    wlanFilterListType: WLAN_FILTER_LIST_TYPE,
    pNetworkList: ?*const DOT11_NETWORK_LIST,
    pReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wlanapi" fn WlanGetFilterList(
    hClientHandle: HANDLE,
    wlanFilterListType: WLAN_FILTER_LIST_TYPE,
    pReserved: *c_void,
    ppNetworkList: **DOT11_NETWORK_LIST,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wlanapi" fn WlanSetPsdIEDataList(
    hClientHandle: HANDLE,
    strFormat: ?[*:0]const u16,
    pPsdIEDataList: ?*const WLAN_RAW_DATA_LIST,
    pReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wlanapi" fn WlanSaveTemporaryProfile(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    strProfileName: [*:0]const u16,
    strAllUserProfileSecurity: ?[*:0]const u16,
    dwFlags: u32,
    bOverWrite: BOOL,
    pReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanDeviceServiceCommand(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    pDeviceServiceGuid: *Guid,
    dwOpCode: u32,
    dwInBufferSize: u32,
    // TODO: what to do with BytesParamIndex 4?
    pInBuffer: ?*c_void,
    dwOutBufferSize: u32,
    // TODO: what to do with BytesParamIndex 6?
    pOutBuffer: ?*c_void,
    pdwBytesReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanGetSupportedDeviceServices(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    ppDevSvcGuidList: **WLAN_DEVICE_SERVICE_GUID_LIST,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanRegisterDeviceServiceNotification(
    hClientHandle: HANDLE,
    pDevSvcGuidList: ?*const WLAN_DEVICE_SERVICE_GUID_LIST,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wlanapi" fn WlanExtractPsdIEDataList(
    hClientHandle: HANDLE,
    dwIeDataSize: u32,
    // TODO: what to do with BytesParamIndex 1?
    pRawIeData: *const u8,
    strFormat: [*:0]const u16,
    pReserved: *c_void,
    ppPsdIEDataList: **WLAN_RAW_DATA_LIST,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wlanapi" fn WlanReasonCodeToString(
    dwReasonCode: u32,
    dwBufferSize: u32,
    pStringBuffer: [*]u16,
    pReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wlanapi" fn WlanAllocateMemory(
    dwMemorySize: u32,
) callconv(@import("std").os.windows.WINAPI) *c_void;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wlanapi" fn WlanFreeMemory(
    pMemory: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wlanapi" fn WlanSetSecuritySettings(
    hClientHandle: HANDLE,
    SecurableObject: WLAN_SECURABLE_OBJECT,
    strModifiedSDDL: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wlanapi" fn WlanGetSecuritySettings(
    hClientHandle: HANDLE,
    SecurableObject: WLAN_SECURABLE_OBJECT,
    pValueType: ?*WLAN_OPCODE_VALUE_TYPE,
    pstrCurrentSDDL: *PWSTR,
    pdwGrantedAccess: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wlanapi" fn WlanUIEditProfile(
    dwClientVersion: u32,
    wstrProfileName: [*:0]const u16,
    pInterfaceGuid: *Guid,
    hWnd: HWND,
    wlStartPage: WL_DISPLAY_PAGES,
    pReserved: *c_void,
    pWlanReasonCode: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "wlanapi" fn WlanHostedNetworkStartUsing(
    hClientHandle: HANDLE,
    pFailReason: ?*WLAN_HOSTED_NETWORK_REASON,
    pvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "wlanapi" fn WlanHostedNetworkStopUsing(
    hClientHandle: HANDLE,
    pFailReason: ?*WLAN_HOSTED_NETWORK_REASON,
    pvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "wlanapi" fn WlanHostedNetworkForceStart(
    hClientHandle: HANDLE,
    pFailReason: ?*WLAN_HOSTED_NETWORK_REASON,
    pvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "wlanapi" fn WlanHostedNetworkForceStop(
    hClientHandle: HANDLE,
    pFailReason: ?*WLAN_HOSTED_NETWORK_REASON,
    pvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "wlanapi" fn WlanHostedNetworkQueryProperty(
    hClientHandle: HANDLE,
    OpCode: WLAN_HOSTED_NETWORK_OPCODE,
    pdwDataSize: *u32,
    ppvData: **c_void,
    pWlanOpcodeValueType: *WLAN_OPCODE_VALUE_TYPE,
    pvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "wlanapi" fn WlanHostedNetworkSetProperty(
    hClientHandle: HANDLE,
    OpCode: WLAN_HOSTED_NETWORK_OPCODE,
    dwDataSize: u32,
    // TODO: what to do with BytesParamIndex 2?
    pvData: *c_void,
    pFailReason: ?*WLAN_HOSTED_NETWORK_REASON,
    pvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "wlanapi" fn WlanHostedNetworkInitSettings(
    hClientHandle: HANDLE,
    pFailReason: ?*WLAN_HOSTED_NETWORK_REASON,
    pvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "wlanapi" fn WlanHostedNetworkRefreshSecuritySettings(
    hClientHandle: HANDLE,
    pFailReason: ?*WLAN_HOSTED_NETWORK_REASON,
    pvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "wlanapi" fn WlanHostedNetworkQueryStatus(
    hClientHandle: HANDLE,
    ppWlanHostedNetworkStatus: **WLAN_HOSTED_NETWORK_STATUS,
    pvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "wlanapi" fn WlanHostedNetworkSetSecondaryKey(
    hClientHandle: HANDLE,
    dwKeyLength: u32,
    // TODO: what to do with BytesParamIndex 1?
    pucKeyData: *u8,
    bIsPassPhrase: BOOL,
    bPersistent: BOOL,
    pFailReason: ?*WLAN_HOSTED_NETWORK_REASON,
    pvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "wlanapi" fn WlanHostedNetworkQuerySecondaryKey(
    hClientHandle: HANDLE,
    pdwKeyLength: *u32,
    ppucKeyData: **u8,
    pbIsPassPhrase: *BOOL,
    pbPersistent: *BOOL,
    pFailReason: ?*WLAN_HOSTED_NETWORK_REASON,
    pvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "wlanapi" fn WlanRegisterVirtualStationNotification(
    hClientHandle: HANDLE,
    bRegister: BOOL,
    pReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "wlanapi" fn WFDOpenHandle(
    dwClientVersion: u32,
    pdwNegotiatedVersion: *u32,
    phClientHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "wlanapi" fn WFDCloseHandle(
    hClientHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "wlanapi" fn WFDStartOpenSession(
    hClientHandle: HANDLE,
    pDeviceAddress: **u8,
    pvContext: ?*c_void,
    pfnCallback: WFD_OPEN_SESSION_COMPLETE_CALLBACK,
    phSessionHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "wlanapi" fn WFDCancelOpenSession(
    hSessionHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "wlanapi" fn WFDOpenLegacySession(
    hClientHandle: HANDLE,
    pLegacyMacAddress: **u8,
    phSessionHandle: *HANDLE,
    pGuidSessionInterface: *Guid,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "wlanapi" fn WFDCloseSession(
    hSessionHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "wlanapi" fn WFDUpdateDeviceVisibility(
    pDeviceAddress: **u8,
) callconv(@import("std").os.windows.WINAPI) u32;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (17)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const NET_LUID_LH = @import("ip_helper.zig").NET_LUID_LH;
const PWSTR = @import("system_services.zig").PWSTR;
const CHAR = @import("system_services.zig").CHAR;
const IUnknown = @import("com.zig").IUnknown;
const L2_NOTIFICATION_DATA = @import("network_drivers.zig").L2_NOTIFICATION_DATA;
const HRESULT = @import("com.zig").HRESULT;
const NET_IF_OPER_STATUS = @import("network_drivers.zig").NET_IF_OPER_STATUS;
const BOOL = @import("system_services.zig").BOOL;
const HWND = @import("windows_and_messaging.zig").HWND;
const NET_IF_MEDIA_CONNECT_STATE = @import("network_drivers.zig").NET_IF_MEDIA_CONNECT_STATE;
const LARGE_INTEGER = @import("system_services.zig").LARGE_INTEGER;
const EAP_METHOD_TYPE = @import("extensible_authentication_protocol.zig").EAP_METHOD_TYPE;
const PROPERTYKEY = @import("windows_properties_system.zig").PROPERTYKEY;
const NET_IF_DIRECTION_TYPE = @import("network_drivers.zig").NET_IF_DIRECTION_TYPE;
const HANDLE = @import("system_services.zig").HANDLE;
const NET_IF_MEDIA_DUPLEX_STATE = @import("network_drivers.zig").NET_IF_MEDIA_DUPLEX_STATE;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "WLAN_NOTIFICATION_CALLBACK")) { _ = WLAN_NOTIFICATION_CALLBACK; }
    if (@hasDecl(@This(), "WFD_OPEN_SESSION_COMPLETE_CALLBACK")) { _ = WFD_OPEN_SESSION_COMPLETE_CALLBACK; }

    @setEvalBranchQuota(
        @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("std").builtin.is_test) return;
    inline for (@import("std").meta.declarations(@This())) |decl| {
        if (decl.is_pub) {
            _ = decl;
        }
    }
}
