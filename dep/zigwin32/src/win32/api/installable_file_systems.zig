//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (4)
//--------------------------------------------------------------------------------
pub const FILTER_NAME_MAX_CHARS = @as(u32, 255);
pub const VOLUME_NAME_MAX_CHARS = @as(u32, 1024);
pub const INSTANCE_NAME_MAX_CHARS = @as(u32, 255);
pub const FLT_PORT_FLAG_SYNC_HANDLE = @as(u32, 1);

//--------------------------------------------------------------------------------
// Section: Types (21)
//--------------------------------------------------------------------------------
// TODO: this type has a FreeFunc 'FilterClose', what can Zig do with this information?
pub const HFILTER = ?*opaque{};

// TODO: this type has a FreeFunc 'FilterInstanceClose', what can Zig do with this information?
pub const HFILTER_INSTANCE = isize;

// TODO: this type has a FreeFunc 'FilterFindClose', what can Zig do with this information?
pub const FilterFindHandle = isize;

// TODO: this type has a FreeFunc 'FilterVolumeFindClose', what can Zig do with this information?
pub const FilterVolumeFindHandle = isize;

// TODO: this type has a FreeFunc 'FilterInstanceFindClose', what can Zig do with this information?
pub const FilterInstanceFindHandle = isize;

// TODO: this type has a FreeFunc 'FilterVolumeInstanceFindClose', what can Zig do with this information?
pub const FilterVolumeInstanceFindHandle = isize;

pub const FLT_FILESYSTEM_TYPE = extern enum(i32) {
    UNKNOWN = 0,
    RAW = 1,
    NTFS = 2,
    FAT = 3,
    CDFS = 4,
    UDFS = 5,
    LANMAN = 6,
    WEBDAV = 7,
    RDPDR = 8,
    NFS = 9,
    MS_NETWARE = 10,
    NETWARE = 11,
    BSUDF = 12,
    MUP = 13,
    RSFX = 14,
    ROXIO_UDF1 = 15,
    ROXIO_UDF2 = 16,
    ROXIO_UDF3 = 17,
    TACIT = 18,
    FS_REC = 19,
    INCD = 20,
    INCD_FAT = 21,
    EXFAT = 22,
    PSFS = 23,
    GPFS = 24,
    NPFS = 25,
    MSFS = 26,
    CSVFS = 27,
    REFS = 28,
    OPENAFS = 29,
    CIMFS = 30,
};
pub const FLT_FSTYPE_UNKNOWN = FLT_FILESYSTEM_TYPE.UNKNOWN;
pub const FLT_FSTYPE_RAW = FLT_FILESYSTEM_TYPE.RAW;
pub const FLT_FSTYPE_NTFS = FLT_FILESYSTEM_TYPE.NTFS;
pub const FLT_FSTYPE_FAT = FLT_FILESYSTEM_TYPE.FAT;
pub const FLT_FSTYPE_CDFS = FLT_FILESYSTEM_TYPE.CDFS;
pub const FLT_FSTYPE_UDFS = FLT_FILESYSTEM_TYPE.UDFS;
pub const FLT_FSTYPE_LANMAN = FLT_FILESYSTEM_TYPE.LANMAN;
pub const FLT_FSTYPE_WEBDAV = FLT_FILESYSTEM_TYPE.WEBDAV;
pub const FLT_FSTYPE_RDPDR = FLT_FILESYSTEM_TYPE.RDPDR;
pub const FLT_FSTYPE_NFS = FLT_FILESYSTEM_TYPE.NFS;
pub const FLT_FSTYPE_MS_NETWARE = FLT_FILESYSTEM_TYPE.MS_NETWARE;
pub const FLT_FSTYPE_NETWARE = FLT_FILESYSTEM_TYPE.NETWARE;
pub const FLT_FSTYPE_BSUDF = FLT_FILESYSTEM_TYPE.BSUDF;
pub const FLT_FSTYPE_MUP = FLT_FILESYSTEM_TYPE.MUP;
pub const FLT_FSTYPE_RSFX = FLT_FILESYSTEM_TYPE.RSFX;
pub const FLT_FSTYPE_ROXIO_UDF1 = FLT_FILESYSTEM_TYPE.ROXIO_UDF1;
pub const FLT_FSTYPE_ROXIO_UDF2 = FLT_FILESYSTEM_TYPE.ROXIO_UDF2;
pub const FLT_FSTYPE_ROXIO_UDF3 = FLT_FILESYSTEM_TYPE.ROXIO_UDF3;
pub const FLT_FSTYPE_TACIT = FLT_FILESYSTEM_TYPE.TACIT;
pub const FLT_FSTYPE_FS_REC = FLT_FILESYSTEM_TYPE.FS_REC;
pub const FLT_FSTYPE_INCD = FLT_FILESYSTEM_TYPE.INCD;
pub const FLT_FSTYPE_INCD_FAT = FLT_FILESYSTEM_TYPE.INCD_FAT;
pub const FLT_FSTYPE_EXFAT = FLT_FILESYSTEM_TYPE.EXFAT;
pub const FLT_FSTYPE_PSFS = FLT_FILESYSTEM_TYPE.PSFS;
pub const FLT_FSTYPE_GPFS = FLT_FILESYSTEM_TYPE.GPFS;
pub const FLT_FSTYPE_NPFS = FLT_FILESYSTEM_TYPE.NPFS;
pub const FLT_FSTYPE_MSFS = FLT_FILESYSTEM_TYPE.MSFS;
pub const FLT_FSTYPE_CSVFS = FLT_FILESYSTEM_TYPE.CSVFS;
pub const FLT_FSTYPE_REFS = FLT_FILESYSTEM_TYPE.REFS;
pub const FLT_FSTYPE_OPENAFS = FLT_FILESYSTEM_TYPE.OPENAFS;
pub const FLT_FSTYPE_CIMFS = FLT_FILESYSTEM_TYPE.CIMFS;

pub const FILTER_INFORMATION_CLASS = extern enum(i32) {
    FullInformation = 0,
    AggregateBasicInformation = 1,
    AggregateStandardInformation = 2,
};
pub const FilterFullInformation = FILTER_INFORMATION_CLASS.FullInformation;
pub const FilterAggregateBasicInformation = FILTER_INFORMATION_CLASS.AggregateBasicInformation;
pub const FilterAggregateStandardInformation = FILTER_INFORMATION_CLASS.AggregateStandardInformation;

pub const FILTER_FULL_INFORMATION = extern struct {
    NextEntryOffset: u32,
    FrameID: u32,
    NumberOfInstances: u32,
    FilterNameLength: u16,
    FilterNameBuffer: [1]u16,
};

pub const FILTER_AGGREGATE_BASIC_INFORMATION = extern struct {
    NextEntryOffset: u32,
    Flags: u32,
    Type: _Type_e__Union,
    const _Type_e__Union = u32; // TODO: generate this nested type!
};

pub const FILTER_AGGREGATE_STANDARD_INFORMATION = extern struct {
    NextEntryOffset: u32,
    Flags: u32,
    Type: _Type_e__Union,
    const _Type_e__Union = u32; // TODO: generate this nested type!
};

pub const FILTER_VOLUME_INFORMATION_CLASS = extern enum(i32) {
    BasicInformation = 0,
    StandardInformation = 1,
};
pub const FilterVolumeBasicInformation = FILTER_VOLUME_INFORMATION_CLASS.BasicInformation;
pub const FilterVolumeStandardInformation = FILTER_VOLUME_INFORMATION_CLASS.StandardInformation;

pub const FILTER_VOLUME_BASIC_INFORMATION = extern struct {
    FilterVolumeNameLength: u16,
    FilterVolumeName: [1]u16,
};

pub const FILTER_VOLUME_STANDARD_INFORMATION = extern struct {
    NextEntryOffset: u32,
    Flags: u32,
    FrameID: u32,
    FileSystemType: FLT_FILESYSTEM_TYPE,
    FilterVolumeNameLength: u16,
    FilterVolumeName: [1]u16,
};

pub const INSTANCE_INFORMATION_CLASS = extern enum(i32) {
    BasicInformation = 0,
    PartialInformation = 1,
    FullInformation = 2,
    AggregateStandardInformation = 3,
};
pub const InstanceBasicInformation = INSTANCE_INFORMATION_CLASS.BasicInformation;
pub const InstancePartialInformation = INSTANCE_INFORMATION_CLASS.PartialInformation;
pub const InstanceFullInformation = INSTANCE_INFORMATION_CLASS.FullInformation;
pub const InstanceAggregateStandardInformation = INSTANCE_INFORMATION_CLASS.AggregateStandardInformation;

pub const INSTANCE_BASIC_INFORMATION = extern struct {
    NextEntryOffset: u32,
    InstanceNameLength: u16,
    InstanceNameBufferOffset: u16,
};

pub const INSTANCE_PARTIAL_INFORMATION = extern struct {
    NextEntryOffset: u32,
    InstanceNameLength: u16,
    InstanceNameBufferOffset: u16,
    AltitudeLength: u16,
    AltitudeBufferOffset: u16,
};

pub const INSTANCE_FULL_INFORMATION = extern struct {
    NextEntryOffset: u32,
    InstanceNameLength: u16,
    InstanceNameBufferOffset: u16,
    AltitudeLength: u16,
    AltitudeBufferOffset: u16,
    VolumeNameLength: u16,
    VolumeNameBufferOffset: u16,
    FilterNameLength: u16,
    FilterNameBufferOffset: u16,
};

pub const INSTANCE_AGGREGATE_STANDARD_INFORMATION = extern struct {
    NextEntryOffset: u32,
    Flags: u32,
    Type: _Type_e__Union,
    const _Type_e__Union = u32; // TODO: generate this nested type!
};

pub const FILTER_MESSAGE_HEADER = extern struct {
    ReplyLength: u32,
    MessageId: u64,
};

pub const FILTER_REPLY_HEADER = extern struct {
    Status: NTSTATUS,
    MessageId: u64,
};


//--------------------------------------------------------------------------------
// Section: Functions (29)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "KERNEL32" fn RtlCaptureStackBackTrace(
    FramesToSkip: u32,
    FramesToCapture: u32,
    BackTrace: [*]*c_void,
    BackTraceHash: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "FLTLIB" fn FilterLoad(
    lpFilterName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "FLTLIB" fn FilterUnload(
    lpFilterName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "FLTLIB" fn FilterCreate(
    lpFilterName: [*:0]const u16,
    hFilter: *HFILTER,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "FLTLIB" fn FilterClose(
    hFilter: HFILTER,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "FLTLIB" fn FilterInstanceCreate(
    lpFilterName: [*:0]const u16,
    lpVolumeName: [*:0]const u16,
    lpInstanceName: ?[*:0]const u16,
    hInstance: *HFILTER_INSTANCE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "FLTLIB" fn FilterInstanceClose(
    hInstance: HFILTER_INSTANCE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "FLTLIB" fn FilterAttach(
    lpFilterName: [*:0]const u16,
    lpVolumeName: [*:0]const u16,
    lpInstanceName: ?[*:0]const u16,
    dwCreatedInstanceNameLength: u32,
    // TODO: what to do with BytesParamIndex 3?
    lpCreatedInstanceName: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "FLTLIB" fn FilterAttachAtAltitude(
    lpFilterName: [*:0]const u16,
    lpVolumeName: [*:0]const u16,
    lpAltitude: [*:0]const u16,
    lpInstanceName: ?[*:0]const u16,
    dwCreatedInstanceNameLength: u32,
    // TODO: what to do with BytesParamIndex 4?
    lpCreatedInstanceName: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "FLTLIB" fn FilterDetach(
    lpFilterName: [*:0]const u16,
    lpVolumeName: [*:0]const u16,
    lpInstanceName: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "FLTLIB" fn FilterFindFirst(
    dwInformationClass: FILTER_INFORMATION_CLASS,
    // TODO: what to do with BytesParamIndex 2?
    lpBuffer: *c_void,
    dwBufferSize: u32,
    lpBytesReturned: *u32,
    lpFilterFind: *FilterFindHandle,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "FLTLIB" fn FilterFindNext(
    hFilterFind: HANDLE,
    dwInformationClass: FILTER_INFORMATION_CLASS,
    // TODO: what to do with BytesParamIndex 3?
    lpBuffer: *c_void,
    dwBufferSize: u32,
    lpBytesReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "FLTLIB" fn FilterFindClose(
    hFilterFind: HANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "FLTLIB" fn FilterVolumeFindFirst(
    dwInformationClass: FILTER_VOLUME_INFORMATION_CLASS,
    // TODO: what to do with BytesParamIndex 2?
    lpBuffer: *c_void,
    dwBufferSize: u32,
    lpBytesReturned: *u32,
    lpVolumeFind: *FilterVolumeFindHandle,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "FLTLIB" fn FilterVolumeFindNext(
    hVolumeFind: HANDLE,
    dwInformationClass: FILTER_VOLUME_INFORMATION_CLASS,
    // TODO: what to do with BytesParamIndex 3?
    lpBuffer: *c_void,
    dwBufferSize: u32,
    lpBytesReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "FLTLIB" fn FilterVolumeFindClose(
    hVolumeFind: HANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "FLTLIB" fn FilterInstanceFindFirst(
    lpFilterName: [*:0]const u16,
    dwInformationClass: INSTANCE_INFORMATION_CLASS,
    // TODO: what to do with BytesParamIndex 3?
    lpBuffer: *c_void,
    dwBufferSize: u32,
    lpBytesReturned: *u32,
    lpFilterInstanceFind: *FilterInstanceFindHandle,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "FLTLIB" fn FilterInstanceFindNext(
    hFilterInstanceFind: HANDLE,
    dwInformationClass: INSTANCE_INFORMATION_CLASS,
    // TODO: what to do with BytesParamIndex 3?
    lpBuffer: *c_void,
    dwBufferSize: u32,
    lpBytesReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "FLTLIB" fn FilterInstanceFindClose(
    hFilterInstanceFind: HANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "FLTLIB" fn FilterVolumeInstanceFindFirst(
    lpVolumeName: [*:0]const u16,
    dwInformationClass: INSTANCE_INFORMATION_CLASS,
    // TODO: what to do with BytesParamIndex 3?
    lpBuffer: *c_void,
    dwBufferSize: u32,
    lpBytesReturned: *u32,
    lpVolumeInstanceFind: *FilterVolumeInstanceFindHandle,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "FLTLIB" fn FilterVolumeInstanceFindNext(
    hVolumeInstanceFind: HANDLE,
    dwInformationClass: INSTANCE_INFORMATION_CLASS,
    // TODO: what to do with BytesParamIndex 3?
    lpBuffer: *c_void,
    dwBufferSize: u32,
    lpBytesReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "FLTLIB" fn FilterVolumeInstanceFindClose(
    hVolumeInstanceFind: HANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "FLTLIB" fn FilterGetInformation(
    hFilter: HFILTER,
    dwInformationClass: FILTER_INFORMATION_CLASS,
    // TODO: what to do with BytesParamIndex 3?
    lpBuffer: *c_void,
    dwBufferSize: u32,
    lpBytesReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "FLTLIB" fn FilterInstanceGetInformation(
    hInstance: HFILTER_INSTANCE,
    dwInformationClass: INSTANCE_INFORMATION_CLASS,
    // TODO: what to do with BytesParamIndex 3?
    lpBuffer: *c_void,
    dwBufferSize: u32,
    lpBytesReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "FLTLIB" fn FilterConnectCommunicationPort(
    lpPortName: [*:0]const u16,
    dwOptions: u32,
    // TODO: what to do with BytesParamIndex 3?
    lpContext: ?*const c_void,
    wSizeOfContext: u16,
    lpSecurityAttributes: ?*SECURITY_ATTRIBUTES,
    hPort: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "FLTLIB" fn FilterSendMessage(
    hPort: HANDLE,
    // TODO: what to do with BytesParamIndex 2?
    lpInBuffer: *c_void,
    dwInBufferSize: u32,
    // TODO: what to do with BytesParamIndex 4?
    lpOutBuffer: ?*c_void,
    dwOutBufferSize: u32,
    lpBytesReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "FLTLIB" fn FilterGetMessage(
    hPort: HANDLE,
    // TODO: what to do with BytesParamIndex 2?
    lpMessageBuffer: *FILTER_MESSAGE_HEADER,
    dwMessageBufferSize: u32,
    lpOverlapped: ?*OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "FLTLIB" fn FilterReplyMessage(
    hPort: HANDLE,
    // TODO: what to do with BytesParamIndex 2?
    lpReplyBuffer: *FILTER_REPLY_HEADER,
    dwReplyBufferSize: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "FLTLIB" fn FilterGetDosName(
    lpVolumeName: [*:0]const u16,
    lpDosName: [*:0]u16,
    dwDosNameBufferSize: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (6)
//--------------------------------------------------------------------------------
const HRESULT = @import("com.zig").HRESULT;
const SECURITY_ATTRIBUTES = @import("system_services.zig").SECURITY_ATTRIBUTES;
const PWSTR = @import("system_services.zig").PWSTR;
const HANDLE = @import("system_services.zig").HANDLE;
const OVERLAPPED = @import("system_services.zig").OVERLAPPED;
const NTSTATUS = @import("system_services.zig").NTSTATUS;

test {
    @setEvalBranchQuota(
        @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("std").builtin.is_test) return;
    inline for (@import("std").meta.declarations(@This())) |decl| {
        if (decl.is_pub) {
            _ = decl;
        }
    }
}
