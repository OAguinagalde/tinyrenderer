//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (6)
//--------------------------------------------------------------------------------
const CLSID_XblIdpAuthManager_Value = @import("../zig.zig").Guid.initString("ce23534b-56d8-4978-86a2-7ee570640468");
pub const CLSID_XblIdpAuthManager = &CLSID_XblIdpAuthManager_Value;

const CLSID_XblIdpAuthTokenResult_Value = @import("../zig.zig").Guid.initString("9f493441-744a-410c-ae2b-9a22f7c7731f");
pub const CLSID_XblIdpAuthTokenResult = &CLSID_XblIdpAuthTokenResult_Value;

pub const XBL_IDP_AUTH_TOKEN_STATUS = extern enum(i32) {
    SUCCESS = 0,
    OFFLINE_SUCCESS = 1,
    NO_ACCOUNT_SET = 2,
    LOAD_MSA_ACCOUNT_FAILED = 3,
    XBOX_VETO = 4,
    MSA_INTERRUPT = 5,
    OFFLINE_NO_CONSENT = 6,
    VIEW_NOT_SET = 7,
    UNKNOWN = -1,
};
pub const XBL_IDP_AUTH_TOKEN_STATUS_SUCCESS = XBL_IDP_AUTH_TOKEN_STATUS.SUCCESS;
pub const XBL_IDP_AUTH_TOKEN_STATUS_OFFLINE_SUCCESS = XBL_IDP_AUTH_TOKEN_STATUS.OFFLINE_SUCCESS;
pub const XBL_IDP_AUTH_TOKEN_STATUS_NO_ACCOUNT_SET = XBL_IDP_AUTH_TOKEN_STATUS.NO_ACCOUNT_SET;
pub const XBL_IDP_AUTH_TOKEN_STATUS_LOAD_MSA_ACCOUNT_FAILED = XBL_IDP_AUTH_TOKEN_STATUS.LOAD_MSA_ACCOUNT_FAILED;
pub const XBL_IDP_AUTH_TOKEN_STATUS_XBOX_VETO = XBL_IDP_AUTH_TOKEN_STATUS.XBOX_VETO;
pub const XBL_IDP_AUTH_TOKEN_STATUS_MSA_INTERRUPT = XBL_IDP_AUTH_TOKEN_STATUS.MSA_INTERRUPT;
pub const XBL_IDP_AUTH_TOKEN_STATUS_OFFLINE_NO_CONSENT = XBL_IDP_AUTH_TOKEN_STATUS.OFFLINE_NO_CONSENT;
pub const XBL_IDP_AUTH_TOKEN_STATUS_VIEW_NOT_SET = XBL_IDP_AUTH_TOKEN_STATUS.VIEW_NOT_SET;
pub const XBL_IDP_AUTH_TOKEN_STATUS_UNKNOWN = XBL_IDP_AUTH_TOKEN_STATUS.UNKNOWN;

const IID_IXblIdpAuthManager_Value = @import("../zig.zig").Guid.initString("eb5ddb08-8bbf-449b-ac21-b02ddeb3b136");
pub const IID_IXblIdpAuthManager = &IID_IXblIdpAuthManager_Value;
pub const IXblIdpAuthManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetGamerAccount: fn(
            self: *const IXblIdpAuthManager,
            msaAccountId: [*:0]const u16,
            xuid: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGamerAccount: fn(
            self: *const IXblIdpAuthManager,
            msaAccountId: *PWSTR,
            xuid: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAppViewInitialized: fn(
            self: *const IXblIdpAuthManager,
            appSid: [*:0]const u16,
            msaAccountId: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnvironment: fn(
            self: *const IXblIdpAuthManager,
            environment: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSandbox: fn(
            self: *const IXblIdpAuthManager,
            sandbox: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTokenAndSignatureWithTokenResult: fn(
            self: *const IXblIdpAuthManager,
            msaAccountId: [*:0]const u16,
            appSid: [*:0]const u16,
            msaTarget: [*:0]const u16,
            msaPolicy: [*:0]const u16,
            httpMethod: [*:0]const u16,
            uri: [*:0]const u16,
            headers: [*:0]const u16,
            body: [*:0]u8,
            bodySize: u32,
            forceRefresh: BOOL,
            result: **IXblIdpAuthTokenResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXblIdpAuthManager_SetGamerAccount(self: *const T, msaAccountId: [*:0]const u16, xuid: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXblIdpAuthManager.VTable, self.vtable).SetGamerAccount(@ptrCast(*const IXblIdpAuthManager, self), msaAccountId, xuid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXblIdpAuthManager_GetGamerAccount(self: *const T, msaAccountId: *PWSTR, xuid: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXblIdpAuthManager.VTable, self.vtable).GetGamerAccount(@ptrCast(*const IXblIdpAuthManager, self), msaAccountId, xuid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXblIdpAuthManager_SetAppViewInitialized(self: *const T, appSid: [*:0]const u16, msaAccountId: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXblIdpAuthManager.VTable, self.vtable).SetAppViewInitialized(@ptrCast(*const IXblIdpAuthManager, self), appSid, msaAccountId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXblIdpAuthManager_GetEnvironment(self: *const T, environment: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXblIdpAuthManager.VTable, self.vtable).GetEnvironment(@ptrCast(*const IXblIdpAuthManager, self), environment);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXblIdpAuthManager_GetSandbox(self: *const T, sandbox: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXblIdpAuthManager.VTable, self.vtable).GetSandbox(@ptrCast(*const IXblIdpAuthManager, self), sandbox);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXblIdpAuthManager_GetTokenAndSignatureWithTokenResult(self: *const T, msaAccountId: [*:0]const u16, appSid: [*:0]const u16, msaTarget: [*:0]const u16, msaPolicy: [*:0]const u16, httpMethod: [*:0]const u16, uri: [*:0]const u16, headers: [*:0]const u16, body: [*:0]u8, bodySize: u32, forceRefresh: BOOL, result: **IXblIdpAuthTokenResult) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXblIdpAuthManager.VTable, self.vtable).GetTokenAndSignatureWithTokenResult(@ptrCast(*const IXblIdpAuthManager, self), msaAccountId, appSid, msaTarget, msaPolicy, httpMethod, uri, headers, body, bodySize, forceRefresh, result);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IXblIdpAuthTokenResult_Value = @import("../zig.zig").Guid.initString("46ce0225-f267-4d68-b299-b2762552dec1");
pub const IID_IXblIdpAuthTokenResult = &IID_IXblIdpAuthTokenResult_Value;
pub const IXblIdpAuthTokenResult = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetStatus: fn(
            self: *const IXblIdpAuthTokenResult,
            status: *XBL_IDP_AUTH_TOKEN_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetErrorCode: fn(
            self: *const IXblIdpAuthTokenResult,
            errorCode: *HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetToken: fn(
            self: *const IXblIdpAuthTokenResult,
            token: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignature: fn(
            self: *const IXblIdpAuthTokenResult,
            signature: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSandbox: fn(
            self: *const IXblIdpAuthTokenResult,
            sandbox: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnvironment: fn(
            self: *const IXblIdpAuthTokenResult,
            environment: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMsaAccountId: fn(
            self: *const IXblIdpAuthTokenResult,
            msaAccountId: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetXuid: fn(
            self: *const IXblIdpAuthTokenResult,
            xuid: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGamertag: fn(
            self: *const IXblIdpAuthTokenResult,
            gamertag: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAgeGroup: fn(
            self: *const IXblIdpAuthTokenResult,
            ageGroup: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPrivileges: fn(
            self: *const IXblIdpAuthTokenResult,
            privileges: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMsaTarget: fn(
            self: *const IXblIdpAuthTokenResult,
            msaTarget: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMsaPolicy: fn(
            self: *const IXblIdpAuthTokenResult,
            msaPolicy: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMsaAppId: fn(
            self: *const IXblIdpAuthTokenResult,
            msaAppId: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRedirect: fn(
            self: *const IXblIdpAuthTokenResult,
            redirect: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMessage: fn(
            self: *const IXblIdpAuthTokenResult,
            message: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHelpId: fn(
            self: *const IXblIdpAuthTokenResult,
            helpId: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnforcementBans: fn(
            self: *const IXblIdpAuthTokenResult,
            enforcementBans: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRestrictions: fn(
            self: *const IXblIdpAuthTokenResult,
            restrictions: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTitleRestrictions: fn(
            self: *const IXblIdpAuthTokenResult,
            titleRestrictions: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXblIdpAuthTokenResult_GetStatus(self: *const T, status: *XBL_IDP_AUTH_TOKEN_STATUS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXblIdpAuthTokenResult.VTable, self.vtable).GetStatus(@ptrCast(*const IXblIdpAuthTokenResult, self), status);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXblIdpAuthTokenResult_GetErrorCode(self: *const T, errorCode: *HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXblIdpAuthTokenResult.VTable, self.vtable).GetErrorCode(@ptrCast(*const IXblIdpAuthTokenResult, self), errorCode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXblIdpAuthTokenResult_GetToken(self: *const T, token: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXblIdpAuthTokenResult.VTable, self.vtable).GetToken(@ptrCast(*const IXblIdpAuthTokenResult, self), token);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXblIdpAuthTokenResult_GetSignature(self: *const T, signature: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXblIdpAuthTokenResult.VTable, self.vtable).GetSignature(@ptrCast(*const IXblIdpAuthTokenResult, self), signature);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXblIdpAuthTokenResult_GetSandbox(self: *const T, sandbox: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXblIdpAuthTokenResult.VTable, self.vtable).GetSandbox(@ptrCast(*const IXblIdpAuthTokenResult, self), sandbox);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXblIdpAuthTokenResult_GetEnvironment(self: *const T, environment: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXblIdpAuthTokenResult.VTable, self.vtable).GetEnvironment(@ptrCast(*const IXblIdpAuthTokenResult, self), environment);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXblIdpAuthTokenResult_GetMsaAccountId(self: *const T, msaAccountId: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXblIdpAuthTokenResult.VTable, self.vtable).GetMsaAccountId(@ptrCast(*const IXblIdpAuthTokenResult, self), msaAccountId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXblIdpAuthTokenResult_GetXuid(self: *const T, xuid: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXblIdpAuthTokenResult.VTable, self.vtable).GetXuid(@ptrCast(*const IXblIdpAuthTokenResult, self), xuid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXblIdpAuthTokenResult_GetGamertag(self: *const T, gamertag: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXblIdpAuthTokenResult.VTable, self.vtable).GetGamertag(@ptrCast(*const IXblIdpAuthTokenResult, self), gamertag);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXblIdpAuthTokenResult_GetAgeGroup(self: *const T, ageGroup: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXblIdpAuthTokenResult.VTable, self.vtable).GetAgeGroup(@ptrCast(*const IXblIdpAuthTokenResult, self), ageGroup);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXblIdpAuthTokenResult_GetPrivileges(self: *const T, privileges: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXblIdpAuthTokenResult.VTable, self.vtable).GetPrivileges(@ptrCast(*const IXblIdpAuthTokenResult, self), privileges);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXblIdpAuthTokenResult_GetMsaTarget(self: *const T, msaTarget: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXblIdpAuthTokenResult.VTable, self.vtable).GetMsaTarget(@ptrCast(*const IXblIdpAuthTokenResult, self), msaTarget);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXblIdpAuthTokenResult_GetMsaPolicy(self: *const T, msaPolicy: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXblIdpAuthTokenResult.VTable, self.vtable).GetMsaPolicy(@ptrCast(*const IXblIdpAuthTokenResult, self), msaPolicy);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXblIdpAuthTokenResult_GetMsaAppId(self: *const T, msaAppId: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXblIdpAuthTokenResult.VTable, self.vtable).GetMsaAppId(@ptrCast(*const IXblIdpAuthTokenResult, self), msaAppId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXblIdpAuthTokenResult_GetRedirect(self: *const T, redirect: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXblIdpAuthTokenResult.VTable, self.vtable).GetRedirect(@ptrCast(*const IXblIdpAuthTokenResult, self), redirect);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXblIdpAuthTokenResult_GetMessage(self: *const T, message: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXblIdpAuthTokenResult.VTable, self.vtable).GetMessage(@ptrCast(*const IXblIdpAuthTokenResult, self), message);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXblIdpAuthTokenResult_GetHelpId(self: *const T, helpId: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXblIdpAuthTokenResult.VTable, self.vtable).GetHelpId(@ptrCast(*const IXblIdpAuthTokenResult, self), helpId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXblIdpAuthTokenResult_GetEnforcementBans(self: *const T, enforcementBans: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXblIdpAuthTokenResult.VTable, self.vtable).GetEnforcementBans(@ptrCast(*const IXblIdpAuthTokenResult, self), enforcementBans);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXblIdpAuthTokenResult_GetRestrictions(self: *const T, restrictions: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXblIdpAuthTokenResult.VTable, self.vtable).GetRestrictions(@ptrCast(*const IXblIdpAuthTokenResult, self), restrictions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXblIdpAuthTokenResult_GetTitleRestrictions(self: *const T, titleRestrictions: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXblIdpAuthTokenResult.VTable, self.vtable).GetTitleRestrictions(@ptrCast(*const IXblIdpAuthTokenResult, self), titleRestrictions);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IXblIdpAuthTokenResult2_Value = @import("../zig.zig").Guid.initString("75d760b0-60b9-412d-994f-26b2cd5f7812");
pub const IID_IXblIdpAuthTokenResult2 = &IID_IXblIdpAuthTokenResult2_Value;
pub const IXblIdpAuthTokenResult2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetModernGamertag: fn(
            self: *const IXblIdpAuthTokenResult2,
            value: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetModernGamertagSuffix: fn(
            self: *const IXblIdpAuthTokenResult2,
            value: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUniqueModernGamertag: fn(
            self: *const IXblIdpAuthTokenResult2,
            value: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXblIdpAuthTokenResult2_GetModernGamertag(self: *const T, value: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXblIdpAuthTokenResult2.VTable, self.vtable).GetModernGamertag(@ptrCast(*const IXblIdpAuthTokenResult2, self), value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXblIdpAuthTokenResult2_GetModernGamertagSuffix(self: *const T, value: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXblIdpAuthTokenResult2.VTable, self.vtable).GetModernGamertagSuffix(@ptrCast(*const IXblIdpAuthTokenResult2, self), value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXblIdpAuthTokenResult2_GetUniqueModernGamertag(self: *const T, value: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXblIdpAuthTokenResult2.VTable, self.vtable).GetUniqueModernGamertag(@ptrCast(*const IXblIdpAuthTokenResult2, self), value);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};


//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (4)
//--------------------------------------------------------------------------------
const PWSTR = @import("system_services.zig").PWSTR;
const IUnknown = @import("com.zig").IUnknown;
const BOOL = @import("system_services.zig").BOOL;
const HRESULT = @import("com.zig").HRESULT;

test {
    @setEvalBranchQuota(
        @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("std").builtin.is_test) return;
    inline for (@import("std").meta.declarations(@This())) |decl| {
        if (decl.is_pub) {
            _ = decl;
        }
    }
}
