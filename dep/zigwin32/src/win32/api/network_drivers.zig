//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (23)
//--------------------------------------------------------------------------------
pub const SOCKET_ADDRESS_LIST = extern struct {
    iAddressCount: i32,
    Address: [1]SOCKET_ADDRESS,
};

pub const SOCKADDR_STORAGE_XP = extern struct {
    ss_family: i16,
    __ss_pad1: [6]CHAR,
    __ss_align: i64,
    __ss_pad2: [112]CHAR,
};

pub const IN6_ADDR = extern struct {
    u: _u_e__Union,
    const _u_e__Union = u32; // TODO: generate this nested type!
};

pub const SOCKADDR_IN6_W2KSP1 = extern struct {
    sin6_family: i16,
    sin6_port: u16,
    sin6_flowinfo: u32,
    sin6_addr: IN6_ADDR,
    sin6_scope_id: u32,
};

pub const NL_ROUTE_PROTOCOL = extern enum(i32) {
    RouteProtocolOther = 1,
    RouteProtocolLocal = 2,
    RouteProtocolNetMgmt = 3,
    RouteProtocolIcmp = 4,
    RouteProtocolEgp = 5,
    RouteProtocolGgp = 6,
    RouteProtocolHello = 7,
    RouteProtocolRip = 8,
    RouteProtocolIsIs = 9,
    RouteProtocolEsIs = 10,
    RouteProtocolCisco = 11,
    RouteProtocolBbn = 12,
    RouteProtocolOspf = 13,
    RouteProtocolBgp = 14,
    RouteProtocolIdpr = 15,
    RouteProtocolEigrp = 16,
    RouteProtocolDvmrp = 17,
    RouteProtocolRpl = 18,
    RouteProtocolDhcp = 19,
    MIB_IPPROTO_OTHER = 1,
    PROTO_IP_OTHER = 1,
    MIB_IPPROTO_LOCAL = 2,
    PROTO_IP_LOCAL = 2,
    MIB_IPPROTO_NETMGMT = 3,
    PROTO_IP_NETMGMT = 3,
    MIB_IPPROTO_ICMP = 4,
    PROTO_IP_ICMP = 4,
    MIB_IPPROTO_EGP = 5,
    PROTO_IP_EGP = 5,
    MIB_IPPROTO_GGP = 6,
    PROTO_IP_GGP = 6,
    MIB_IPPROTO_HELLO = 7,
    PROTO_IP_HELLO = 7,
    MIB_IPPROTO_RIP = 8,
    PROTO_IP_RIP = 8,
    MIB_IPPROTO_IS_IS = 9,
    PROTO_IP_IS_IS = 9,
    MIB_IPPROTO_ES_IS = 10,
    PROTO_IP_ES_IS = 10,
    MIB_IPPROTO_CISCO = 11,
    PROTO_IP_CISCO = 11,
    MIB_IPPROTO_BBN = 12,
    PROTO_IP_BBN = 12,
    MIB_IPPROTO_OSPF = 13,
    PROTO_IP_OSPF = 13,
    MIB_IPPROTO_BGP = 14,
    PROTO_IP_BGP = 14,
    MIB_IPPROTO_IDPR = 15,
    PROTO_IP_IDPR = 15,
    MIB_IPPROTO_EIGRP = 16,
    PROTO_IP_EIGRP = 16,
    MIB_IPPROTO_DVMRP = 17,
    PROTO_IP_DVMRP = 17,
    MIB_IPPROTO_RPL = 18,
    PROTO_IP_RPL = 18,
    MIB_IPPROTO_DHCP = 19,
    PROTO_IP_DHCP = 19,
    MIB_IPPROTO_NT_AUTOSTATIC = 10002,
    PROTO_IP_NT_AUTOSTATIC = 10002,
    MIB_IPPROTO_NT_STATIC = 10006,
    PROTO_IP_NT_STATIC = 10006,
    MIB_IPPROTO_NT_STATIC_NON_DOD = 10007,
    PROTO_IP_NT_STATIC_NON_DOD = 10007,
};
pub const RouteProtocolOther = NL_ROUTE_PROTOCOL.RouteProtocolOther;
pub const RouteProtocolLocal = NL_ROUTE_PROTOCOL.RouteProtocolLocal;
pub const RouteProtocolNetMgmt = NL_ROUTE_PROTOCOL.RouteProtocolNetMgmt;
pub const RouteProtocolIcmp = NL_ROUTE_PROTOCOL.RouteProtocolIcmp;
pub const RouteProtocolEgp = NL_ROUTE_PROTOCOL.RouteProtocolEgp;
pub const RouteProtocolGgp = NL_ROUTE_PROTOCOL.RouteProtocolGgp;
pub const RouteProtocolHello = NL_ROUTE_PROTOCOL.RouteProtocolHello;
pub const RouteProtocolRip = NL_ROUTE_PROTOCOL.RouteProtocolRip;
pub const RouteProtocolIsIs = NL_ROUTE_PROTOCOL.RouteProtocolIsIs;
pub const RouteProtocolEsIs = NL_ROUTE_PROTOCOL.RouteProtocolEsIs;
pub const RouteProtocolCisco = NL_ROUTE_PROTOCOL.RouteProtocolCisco;
pub const RouteProtocolBbn = NL_ROUTE_PROTOCOL.RouteProtocolBbn;
pub const RouteProtocolOspf = NL_ROUTE_PROTOCOL.RouteProtocolOspf;
pub const RouteProtocolBgp = NL_ROUTE_PROTOCOL.RouteProtocolBgp;
pub const RouteProtocolIdpr = NL_ROUTE_PROTOCOL.RouteProtocolIdpr;
pub const RouteProtocolEigrp = NL_ROUTE_PROTOCOL.RouteProtocolEigrp;
pub const RouteProtocolDvmrp = NL_ROUTE_PROTOCOL.RouteProtocolDvmrp;
pub const RouteProtocolRpl = NL_ROUTE_PROTOCOL.RouteProtocolRpl;
pub const RouteProtocolDhcp = NL_ROUTE_PROTOCOL.RouteProtocolDhcp;
pub const MIB_IPPROTO_OTHER = NL_ROUTE_PROTOCOL.MIB_IPPROTO_OTHER;
pub const PROTO_IP_OTHER = NL_ROUTE_PROTOCOL.PROTO_IP_OTHER;
pub const MIB_IPPROTO_LOCAL = NL_ROUTE_PROTOCOL.MIB_IPPROTO_LOCAL;
pub const PROTO_IP_LOCAL = NL_ROUTE_PROTOCOL.PROTO_IP_LOCAL;
pub const MIB_IPPROTO_NETMGMT = NL_ROUTE_PROTOCOL.MIB_IPPROTO_NETMGMT;
pub const PROTO_IP_NETMGMT = NL_ROUTE_PROTOCOL.PROTO_IP_NETMGMT;
pub const MIB_IPPROTO_ICMP = NL_ROUTE_PROTOCOL.MIB_IPPROTO_ICMP;
pub const PROTO_IP_ICMP = NL_ROUTE_PROTOCOL.PROTO_IP_ICMP;
pub const MIB_IPPROTO_EGP = NL_ROUTE_PROTOCOL.MIB_IPPROTO_EGP;
pub const PROTO_IP_EGP = NL_ROUTE_PROTOCOL.PROTO_IP_EGP;
pub const MIB_IPPROTO_GGP = NL_ROUTE_PROTOCOL.MIB_IPPROTO_GGP;
pub const PROTO_IP_GGP = NL_ROUTE_PROTOCOL.PROTO_IP_GGP;
pub const MIB_IPPROTO_HELLO = NL_ROUTE_PROTOCOL.MIB_IPPROTO_HELLO;
pub const PROTO_IP_HELLO = NL_ROUTE_PROTOCOL.PROTO_IP_HELLO;
pub const MIB_IPPROTO_RIP = NL_ROUTE_PROTOCOL.MIB_IPPROTO_RIP;
pub const PROTO_IP_RIP = NL_ROUTE_PROTOCOL.PROTO_IP_RIP;
pub const MIB_IPPROTO_IS_IS = NL_ROUTE_PROTOCOL.MIB_IPPROTO_IS_IS;
pub const PROTO_IP_IS_IS = NL_ROUTE_PROTOCOL.PROTO_IP_IS_IS;
pub const MIB_IPPROTO_ES_IS = NL_ROUTE_PROTOCOL.MIB_IPPROTO_ES_IS;
pub const PROTO_IP_ES_IS = NL_ROUTE_PROTOCOL.PROTO_IP_ES_IS;
pub const MIB_IPPROTO_CISCO = NL_ROUTE_PROTOCOL.MIB_IPPROTO_CISCO;
pub const PROTO_IP_CISCO = NL_ROUTE_PROTOCOL.PROTO_IP_CISCO;
pub const MIB_IPPROTO_BBN = NL_ROUTE_PROTOCOL.MIB_IPPROTO_BBN;
pub const PROTO_IP_BBN = NL_ROUTE_PROTOCOL.PROTO_IP_BBN;
pub const MIB_IPPROTO_OSPF = NL_ROUTE_PROTOCOL.MIB_IPPROTO_OSPF;
pub const PROTO_IP_OSPF = NL_ROUTE_PROTOCOL.PROTO_IP_OSPF;
pub const MIB_IPPROTO_BGP = NL_ROUTE_PROTOCOL.MIB_IPPROTO_BGP;
pub const PROTO_IP_BGP = NL_ROUTE_PROTOCOL.PROTO_IP_BGP;
pub const MIB_IPPROTO_IDPR = NL_ROUTE_PROTOCOL.MIB_IPPROTO_IDPR;
pub const PROTO_IP_IDPR = NL_ROUTE_PROTOCOL.PROTO_IP_IDPR;
pub const MIB_IPPROTO_EIGRP = NL_ROUTE_PROTOCOL.MIB_IPPROTO_EIGRP;
pub const PROTO_IP_EIGRP = NL_ROUTE_PROTOCOL.PROTO_IP_EIGRP;
pub const MIB_IPPROTO_DVMRP = NL_ROUTE_PROTOCOL.MIB_IPPROTO_DVMRP;
pub const PROTO_IP_DVMRP = NL_ROUTE_PROTOCOL.PROTO_IP_DVMRP;
pub const MIB_IPPROTO_RPL = NL_ROUTE_PROTOCOL.MIB_IPPROTO_RPL;
pub const PROTO_IP_RPL = NL_ROUTE_PROTOCOL.PROTO_IP_RPL;
pub const MIB_IPPROTO_DHCP = NL_ROUTE_PROTOCOL.MIB_IPPROTO_DHCP;
pub const PROTO_IP_DHCP = NL_ROUTE_PROTOCOL.PROTO_IP_DHCP;
pub const MIB_IPPROTO_NT_AUTOSTATIC = NL_ROUTE_PROTOCOL.MIB_IPPROTO_NT_AUTOSTATIC;
pub const PROTO_IP_NT_AUTOSTATIC = NL_ROUTE_PROTOCOL.PROTO_IP_NT_AUTOSTATIC;
pub const MIB_IPPROTO_NT_STATIC = NL_ROUTE_PROTOCOL.MIB_IPPROTO_NT_STATIC;
pub const PROTO_IP_NT_STATIC = NL_ROUTE_PROTOCOL.PROTO_IP_NT_STATIC;
pub const MIB_IPPROTO_NT_STATIC_NON_DOD = NL_ROUTE_PROTOCOL.MIB_IPPROTO_NT_STATIC_NON_DOD;
pub const PROTO_IP_NT_STATIC_NON_DOD = NL_ROUTE_PROTOCOL.PROTO_IP_NT_STATIC_NON_DOD;

pub const NL_ADDRESS_TYPE = extern enum(i32) {
    Unspecified = 0,
    Unicast = 1,
    Anycast = 2,
    Multicast = 3,
    Broadcast = 4,
    Invalid = 5,
};
pub const NlatUnspecified = NL_ADDRESS_TYPE.Unspecified;
pub const NlatUnicast = NL_ADDRESS_TYPE.Unicast;
pub const NlatAnycast = NL_ADDRESS_TYPE.Anycast;
pub const NlatMulticast = NL_ADDRESS_TYPE.Multicast;
pub const NlatBroadcast = NL_ADDRESS_TYPE.Broadcast;
pub const NlatInvalid = NL_ADDRESS_TYPE.Invalid;

pub const NL_ROUTE_ORIGIN = extern enum(i32) {
    Manual = 0,
    WellKnown = 1,
    DHCP = 2,
    RouterAdvertisement = 3,
    @"6to4" = 4,
};
pub const NlroManual = NL_ROUTE_ORIGIN.Manual;
pub const NlroWellKnown = NL_ROUTE_ORIGIN.WellKnown;
pub const NlroDHCP = NL_ROUTE_ORIGIN.DHCP;
pub const NlroRouterAdvertisement = NL_ROUTE_ORIGIN.RouterAdvertisement;
pub const Nlro6to4 = NL_ROUTE_ORIGIN.@"6to4";

pub const NL_NEIGHBOR_STATE = extern enum(i32) {
    Unreachable = 0,
    Incomplete = 1,
    Probe = 2,
    Delay = 3,
    Stale = 4,
    Reachable = 5,
    Permanent = 6,
    Maximum = 7,
};
pub const NlnsUnreachable = NL_NEIGHBOR_STATE.Unreachable;
pub const NlnsIncomplete = NL_NEIGHBOR_STATE.Incomplete;
pub const NlnsProbe = NL_NEIGHBOR_STATE.Probe;
pub const NlnsDelay = NL_NEIGHBOR_STATE.Delay;
pub const NlnsStale = NL_NEIGHBOR_STATE.Stale;
pub const NlnsReachable = NL_NEIGHBOR_STATE.Reachable;
pub const NlnsPermanent = NL_NEIGHBOR_STATE.Permanent;
pub const NlnsMaximum = NL_NEIGHBOR_STATE.Maximum;

pub const NL_LINK_LOCAL_ADDRESS_BEHAVIOR = extern enum(i32) {
    AlwaysOff = 0,
    Delayed = 1,
    AlwaysOn = 2,
    Unchanged = -1,
};
pub const LinkLocalAlwaysOff = NL_LINK_LOCAL_ADDRESS_BEHAVIOR.AlwaysOff;
pub const LinkLocalDelayed = NL_LINK_LOCAL_ADDRESS_BEHAVIOR.Delayed;
pub const LinkLocalAlwaysOn = NL_LINK_LOCAL_ADDRESS_BEHAVIOR.AlwaysOn;
pub const LinkLocalUnchanged = NL_LINK_LOCAL_ADDRESS_BEHAVIOR.Unchanged;

pub const NL_ROUTER_DISCOVERY_BEHAVIOR = extern enum(i32) {
    Disabled = 0,
    Enabled = 1,
    Dhcp = 2,
    Unchanged = -1,
};
pub const RouterDiscoveryDisabled = NL_ROUTER_DISCOVERY_BEHAVIOR.Disabled;
pub const RouterDiscoveryEnabled = NL_ROUTER_DISCOVERY_BEHAVIOR.Enabled;
pub const RouterDiscoveryDhcp = NL_ROUTER_DISCOVERY_BEHAVIOR.Dhcp;
pub const RouterDiscoveryUnchanged = NL_ROUTER_DISCOVERY_BEHAVIOR.Unchanged;

pub const NET_IF_OPER_STATUS = extern enum(i32) {
    UP = 1,
    DOWN = 2,
    TESTING = 3,
    UNKNOWN = 4,
    DORMANT = 5,
    NOT_PRESENT = 6,
    LOWER_LAYER_DOWN = 7,
};
pub const NET_IF_OPER_STATUS_UP = NET_IF_OPER_STATUS.UP;
pub const NET_IF_OPER_STATUS_DOWN = NET_IF_OPER_STATUS.DOWN;
pub const NET_IF_OPER_STATUS_TESTING = NET_IF_OPER_STATUS.TESTING;
pub const NET_IF_OPER_STATUS_UNKNOWN = NET_IF_OPER_STATUS.UNKNOWN;
pub const NET_IF_OPER_STATUS_DORMANT = NET_IF_OPER_STATUS.DORMANT;
pub const NET_IF_OPER_STATUS_NOT_PRESENT = NET_IF_OPER_STATUS.NOT_PRESENT;
pub const NET_IF_OPER_STATUS_LOWER_LAYER_DOWN = NET_IF_OPER_STATUS.LOWER_LAYER_DOWN;

pub const NET_IF_ADMIN_STATUS = extern enum(i32) {
    UP = 1,
    DOWN = 2,
    TESTING = 3,
};
pub const NET_IF_ADMIN_STATUS_UP = NET_IF_ADMIN_STATUS.UP;
pub const NET_IF_ADMIN_STATUS_DOWN = NET_IF_ADMIN_STATUS.DOWN;
pub const NET_IF_ADMIN_STATUS_TESTING = NET_IF_ADMIN_STATUS.TESTING;

pub const NET_IF_CONNECTION_TYPE = extern enum(i32) {
    DEDICATED = 1,
    PASSIVE = 2,
    DEMAND = 3,
    MAXIMUM = 4,
};
pub const NET_IF_CONNECTION_DEDICATED = NET_IF_CONNECTION_TYPE.DEDICATED;
pub const NET_IF_CONNECTION_PASSIVE = NET_IF_CONNECTION_TYPE.PASSIVE;
pub const NET_IF_CONNECTION_DEMAND = NET_IF_CONNECTION_TYPE.DEMAND;
pub const NET_IF_CONNECTION_MAXIMUM = NET_IF_CONNECTION_TYPE.MAXIMUM;

pub const TUNNEL_TYPE = extern enum(i32) {
    NONE = 0,
    OTHER = 1,
    DIRECT = 2,
    @"6TO4" = 11,
    ISATAP = 13,
    TEREDO = 14,
    IPHTTPS = 15,
};
pub const TUNNEL_TYPE_NONE = TUNNEL_TYPE.NONE;
pub const TUNNEL_TYPE_OTHER = TUNNEL_TYPE.OTHER;
pub const TUNNEL_TYPE_DIRECT = TUNNEL_TYPE.DIRECT;
pub const TUNNEL_TYPE_6TO4 = TUNNEL_TYPE.@"6TO4";
pub const TUNNEL_TYPE_ISATAP = TUNNEL_TYPE.ISATAP;
pub const TUNNEL_TYPE_TEREDO = TUNNEL_TYPE.TEREDO;
pub const TUNNEL_TYPE_IPHTTPS = TUNNEL_TYPE.IPHTTPS;

pub const NET_IF_ACCESS_TYPE = extern enum(i32) {
    LOOPBACK = 1,
    BROADCAST = 2,
    POINT_TO_POINT = 3,
    POINT_TO_MULTI_POINT = 4,
    MAXIMUM = 5,
};
pub const NET_IF_ACCESS_LOOPBACK = NET_IF_ACCESS_TYPE.LOOPBACK;
pub const NET_IF_ACCESS_BROADCAST = NET_IF_ACCESS_TYPE.BROADCAST;
pub const NET_IF_ACCESS_POINT_TO_POINT = NET_IF_ACCESS_TYPE.POINT_TO_POINT;
pub const NET_IF_ACCESS_POINT_TO_MULTI_POINT = NET_IF_ACCESS_TYPE.POINT_TO_MULTI_POINT;
pub const NET_IF_ACCESS_MAXIMUM = NET_IF_ACCESS_TYPE.MAXIMUM;

pub const NET_IF_DIRECTION_TYPE = extern enum(i32) {
    SENDRECEIVE = 0,
    SENDONLY = 1,
    RECEIVEONLY = 2,
    MAXIMUM = 3,
};
pub const NET_IF_DIRECTION_SENDRECEIVE = NET_IF_DIRECTION_TYPE.SENDRECEIVE;
pub const NET_IF_DIRECTION_SENDONLY = NET_IF_DIRECTION_TYPE.SENDONLY;
pub const NET_IF_DIRECTION_RECEIVEONLY = NET_IF_DIRECTION_TYPE.RECEIVEONLY;
pub const NET_IF_DIRECTION_MAXIMUM = NET_IF_DIRECTION_TYPE.MAXIMUM;

pub const NET_IF_MEDIA_CONNECT_STATE = extern enum(i32) {
    Unknown = 0,
    Connected = 1,
    Disconnected = 2,
};
pub const MediaConnectStateUnknown = NET_IF_MEDIA_CONNECT_STATE.Unknown;
pub const MediaConnectStateConnected = NET_IF_MEDIA_CONNECT_STATE.Connected;
pub const MediaConnectStateDisconnected = NET_IF_MEDIA_CONNECT_STATE.Disconnected;

pub const NET_IF_MEDIA_DUPLEX_STATE = extern enum(i32) {
    Unknown = 0,
    Half = 1,
    Full = 2,
};
pub const MediaDuplexStateUnknown = NET_IF_MEDIA_DUPLEX_STATE.Unknown;
pub const MediaDuplexStateHalf = NET_IF_MEDIA_DUPLEX_STATE.Half;
pub const MediaDuplexStateFull = NET_IF_MEDIA_DUPLEX_STATE.Full;

pub const NET_PHYSICAL_LOCATION_LH = extern struct {
    BusNumber: u32,
    SlotNumber: u32,
    FunctionNumber: u32,
};

pub const IF_COUNTED_STRING_LH = extern struct {
    Length: u16,
    String: [257]u16,
};

pub const NDIS_INTERFACE_INFORMATION = extern struct {
    ifOperStatus: NET_IF_OPER_STATUS,
    ifOperStatusFlags: u32,
    MediaConnectState: NET_IF_MEDIA_CONNECT_STATE,
    MediaDuplexState: NET_IF_MEDIA_DUPLEX_STATE,
    ifMtu: u32,
    ifPromiscuousMode: u8,
    ifDeviceWakeUpEnable: u8,
    XmitLinkSpeed: u64,
    RcvLinkSpeed: u64,
    ifLastChange: u64,
    ifCounterDiscontinuityTime: u64,
    ifInUnknownProtos: u64,
    ifInDiscards: u64,
    ifInErrors: u64,
    ifHCInOctets: u64,
    ifHCInUcastPkts: u64,
    ifHCInMulticastPkts: u64,
    ifHCInBroadcastPkts: u64,
    ifHCOutOctets: u64,
    ifHCOutUcastPkts: u64,
    ifHCOutMulticastPkts: u64,
    ifHCOutBroadcastPkts: u64,
    ifOutErrors: u64,
    ifOutDiscards: u64,
    ifHCInUcastOctets: u64,
    ifHCInMulticastOctets: u64,
    ifHCInBroadcastOctets: u64,
    ifHCOutUcastOctets: u64,
    ifHCOutMulticastOctets: u64,
    ifHCOutBroadcastOctets: u64,
    CompartmentId: u32,
    SupportedStatistics: u32,
};

pub const MIB_IF_TABLE_LEVEL = extern enum(i32) {
    Normal = 0,
    Raw = 1,
    NormalWithoutStatistics = 2,
};
pub const MibIfTableNormal = MIB_IF_TABLE_LEVEL.Normal;
pub const MibIfTableRaw = MIB_IF_TABLE_LEVEL.Raw;
pub const MibIfTableNormalWithoutStatistics = MIB_IF_TABLE_LEVEL.NormalWithoutStatistics;

pub const L2_NOTIFICATION_DATA = extern struct {
    NotificationSource: u32,
    NotificationCode: u32,
    InterfaceGuid: Guid,
    dwDataSize: u32,
    pData: *c_void,
};


//--------------------------------------------------------------------------------
// Section: Functions (6)
//--------------------------------------------------------------------------------
pub extern "IPHLPAPI" fn GetCurrentThreadCompartmentId(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "IPHLPAPI" fn SetCurrentThreadCompartmentId(
    CompartmentId: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "IPHLPAPI" fn GetSessionCompartmentId(
    SessionId: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "IPHLPAPI" fn SetSessionCompartmentId(
    SessionId: u32,
    CompartmentId: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "IPHLPAPI" fn GetNetworkInformation(
    NetworkGuid: *const Guid,
    CompartmentId: *u32,
    SiteId: *u32,
    NetworkName: [*]u16,
    Length: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "IPHLPAPI" fn SetNetworkInformation(
    NetworkGuid: *const Guid,
    CompartmentId: u32,
    NetworkName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (5)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const PWSTR = @import("system_services.zig").PWSTR;
const CHAR = @import("system_services.zig").CHAR;
const SOCKET_ADDRESS = @import("win_sock.zig").SOCKET_ADDRESS;
const NTSTATUS = @import("system_services.zig").NTSTATUS;

test {
    @setEvalBranchQuota(
        @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("std").builtin.is_test) return;
    inline for (@import("std").meta.declarations(@This())) |decl| {
        if (decl.is_pub) {
            _ = decl;
        }
    }
}
