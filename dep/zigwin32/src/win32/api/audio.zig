//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (493)
//--------------------------------------------------------------------------------
pub const DSFXR_PRESENT = @as(i32, 0);
pub const DSFXR_LOCHARDWARE = @as(i32, 1);
pub const DSFXR_LOCSOFTWARE = @as(i32, 2);
pub const DSFXR_UNALLOCATED = @as(i32, 3);
pub const DSFXR_FAILED = @as(i32, 4);
pub const DSFXR_UNKNOWN = @as(i32, 5);
pub const DSFXR_SENDLOOP = @as(i32, 6);
pub const DSFX_I3DL2_MATERIAL_PRESET_SINGLEWINDOW = @as(i32, 0);
pub const DSFX_I3DL2_MATERIAL_PRESET_DOUBLEWINDOW = @as(i32, 1);
pub const DSFX_I3DL2_MATERIAL_PRESET_THINDOOR = @as(i32, 2);
pub const DSFX_I3DL2_MATERIAL_PRESET_THICKDOOR = @as(i32, 3);
pub const DSFX_I3DL2_MATERIAL_PRESET_WOODWALL = @as(i32, 4);
pub const DSFX_I3DL2_MATERIAL_PRESET_BRICKWALL = @as(i32, 5);
pub const DSFX_I3DL2_MATERIAL_PRESET_STONEWALL = @as(i32, 6);
pub const DSFX_I3DL2_MATERIAL_PRESET_CURTAIN = @as(i32, 7);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_DEFAULT = @as(i32, 0);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_GENERIC = @as(i32, 1);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_PADDEDCELL = @as(i32, 2);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_ROOM = @as(i32, 3);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_BATHROOM = @as(i32, 4);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_LIVINGROOM = @as(i32, 5);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_STONEROOM = @as(i32, 6);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_AUDITORIUM = @as(i32, 7);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_CONCERTHALL = @as(i32, 8);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_CAVE = @as(i32, 9);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_ARENA = @as(i32, 10);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_HANGAR = @as(i32, 11);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_CARPETEDHALLWAY = @as(i32, 12);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_HALLWAY = @as(i32, 13);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_STONECORRIDOR = @as(i32, 14);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_ALLEY = @as(i32, 15);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_FOREST = @as(i32, 16);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_CITY = @as(i32, 17);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_MOUNTAINS = @as(i32, 18);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_QUARRY = @as(i32, 19);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_PLAIN = @as(i32, 20);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_PARKINGLOT = @as(i32, 21);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_SEWERPIPE = @as(i32, 22);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_UNDERWATER = @as(i32, 23);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_SMALLROOM = @as(i32, 24);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_MEDIUMROOM = @as(i32, 25);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_LARGEROOM = @as(i32, 26);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_MEDIUMHALL = @as(i32, 27);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_LARGEHALL = @as(i32, 28);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_PLATE = @as(i32, 29);
pub const DMUS_MAX_DESCRIPTION = @as(u32, 128);
pub const DMUS_MAX_DRIVER = @as(u32, 128);
pub const DMUS_EFFECT_NONE = @as(u32, 0);
pub const DMUS_EFFECT_REVERB = @as(u32, 1);
pub const DMUS_EFFECT_CHORUS = @as(u32, 2);
pub const DMUS_EFFECT_DELAY = @as(u32, 4);
pub const DMUS_PC_INPUTCLASS = @as(u32, 0);
pub const DMUS_PC_OUTPUTCLASS = @as(u32, 1);
pub const DMUS_PC_DLS = @as(u32, 1);
pub const DMUS_PC_EXTERNAL = @as(u32, 2);
pub const DMUS_PC_SOFTWARESYNTH = @as(u32, 4);
pub const DMUS_PC_MEMORYSIZEFIXED = @as(u32, 8);
pub const DMUS_PC_GMINHARDWARE = @as(u32, 16);
pub const DMUS_PC_GSINHARDWARE = @as(u32, 32);
pub const DMUS_PC_XGINHARDWARE = @as(u32, 64);
pub const DMUS_PC_DIRECTSOUND = @as(u32, 128);
pub const DMUS_PC_SHAREABLE = @as(u32, 256);
pub const DMUS_PC_DLS2 = @as(u32, 512);
pub const DMUS_PC_AUDIOPATH = @as(u32, 1024);
pub const DMUS_PC_WAVE = @as(u32, 2048);
pub const DMUS_PC_SYSTEMMEMORY = @as(u32, 2147483647);
pub const DMUS_PORT_WINMM_DRIVER = @as(u32, 0);
pub const DMUS_PORT_USER_MODE_SYNTH = @as(u32, 1);
pub const DMUS_PORT_KERNEL_MODE = @as(u32, 2);
pub const DMUS_PORTPARAMS_VOICES = @as(u32, 1);
pub const DMUS_PORTPARAMS_CHANNELGROUPS = @as(u32, 2);
pub const DMUS_PORTPARAMS_AUDIOCHANNELS = @as(u32, 4);
pub const DMUS_PORTPARAMS_SAMPLERATE = @as(u32, 8);
pub const DMUS_PORTPARAMS_EFFECTS = @as(u32, 32);
pub const DMUS_PORTPARAMS_SHARE = @as(u32, 64);
pub const DMUS_PORTPARAMS_FEATURES = @as(u32, 128);
pub const DMUS_PORT_FEATURE_AUDIOPATH = @as(u32, 1);
pub const DMUS_PORT_FEATURE_STREAMING = @as(u32, 2);
pub const DMUS_SYNTHSTATS_VOICES = @as(u32, 1);
pub const DMUS_SYNTHSTATS_TOTAL_CPU = @as(u32, 2);
pub const DMUS_SYNTHSTATS_CPU_PER_VOICE = @as(u32, 4);
pub const DMUS_SYNTHSTATS_LOST_NOTES = @as(u32, 8);
pub const DMUS_SYNTHSTATS_PEAK_VOLUME = @as(u32, 16);
pub const DMUS_SYNTHSTATS_FREE_MEMORY = @as(u32, 32);
pub const DMUS_CLOCKF_GLOBAL = @as(u32, 1);
pub const DSBUSID_FIRST_SPKR_LOC = @as(u32, 0);
pub const DSBUSID_FRONT_LEFT = @as(u32, 0);
pub const DSBUSID_LEFT = @as(u32, 0);
pub const DSBUSID_FRONT_RIGHT = @as(u32, 1);
pub const DSBUSID_RIGHT = @as(u32, 1);
pub const DSBUSID_FRONT_CENTER = @as(u32, 2);
pub const DSBUSID_LOW_FREQUENCY = @as(u32, 3);
pub const DSBUSID_BACK_LEFT = @as(u32, 4);
pub const DSBUSID_BACK_RIGHT = @as(u32, 5);
pub const DSBUSID_FRONT_LEFT_OF_CENTER = @as(u32, 6);
pub const DSBUSID_FRONT_RIGHT_OF_CENTER = @as(u32, 7);
pub const DSBUSID_BACK_CENTER = @as(u32, 8);
pub const DSBUSID_SIDE_LEFT = @as(u32, 9);
pub const DSBUSID_SIDE_RIGHT = @as(u32, 10);
pub const DSBUSID_TOP_CENTER = @as(u32, 11);
pub const DSBUSID_TOP_FRONT_LEFT = @as(u32, 12);
pub const DSBUSID_TOP_FRONT_CENTER = @as(u32, 13);
pub const DSBUSID_TOP_FRONT_RIGHT = @as(u32, 14);
pub const DSBUSID_TOP_BACK_LEFT = @as(u32, 15);
pub const DSBUSID_TOP_BACK_CENTER = @as(u32, 16);
pub const DSBUSID_TOP_BACK_RIGHT = @as(u32, 17);
pub const DSBUSID_LAST_SPKR_LOC = @as(u32, 17);
pub const DSBUSID_REVERB_SEND = @as(u32, 64);
pub const DSBUSID_CHORUS_SEND = @as(u32, 65);
pub const DSBUSID_DYNAMIC_0 = @as(u32, 512);
pub const DSBUSID_NULL = @as(u32, 4294967295);
pub const DAUD_CRITICAL_VOICE_PRIORITY = @as(u32, 4026531840);
pub const DAUD_HIGH_VOICE_PRIORITY = @as(u32, 3221225472);
pub const DAUD_STANDARD_VOICE_PRIORITY = @as(u32, 2147483648);
pub const DAUD_LOW_VOICE_PRIORITY = @as(u32, 1073741824);
pub const DAUD_PERSIST_VOICE_PRIORITY = @as(u32, 268435456);
pub const DAUD_CHAN1_VOICE_PRIORITY_OFFSET = @as(u32, 14);
pub const DAUD_CHAN2_VOICE_PRIORITY_OFFSET = @as(u32, 13);
pub const DAUD_CHAN3_VOICE_PRIORITY_OFFSET = @as(u32, 12);
pub const DAUD_CHAN4_VOICE_PRIORITY_OFFSET = @as(u32, 11);
pub const DAUD_CHAN5_VOICE_PRIORITY_OFFSET = @as(u32, 10);
pub const DAUD_CHAN6_VOICE_PRIORITY_OFFSET = @as(u32, 9);
pub const DAUD_CHAN7_VOICE_PRIORITY_OFFSET = @as(u32, 8);
pub const DAUD_CHAN8_VOICE_PRIORITY_OFFSET = @as(u32, 7);
pub const DAUD_CHAN9_VOICE_PRIORITY_OFFSET = @as(u32, 6);
pub const DAUD_CHAN10_VOICE_PRIORITY_OFFSET = @as(u32, 15);
pub const DAUD_CHAN11_VOICE_PRIORITY_OFFSET = @as(u32, 5);
pub const DAUD_CHAN12_VOICE_PRIORITY_OFFSET = @as(u32, 4);
pub const DAUD_CHAN13_VOICE_PRIORITY_OFFSET = @as(u32, 3);
pub const DAUD_CHAN14_VOICE_PRIORITY_OFFSET = @as(u32, 2);
pub const DAUD_CHAN15_VOICE_PRIORITY_OFFSET = @as(u32, 1);
pub const DAUD_CHAN16_VOICE_PRIORITY_OFFSET = @as(u32, 0);
pub const CLSID_DirectMusic = Guid.initString("636b9f10-0c7d-11d1-95b2-0020afdc7421");
pub const CLSID_DirectMusicCollection = Guid.initString("480ff4b0-28b2-11d1-bef7-00c04fbf8fef");
pub const CLSID_DirectMusicSynth = Guid.initString("58c2b4d0-46e7-11d1-89ac-00a0c9054129");
pub const GUID_DMUS_PROP_GM_Hardware = Guid.initString("178f2f24-c364-11d1-a760-0000f875ac12");
pub const GUID_DMUS_PROP_GS_Hardware = Guid.initString("178f2f25-c364-11d1-a760-0000f875ac12");
pub const GUID_DMUS_PROP_XG_Hardware = Guid.initString("178f2f26-c364-11d1-a760-0000f875ac12");
pub const GUID_DMUS_PROP_XG_Capable = Guid.initString("6496aba1-61b0-11d2-afa6-00aa0024d8b6");
pub const GUID_DMUS_PROP_GS_Capable = Guid.initString("6496aba2-61b0-11d2-afa6-00aa0024d8b6");
pub const GUID_DMUS_PROP_DLS1 = Guid.initString("178f2f27-c364-11d1-a760-0000f875ac12");
pub const GUID_DMUS_PROP_DLS2 = Guid.initString("f14599e5-4689-11d2-afa6-00aa0024d8b6");
pub const GUID_DMUS_PROP_INSTRUMENT2 = Guid.initString("865fd372-9f67-11d2-872a-00600893b1bd");
pub const GUID_DMUS_PROP_SynthSink_DSOUND = Guid.initString("0aa97844-c877-11d1-870c-00600893b1bd");
pub const GUID_DMUS_PROP_SynthSink_WAVE = Guid.initString("0aa97845-c877-11d1-870c-00600893b1bd");
pub const GUID_DMUS_PROP_SampleMemorySize = Guid.initString("178f2f28-c364-11d1-a760-0000f875ac12");
pub const GUID_DMUS_PROP_SamplePlaybackRate = Guid.initString("2a91f713-a4bf-11d2-bbdf-00600833dbd8");
pub const GUID_DMUS_PROP_WriteLatency = Guid.initString("268a0fa0-60f2-11d2-afa6-00aa0024d8b6");
pub const GUID_DMUS_PROP_WritePeriod = Guid.initString("268a0fa1-60f2-11d2-afa6-00aa0024d8b6");
pub const GUID_DMUS_PROP_MemorySize = Guid.initString("178f2f28-c364-11d1-a760-0000f875ac12");
pub const GUID_DMUS_PROP_WavesReverb = Guid.initString("04cb5622-32e5-11d2-afa6-00aa0024d8b6");
pub const GUID_DMUS_PROP_Effects = Guid.initString("cda8d611-684a-11d2-871e-00600893b1bd");
pub const GUID_DMUS_PROP_LegacyCaps = Guid.initString("cfa7cdc2-00a1-11d2-aad5-0000f875ac12");
pub const GUID_DMUS_PROP_Volume = Guid.initString("fedfae25-e46e-11d1-aace-0000f875ac12");
pub const DMUS_VOLUME_MAX = @as(u32, 2000);
pub const DMUS_VOLUME_MIN = @as(i32, -20000);
pub const DMUS_EVENT_STRUCTURED = @as(u32, 1);
pub const DIRECTSOUND_VERSION = @as(u32, 1792);
pub const CLSID_DirectSound = Guid.initString("47d4d946-62e8-11cf-93bc-444553540000");
pub const CLSID_DirectSound8 = Guid.initString("3901cc3f-84b5-4fa4-ba35-aa8172b8a09b");
pub const CLSID_DirectSoundCapture = Guid.initString("b0210780-89cd-11d0-af08-00a0c925cd16");
pub const CLSID_DirectSoundCapture8 = Guid.initString("e4bcac13-7f99-4908-9a8e-74e3bf24b6e1");
pub const CLSID_DirectSoundFullDuplex = Guid.initString("fea4300c-7959-4147-b26a-2377b9e7a91d");
pub const DSDEVID_DefaultPlayback = Guid.initString("def00000-9c6d-47ed-aaf1-4dda8f2b5c03");
pub const DSDEVID_DefaultCapture = Guid.initString("def00001-9c6d-47ed-aaf1-4dda8f2b5c03");
pub const DSDEVID_DefaultVoicePlayback = Guid.initString("def00002-9c6d-47ed-aaf1-4dda8f2b5c03");
pub const DSDEVID_DefaultVoiceCapture = Guid.initString("def00003-9c6d-47ed-aaf1-4dda8f2b5c03");
pub const GUID_All_Objects = Guid.initString("aa114de5-c262-4169-a1c8-23d698cc73b5");
pub const KSPROPERTY_SUPPORT_GET = @as(u32, 1);
pub const KSPROPERTY_SUPPORT_SET = @as(u32, 2);
pub const DSFXGARGLE_WAVE_TRIANGLE = @as(u32, 0);
pub const DSFXGARGLE_WAVE_SQUARE = @as(u32, 1);
pub const DSFXGARGLE_RATEHZ_MIN = @as(u32, 1);
pub const DSFXGARGLE_RATEHZ_MAX = @as(u32, 1000);
pub const DSFXCHORUS_WAVE_TRIANGLE = @as(u32, 0);
pub const DSFXCHORUS_WAVE_SIN = @as(u32, 1);
pub const DSFXCHORUS_WETDRYMIX_MIN = @as(f32, 0);
pub const DSFXCHORUS_WETDRYMIX_MAX = @as(f32, 100);
pub const DSFXCHORUS_DEPTH_MIN = @as(f32, 0);
pub const DSFXCHORUS_DEPTH_MAX = @as(f32, 100);
pub const DSFXCHORUS_FEEDBACK_MIN = @as(f32, -99);
pub const DSFXCHORUS_FEEDBACK_MAX = @as(f32, 99);
pub const DSFXCHORUS_FREQUENCY_MIN = @as(f32, 0);
pub const DSFXCHORUS_FREQUENCY_MAX = @as(f32, 10);
pub const DSFXCHORUS_DELAY_MIN = @as(f32, 0);
pub const DSFXCHORUS_DELAY_MAX = @as(f32, 20);
pub const DSFXCHORUS_PHASE_MIN = @as(u32, 0);
pub const DSFXCHORUS_PHASE_MAX = @as(u32, 4);
pub const DSFXCHORUS_PHASE_NEG_180 = @as(u32, 0);
pub const DSFXCHORUS_PHASE_NEG_90 = @as(u32, 1);
pub const DSFXCHORUS_PHASE_ZERO = @as(u32, 2);
pub const DSFXCHORUS_PHASE_90 = @as(u32, 3);
pub const DSFXCHORUS_PHASE_180 = @as(u32, 4);
pub const DSFXFLANGER_WAVE_TRIANGLE = @as(u32, 0);
pub const DSFXFLANGER_WAVE_SIN = @as(u32, 1);
pub const DSFXFLANGER_WETDRYMIX_MIN = @as(f32, 0);
pub const DSFXFLANGER_WETDRYMIX_MAX = @as(f32, 100);
pub const DSFXFLANGER_FREQUENCY_MIN = @as(f32, 0);
pub const DSFXFLANGER_FREQUENCY_MAX = @as(f32, 10);
pub const DSFXFLANGER_DEPTH_MIN = @as(f32, 0);
pub const DSFXFLANGER_DEPTH_MAX = @as(f32, 100);
pub const DSFXFLANGER_PHASE_MIN = @as(u32, 0);
pub const DSFXFLANGER_PHASE_MAX = @as(u32, 4);
pub const DSFXFLANGER_FEEDBACK_MIN = @as(f32, -99);
pub const DSFXFLANGER_FEEDBACK_MAX = @as(f32, 99);
pub const DSFXFLANGER_DELAY_MIN = @as(f32, 0);
pub const DSFXFLANGER_DELAY_MAX = @as(f32, 4);
pub const DSFXFLANGER_PHASE_NEG_180 = @as(u32, 0);
pub const DSFXFLANGER_PHASE_NEG_90 = @as(u32, 1);
pub const DSFXFLANGER_PHASE_ZERO = @as(u32, 2);
pub const DSFXFLANGER_PHASE_90 = @as(u32, 3);
pub const DSFXFLANGER_PHASE_180 = @as(u32, 4);
pub const DSFXECHO_WETDRYMIX_MIN = @as(f32, 0);
pub const DSFXECHO_WETDRYMIX_MAX = @as(f32, 100);
pub const DSFXECHO_FEEDBACK_MIN = @as(f32, 0);
pub const DSFXECHO_FEEDBACK_MAX = @as(f32, 100);
pub const DSFXECHO_LEFTDELAY_MIN = @as(f32, 1);
pub const DSFXECHO_LEFTDELAY_MAX = @as(f32, 2000);
pub const DSFXECHO_RIGHTDELAY_MIN = @as(f32, 1);
pub const DSFXECHO_RIGHTDELAY_MAX = @as(f32, 2000);
pub const DSFXECHO_PANDELAY_MIN = @as(u32, 0);
pub const DSFXECHO_PANDELAY_MAX = @as(u32, 1);
pub const DSFXDISTORTION_GAIN_MIN = @as(f32, -60);
pub const DSFXDISTORTION_GAIN_MAX = @as(f32, 0);
pub const DSFXDISTORTION_EDGE_MIN = @as(f32, 0);
pub const DSFXDISTORTION_EDGE_MAX = @as(f32, 100);
pub const DSFXDISTORTION_POSTEQCENTERFREQUENCY_MIN = @as(f32, 100);
pub const DSFXDISTORTION_POSTEQCENTERFREQUENCY_MAX = @as(f32, 8000);
pub const DSFXDISTORTION_POSTEQBANDWIDTH_MIN = @as(f32, 100);
pub const DSFXDISTORTION_POSTEQBANDWIDTH_MAX = @as(f32, 8000);
pub const DSFXDISTORTION_PRELOWPASSCUTOFF_MIN = @as(f32, 100);
pub const DSFXDISTORTION_PRELOWPASSCUTOFF_MAX = @as(f32, 8000);
pub const DSFXCOMPRESSOR_GAIN_MIN = @as(f32, -60);
pub const DSFXCOMPRESSOR_GAIN_MAX = @as(f32, 60);
pub const DSFXCOMPRESSOR_ATTACK_MIN = @as(f32, 1.0e-02);
pub const DSFXCOMPRESSOR_ATTACK_MAX = @as(f32, 500);
pub const DSFXCOMPRESSOR_RELEASE_MIN = @as(f32, 50);
pub const DSFXCOMPRESSOR_RELEASE_MAX = @as(f32, 3000);
pub const DSFXCOMPRESSOR_THRESHOLD_MIN = @as(f32, -60);
pub const DSFXCOMPRESSOR_THRESHOLD_MAX = @as(f32, 0);
pub const DSFXCOMPRESSOR_RATIO_MIN = @as(f32, 1);
pub const DSFXCOMPRESSOR_RATIO_MAX = @as(f32, 100);
pub const DSFXCOMPRESSOR_PREDELAY_MIN = @as(f32, 0);
pub const DSFXCOMPRESSOR_PREDELAY_MAX = @as(f32, 4);
pub const DSFXPARAMEQ_CENTER_MIN = @as(f32, 80);
pub const DSFXPARAMEQ_CENTER_MAX = @as(f32, 16000);
pub const DSFXPARAMEQ_BANDWIDTH_MIN = @as(f32, 1);
pub const DSFXPARAMEQ_BANDWIDTH_MAX = @as(f32, 36);
pub const DSFXPARAMEQ_GAIN_MIN = @as(f32, -15);
pub const DSFXPARAMEQ_GAIN_MAX = @as(f32, 15);
pub const DSFX_I3DL2REVERB_ROOM_MIN = @as(i32, -10000);
pub const DSFX_I3DL2REVERB_ROOM_MAX = @as(u32, 0);
pub const DSFX_I3DL2REVERB_ROOM_DEFAULT = @as(i32, -1000);
pub const DSFX_I3DL2REVERB_ROOMHF_MIN = @as(i32, -10000);
pub const DSFX_I3DL2REVERB_ROOMHF_MAX = @as(u32, 0);
pub const DSFX_I3DL2REVERB_ROOMHF_DEFAULT = @as(i32, -100);
pub const DSFX_I3DL2REVERB_ROOMROLLOFFFACTOR_MIN = @as(f32, 0);
pub const DSFX_I3DL2REVERB_ROOMROLLOFFFACTOR_MAX = @as(f32, 10);
pub const DSFX_I3DL2REVERB_ROOMROLLOFFFACTOR_DEFAULT = @as(f32, 0);
pub const DSFX_I3DL2REVERB_DECAYTIME_MIN = @as(f32, 1.0e-01);
pub const DSFX_I3DL2REVERB_DECAYTIME_MAX = @as(f32, 20);
pub const DSFX_I3DL2REVERB_DECAYTIME_DEFAULT = @as(f32, 1.49e+00);
pub const DSFX_I3DL2REVERB_DECAYHFRATIO_MIN = @as(f32, 1.0e-01);
pub const DSFX_I3DL2REVERB_DECAYHFRATIO_MAX = @as(f32, 2);
pub const DSFX_I3DL2REVERB_DECAYHFRATIO_DEFAULT = @as(f32, 8.3e-01);
pub const DSFX_I3DL2REVERB_REFLECTIONS_MIN = @as(i32, -10000);
pub const DSFX_I3DL2REVERB_REFLECTIONS_MAX = @as(u32, 1000);
pub const DSFX_I3DL2REVERB_REFLECTIONS_DEFAULT = @as(i32, -2602);
pub const DSFX_I3DL2REVERB_REFLECTIONSDELAY_MIN = @as(f32, 0);
pub const DSFX_I3DL2REVERB_REFLECTIONSDELAY_MAX = @as(f32, 3.0e-01);
pub const DSFX_I3DL2REVERB_REFLECTIONSDELAY_DEFAULT = @as(f32, 7.0e-03);
pub const DSFX_I3DL2REVERB_REVERB_MIN = @as(i32, -10000);
pub const DSFX_I3DL2REVERB_REVERB_MAX = @as(u32, 2000);
pub const DSFX_I3DL2REVERB_REVERB_DEFAULT = @as(u32, 200);
pub const DSFX_I3DL2REVERB_REVERBDELAY_MIN = @as(f32, 0);
pub const DSFX_I3DL2REVERB_REVERBDELAY_MAX = @as(f32, 1.0e-01);
pub const DSFX_I3DL2REVERB_REVERBDELAY_DEFAULT = @as(f32, 1.1e-02);
pub const DSFX_I3DL2REVERB_DIFFUSION_MIN = @as(f32, 0);
pub const DSFX_I3DL2REVERB_DIFFUSION_MAX = @as(f32, 100);
pub const DSFX_I3DL2REVERB_DIFFUSION_DEFAULT = @as(f32, 100);
pub const DSFX_I3DL2REVERB_DENSITY_MIN = @as(f32, 0);
pub const DSFX_I3DL2REVERB_DENSITY_MAX = @as(f32, 100);
pub const DSFX_I3DL2REVERB_DENSITY_DEFAULT = @as(f32, 100);
pub const DSFX_I3DL2REVERB_HFREFERENCE_MIN = @as(f32, 20);
pub const DSFX_I3DL2REVERB_HFREFERENCE_MAX = @as(f32, 20000);
pub const DSFX_I3DL2REVERB_HFREFERENCE_DEFAULT = @as(f32, 5000);
pub const DSFX_I3DL2REVERB_QUALITY_MIN = @as(u32, 0);
pub const DSFX_I3DL2REVERB_QUALITY_MAX = @as(u32, 3);
pub const DSFX_I3DL2REVERB_QUALITY_DEFAULT = @as(u32, 2);
pub const DSFX_WAVESREVERB_INGAIN_MIN = @as(f32, -96);
pub const DSFX_WAVESREVERB_INGAIN_MAX = @as(f32, 0);
pub const DSFX_WAVESREVERB_INGAIN_DEFAULT = @as(f32, 0);
pub const DSFX_WAVESREVERB_REVERBMIX_MIN = @as(f32, -96);
pub const DSFX_WAVESREVERB_REVERBMIX_MAX = @as(f32, 0);
pub const DSFX_WAVESREVERB_REVERBMIX_DEFAULT = @as(f32, 0);
pub const DSFX_WAVESREVERB_REVERBTIME_MIN = @as(f32, 1.0e-03);
pub const DSFX_WAVESREVERB_REVERBTIME_MAX = @as(f32, 3000);
pub const DSFX_WAVESREVERB_REVERBTIME_DEFAULT = @as(f32, 1000);
pub const DSFX_WAVESREVERB_HIGHFREQRTRATIO_MIN = @as(f32, 1.0e-03);
pub const DSFX_WAVESREVERB_HIGHFREQRTRATIO_MAX = @as(f32, 9.99e-01);
pub const DSFX_WAVESREVERB_HIGHFREQRTRATIO_DEFAULT = @as(f32, 1.0e-03);
pub const DSCFX_AEC_MODE_PASS_THROUGH = @as(u32, 0);
pub const DSCFX_AEC_MODE_HALF_DUPLEX = @as(u32, 1);
pub const DSCFX_AEC_MODE_FULL_DUPLEX = @as(u32, 2);
pub const DSCFX_AEC_STATUS_HISTORY_UNINITIALIZED = @as(u32, 0);
pub const DSCFX_AEC_STATUS_HISTORY_CONTINUOUSLY_CONVERGED = @as(u32, 1);
pub const DSCFX_AEC_STATUS_HISTORY_PREVIOUSLY_DIVERGED = @as(u32, 2);
pub const DSCFX_AEC_STATUS_CURRENTLY_CONVERGED = @as(u32, 8);
pub const DSCAPS_PRIMARYMONO = @as(u32, 1);
pub const DSCAPS_PRIMARYSTEREO = @as(u32, 2);
pub const DSCAPS_PRIMARY8BIT = @as(u32, 4);
pub const DSCAPS_PRIMARY16BIT = @as(u32, 8);
pub const DSCAPS_CONTINUOUSRATE = @as(u32, 16);
pub const DSCAPS_EMULDRIVER = @as(u32, 32);
pub const DSCAPS_CERTIFIED = @as(u32, 64);
pub const DSCAPS_SECONDARYMONO = @as(u32, 256);
pub const DSCAPS_SECONDARYSTEREO = @as(u32, 512);
pub const DSCAPS_SECONDARY8BIT = @as(u32, 1024);
pub const DSCAPS_SECONDARY16BIT = @as(u32, 2048);
pub const DSSCL_NORMAL = @as(u32, 1);
pub const DSSCL_PRIORITY = @as(u32, 2);
pub const DSSCL_EXCLUSIVE = @as(u32, 3);
pub const DSSCL_WRITEPRIMARY = @as(u32, 4);
pub const DSSPEAKER_DIRECTOUT = @as(u32, 0);
pub const DSSPEAKER_HEADPHONE = @as(u32, 1);
pub const DSSPEAKER_MONO = @as(u32, 2);
pub const DSSPEAKER_QUAD = @as(u32, 3);
pub const DSSPEAKER_STEREO = @as(u32, 4);
pub const DSSPEAKER_SURROUND = @as(u32, 5);
pub const DSSPEAKER_5POINT1 = @as(u32, 6);
pub const DSSPEAKER_7POINT1 = @as(u32, 7);
pub const DSSPEAKER_7POINT1_SURROUND = @as(u32, 8);
pub const DSSPEAKER_5POINT1_SURROUND = @as(u32, 9);
pub const DSSPEAKER_GEOMETRY_MIN = @as(u32, 5);
pub const DSSPEAKER_GEOMETRY_NARROW = @as(u32, 10);
pub const DSSPEAKER_GEOMETRY_WIDE = @as(u32, 20);
pub const DSSPEAKER_GEOMETRY_MAX = @as(u32, 180);
pub const DSBCAPS_PRIMARYBUFFER = @as(u32, 1);
pub const DSBCAPS_STATIC = @as(u32, 2);
pub const DSBCAPS_LOCHARDWARE = @as(u32, 4);
pub const DSBCAPS_LOCSOFTWARE = @as(u32, 8);
pub const DSBCAPS_CTRL3D = @as(u32, 16);
pub const DSBCAPS_CTRLFREQUENCY = @as(u32, 32);
pub const DSBCAPS_CTRLPAN = @as(u32, 64);
pub const DSBCAPS_CTRLVOLUME = @as(u32, 128);
pub const DSBCAPS_CTRLPOSITIONNOTIFY = @as(u32, 256);
pub const DSBCAPS_CTRLFX = @as(u32, 512);
pub const DSBCAPS_STICKYFOCUS = @as(u32, 16384);
pub const DSBCAPS_GLOBALFOCUS = @as(u32, 32768);
pub const DSBCAPS_GETCURRENTPOSITION2 = @as(u32, 65536);
pub const DSBCAPS_MUTE3DATMAXDISTANCE = @as(u32, 131072);
pub const DSBCAPS_LOCDEFER = @as(u32, 262144);
pub const DSBCAPS_TRUEPLAYPOSITION = @as(u32, 524288);
pub const DSBPLAY_LOOPING = @as(u32, 1);
pub const DSBPLAY_LOCHARDWARE = @as(u32, 2);
pub const DSBPLAY_LOCSOFTWARE = @as(u32, 4);
pub const DSBPLAY_TERMINATEBY_TIME = @as(u32, 8);
pub const DSBPLAY_TERMINATEBY_DISTANCE = @as(u64, 16);
pub const DSBPLAY_TERMINATEBY_PRIORITY = @as(u64, 32);
pub const DSBSTATUS_PLAYING = @as(u32, 1);
pub const DSBSTATUS_BUFFERLOST = @as(u32, 2);
pub const DSBSTATUS_LOOPING = @as(u32, 4);
pub const DSBSTATUS_LOCHARDWARE = @as(u32, 8);
pub const DSBSTATUS_LOCSOFTWARE = @as(u32, 16);
pub const DSBSTATUS_TERMINATED = @as(u32, 32);
pub const DSBLOCK_FROMWRITECURSOR = @as(u32, 1);
pub const DSBLOCK_ENTIREBUFFER = @as(u32, 2);
pub const DSBFREQUENCY_ORIGINAL = @as(u32, 0);
pub const DSBFREQUENCY_MIN = @as(u32, 100);
pub const DSBFREQUENCY_MAX = @as(u32, 200000);
pub const DSBPAN_LEFT = @as(i32, -10000);
pub const DSBPAN_CENTER = @as(u32, 0);
pub const DSBPAN_RIGHT = @as(u32, 10000);
pub const DSBVOLUME_MIN = @as(i32, -10000);
pub const DSBVOLUME_MAX = @as(u32, 0);
pub const DSBSIZE_MIN = @as(u32, 4);
pub const DSBSIZE_MAX = @as(u32, 268435455);
pub const DSBSIZE_FX_MIN = @as(u32, 150);
pub const DSBNOTIFICATIONS_MAX = @as(u32, 100000);
pub const DS3DMODE_NORMAL = @as(u32, 0);
pub const DS3DMODE_HEADRELATIVE = @as(u32, 1);
pub const DS3DMODE_DISABLE = @as(u32, 2);
pub const DS3D_IMMEDIATE = @as(u32, 0);
pub const DS3D_DEFERRED = @as(u32, 1);
pub const DS3D_DEFAULTDISTANCEFACTOR = @as(f32, 1);
pub const DS3D_MINROLLOFFFACTOR = @as(f32, 0);
pub const DS3D_MAXROLLOFFFACTOR = @as(f32, 10);
pub const DS3D_DEFAULTROLLOFFFACTOR = @as(f32, 1);
pub const DS3D_MINDOPPLERFACTOR = @as(f32, 0);
pub const DS3D_MAXDOPPLERFACTOR = @as(f32, 10);
pub const DS3D_DEFAULTDOPPLERFACTOR = @as(f32, 1);
pub const DS3D_DEFAULTMINDISTANCE = @as(f32, 1);
pub const DS3D_DEFAULTMAXDISTANCE = @as(f32, 1.0e+09);
pub const DS3D_MINCONEANGLE = @as(u32, 0);
pub const DS3D_MAXCONEANGLE = @as(u32, 360);
pub const DS3D_DEFAULTCONEANGLE = @as(u32, 360);
pub const DSCCAPS_MULTIPLECAPTURE = @as(u32, 1);
pub const DSCBCAPS_WAVEMAPPED = @as(u32, 2147483648);
pub const DSCBCAPS_CTRLFX = @as(u32, 512);
pub const DSCBLOCK_ENTIREBUFFER = @as(u32, 1);
pub const DSCBSTATUS_CAPTURING = @as(u32, 1);
pub const DSCBSTATUS_LOOPING = @as(u32, 2);
pub const DSCBSTART_LOOPING = @as(u32, 1);
pub const DSBPN_OFFSETSTOP = @as(u32, 4294967295);
pub const DS_CERTIFIED = @as(u32, 0);
pub const DS_UNCERTIFIED = @as(u32, 1);
pub const DS3DALG_NO_VIRTUALIZATION = Guid.initString("c241333f-1c1b-11d2-94f5-00c04fc28aca");
pub const DS3DALG_HRTF_FULL = Guid.initString("c2413340-1c1b-11d2-94f5-00c04fc28aca");
pub const DS3DALG_HRTF_LIGHT = Guid.initString("c2413342-1c1b-11d2-94f5-00c04fc28aca");
pub const GUID_DSFX_STANDARD_GARGLE = Guid.initString("dafd8210-5711-4b91-9fe3-f75b7ae279bf");
pub const GUID_DSFX_STANDARD_CHORUS = Guid.initString("efe6629c-81f7-4281-bd91-c9d604a95af6");
pub const GUID_DSFX_STANDARD_FLANGER = Guid.initString("efca3d92-dfd8-4672-a603-7420894bad98");
pub const GUID_DSFX_STANDARD_ECHO = Guid.initString("ef3e932c-d40b-4f51-8ccf-3f98f1b29d5d");
pub const GUID_DSFX_STANDARD_DISTORTION = Guid.initString("ef114c90-cd1d-484e-96e5-09cfaf912a21");
pub const GUID_DSFX_STANDARD_COMPRESSOR = Guid.initString("ef011f79-4000-406d-87af-bffb3fc39d57");
pub const GUID_DSFX_STANDARD_PARAMEQ = Guid.initString("120ced89-3bf4-4173-a132-3cb406cf3231");
pub const GUID_DSFX_STANDARD_I3DL2REVERB = Guid.initString("ef985e71-d5c7-42d4-ba4d-2d073e2e96f4");
pub const GUID_DSFX_WAVES_REVERB = Guid.initString("87fc0268-9a55-4360-95aa-004a1d9de26c");
pub const GUID_DSCFX_CLASS_AEC = Guid.initString("bf963d80-c559-11d0-8a2b-00a0c9255ac1");
pub const GUID_DSCFX_MS_AEC = Guid.initString("cdebb919-379a-488a-8765-f53cfd36de40");
pub const GUID_DSCFX_SYSTEM_AEC = Guid.initString("1c22c56d-9879-4f5b-a389-27996ddc2810");
pub const GUID_DSCFX_CLASS_NS = Guid.initString("e07f903f-62fd-4e60-8cdd-dea7236665b5");
pub const GUID_DSCFX_MS_NS = Guid.initString("11c5c73b-66e9-4ba1-a0ba-e814c6eed92d");
pub const GUID_DSCFX_SYSTEM_NS = Guid.initString("5ab0882e-7274-4516-877d-4eee99ba4fd0");
pub const DMUS_DOWNLOADINFO_INSTRUMENT = @as(u32, 1);
pub const DMUS_DOWNLOADINFO_WAVE = @as(u32, 2);
pub const DMUS_DOWNLOADINFO_INSTRUMENT2 = @as(u32, 3);
pub const DMUS_DOWNLOADINFO_WAVEARTICULATION = @as(u32, 4);
pub const DMUS_DOWNLOADINFO_STREAMINGWAVE = @as(u32, 5);
pub const DMUS_DOWNLOADINFO_ONESHOTWAVE = @as(u32, 6);
pub const DMUS_DEFAULT_SIZE_OFFSETTABLE = @as(u32, 1);
pub const DMUS_INSTRUMENT_GM_INSTRUMENT = @as(u32, 1);
pub const DMUS_MIN_DATA_SIZE = @as(u32, 4);
pub const CONN_SRC_NONE = @as(u32, 0);
pub const CONN_SRC_LFO = @as(u32, 1);
pub const CONN_SRC_KEYONVELOCITY = @as(u32, 2);
pub const CONN_SRC_KEYNUMBER = @as(u32, 3);
pub const CONN_SRC_EG1 = @as(u32, 4);
pub const CONN_SRC_EG2 = @as(u32, 5);
pub const CONN_SRC_PITCHWHEEL = @as(u32, 6);
pub const CONN_SRC_CC1 = @as(u32, 129);
pub const CONN_SRC_CC7 = @as(u32, 135);
pub const CONN_SRC_CC10 = @as(u32, 138);
pub const CONN_SRC_CC11 = @as(u32, 139);
pub const CONN_DST_NONE = @as(u32, 0);
pub const CONN_DST_ATTENUATION = @as(u32, 1);
pub const CONN_DST_PITCH = @as(u32, 3);
pub const CONN_DST_PAN = @as(u32, 4);
pub const CONN_DST_LFO_FREQUENCY = @as(u32, 260);
pub const CONN_DST_LFO_STARTDELAY = @as(u32, 261);
pub const CONN_DST_EG1_ATTACKTIME = @as(u32, 518);
pub const CONN_DST_EG1_DECAYTIME = @as(u32, 519);
pub const CONN_DST_EG1_RELEASETIME = @as(u32, 521);
pub const CONN_DST_EG1_SUSTAINLEVEL = @as(u32, 522);
pub const CONN_DST_EG2_ATTACKTIME = @as(u32, 778);
pub const CONN_DST_EG2_DECAYTIME = @as(u32, 779);
pub const CONN_DST_EG2_RELEASETIME = @as(u32, 781);
pub const CONN_DST_EG2_SUSTAINLEVEL = @as(u32, 782);
pub const CONN_TRN_NONE = @as(u32, 0);
pub const CONN_TRN_CONCAVE = @as(u32, 1);
pub const F_INSTRUMENT_DRUMS = @as(u32, 2147483648);
pub const F_RGN_OPTION_SELFNONEXCLUSIVE = @as(u32, 1);
pub const WAVELINK_CHANNEL_LEFT = @as(i32, 1);
pub const WAVELINK_CHANNEL_RIGHT = @as(i32, 2);
pub const F_WAVELINK_PHASE_MASTER = @as(u32, 1);
pub const POOL_CUE_NULL = @as(i32, -1);
pub const F_WSMP_NO_TRUNCATION = @as(i32, 1);
pub const F_WSMP_NO_COMPRESSION = @as(i32, 2);
pub const WLOOP_TYPE_FORWARD = @as(u32, 0);
pub const APOERR_ALREADY_INITIALIZED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2005073919));
pub const APOERR_NOT_INITIALIZED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2005073918));
pub const APOERR_FORMAT_NOT_SUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2005073917));
pub const APOERR_INVALID_APO_CLSID = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2005073916));
pub const APOERR_BUFFERS_OVERLAP = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2005073915));
pub const APOERR_ALREADY_UNLOCKED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2005073914));
pub const APOERR_NUM_CONNECTIONS_INVALID = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2005073913));
pub const APOERR_INVALID_OUTPUT_MAXFRAMECOUNT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2005073912));
pub const APOERR_INVALID_CONNECTION_FORMAT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2005073911));
pub const APOERR_APO_LOCKED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2005073910));
pub const APOERR_INVALID_COEFFCOUNT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2005073909));
pub const APOERR_INVALID_COEFFICIENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2005073908));
pub const APOERR_INVALID_CURVE_PARAM = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2005073907));
pub const AUDIO_MIN_FRAMERATE = @as(f64, 10);
pub const AUDIO_MAX_FRAMERATE = @as(f64, 384000);
pub const AUDIO_MIN_CHANNELS = @as(u32, 1);
pub const AUDIO_MAX_CHANNELS = @as(u32, 4096);
pub const REFRESH_F_LASTBUFFER = @as(u32, 1);
pub const CLSID_DirectMusicSynthSink = Guid.initString("aec17ce3-a514-11d1-afa6-00aa0024d8b6");
pub const GUID_DMUS_PROP_SetSynthSink = Guid.initString("0a3a5ba5-37b6-11d2-b9f9-0000f875ac12");
pub const GUID_DMUS_PROP_SinkUsesDSound = Guid.initString("be208857-8952-11d2-ba1c-0000f875ac12");
pub const AUDIOMEDIATYPE_EQUAL_FORMAT_TYPES = @as(u32, 2);
pub const AUDIOMEDIATYPE_EQUAL_FORMAT_DATA = @as(u32, 4);
pub const AUDIOMEDIATYPE_EQUAL_FORMAT_USER_DATA = @as(u32, 8);

//--------------------------------------------------------------------------------
// Section: Types (132)
//--------------------------------------------------------------------------------
pub const UNCOMPRESSEDAUDIOFORMAT = extern struct {
    guidFormatType: Guid,
    dwSamplesPerFrame: u32,
    dwBytesPerSampleContainer: u32,
    dwValidBitsPerSample: u32,
    fFramesPerSecond: f32,
    dwChannelMask: u32,
};

const IID_IAudioMediaType_Value = @import("../zig.zig").Guid.initString("4e997f73-b71f-4798-873b-ed7dfcf15b4d");
pub const IID_IAudioMediaType = &IID_IAudioMediaType_Value;
pub const IAudioMediaType = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsCompressedFormat: fn(
            self: *const IAudioMediaType,
            pfCompressed: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsEqual: fn(
            self: *const IAudioMediaType,
            pIAudioType: *IAudioMediaType,
            pdwFlags: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAudioFormat: fn(
            self: *const IAudioMediaType,
        ) callconv(@import("std").os.windows.WINAPI) *WAVEFORMATEX,
        GetUncompressedAudioFormat: fn(
            self: *const IAudioMediaType,
            pUncompressedAudioFormat: *UNCOMPRESSEDAUDIOFORMAT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAudioMediaType_IsCompressedFormat(self: *const T, pfCompressed: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAudioMediaType.VTable, self.vtable).IsCompressedFormat(@ptrCast(*const IAudioMediaType, self), pfCompressed);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAudioMediaType_IsEqual(self: *const T, pIAudioType: *IAudioMediaType, pdwFlags: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAudioMediaType.VTable, self.vtable).IsEqual(@ptrCast(*const IAudioMediaType, self), pIAudioType, pdwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAudioMediaType_GetAudioFormat(self: *const T) callconv(.Inline) *WAVEFORMATEX {
            return @ptrCast(*const IAudioMediaType.VTable, self.vtable).GetAudioFormat(@ptrCast(*const IAudioMediaType, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAudioMediaType_GetUncompressedAudioFormat(self: *const T, pUncompressedAudioFormat: *UNCOMPRESSEDAUDIOFORMAT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAudioMediaType.VTable, self.vtable).GetUncompressedAudioFormat(@ptrCast(*const IAudioMediaType, self), pUncompressedAudioFormat);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const APO_CONNECTION_BUFFER_TYPE = extern enum(i32) {
    ALLOCATED = 0,
    EXTERNAL = 1,
    DEPENDANT = 2,
};
pub const APO_CONNECTION_BUFFER_TYPE_ALLOCATED = APO_CONNECTION_BUFFER_TYPE.ALLOCATED;
pub const APO_CONNECTION_BUFFER_TYPE_EXTERNAL = APO_CONNECTION_BUFFER_TYPE.EXTERNAL;
pub const APO_CONNECTION_BUFFER_TYPE_DEPENDANT = APO_CONNECTION_BUFFER_TYPE.DEPENDANT;

pub const APO_CONNECTION_DESCRIPTOR = extern struct {
    Type: APO_CONNECTION_BUFFER_TYPE,
    pBuffer: usize,
    u32MaxFrameCount: u32,
    pFormat: *IAudioMediaType,
    u32Signature: u32,
};

pub const APO_FLAG = extern enum(i32) {
    NONE = 0,
    INPLACE = 1,
    SAMPLESPERFRAME_MUST_MATCH = 2,
    FRAMESPERSECOND_MUST_MATCH = 4,
    BITSPERSAMPLE_MUST_MATCH = 8,
    MIXER = 16,
    DEFAULT = 14,
};
pub const APO_FLAG_NONE = APO_FLAG.NONE;
pub const APO_FLAG_INPLACE = APO_FLAG.INPLACE;
pub const APO_FLAG_SAMPLESPERFRAME_MUST_MATCH = APO_FLAG.SAMPLESPERFRAME_MUST_MATCH;
pub const APO_FLAG_FRAMESPERSECOND_MUST_MATCH = APO_FLAG.FRAMESPERSECOND_MUST_MATCH;
pub const APO_FLAG_BITSPERSAMPLE_MUST_MATCH = APO_FLAG.BITSPERSAMPLE_MUST_MATCH;
pub const APO_FLAG_MIXER = APO_FLAG.MIXER;
pub const APO_FLAG_DEFAULT = APO_FLAG.DEFAULT;

pub const APO_REG_PROPERTIES = extern struct {
    clsid: Guid,
    Flags: APO_FLAG,
    szFriendlyName: [256]u16,
    szCopyrightInfo: [256]u16,
    u32MajorVersion: u32,
    u32MinorVersion: u32,
    u32MinInputConnections: u32,
    u32MaxInputConnections: u32,
    u32MinOutputConnections: u32,
    u32MaxOutputConnections: u32,
    u32MaxInstances: u32,
    u32NumAPOInterfaces: u32,
    iidAPOInterfaceList: [1]Guid,
};

pub const APOInitBaseStruct = extern struct {
    cbSize: u32,
    clsid: Guid,
};

pub const AUDIO_FLOW_TYPE = extern enum(i32) {
    LL = 0,
    SH = 1,
};
pub const AUDIO_FLOW_PULL = AUDIO_FLOW_TYPE.LL;
pub const AUDIO_FLOW_PUSH = AUDIO_FLOW_TYPE.SH;

pub const EAudioConstriction = extern enum(i32) {
    Off = 0,
    @"48_16" = 1,
    @"44_16" = 2,
    @"14_14" = 3,
    Mute = 4,
};
pub const eAudioConstrictionOff = EAudioConstriction.Off;
pub const eAudioConstriction48_16 = EAudioConstriction.@"48_16";
pub const eAudioConstriction44_16 = EAudioConstriction.@"44_16";
pub const eAudioConstriction14_14 = EAudioConstriction.@"14_14";
pub const eAudioConstrictionMute = EAudioConstriction.Mute;

const IID_IAudioProcessingObjectRT_Value = @import("../zig.zig").Guid.initString("9e1d6a6d-ddbc-4e95-a4c7-ad64ba37846c");
pub const IID_IAudioProcessingObjectRT = &IID_IAudioProcessingObjectRT_Value;
pub const IAudioProcessingObjectRT = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        APOProcess: fn(
            self: *const IAudioProcessingObjectRT,
            u32NumInputConnections: u32,
            ppInputConnections: **APO_CONNECTION_PROPERTY,
            u32NumOutputConnections: u32,
            ppOutputConnections: **APO_CONNECTION_PROPERTY,
        ) callconv(@import("std").os.windows.WINAPI) void,
        CalcInputFrames: fn(
            self: *const IAudioProcessingObjectRT,
            u32OutputFrameCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        CalcOutputFrames: fn(
            self: *const IAudioProcessingObjectRT,
            u32InputFrameCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) u32,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAudioProcessingObjectRT_APOProcess(self: *const T, u32NumInputConnections: u32, ppInputConnections: **APO_CONNECTION_PROPERTY, u32NumOutputConnections: u32, ppOutputConnections: **APO_CONNECTION_PROPERTY) callconv(.Inline) void {
            return @ptrCast(*const IAudioProcessingObjectRT.VTable, self.vtable).APOProcess(@ptrCast(*const IAudioProcessingObjectRT, self), u32NumInputConnections, ppInputConnections, u32NumOutputConnections, ppOutputConnections);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAudioProcessingObjectRT_CalcInputFrames(self: *const T, u32OutputFrameCount: u32) callconv(.Inline) u32 {
            return @ptrCast(*const IAudioProcessingObjectRT.VTable, self.vtable).CalcInputFrames(@ptrCast(*const IAudioProcessingObjectRT, self), u32OutputFrameCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAudioProcessingObjectRT_CalcOutputFrames(self: *const T, u32InputFrameCount: u32) callconv(.Inline) u32 {
            return @ptrCast(*const IAudioProcessingObjectRT.VTable, self.vtable).CalcOutputFrames(@ptrCast(*const IAudioProcessingObjectRT, self), u32InputFrameCount);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAudioProcessingObjectVBR_Value = @import("../zig.zig").Guid.initString("7ba1db8f-78ad-49cd-9591-f79d80a17c81");
pub const IID_IAudioProcessingObjectVBR = &IID_IAudioProcessingObjectVBR_Value;
pub const IAudioProcessingObjectVBR = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CalcMaxInputFrames: fn(
            self: *const IAudioProcessingObjectVBR,
            u32MaxOutputFrameCount: u32,
            pu32InputFrameCount: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CalcMaxOutputFrames: fn(
            self: *const IAudioProcessingObjectVBR,
            u32MaxInputFrameCount: u32,
            pu32OutputFrameCount: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAudioProcessingObjectVBR_CalcMaxInputFrames(self: *const T, u32MaxOutputFrameCount: u32, pu32InputFrameCount: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAudioProcessingObjectVBR.VTable, self.vtable).CalcMaxInputFrames(@ptrCast(*const IAudioProcessingObjectVBR, self), u32MaxOutputFrameCount, pu32InputFrameCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAudioProcessingObjectVBR_CalcMaxOutputFrames(self: *const T, u32MaxInputFrameCount: u32, pu32OutputFrameCount: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAudioProcessingObjectVBR.VTable, self.vtable).CalcMaxOutputFrames(@ptrCast(*const IAudioProcessingObjectVBR, self), u32MaxInputFrameCount, pu32OutputFrameCount);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAudioProcessingObjectConfiguration_Value = @import("../zig.zig").Guid.initString("0e5ed805-aba6-49c3-8f9a-2b8c889c4fa8");
pub const IID_IAudioProcessingObjectConfiguration = &IID_IAudioProcessingObjectConfiguration_Value;
pub const IAudioProcessingObjectConfiguration = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        LockForProcess: fn(
            self: *const IAudioProcessingObjectConfiguration,
            u32NumInputConnections: u32,
            ppInputConnections: **APO_CONNECTION_DESCRIPTOR,
            u32NumOutputConnections: u32,
            ppOutputConnections: **APO_CONNECTION_DESCRIPTOR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnlockForProcess: fn(
            self: *const IAudioProcessingObjectConfiguration,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAudioProcessingObjectConfiguration_LockForProcess(self: *const T, u32NumInputConnections: u32, ppInputConnections: **APO_CONNECTION_DESCRIPTOR, u32NumOutputConnections: u32, ppOutputConnections: **APO_CONNECTION_DESCRIPTOR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAudioProcessingObjectConfiguration.VTable, self.vtable).LockForProcess(@ptrCast(*const IAudioProcessingObjectConfiguration, self), u32NumInputConnections, ppInputConnections, u32NumOutputConnections, ppOutputConnections);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAudioProcessingObjectConfiguration_UnlockForProcess(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAudioProcessingObjectConfiguration.VTable, self.vtable).UnlockForProcess(@ptrCast(*const IAudioProcessingObjectConfiguration, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAudioProcessingObject_Value = @import("../zig.zig").Guid.initString("fd7f2b29-24d0-4b5c-b177-592c39f9ca10");
pub const IID_IAudioProcessingObject = &IID_IAudioProcessingObject_Value;
pub const IAudioProcessingObject = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Reset: fn(
            self: *const IAudioProcessingObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLatency: fn(
            self: *const IAudioProcessingObject,
            pTime: *i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRegistrationProperties: fn(
            self: *const IAudioProcessingObject,
            ppRegProps: **APO_REG_PROPERTIES,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: fn(
            self: *const IAudioProcessingObject,
            cbDataSize: u32,
            pbyData: [*:0]u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsInputFormatSupported: fn(
            self: *const IAudioProcessingObject,
            pOppositeFormat: *IAudioMediaType,
            pRequestedInputFormat: *IAudioMediaType,
            ppSupportedInputFormat: **IAudioMediaType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsOutputFormatSupported: fn(
            self: *const IAudioProcessingObject,
            pOppositeFormat: *IAudioMediaType,
            pRequestedOutputFormat: *IAudioMediaType,
            ppSupportedOutputFormat: **IAudioMediaType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInputChannelCount: fn(
            self: *const IAudioProcessingObject,
            pu32ChannelCount: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAudioProcessingObject_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAudioProcessingObject.VTable, self.vtable).Reset(@ptrCast(*const IAudioProcessingObject, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAudioProcessingObject_GetLatency(self: *const T, pTime: *i64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAudioProcessingObject.VTable, self.vtable).GetLatency(@ptrCast(*const IAudioProcessingObject, self), pTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAudioProcessingObject_GetRegistrationProperties(self: *const T, ppRegProps: **APO_REG_PROPERTIES) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAudioProcessingObject.VTable, self.vtable).GetRegistrationProperties(@ptrCast(*const IAudioProcessingObject, self), ppRegProps);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAudioProcessingObject_Initialize(self: *const T, cbDataSize: u32, pbyData: [*:0]u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAudioProcessingObject.VTable, self.vtable).Initialize(@ptrCast(*const IAudioProcessingObject, self), cbDataSize, pbyData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAudioProcessingObject_IsInputFormatSupported(self: *const T, pOppositeFormat: *IAudioMediaType, pRequestedInputFormat: *IAudioMediaType, ppSupportedInputFormat: **IAudioMediaType) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAudioProcessingObject.VTable, self.vtable).IsInputFormatSupported(@ptrCast(*const IAudioProcessingObject, self), pOppositeFormat, pRequestedInputFormat, ppSupportedInputFormat);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAudioProcessingObject_IsOutputFormatSupported(self: *const T, pOppositeFormat: *IAudioMediaType, pRequestedOutputFormat: *IAudioMediaType, ppSupportedOutputFormat: **IAudioMediaType) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAudioProcessingObject.VTable, self.vtable).IsOutputFormatSupported(@ptrCast(*const IAudioProcessingObject, self), pOppositeFormat, pRequestedOutputFormat, ppSupportedOutputFormat);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAudioProcessingObject_GetInputChannelCount(self: *const T, pu32ChannelCount: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAudioProcessingObject.VTable, self.vtable).GetInputChannelCount(@ptrCast(*const IAudioProcessingObject, self), pu32ChannelCount);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAudioDeviceModulesClient_Value = @import("../zig.zig").Guid.initString("98f37dac-d0b6-49f5-896a-aa4d169a4c48");
pub const IID_IAudioDeviceModulesClient = &IID_IAudioDeviceModulesClient_Value;
pub const IAudioDeviceModulesClient = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAudioDeviceModulesManager: fn(
            self: *const IAudioDeviceModulesClient,
            pAudioDeviceModulesManager: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAudioDeviceModulesClient_SetAudioDeviceModulesManager(self: *const T, pAudioDeviceModulesManager: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAudioDeviceModulesClient.VTable, self.vtable).SetAudioDeviceModulesManager(@ptrCast(*const IAudioDeviceModulesClient, self), pAudioDeviceModulesManager);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const FNAPONOTIFICATIONCALLBACK = fn(
    pProperties: *APO_REG_PROPERTIES,
    pvRefData: *c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

const IID_IAudioSystemEffects_Value = @import("../zig.zig").Guid.initString("5fa00f27-add6-499a-8a9d-6b98521fa75b");
pub const IID_IAudioSystemEffects = &IID_IAudioSystemEffects_Value;
pub const IAudioSystemEffects = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAudioSystemEffects2_Value = @import("../zig.zig").Guid.initString("bafe99d2-7436-44ce-9e0e-4d89afbfff56");
pub const IID_IAudioSystemEffects2 = &IID_IAudioSystemEffects2_Value;
pub const IAudioSystemEffects2 = extern struct {
    pub const VTable = extern struct {
        base: IAudioSystemEffects.VTable,
        GetEffectsList: fn(
            self: *const IAudioSystemEffects2,
            ppEffectsIds: ?*?*Guid,
            pcEffects: *u32,
            Event: HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IAudioSystemEffects.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAudioSystemEffects2_GetEffectsList(self: *const T, ppEffectsIds: ?*?*Guid, pcEffects: *u32, Event: HANDLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAudioSystemEffects2.VTable, self.vtable).GetEffectsList(@ptrCast(*const IAudioSystemEffects2, self), ppEffectsIds, pcEffects, Event);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAudioSystemEffectsCustomFormats_Value = @import("../zig.zig").Guid.initString("b1176e34-bb7f-4f05-bebd-1b18a534e097");
pub const IID_IAudioSystemEffectsCustomFormats = &IID_IAudioSystemEffectsCustomFormats_Value;
pub const IAudioSystemEffectsCustomFormats = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFormatCount: fn(
            self: *const IAudioSystemEffectsCustomFormats,
            pcFormats: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFormat: fn(
            self: *const IAudioSystemEffectsCustomFormats,
            nFormat: u32,
            ppFormat: **IAudioMediaType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFormatRepresentation: fn(
            self: *const IAudioSystemEffectsCustomFormats,
            nFormat: u32,
            ppwstrFormatRep: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAudioSystemEffectsCustomFormats_GetFormatCount(self: *const T, pcFormats: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAudioSystemEffectsCustomFormats.VTable, self.vtable).GetFormatCount(@ptrCast(*const IAudioSystemEffectsCustomFormats, self), pcFormats);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAudioSystemEffectsCustomFormats_GetFormat(self: *const T, nFormat: u32, ppFormat: **IAudioMediaType) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAudioSystemEffectsCustomFormats.VTable, self.vtable).GetFormat(@ptrCast(*const IAudioSystemEffectsCustomFormats, self), nFormat, ppFormat);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAudioSystemEffectsCustomFormats_GetFormatRepresentation(self: *const T, nFormat: u32, ppwstrFormatRep: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAudioSystemEffectsCustomFormats.VTable, self.vtable).GetFormatRepresentation(@ptrCast(*const IAudioSystemEffectsCustomFormats, self), nFormat, ppwstrFormatRep);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const APOInitSystemEffects = extern struct {
    APOInit: APOInitBaseStruct,
    pAPOEndpointProperties: *IPropertyStore,
    pAPOSystemEffectsProperties: *IPropertyStore,
    pReserved: *c_void,
    pDeviceCollection: *IMMDeviceCollection,
};

pub const APOInitSystemEffects2 = extern struct {
    APOInit: APOInitBaseStruct,
    pAPOEndpointProperties: *IPropertyStore,
    pAPOSystemEffectsProperties: *IPropertyStore,
    pReserved: *c_void,
    pDeviceCollection: *IMMDeviceCollection,
    nSoftwareIoDeviceInCollection: u32,
    nSoftwareIoConnectorIndex: u32,
    AudioProcessingMode: Guid,
    InitializeForDiscoveryOnly: BOOL,
};

pub const AudioFXExtensionParams = extern struct {
    AddPageParam: LPARAM,
    pwstrEndpointID: PWSTR,
    pFxProperties: *IPropertyStore,
};

pub const DLSID = extern struct {
    ulData1: u32,
    usData2: u16,
    usData3: u16,
    abData4: [8]u8,
};

pub const DLSVERSION = extern struct {
    dwVersionMS: u32,
    dwVersionLS: u32,
};

pub const CONNECTION = extern struct {
    usSource: u16,
    usControl: u16,
    usDestination: u16,
    usTransform: u16,
    lScale: i32,
};

pub const CONNECTIONLIST = extern struct {
    cbSize: u32,
    cConnections: u32,
};

pub const RGNRANGE = extern struct {
    usLow: u16,
    usHigh: u16,
};

pub const MIDILOCALE = extern struct {
    ulBank: u32,
    ulInstrument: u32,
};

pub const RGNHEADER = extern struct {
    RangeKey: RGNRANGE,
    RangeVelocity: RGNRANGE,
    fusOptions: u16,
    usKeyGroup: u16,
};

pub const INSTHEADER = extern struct {
    cRegions: u32,
    Locale: MIDILOCALE,
};

pub const DLSHEADER = extern struct {
    cInstruments: u32,
};

pub const WAVELINK = extern struct {
    fusOptions: u16,
    usPhaseGroup: u16,
    ulChannel: u32,
    ulTableIndex: u32,
};

pub const POOLCUE = extern struct {
    ulOffset: u32,
};

pub const POOLTABLE = extern struct {
    cbSize: u32,
    cCues: u32,
};

pub const _rwsmp = extern struct {
    cbSize: u32,
    usUnityNote: u16,
    sFineTune: i16,
    lAttenuation: i32,
    fulOptions: u32,
    cSampleLoops: u32,
};

pub const _rloop = extern struct {
    cbSize: u32,
    ulType: u32,
    ulStart: u32,
    ulLength: u32,
};

pub const DMUS_DOWNLOADINFO = extern struct {
    dwDLType: u32,
    dwDLId: u32,
    dwNumOffsetTableEntries: u32,
    cbSize: u32,
};

pub const DMUS_OFFSETTABLE = extern struct {
    ulOffsetTable: [1]u32,
};

pub const DMUS_INSTRUMENT = extern struct {
    ulPatch: u32,
    ulFirstRegionIdx: u32,
    ulGlobalArtIdx: u32,
    ulFirstExtCkIdx: u32,
    ulCopyrightIdx: u32,
    ulFlags: u32,
};

pub const DMUS_REGION = extern struct {
    RangeKey: RGNRANGE,
    RangeVelocity: RGNRANGE,
    fusOptions: u16,
    usKeyGroup: u16,
    ulRegionArtIdx: u32,
    ulNextRegionIdx: u32,
    ulFirstExtCkIdx: u32,
    WaveLink: WAVELINK,
    WSMP: _rwsmp,
    WLOOP: [1]_rloop,
};

pub const DMUS_LFOPARAMS = extern struct {
    pcFrequency: i32,
    tcDelay: i32,
    gcVolumeScale: i32,
    pcPitchScale: i32,
    gcMWToVolume: i32,
    pcMWToPitch: i32,
};

pub const DMUS_VEGPARAMS = extern struct {
    tcAttack: i32,
    tcDecay: i32,
    ptSustain: i32,
    tcRelease: i32,
    tcVel2Attack: i32,
    tcKey2Decay: i32,
};

pub const DMUS_PEGPARAMS = extern struct {
    tcAttack: i32,
    tcDecay: i32,
    ptSustain: i32,
    tcRelease: i32,
    tcVel2Attack: i32,
    tcKey2Decay: i32,
    pcRange: i32,
};

pub const DMUS_MSCPARAMS = extern struct {
    ptDefaultPan: i32,
};

pub const DMUS_ARTICPARAMS = extern struct {
    LFO: DMUS_LFOPARAMS,
    VolEG: DMUS_VEGPARAMS,
    PitchEG: DMUS_PEGPARAMS,
    Misc: DMUS_MSCPARAMS,
};

pub const DMUS_ARTICULATION = extern struct {
    ulArt1Idx: u32,
    ulFirstExtCkIdx: u32,
};

pub const DMUS_ARTICULATION2 = extern struct {
    ulArtIdx: u32,
    ulFirstExtCkIdx: u32,
    ulNextArtIdx: u32,
};

pub const DMUS_EXTENSIONCHUNK = extern struct {
    cbSize: u32,
    ulNextExtCkIdx: u32,
    ExtCkID: u32,
    byExtCk: [4]u8,
};

pub const DMUS_COPYRIGHT = extern struct {
    cbSize: u32,
    byCopyright: [4]u8,
};

pub const DMUS_WAVEDATA = extern struct {
    cbSize: u32,
    byData: [4]u8,
};

pub const DMUS_WAVE = extern struct {
    ulFirstExtCkIdx: u32,
    ulCopyrightIdx: u32,
    ulWaveDataIdx: u32,
    WaveformatEx: WAVEFORMATEX,
};

pub const DMUS_NOTERANGE = extern struct {
    dwLowNote: u32,
    dwHighNote: u32,
};

pub const DMUS_WAVEARTDL = extern struct {
    ulDownloadIdIdx: u32,
    ulBus: u32,
    ulBuffers: u32,
    ulMasterDLId: u32,
    usOptions: u16,
};

pub const DMUS_WAVEDL = extern struct {
    cbWaveData: u32,
};

pub const DSCAPS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwMinSecondarySampleRate: u32,
    dwMaxSecondarySampleRate: u32,
    dwPrimaryBuffers: u32,
    dwMaxHwMixingAllBuffers: u32,
    dwMaxHwMixingStaticBuffers: u32,
    dwMaxHwMixingStreamingBuffers: u32,
    dwFreeHwMixingAllBuffers: u32,
    dwFreeHwMixingStaticBuffers: u32,
    dwFreeHwMixingStreamingBuffers: u32,
    dwMaxHw3DAllBuffers: u32,
    dwMaxHw3DStaticBuffers: u32,
    dwMaxHw3DStreamingBuffers: u32,
    dwFreeHw3DAllBuffers: u32,
    dwFreeHw3DStaticBuffers: u32,
    dwFreeHw3DStreamingBuffers: u32,
    dwTotalHwMemBytes: u32,
    dwFreeHwMemBytes: u32,
    dwMaxContigFreeHwMemBytes: u32,
    dwUnlockTransferRateHwBuffers: u32,
    dwPlayCpuOverheadSwBuffers: u32,
    dwReserved1: u32,
    dwReserved2: u32,
};

pub const DSBCAPS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwBufferBytes: u32,
    dwUnlockTransferRate: u32,
    dwPlayCpuOverhead: u32,
};

pub const DSEFFECTDESC = extern struct {
    dwSize: u32,
    dwFlags: u32,
    guidDSFXClass: Guid,
    dwReserved1: usize,
    dwReserved2: usize,
};

pub const DSCEFFECTDESC = extern struct {
    dwSize: u32,
    dwFlags: u32,
    guidDSCFXClass: Guid,
    guidDSCFXInstance: Guid,
    dwReserved1: u32,
    dwReserved2: u32,
};

pub const DSBUFFERDESC = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwBufferBytes: u32,
    dwReserved: u32,
    lpwfxFormat: *WAVEFORMATEX,
    guid3DAlgorithm: Guid,
};

pub const DSBUFFERDESC1 = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwBufferBytes: u32,
    dwReserved: u32,
    lpwfxFormat: *WAVEFORMATEX,
};

pub const DS3DBUFFER = extern struct {
    dwSize: u32,
    vPosition: D3DVECTOR,
    vVelocity: D3DVECTOR,
    dwInsideConeAngle: u32,
    dwOutsideConeAngle: u32,
    vConeOrientation: D3DVECTOR,
    lConeOutsideVolume: i32,
    flMinDistance: f32,
    flMaxDistance: f32,
    dwMode: u32,
};

pub const DS3DLISTENER = extern struct {
    dwSize: u32,
    vPosition: D3DVECTOR,
    vVelocity: D3DVECTOR,
    vOrientFront: D3DVECTOR,
    vOrientTop: D3DVECTOR,
    flDistanceFactor: f32,
    flRolloffFactor: f32,
    flDopplerFactor: f32,
};

pub const DSCCAPS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwFormats: u32,
    dwChannels: u32,
};

pub const DSCBUFFERDESC1 = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwBufferBytes: u32,
    dwReserved: u32,
    lpwfxFormat: *WAVEFORMATEX,
};

pub const DSCBUFFERDESC = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwBufferBytes: u32,
    dwReserved: u32,
    lpwfxFormat: *WAVEFORMATEX,
    dwFXCount: u32,
    lpDSCFXDesc: *DSCEFFECTDESC,
};

pub const DSCBCAPS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwBufferBytes: u32,
    dwReserved: u32,
};

pub const DSBPOSITIONNOTIFY = extern struct {
    dwOffset: u32,
    hEventNotify: HANDLE,
};

pub const LPDSENUMCALLBACKA = fn(
    param0: *Guid,
    param1: [*:0]const u8,
    param2: [*:0]const u8,
    param3: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const LPDSENUMCALLBACKW = fn(
    param0: *Guid,
    param1: [*:0]const u16,
    param2: [*:0]const u16,
    param3: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

const IID_IDirectSound_Value = @import("../zig.zig").Guid.initString("279afa83-4981-11ce-a521-0020af0be560");
pub const IID_IDirectSound = &IID_IDirectSound_Value;
pub const IDirectSound = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateSoundBuffer: fn(
            self: *const IDirectSound,
            pcDSBufferDesc: *DSBUFFERDESC,
            ppDSBuffer: **IDirectSoundBuffer,
            pUnkOuter: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCaps: fn(
            self: *const IDirectSound,
            pDSCaps: *DSCAPS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DuplicateSoundBuffer: fn(
            self: *const IDirectSound,
            pDSBufferOriginal: *IDirectSoundBuffer,
            ppDSBufferDuplicate: **IDirectSoundBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCooperativeLevel: fn(
            self: *const IDirectSound,
            hwnd: HWND,
            dwLevel: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Compact: fn(
            self: *const IDirectSound,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSpeakerConfig: fn(
            self: *const IDirectSound,
            pdwSpeakerConfig: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSpeakerConfig: fn(
            self: *const IDirectSound,
            dwSpeakerConfig: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: fn(
            self: *const IDirectSound,
            pcGuidDevice: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSound_CreateSoundBuffer(self: *const T, pcDSBufferDesc: *DSBUFFERDESC, ppDSBuffer: **IDirectSoundBuffer, pUnkOuter: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSound.VTable, self.vtable).CreateSoundBuffer(@ptrCast(*const IDirectSound, self), pcDSBufferDesc, ppDSBuffer, pUnkOuter);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSound_GetCaps(self: *const T, pDSCaps: *DSCAPS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSound.VTable, self.vtable).GetCaps(@ptrCast(*const IDirectSound, self), pDSCaps);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSound_DuplicateSoundBuffer(self: *const T, pDSBufferOriginal: *IDirectSoundBuffer, ppDSBufferDuplicate: **IDirectSoundBuffer) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSound.VTable, self.vtable).DuplicateSoundBuffer(@ptrCast(*const IDirectSound, self), pDSBufferOriginal, ppDSBufferDuplicate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSound_SetCooperativeLevel(self: *const T, hwnd: HWND, dwLevel: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSound.VTable, self.vtable).SetCooperativeLevel(@ptrCast(*const IDirectSound, self), hwnd, dwLevel);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSound_Compact(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSound.VTable, self.vtable).Compact(@ptrCast(*const IDirectSound, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSound_GetSpeakerConfig(self: *const T, pdwSpeakerConfig: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSound.VTable, self.vtable).GetSpeakerConfig(@ptrCast(*const IDirectSound, self), pdwSpeakerConfig);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSound_SetSpeakerConfig(self: *const T, dwSpeakerConfig: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSound.VTable, self.vtable).SetSpeakerConfig(@ptrCast(*const IDirectSound, self), dwSpeakerConfig);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSound_Initialize(self: *const T, pcGuidDevice: ?*Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSound.VTable, self.vtable).Initialize(@ptrCast(*const IDirectSound, self), pcGuidDevice);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectSound8_Value = @import("../zig.zig").Guid.initString("c50a7e93-f395-4834-9ef6-7fa99de50966");
pub const IID_IDirectSound8 = &IID_IDirectSound8_Value;
pub const IDirectSound8 = extern struct {
    pub const VTable = extern struct {
        base: IDirectSound.VTable,
        VerifyCertification: fn(
            self: *const IDirectSound8,
            pdwCertified: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDirectSound.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSound8_VerifyCertification(self: *const T, pdwCertified: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSound8.VTable, self.vtable).VerifyCertification(@ptrCast(*const IDirectSound8, self), pdwCertified);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectSoundBuffer_Value = @import("../zig.zig").Guid.initString("279afa85-4981-11ce-a521-0020af0be560");
pub const IID_IDirectSoundBuffer = &IID_IDirectSoundBuffer_Value;
pub const IDirectSoundBuffer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCaps: fn(
            self: *const IDirectSoundBuffer,
            pDSBufferCaps: *DSBCAPS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentPosition: fn(
            self: *const IDirectSoundBuffer,
            pdwCurrentPlayCursor: ?*u32,
            pdwCurrentWriteCursor: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFormat: fn(
            self: *const IDirectSoundBuffer,
            // TODO: what to do with BytesParamIndex 1?
            pwfxFormat: ?*WAVEFORMATEX,
            dwSizeAllocated: u32,
            pdwSizeWritten: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVolume: fn(
            self: *const IDirectSoundBuffer,
            plVolume: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPan: fn(
            self: *const IDirectSoundBuffer,
            plPan: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFrequency: fn(
            self: *const IDirectSoundBuffer,
            pdwFrequency: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStatus: fn(
            self: *const IDirectSoundBuffer,
            pdwStatus: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: fn(
            self: *const IDirectSoundBuffer,
            pDirectSound: *IDirectSound,
            pcDSBufferDesc: *DSBUFFERDESC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Lock: fn(
            self: *const IDirectSoundBuffer,
            dwOffset: u32,
            dwBytes: u32,
            ppvAudioPtr1: **c_void,
            pdwAudioBytes1: *u32,
            ppvAudioPtr2: ?*?*c_void,
            pdwAudioBytes2: ?*u32,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Play: fn(
            self: *const IDirectSoundBuffer,
            dwReserved1: u32,
            dwPriority: u32,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCurrentPosition: fn(
            self: *const IDirectSoundBuffer,
            dwNewPosition: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFormat: fn(
            self: *const IDirectSoundBuffer,
            pcfxFormat: *WAVEFORMATEX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetVolume: fn(
            self: *const IDirectSoundBuffer,
            lVolume: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPan: fn(
            self: *const IDirectSoundBuffer,
            lPan: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFrequency: fn(
            self: *const IDirectSoundBuffer,
            dwFrequency: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Stop: fn(
            self: *const IDirectSoundBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unlock: fn(
            self: *const IDirectSoundBuffer,
            // TODO: what to do with BytesParamIndex 1?
            pvAudioPtr1: *c_void,
            dwAudioBytes1: u32,
            // TODO: what to do with BytesParamIndex 3?
            pvAudioPtr2: ?*c_void,
            dwAudioBytes2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Restore: fn(
            self: *const IDirectSoundBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundBuffer_GetCaps(self: *const T, pDSBufferCaps: *DSBCAPS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundBuffer.VTable, self.vtable).GetCaps(@ptrCast(*const IDirectSoundBuffer, self), pDSBufferCaps);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundBuffer_GetCurrentPosition(self: *const T, pdwCurrentPlayCursor: ?*u32, pdwCurrentWriteCursor: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundBuffer.VTable, self.vtable).GetCurrentPosition(@ptrCast(*const IDirectSoundBuffer, self), pdwCurrentPlayCursor, pdwCurrentWriteCursor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundBuffer_GetFormat(self: *const T, pwfxFormat: ?*WAVEFORMATEX, dwSizeAllocated: u32, pdwSizeWritten: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundBuffer.VTable, self.vtable).GetFormat(@ptrCast(*const IDirectSoundBuffer, self), pwfxFormat, dwSizeAllocated, pdwSizeWritten);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundBuffer_GetVolume(self: *const T, plVolume: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundBuffer.VTable, self.vtable).GetVolume(@ptrCast(*const IDirectSoundBuffer, self), plVolume);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundBuffer_GetPan(self: *const T, plPan: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundBuffer.VTable, self.vtable).GetPan(@ptrCast(*const IDirectSoundBuffer, self), plPan);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundBuffer_GetFrequency(self: *const T, pdwFrequency: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundBuffer.VTable, self.vtable).GetFrequency(@ptrCast(*const IDirectSoundBuffer, self), pdwFrequency);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundBuffer_GetStatus(self: *const T, pdwStatus: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundBuffer.VTable, self.vtable).GetStatus(@ptrCast(*const IDirectSoundBuffer, self), pdwStatus);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundBuffer_Initialize(self: *const T, pDirectSound: *IDirectSound, pcDSBufferDesc: *DSBUFFERDESC) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundBuffer.VTable, self.vtable).Initialize(@ptrCast(*const IDirectSoundBuffer, self), pDirectSound, pcDSBufferDesc);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundBuffer_Lock(self: *const T, dwOffset: u32, dwBytes: u32, ppvAudioPtr1: **c_void, pdwAudioBytes1: *u32, ppvAudioPtr2: ?*?*c_void, pdwAudioBytes2: ?*u32, dwFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundBuffer.VTable, self.vtable).Lock(@ptrCast(*const IDirectSoundBuffer, self), dwOffset, dwBytes, ppvAudioPtr1, pdwAudioBytes1, ppvAudioPtr2, pdwAudioBytes2, dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundBuffer_Play(self: *const T, dwReserved1: u32, dwPriority: u32, dwFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundBuffer.VTable, self.vtable).Play(@ptrCast(*const IDirectSoundBuffer, self), dwReserved1, dwPriority, dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundBuffer_SetCurrentPosition(self: *const T, dwNewPosition: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundBuffer.VTable, self.vtable).SetCurrentPosition(@ptrCast(*const IDirectSoundBuffer, self), dwNewPosition);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundBuffer_SetFormat(self: *const T, pcfxFormat: *WAVEFORMATEX) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundBuffer.VTable, self.vtable).SetFormat(@ptrCast(*const IDirectSoundBuffer, self), pcfxFormat);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundBuffer_SetVolume(self: *const T, lVolume: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundBuffer.VTable, self.vtable).SetVolume(@ptrCast(*const IDirectSoundBuffer, self), lVolume);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundBuffer_SetPan(self: *const T, lPan: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundBuffer.VTable, self.vtable).SetPan(@ptrCast(*const IDirectSoundBuffer, self), lPan);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundBuffer_SetFrequency(self: *const T, dwFrequency: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundBuffer.VTable, self.vtable).SetFrequency(@ptrCast(*const IDirectSoundBuffer, self), dwFrequency);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundBuffer_Stop(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundBuffer.VTable, self.vtable).Stop(@ptrCast(*const IDirectSoundBuffer, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundBuffer_Unlock(self: *const T, pvAudioPtr1: *c_void, dwAudioBytes1: u32, pvAudioPtr2: ?*c_void, dwAudioBytes2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundBuffer.VTable, self.vtable).Unlock(@ptrCast(*const IDirectSoundBuffer, self), pvAudioPtr1, dwAudioBytes1, pvAudioPtr2, dwAudioBytes2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundBuffer_Restore(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundBuffer.VTable, self.vtable).Restore(@ptrCast(*const IDirectSoundBuffer, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectSoundBuffer8_Value = @import("../zig.zig").Guid.initString("6825a449-7524-4d82-920f-50e36ab3ab1e");
pub const IID_IDirectSoundBuffer8 = &IID_IDirectSoundBuffer8_Value;
pub const IDirectSoundBuffer8 = extern struct {
    pub const VTable = extern struct {
        base: IDirectSoundBuffer.VTable,
        SetFX: fn(
            self: *const IDirectSoundBuffer8,
            dwEffectsCount: u32,
            pDSFXDesc: ?[*]DSEFFECTDESC,
            pdwResultCodes: ?[*]u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AcquireResources: fn(
            self: *const IDirectSoundBuffer8,
            dwFlags: u32,
            dwEffectsCount: u32,
            pdwResultCodes: [*]u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObjectInPath: fn(
            self: *const IDirectSoundBuffer8,
            rguidObject: *const Guid,
            dwIndex: u32,
            rguidInterface: *const Guid,
            ppObject: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDirectSoundBuffer.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundBuffer8_SetFX(self: *const T, dwEffectsCount: u32, pDSFXDesc: ?[*]DSEFFECTDESC, pdwResultCodes: ?[*]u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundBuffer8.VTable, self.vtable).SetFX(@ptrCast(*const IDirectSoundBuffer8, self), dwEffectsCount, pDSFXDesc, pdwResultCodes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundBuffer8_AcquireResources(self: *const T, dwFlags: u32, dwEffectsCount: u32, pdwResultCodes: [*]u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundBuffer8.VTable, self.vtable).AcquireResources(@ptrCast(*const IDirectSoundBuffer8, self), dwFlags, dwEffectsCount, pdwResultCodes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundBuffer8_GetObjectInPath(self: *const T, rguidObject: *const Guid, dwIndex: u32, rguidInterface: *const Guid, ppObject: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundBuffer8.VTable, self.vtable).GetObjectInPath(@ptrCast(*const IDirectSoundBuffer8, self), rguidObject, dwIndex, rguidInterface, ppObject);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectSound3DListener_Value = @import("../zig.zig").Guid.initString("279afa84-4981-11ce-a521-0020af0be560");
pub const IID_IDirectSound3DListener = &IID_IDirectSound3DListener_Value;
pub const IDirectSound3DListener = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetAllParameters: fn(
            self: *const IDirectSound3DListener,
            pListener: *DS3DLISTENER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDistanceFactor: fn(
            self: *const IDirectSound3DListener,
            pflDistanceFactor: *f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDopplerFactor: fn(
            self: *const IDirectSound3DListener,
            pflDopplerFactor: *f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOrientation: fn(
            self: *const IDirectSound3DListener,
            pvOrientFront: *D3DVECTOR,
            pvOrientTop: *D3DVECTOR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPosition: fn(
            self: *const IDirectSound3DListener,
            pvPosition: *D3DVECTOR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRolloffFactor: fn(
            self: *const IDirectSound3DListener,
            pflRolloffFactor: *f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVelocity: fn(
            self: *const IDirectSound3DListener,
            pvVelocity: *D3DVECTOR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAllParameters: fn(
            self: *const IDirectSound3DListener,
            pcListener: *DS3DLISTENER,
            dwApply: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDistanceFactor: fn(
            self: *const IDirectSound3DListener,
            flDistanceFactor: f32,
            dwApply: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDopplerFactor: fn(
            self: *const IDirectSound3DListener,
            flDopplerFactor: f32,
            dwApply: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOrientation: fn(
            self: *const IDirectSound3DListener,
            xFront: f32,
            yFront: f32,
            zFront: f32,
            xTop: f32,
            yTop: f32,
            zTop: f32,
            dwApply: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPosition: fn(
            self: *const IDirectSound3DListener,
            x: f32,
            y: f32,
            z: f32,
            dwApply: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRolloffFactor: fn(
            self: *const IDirectSound3DListener,
            flRolloffFactor: f32,
            dwApply: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetVelocity: fn(
            self: *const IDirectSound3DListener,
            x: f32,
            y: f32,
            z: f32,
            dwApply: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CommitDeferredSettings: fn(
            self: *const IDirectSound3DListener,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSound3DListener_GetAllParameters(self: *const T, pListener: *DS3DLISTENER) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSound3DListener.VTable, self.vtable).GetAllParameters(@ptrCast(*const IDirectSound3DListener, self), pListener);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSound3DListener_GetDistanceFactor(self: *const T, pflDistanceFactor: *f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSound3DListener.VTable, self.vtable).GetDistanceFactor(@ptrCast(*const IDirectSound3DListener, self), pflDistanceFactor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSound3DListener_GetDopplerFactor(self: *const T, pflDopplerFactor: *f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSound3DListener.VTable, self.vtable).GetDopplerFactor(@ptrCast(*const IDirectSound3DListener, self), pflDopplerFactor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSound3DListener_GetOrientation(self: *const T, pvOrientFront: *D3DVECTOR, pvOrientTop: *D3DVECTOR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSound3DListener.VTable, self.vtable).GetOrientation(@ptrCast(*const IDirectSound3DListener, self), pvOrientFront, pvOrientTop);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSound3DListener_GetPosition(self: *const T, pvPosition: *D3DVECTOR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSound3DListener.VTable, self.vtable).GetPosition(@ptrCast(*const IDirectSound3DListener, self), pvPosition);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSound3DListener_GetRolloffFactor(self: *const T, pflRolloffFactor: *f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSound3DListener.VTable, self.vtable).GetRolloffFactor(@ptrCast(*const IDirectSound3DListener, self), pflRolloffFactor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSound3DListener_GetVelocity(self: *const T, pvVelocity: *D3DVECTOR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSound3DListener.VTable, self.vtable).GetVelocity(@ptrCast(*const IDirectSound3DListener, self), pvVelocity);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSound3DListener_SetAllParameters(self: *const T, pcListener: *DS3DLISTENER, dwApply: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSound3DListener.VTable, self.vtable).SetAllParameters(@ptrCast(*const IDirectSound3DListener, self), pcListener, dwApply);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSound3DListener_SetDistanceFactor(self: *const T, flDistanceFactor: f32, dwApply: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSound3DListener.VTable, self.vtable).SetDistanceFactor(@ptrCast(*const IDirectSound3DListener, self), flDistanceFactor, dwApply);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSound3DListener_SetDopplerFactor(self: *const T, flDopplerFactor: f32, dwApply: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSound3DListener.VTable, self.vtable).SetDopplerFactor(@ptrCast(*const IDirectSound3DListener, self), flDopplerFactor, dwApply);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSound3DListener_SetOrientation(self: *const T, xFront: f32, yFront: f32, zFront: f32, xTop: f32, yTop: f32, zTop: f32, dwApply: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSound3DListener.VTable, self.vtable).SetOrientation(@ptrCast(*const IDirectSound3DListener, self), xFront, yFront, zFront, xTop, yTop, zTop, dwApply);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSound3DListener_SetPosition(self: *const T, x: f32, y: f32, z: f32, dwApply: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSound3DListener.VTable, self.vtable).SetPosition(@ptrCast(*const IDirectSound3DListener, self), x, y, z, dwApply);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSound3DListener_SetRolloffFactor(self: *const T, flRolloffFactor: f32, dwApply: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSound3DListener.VTable, self.vtable).SetRolloffFactor(@ptrCast(*const IDirectSound3DListener, self), flRolloffFactor, dwApply);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSound3DListener_SetVelocity(self: *const T, x: f32, y: f32, z: f32, dwApply: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSound3DListener.VTable, self.vtable).SetVelocity(@ptrCast(*const IDirectSound3DListener, self), x, y, z, dwApply);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSound3DListener_CommitDeferredSettings(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSound3DListener.VTable, self.vtable).CommitDeferredSettings(@ptrCast(*const IDirectSound3DListener, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectSound3DBuffer_Value = @import("../zig.zig").Guid.initString("279afa86-4981-11ce-a521-0020af0be560");
pub const IID_IDirectSound3DBuffer = &IID_IDirectSound3DBuffer_Value;
pub const IDirectSound3DBuffer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetAllParameters: fn(
            self: *const IDirectSound3DBuffer,
            pDs3dBuffer: *DS3DBUFFER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConeAngles: fn(
            self: *const IDirectSound3DBuffer,
            pdwInsideConeAngle: *u32,
            pdwOutsideConeAngle: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConeOrientation: fn(
            self: *const IDirectSound3DBuffer,
            pvOrientation: *D3DVECTOR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConeOutsideVolume: fn(
            self: *const IDirectSound3DBuffer,
            plConeOutsideVolume: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaxDistance: fn(
            self: *const IDirectSound3DBuffer,
            pflMaxDistance: *f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMinDistance: fn(
            self: *const IDirectSound3DBuffer,
            pflMinDistance: *f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMode: fn(
            self: *const IDirectSound3DBuffer,
            pdwMode: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPosition: fn(
            self: *const IDirectSound3DBuffer,
            pvPosition: *D3DVECTOR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVelocity: fn(
            self: *const IDirectSound3DBuffer,
            pvVelocity: *D3DVECTOR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAllParameters: fn(
            self: *const IDirectSound3DBuffer,
            pcDs3dBuffer: *DS3DBUFFER,
            dwApply: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetConeAngles: fn(
            self: *const IDirectSound3DBuffer,
            dwInsideConeAngle: u32,
            dwOutsideConeAngle: u32,
            dwApply: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetConeOrientation: fn(
            self: *const IDirectSound3DBuffer,
            x: f32,
            y: f32,
            z: f32,
            dwApply: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetConeOutsideVolume: fn(
            self: *const IDirectSound3DBuffer,
            lConeOutsideVolume: i32,
            dwApply: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMaxDistance: fn(
            self: *const IDirectSound3DBuffer,
            flMaxDistance: f32,
            dwApply: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMinDistance: fn(
            self: *const IDirectSound3DBuffer,
            flMinDistance: f32,
            dwApply: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMode: fn(
            self: *const IDirectSound3DBuffer,
            dwMode: u32,
            dwApply: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPosition: fn(
            self: *const IDirectSound3DBuffer,
            x: f32,
            y: f32,
            z: f32,
            dwApply: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetVelocity: fn(
            self: *const IDirectSound3DBuffer,
            x: f32,
            y: f32,
            z: f32,
            dwApply: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSound3DBuffer_GetAllParameters(self: *const T, pDs3dBuffer: *DS3DBUFFER) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSound3DBuffer.VTable, self.vtable).GetAllParameters(@ptrCast(*const IDirectSound3DBuffer, self), pDs3dBuffer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSound3DBuffer_GetConeAngles(self: *const T, pdwInsideConeAngle: *u32, pdwOutsideConeAngle: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSound3DBuffer.VTable, self.vtable).GetConeAngles(@ptrCast(*const IDirectSound3DBuffer, self), pdwInsideConeAngle, pdwOutsideConeAngle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSound3DBuffer_GetConeOrientation(self: *const T, pvOrientation: *D3DVECTOR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSound3DBuffer.VTable, self.vtable).GetConeOrientation(@ptrCast(*const IDirectSound3DBuffer, self), pvOrientation);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSound3DBuffer_GetConeOutsideVolume(self: *const T, plConeOutsideVolume: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSound3DBuffer.VTable, self.vtable).GetConeOutsideVolume(@ptrCast(*const IDirectSound3DBuffer, self), plConeOutsideVolume);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSound3DBuffer_GetMaxDistance(self: *const T, pflMaxDistance: *f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSound3DBuffer.VTable, self.vtable).GetMaxDistance(@ptrCast(*const IDirectSound3DBuffer, self), pflMaxDistance);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSound3DBuffer_GetMinDistance(self: *const T, pflMinDistance: *f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSound3DBuffer.VTable, self.vtable).GetMinDistance(@ptrCast(*const IDirectSound3DBuffer, self), pflMinDistance);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSound3DBuffer_GetMode(self: *const T, pdwMode: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSound3DBuffer.VTable, self.vtable).GetMode(@ptrCast(*const IDirectSound3DBuffer, self), pdwMode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSound3DBuffer_GetPosition(self: *const T, pvPosition: *D3DVECTOR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSound3DBuffer.VTable, self.vtable).GetPosition(@ptrCast(*const IDirectSound3DBuffer, self), pvPosition);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSound3DBuffer_GetVelocity(self: *const T, pvVelocity: *D3DVECTOR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSound3DBuffer.VTable, self.vtable).GetVelocity(@ptrCast(*const IDirectSound3DBuffer, self), pvVelocity);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSound3DBuffer_SetAllParameters(self: *const T, pcDs3dBuffer: *DS3DBUFFER, dwApply: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSound3DBuffer.VTable, self.vtable).SetAllParameters(@ptrCast(*const IDirectSound3DBuffer, self), pcDs3dBuffer, dwApply);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSound3DBuffer_SetConeAngles(self: *const T, dwInsideConeAngle: u32, dwOutsideConeAngle: u32, dwApply: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSound3DBuffer.VTable, self.vtable).SetConeAngles(@ptrCast(*const IDirectSound3DBuffer, self), dwInsideConeAngle, dwOutsideConeAngle, dwApply);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSound3DBuffer_SetConeOrientation(self: *const T, x: f32, y: f32, z: f32, dwApply: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSound3DBuffer.VTable, self.vtable).SetConeOrientation(@ptrCast(*const IDirectSound3DBuffer, self), x, y, z, dwApply);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSound3DBuffer_SetConeOutsideVolume(self: *const T, lConeOutsideVolume: i32, dwApply: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSound3DBuffer.VTable, self.vtable).SetConeOutsideVolume(@ptrCast(*const IDirectSound3DBuffer, self), lConeOutsideVolume, dwApply);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSound3DBuffer_SetMaxDistance(self: *const T, flMaxDistance: f32, dwApply: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSound3DBuffer.VTable, self.vtable).SetMaxDistance(@ptrCast(*const IDirectSound3DBuffer, self), flMaxDistance, dwApply);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSound3DBuffer_SetMinDistance(self: *const T, flMinDistance: f32, dwApply: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSound3DBuffer.VTable, self.vtable).SetMinDistance(@ptrCast(*const IDirectSound3DBuffer, self), flMinDistance, dwApply);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSound3DBuffer_SetMode(self: *const T, dwMode: u32, dwApply: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSound3DBuffer.VTable, self.vtable).SetMode(@ptrCast(*const IDirectSound3DBuffer, self), dwMode, dwApply);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSound3DBuffer_SetPosition(self: *const T, x: f32, y: f32, z: f32, dwApply: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSound3DBuffer.VTable, self.vtable).SetPosition(@ptrCast(*const IDirectSound3DBuffer, self), x, y, z, dwApply);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSound3DBuffer_SetVelocity(self: *const T, x: f32, y: f32, z: f32, dwApply: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSound3DBuffer.VTable, self.vtable).SetVelocity(@ptrCast(*const IDirectSound3DBuffer, self), x, y, z, dwApply);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectSoundCapture_Value = @import("../zig.zig").Guid.initString("b0210781-89cd-11d0-af08-00a0c925cd16");
pub const IID_IDirectSoundCapture = &IID_IDirectSoundCapture_Value;
pub const IDirectSoundCapture = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateCaptureBuffer: fn(
            self: *const IDirectSoundCapture,
            pcDSCBufferDesc: *DSCBUFFERDESC,
            ppDSCBuffer: **IDirectSoundCaptureBuffer,
            pUnkOuter: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCaps: fn(
            self: *const IDirectSoundCapture,
            pDSCCaps: *DSCCAPS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: fn(
            self: *const IDirectSoundCapture,
            pcGuidDevice: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundCapture_CreateCaptureBuffer(self: *const T, pcDSCBufferDesc: *DSCBUFFERDESC, ppDSCBuffer: **IDirectSoundCaptureBuffer, pUnkOuter: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundCapture.VTable, self.vtable).CreateCaptureBuffer(@ptrCast(*const IDirectSoundCapture, self), pcDSCBufferDesc, ppDSCBuffer, pUnkOuter);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundCapture_GetCaps(self: *const T, pDSCCaps: *DSCCAPS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundCapture.VTable, self.vtable).GetCaps(@ptrCast(*const IDirectSoundCapture, self), pDSCCaps);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundCapture_Initialize(self: *const T, pcGuidDevice: ?*Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundCapture.VTable, self.vtable).Initialize(@ptrCast(*const IDirectSoundCapture, self), pcGuidDevice);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectSoundCaptureBuffer_Value = @import("../zig.zig").Guid.initString("b0210782-89cd-11d0-af08-00a0c925cd16");
pub const IID_IDirectSoundCaptureBuffer = &IID_IDirectSoundCaptureBuffer_Value;
pub const IDirectSoundCaptureBuffer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCaps: fn(
            self: *const IDirectSoundCaptureBuffer,
            pDSCBCaps: *DSCBCAPS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentPosition: fn(
            self: *const IDirectSoundCaptureBuffer,
            pdwCapturePosition: ?*u32,
            pdwReadPosition: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFormat: fn(
            self: *const IDirectSoundCaptureBuffer,
            // TODO: what to do with BytesParamIndex 1?
            pwfxFormat: ?*WAVEFORMATEX,
            dwSizeAllocated: u32,
            pdwSizeWritten: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStatus: fn(
            self: *const IDirectSoundCaptureBuffer,
            pdwStatus: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: fn(
            self: *const IDirectSoundCaptureBuffer,
            pDirectSoundCapture: *IDirectSoundCapture,
            pcDSCBufferDesc: *DSCBUFFERDESC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Lock: fn(
            self: *const IDirectSoundCaptureBuffer,
            dwOffset: u32,
            dwBytes: u32,
            ppvAudioPtr1: **c_void,
            pdwAudioBytes1: *u32,
            ppvAudioPtr2: ?*?*c_void,
            pdwAudioBytes2: ?*u32,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Start: fn(
            self: *const IDirectSoundCaptureBuffer,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Stop: fn(
            self: *const IDirectSoundCaptureBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unlock: fn(
            self: *const IDirectSoundCaptureBuffer,
            // TODO: what to do with BytesParamIndex 1?
            pvAudioPtr1: *c_void,
            dwAudioBytes1: u32,
            // TODO: what to do with BytesParamIndex 3?
            pvAudioPtr2: ?*c_void,
            dwAudioBytes2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundCaptureBuffer_GetCaps(self: *const T, pDSCBCaps: *DSCBCAPS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundCaptureBuffer.VTable, self.vtable).GetCaps(@ptrCast(*const IDirectSoundCaptureBuffer, self), pDSCBCaps);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundCaptureBuffer_GetCurrentPosition(self: *const T, pdwCapturePosition: ?*u32, pdwReadPosition: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundCaptureBuffer.VTable, self.vtable).GetCurrentPosition(@ptrCast(*const IDirectSoundCaptureBuffer, self), pdwCapturePosition, pdwReadPosition);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundCaptureBuffer_GetFormat(self: *const T, pwfxFormat: ?*WAVEFORMATEX, dwSizeAllocated: u32, pdwSizeWritten: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundCaptureBuffer.VTable, self.vtable).GetFormat(@ptrCast(*const IDirectSoundCaptureBuffer, self), pwfxFormat, dwSizeAllocated, pdwSizeWritten);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundCaptureBuffer_GetStatus(self: *const T, pdwStatus: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundCaptureBuffer.VTable, self.vtable).GetStatus(@ptrCast(*const IDirectSoundCaptureBuffer, self), pdwStatus);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundCaptureBuffer_Initialize(self: *const T, pDirectSoundCapture: *IDirectSoundCapture, pcDSCBufferDesc: *DSCBUFFERDESC) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundCaptureBuffer.VTable, self.vtable).Initialize(@ptrCast(*const IDirectSoundCaptureBuffer, self), pDirectSoundCapture, pcDSCBufferDesc);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundCaptureBuffer_Lock(self: *const T, dwOffset: u32, dwBytes: u32, ppvAudioPtr1: **c_void, pdwAudioBytes1: *u32, ppvAudioPtr2: ?*?*c_void, pdwAudioBytes2: ?*u32, dwFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundCaptureBuffer.VTable, self.vtable).Lock(@ptrCast(*const IDirectSoundCaptureBuffer, self), dwOffset, dwBytes, ppvAudioPtr1, pdwAudioBytes1, ppvAudioPtr2, pdwAudioBytes2, dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundCaptureBuffer_Start(self: *const T, dwFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundCaptureBuffer.VTable, self.vtable).Start(@ptrCast(*const IDirectSoundCaptureBuffer, self), dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundCaptureBuffer_Stop(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundCaptureBuffer.VTable, self.vtable).Stop(@ptrCast(*const IDirectSoundCaptureBuffer, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundCaptureBuffer_Unlock(self: *const T, pvAudioPtr1: *c_void, dwAudioBytes1: u32, pvAudioPtr2: ?*c_void, dwAudioBytes2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundCaptureBuffer.VTable, self.vtable).Unlock(@ptrCast(*const IDirectSoundCaptureBuffer, self), pvAudioPtr1, dwAudioBytes1, pvAudioPtr2, dwAudioBytes2);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectSoundCaptureBuffer8_Value = @import("../zig.zig").Guid.initString("00990df4-0dbb-4872-833e-6d303e80aeb6");
pub const IID_IDirectSoundCaptureBuffer8 = &IID_IDirectSoundCaptureBuffer8_Value;
pub const IDirectSoundCaptureBuffer8 = extern struct {
    pub const VTable = extern struct {
        base: IDirectSoundCaptureBuffer.VTable,
        GetObjectInPath: fn(
            self: *const IDirectSoundCaptureBuffer8,
            rguidObject: *const Guid,
            dwIndex: u32,
            rguidInterface: *const Guid,
            ppObject: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFXStatus: fn(
            self: *const IDirectSoundCaptureBuffer8,
            dwEffectsCount: u32,
            pdwFXStatus: [*]u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDirectSoundCaptureBuffer.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundCaptureBuffer8_GetObjectInPath(self: *const T, rguidObject: *const Guid, dwIndex: u32, rguidInterface: *const Guid, ppObject: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundCaptureBuffer8.VTable, self.vtable).GetObjectInPath(@ptrCast(*const IDirectSoundCaptureBuffer8, self), rguidObject, dwIndex, rguidInterface, ppObject);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundCaptureBuffer8_GetFXStatus(self: *const T, dwEffectsCount: u32, pdwFXStatus: [*]u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundCaptureBuffer8.VTable, self.vtable).GetFXStatus(@ptrCast(*const IDirectSoundCaptureBuffer8, self), dwEffectsCount, pdwFXStatus);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectSoundNotify_Value = @import("../zig.zig").Guid.initString("b0210783-89cd-11d0-af08-00a0c925cd16");
pub const IID_IDirectSoundNotify = &IID_IDirectSoundNotify_Value;
pub const IDirectSoundNotify = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetNotificationPositions: fn(
            self: *const IDirectSoundNotify,
            dwPositionNotifies: u32,
            pcPositionNotifies: [*]DSBPOSITIONNOTIFY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundNotify_SetNotificationPositions(self: *const T, dwPositionNotifies: u32, pcPositionNotifies: [*]DSBPOSITIONNOTIFY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundNotify.VTable, self.vtable).SetNotificationPositions(@ptrCast(*const IDirectSoundNotify, self), dwPositionNotifies, pcPositionNotifies);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const DSFXGargle = extern struct {
    dwRateHz: u32,
    dwWaveShape: u32,
};

const IID_IDirectSoundFXGargle_Value = @import("../zig.zig").Guid.initString("d616f352-d622-11ce-aac5-0020af0b99a3");
pub const IID_IDirectSoundFXGargle = &IID_IDirectSoundFXGargle_Value;
pub const IDirectSoundFXGargle = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAllParameters: fn(
            self: *const IDirectSoundFXGargle,
            pcDsFxGargle: *DSFXGargle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllParameters: fn(
            self: *const IDirectSoundFXGargle,
            pDsFxGargle: *DSFXGargle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundFXGargle_SetAllParameters(self: *const T, pcDsFxGargle: *DSFXGargle) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundFXGargle.VTable, self.vtable).SetAllParameters(@ptrCast(*const IDirectSoundFXGargle, self), pcDsFxGargle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundFXGargle_GetAllParameters(self: *const T, pDsFxGargle: *DSFXGargle) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundFXGargle.VTable, self.vtable).GetAllParameters(@ptrCast(*const IDirectSoundFXGargle, self), pDsFxGargle);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const DSFXChorus = extern struct {
    fWetDryMix: f32,
    fDepth: f32,
    fFeedback: f32,
    fFrequency: f32,
    lWaveform: i32,
    fDelay: f32,
    lPhase: i32,
};

const IID_IDirectSoundFXChorus_Value = @import("../zig.zig").Guid.initString("880842e3-145f-43e6-a934-a71806e50547");
pub const IID_IDirectSoundFXChorus = &IID_IDirectSoundFXChorus_Value;
pub const IDirectSoundFXChorus = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAllParameters: fn(
            self: *const IDirectSoundFXChorus,
            pcDsFxChorus: *DSFXChorus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllParameters: fn(
            self: *const IDirectSoundFXChorus,
            pDsFxChorus: *DSFXChorus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundFXChorus_SetAllParameters(self: *const T, pcDsFxChorus: *DSFXChorus) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundFXChorus.VTable, self.vtable).SetAllParameters(@ptrCast(*const IDirectSoundFXChorus, self), pcDsFxChorus);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundFXChorus_GetAllParameters(self: *const T, pDsFxChorus: *DSFXChorus) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundFXChorus.VTable, self.vtable).GetAllParameters(@ptrCast(*const IDirectSoundFXChorus, self), pDsFxChorus);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const DSFXFlanger = extern struct {
    fWetDryMix: f32,
    fDepth: f32,
    fFeedback: f32,
    fFrequency: f32,
    lWaveform: i32,
    fDelay: f32,
    lPhase: i32,
};

const IID_IDirectSoundFXFlanger_Value = @import("../zig.zig").Guid.initString("903e9878-2c92-4072-9b2c-ea68f5396783");
pub const IID_IDirectSoundFXFlanger = &IID_IDirectSoundFXFlanger_Value;
pub const IDirectSoundFXFlanger = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAllParameters: fn(
            self: *const IDirectSoundFXFlanger,
            pcDsFxFlanger: *DSFXFlanger,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllParameters: fn(
            self: *const IDirectSoundFXFlanger,
            pDsFxFlanger: *DSFXFlanger,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundFXFlanger_SetAllParameters(self: *const T, pcDsFxFlanger: *DSFXFlanger) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundFXFlanger.VTable, self.vtable).SetAllParameters(@ptrCast(*const IDirectSoundFXFlanger, self), pcDsFxFlanger);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundFXFlanger_GetAllParameters(self: *const T, pDsFxFlanger: *DSFXFlanger) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundFXFlanger.VTable, self.vtable).GetAllParameters(@ptrCast(*const IDirectSoundFXFlanger, self), pDsFxFlanger);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const DSFXEcho = extern struct {
    fWetDryMix: f32,
    fFeedback: f32,
    fLeftDelay: f32,
    fRightDelay: f32,
    lPanDelay: i32,
};

const IID_IDirectSoundFXEcho_Value = @import("../zig.zig").Guid.initString("8bd28edf-50db-4e92-a2bd-445488d1ed42");
pub const IID_IDirectSoundFXEcho = &IID_IDirectSoundFXEcho_Value;
pub const IDirectSoundFXEcho = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAllParameters: fn(
            self: *const IDirectSoundFXEcho,
            pcDsFxEcho: *DSFXEcho,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllParameters: fn(
            self: *const IDirectSoundFXEcho,
            pDsFxEcho: *DSFXEcho,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundFXEcho_SetAllParameters(self: *const T, pcDsFxEcho: *DSFXEcho) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundFXEcho.VTable, self.vtable).SetAllParameters(@ptrCast(*const IDirectSoundFXEcho, self), pcDsFxEcho);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundFXEcho_GetAllParameters(self: *const T, pDsFxEcho: *DSFXEcho) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundFXEcho.VTable, self.vtable).GetAllParameters(@ptrCast(*const IDirectSoundFXEcho, self), pDsFxEcho);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const DSFXDistortion = extern struct {
    fGain: f32,
    fEdge: f32,
    fPostEQCenterFrequency: f32,
    fPostEQBandwidth: f32,
    fPreLowpassCutoff: f32,
};

const IID_IDirectSoundFXDistortion_Value = @import("../zig.zig").Guid.initString("8ecf4326-455f-4d8b-bda9-8d5d3e9e3e0b");
pub const IID_IDirectSoundFXDistortion = &IID_IDirectSoundFXDistortion_Value;
pub const IDirectSoundFXDistortion = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAllParameters: fn(
            self: *const IDirectSoundFXDistortion,
            pcDsFxDistortion: *DSFXDistortion,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllParameters: fn(
            self: *const IDirectSoundFXDistortion,
            pDsFxDistortion: *DSFXDistortion,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundFXDistortion_SetAllParameters(self: *const T, pcDsFxDistortion: *DSFXDistortion) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundFXDistortion.VTable, self.vtable).SetAllParameters(@ptrCast(*const IDirectSoundFXDistortion, self), pcDsFxDistortion);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundFXDistortion_GetAllParameters(self: *const T, pDsFxDistortion: *DSFXDistortion) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundFXDistortion.VTable, self.vtable).GetAllParameters(@ptrCast(*const IDirectSoundFXDistortion, self), pDsFxDistortion);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const DSFXCompressor = extern struct {
    fGain: f32,
    fAttack: f32,
    fRelease: f32,
    fThreshold: f32,
    fRatio: f32,
    fPredelay: f32,
};

const IID_IDirectSoundFXCompressor_Value = @import("../zig.zig").Guid.initString("4bbd1154-62f6-4e2c-a15c-d3b6c417f7a0");
pub const IID_IDirectSoundFXCompressor = &IID_IDirectSoundFXCompressor_Value;
pub const IDirectSoundFXCompressor = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAllParameters: fn(
            self: *const IDirectSoundFXCompressor,
            pcDsFxCompressor: *DSFXCompressor,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllParameters: fn(
            self: *const IDirectSoundFXCompressor,
            pDsFxCompressor: *DSFXCompressor,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundFXCompressor_SetAllParameters(self: *const T, pcDsFxCompressor: *DSFXCompressor) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundFXCompressor.VTable, self.vtable).SetAllParameters(@ptrCast(*const IDirectSoundFXCompressor, self), pcDsFxCompressor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundFXCompressor_GetAllParameters(self: *const T, pDsFxCompressor: *DSFXCompressor) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundFXCompressor.VTable, self.vtable).GetAllParameters(@ptrCast(*const IDirectSoundFXCompressor, self), pDsFxCompressor);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const DSFXParamEq = extern struct {
    fCenter: f32,
    fBandwidth: f32,
    fGain: f32,
};

const IID_IDirectSoundFXParamEq_Value = @import("../zig.zig").Guid.initString("c03ca9fe-fe90-4204-8078-82334cd177da");
pub const IID_IDirectSoundFXParamEq = &IID_IDirectSoundFXParamEq_Value;
pub const IDirectSoundFXParamEq = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAllParameters: fn(
            self: *const IDirectSoundFXParamEq,
            pcDsFxParamEq: *DSFXParamEq,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllParameters: fn(
            self: *const IDirectSoundFXParamEq,
            pDsFxParamEq: *DSFXParamEq,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundFXParamEq_SetAllParameters(self: *const T, pcDsFxParamEq: *DSFXParamEq) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundFXParamEq.VTable, self.vtable).SetAllParameters(@ptrCast(*const IDirectSoundFXParamEq, self), pcDsFxParamEq);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundFXParamEq_GetAllParameters(self: *const T, pDsFxParamEq: *DSFXParamEq) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundFXParamEq.VTable, self.vtable).GetAllParameters(@ptrCast(*const IDirectSoundFXParamEq, self), pDsFxParamEq);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const DSFXI3DL2Reverb = extern struct {
    lRoom: i32,
    lRoomHF: i32,
    flRoomRolloffFactor: f32,
    flDecayTime: f32,
    flDecayHFRatio: f32,
    lReflections: i32,
    flReflectionsDelay: f32,
    lReverb: i32,
    flReverbDelay: f32,
    flDiffusion: f32,
    flDensity: f32,
    flHFReference: f32,
};

const IID_IDirectSoundFXI3DL2Reverb_Value = @import("../zig.zig").Guid.initString("4b166a6a-0d66-43f3-80e3-ee6280dee1a4");
pub const IID_IDirectSoundFXI3DL2Reverb = &IID_IDirectSoundFXI3DL2Reverb_Value;
pub const IDirectSoundFXI3DL2Reverb = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAllParameters: fn(
            self: *const IDirectSoundFXI3DL2Reverb,
            pcDsFxI3DL2Reverb: *DSFXI3DL2Reverb,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllParameters: fn(
            self: *const IDirectSoundFXI3DL2Reverb,
            pDsFxI3DL2Reverb: *DSFXI3DL2Reverb,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPreset: fn(
            self: *const IDirectSoundFXI3DL2Reverb,
            dwPreset: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPreset: fn(
            self: *const IDirectSoundFXI3DL2Reverb,
            pdwPreset: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetQuality: fn(
            self: *const IDirectSoundFXI3DL2Reverb,
            lQuality: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetQuality: fn(
            self: *const IDirectSoundFXI3DL2Reverb,
            plQuality: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundFXI3DL2Reverb_SetAllParameters(self: *const T, pcDsFxI3DL2Reverb: *DSFXI3DL2Reverb) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundFXI3DL2Reverb.VTable, self.vtable).SetAllParameters(@ptrCast(*const IDirectSoundFXI3DL2Reverb, self), pcDsFxI3DL2Reverb);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundFXI3DL2Reverb_GetAllParameters(self: *const T, pDsFxI3DL2Reverb: *DSFXI3DL2Reverb) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundFXI3DL2Reverb.VTable, self.vtable).GetAllParameters(@ptrCast(*const IDirectSoundFXI3DL2Reverb, self), pDsFxI3DL2Reverb);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundFXI3DL2Reverb_SetPreset(self: *const T, dwPreset: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundFXI3DL2Reverb.VTable, self.vtable).SetPreset(@ptrCast(*const IDirectSoundFXI3DL2Reverb, self), dwPreset);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundFXI3DL2Reverb_GetPreset(self: *const T, pdwPreset: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundFXI3DL2Reverb.VTable, self.vtable).GetPreset(@ptrCast(*const IDirectSoundFXI3DL2Reverb, self), pdwPreset);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundFXI3DL2Reverb_SetQuality(self: *const T, lQuality: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundFXI3DL2Reverb.VTable, self.vtable).SetQuality(@ptrCast(*const IDirectSoundFXI3DL2Reverb, self), lQuality);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundFXI3DL2Reverb_GetQuality(self: *const T, plQuality: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundFXI3DL2Reverb.VTable, self.vtable).GetQuality(@ptrCast(*const IDirectSoundFXI3DL2Reverb, self), plQuality);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const DSFXWavesReverb = extern struct {
    fInGain: f32,
    fReverbMix: f32,
    fReverbTime: f32,
    fHighFreqRTRatio: f32,
};

const IID_IDirectSoundFXWavesReverb_Value = @import("../zig.zig").Guid.initString("46858c3a-0dc6-45e3-b760-d4eef16cb325");
pub const IID_IDirectSoundFXWavesReverb = &IID_IDirectSoundFXWavesReverb_Value;
pub const IDirectSoundFXWavesReverb = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAllParameters: fn(
            self: *const IDirectSoundFXWavesReverb,
            pcDsFxWavesReverb: *DSFXWavesReverb,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllParameters: fn(
            self: *const IDirectSoundFXWavesReverb,
            pDsFxWavesReverb: *DSFXWavesReverb,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundFXWavesReverb_SetAllParameters(self: *const T, pcDsFxWavesReverb: *DSFXWavesReverb) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundFXWavesReverb.VTable, self.vtable).SetAllParameters(@ptrCast(*const IDirectSoundFXWavesReverb, self), pcDsFxWavesReverb);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundFXWavesReverb_GetAllParameters(self: *const T, pDsFxWavesReverb: *DSFXWavesReverb) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundFXWavesReverb.VTable, self.vtable).GetAllParameters(@ptrCast(*const IDirectSoundFXWavesReverb, self), pDsFxWavesReverb);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const DSCFXAec = extern struct {
    fEnable: BOOL,
    fNoiseFill: BOOL,
    dwMode: u32,
};

const IID_IDirectSoundCaptureFXAec_Value = @import("../zig.zig").Guid.initString("ad74143d-903d-4ab7-8066-28d363036d65");
pub const IID_IDirectSoundCaptureFXAec = &IID_IDirectSoundCaptureFXAec_Value;
pub const IDirectSoundCaptureFXAec = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAllParameters: fn(
            self: *const IDirectSoundCaptureFXAec,
            pDscFxAec: *DSCFXAec,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllParameters: fn(
            self: *const IDirectSoundCaptureFXAec,
            pDscFxAec: *DSCFXAec,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStatus: fn(
            self: *const IDirectSoundCaptureFXAec,
            pdwStatus: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IDirectSoundCaptureFXAec,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundCaptureFXAec_SetAllParameters(self: *const T, pDscFxAec: *DSCFXAec) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundCaptureFXAec.VTable, self.vtable).SetAllParameters(@ptrCast(*const IDirectSoundCaptureFXAec, self), pDscFxAec);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundCaptureFXAec_GetAllParameters(self: *const T, pDscFxAec: *DSCFXAec) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundCaptureFXAec.VTable, self.vtable).GetAllParameters(@ptrCast(*const IDirectSoundCaptureFXAec, self), pDscFxAec);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundCaptureFXAec_GetStatus(self: *const T, pdwStatus: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundCaptureFXAec.VTable, self.vtable).GetStatus(@ptrCast(*const IDirectSoundCaptureFXAec, self), pdwStatus);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundCaptureFXAec_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundCaptureFXAec.VTable, self.vtable).Reset(@ptrCast(*const IDirectSoundCaptureFXAec, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const DSCFXNoiseSuppress = extern struct {
    fEnable: BOOL,
};

const IID_IDirectSoundCaptureFXNoiseSuppress_Value = @import("../zig.zig").Guid.initString("ed311e41-fbae-4175-9625-cd0854f693ca");
pub const IID_IDirectSoundCaptureFXNoiseSuppress = &IID_IDirectSoundCaptureFXNoiseSuppress_Value;
pub const IDirectSoundCaptureFXNoiseSuppress = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAllParameters: fn(
            self: *const IDirectSoundCaptureFXNoiseSuppress,
            pcDscFxNoiseSuppress: *DSCFXNoiseSuppress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllParameters: fn(
            self: *const IDirectSoundCaptureFXNoiseSuppress,
            pDscFxNoiseSuppress: *DSCFXNoiseSuppress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IDirectSoundCaptureFXNoiseSuppress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundCaptureFXNoiseSuppress_SetAllParameters(self: *const T, pcDscFxNoiseSuppress: *DSCFXNoiseSuppress) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundCaptureFXNoiseSuppress.VTable, self.vtable).SetAllParameters(@ptrCast(*const IDirectSoundCaptureFXNoiseSuppress, self), pcDscFxNoiseSuppress);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundCaptureFXNoiseSuppress_GetAllParameters(self: *const T, pDscFxNoiseSuppress: *DSCFXNoiseSuppress) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundCaptureFXNoiseSuppress.VTable, self.vtable).GetAllParameters(@ptrCast(*const IDirectSoundCaptureFXNoiseSuppress, self), pDscFxNoiseSuppress);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundCaptureFXNoiseSuppress_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundCaptureFXNoiseSuppress.VTable, self.vtable).Reset(@ptrCast(*const IDirectSoundCaptureFXNoiseSuppress, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectSoundFullDuplex_Value = @import("../zig.zig").Guid.initString("edcb4c7a-daab-4216-a42e-6c50596ddc1d");
pub const IID_IDirectSoundFullDuplex = &IID_IDirectSoundFullDuplex_Value;
pub const IDirectSoundFullDuplex = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const IDirectSoundFullDuplex,
            pCaptureGuid: *Guid,
            pRenderGuid: *Guid,
            lpDscBufferDesc: *DSCBUFFERDESC,
            lpDsBufferDesc: *DSBUFFERDESC,
            hWnd: HWND,
            dwLevel: u32,
            lplpDirectSoundCaptureBuffer8: **IDirectSoundCaptureBuffer8,
            lplpDirectSoundBuffer8: **IDirectSoundBuffer8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectSoundFullDuplex_Initialize(self: *const T, pCaptureGuid: *Guid, pRenderGuid: *Guid, lpDscBufferDesc: *DSCBUFFERDESC, lpDsBufferDesc: *DSBUFFERDESC, hWnd: HWND, dwLevel: u32, lplpDirectSoundCaptureBuffer8: **IDirectSoundCaptureBuffer8, lplpDirectSoundBuffer8: **IDirectSoundBuffer8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectSoundFullDuplex.VTable, self.vtable).Initialize(@ptrCast(*const IDirectSoundFullDuplex, self), pCaptureGuid, pRenderGuid, lpDscBufferDesc, lpDsBufferDesc, hWnd, dwLevel, lplpDirectSoundCaptureBuffer8, lplpDirectSoundBuffer8);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const DMUS_EVENTHEADER = extern struct {
    cbEvent: u32,
    dwChannelGroup: u32,
    rtDelta: i64,
    dwFlags: u32,
};

pub const DMUS_BUFFERDESC = extern struct {
    dwSize: u32,
    dwFlags: u32,
    guidBufferFormat: Guid,
    cbBuffer: u32,
};

pub const DMUS_PORTCAPS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    guidPort: Guid,
    dwClass: u32,
    dwType: u32,
    dwMemorySize: u32,
    dwMaxChannelGroups: u32,
    dwMaxVoices: u32,
    dwMaxAudioChannels: u32,
    dwEffectFlags: u32,
    wszDescription: [128]u16,
};

pub const _DMUS_PORTPARAMS = extern struct {
    dwSize: u32,
    dwValidParams: u32,
    dwVoices: u32,
    dwChannelGroups: u32,
    dwAudioChannels: u32,
    dwSampleRate: u32,
    dwEffectFlags: u32,
    fShare: BOOL,
};

pub const DMUS_PORTPARAMS8 = extern struct {
    dwSize: u32,
    dwValidParams: u32,
    dwVoices: u32,
    dwChannelGroups: u32,
    dwAudioChannels: u32,
    dwSampleRate: u32,
    dwEffectFlags: u32,
    fShare: BOOL,
    dwFeatures: u32,
};

pub const DMUS_SYNTHSTATS = extern struct {
    dwSize: u32,
    dwValidStats: u32,
    dwVoices: u32,
    dwTotalCPU: u32,
    dwCPUPerVoice: u32,
    dwLostNotes: u32,
    dwFreeMemory: u32,
    lPeakVolume: i32,
};

pub const DMUS_SYNTHSTATS8 = extern struct {
    dwSize: u32,
    dwValidStats: u32,
    dwVoices: u32,
    dwTotalCPU: u32,
    dwCPUPerVoice: u32,
    dwLostNotes: u32,
    dwFreeMemory: u32,
    lPeakVolume: i32,
    dwSynthMemUse: u32,
};

pub const DMUS_WAVES_REVERB_PARAMS = extern struct {
    fInGain: f32,
    fReverbMix: f32,
    fReverbTime: f32,
    fHighFreqRTRatio: f32,
};

pub const DMUS_CLOCKTYPE = extern enum(i32) {
    SYSTEM = 0,
    WAVE = 1,
};
pub const DMUS_CLOCK_SYSTEM = DMUS_CLOCKTYPE.SYSTEM;
pub const DMUS_CLOCK_WAVE = DMUS_CLOCKTYPE.WAVE;

pub const DMUS_CLOCKINFO7 = extern struct {
    dwSize: u32,
    ctType: DMUS_CLOCKTYPE,
    guidClock: Guid,
    wszDescription: [128]u16,
};

pub const DMUS_CLOCKINFO8 = extern struct {
    dwSize: u32,
    ctType: DMUS_CLOCKTYPE,
    guidClock: Guid,
    wszDescription: [128]u16,
    dwFlags: u32,
};

const IID_IDirectMusic_Value = @import("../zig.zig").Guid.initString("6536115a-7b2d-11d2-ba18-0000f875ac12");
pub const IID_IDirectMusic = &IID_IDirectMusic_Value;
pub const IDirectMusic = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        EnumPort: fn(
            self: *const IDirectMusic,
            dwIndex: u32,
            pPortCaps: *DMUS_PORTCAPS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateMusicBuffer: fn(
            self: *const IDirectMusic,
            pBufferDesc: *DMUS_BUFFERDESC,
            ppBuffer: **IDirectMusicBuffer,
            pUnkOuter: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePort: fn(
            self: *const IDirectMusic,
            rclsidPort: *const Guid,
            pPortParams: *DMUS_PORTPARAMS8,
            ppPort: **IDirectMusicPort,
            pUnkOuter: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumMasterClock: fn(
            self: *const IDirectMusic,
            dwIndex: u32,
            lpClockInfo: *DMUS_CLOCKINFO8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMasterClock: fn(
            self: *const IDirectMusic,
            pguidClock: *Guid,
            ppReferenceClock: **IReferenceClock,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMasterClock: fn(
            self: *const IDirectMusic,
            rguidClock: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Activate: fn(
            self: *const IDirectMusic,
            fEnable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefaultPort: fn(
            self: *const IDirectMusic,
            pguidPort: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDirectSound: fn(
            self: *const IDirectMusic,
            pDirectSound: *IDirectSound,
            hWnd: HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusic_EnumPort(self: *const T, dwIndex: u32, pPortCaps: *DMUS_PORTCAPS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusic.VTable, self.vtable).EnumPort(@ptrCast(*const IDirectMusic, self), dwIndex, pPortCaps);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusic_CreateMusicBuffer(self: *const T, pBufferDesc: *DMUS_BUFFERDESC, ppBuffer: **IDirectMusicBuffer, pUnkOuter: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusic.VTable, self.vtable).CreateMusicBuffer(@ptrCast(*const IDirectMusic, self), pBufferDesc, ppBuffer, pUnkOuter);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusic_CreatePort(self: *const T, rclsidPort: *const Guid, pPortParams: *DMUS_PORTPARAMS8, ppPort: **IDirectMusicPort, pUnkOuter: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusic.VTable, self.vtable).CreatePort(@ptrCast(*const IDirectMusic, self), rclsidPort, pPortParams, ppPort, pUnkOuter);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusic_EnumMasterClock(self: *const T, dwIndex: u32, lpClockInfo: *DMUS_CLOCKINFO8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusic.VTable, self.vtable).EnumMasterClock(@ptrCast(*const IDirectMusic, self), dwIndex, lpClockInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusic_GetMasterClock(self: *const T, pguidClock: *Guid, ppReferenceClock: **IReferenceClock) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusic.VTable, self.vtable).GetMasterClock(@ptrCast(*const IDirectMusic, self), pguidClock, ppReferenceClock);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusic_SetMasterClock(self: *const T, rguidClock: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusic.VTable, self.vtable).SetMasterClock(@ptrCast(*const IDirectMusic, self), rguidClock);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusic_Activate(self: *const T, fEnable: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusic.VTable, self.vtable).Activate(@ptrCast(*const IDirectMusic, self), fEnable);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusic_GetDefaultPort(self: *const T, pguidPort: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusic.VTable, self.vtable).GetDefaultPort(@ptrCast(*const IDirectMusic, self), pguidPort);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusic_SetDirectSound(self: *const T, pDirectSound: *IDirectSound, hWnd: HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusic.VTable, self.vtable).SetDirectSound(@ptrCast(*const IDirectMusic, self), pDirectSound, hWnd);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectMusic8_Value = @import("../zig.zig").Guid.initString("2d3629f7-813d-4939-8508-f05c6b75fd97");
pub const IID_IDirectMusic8 = &IID_IDirectMusic8_Value;
pub const IDirectMusic8 = extern struct {
    pub const VTable = extern struct {
        base: IDirectMusic.VTable,
        SetExternalMasterClock: fn(
            self: *const IDirectMusic8,
            pClock: *IReferenceClock,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDirectMusic.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusic8_SetExternalMasterClock(self: *const T, pClock: *IReferenceClock) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusic8.VTable, self.vtable).SetExternalMasterClock(@ptrCast(*const IDirectMusic8, self), pClock);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectMusicBuffer_Value = @import("../zig.zig").Guid.initString("d2ac2878-b39b-11d1-8704-00600893b1bd");
pub const IID_IDirectMusicBuffer = &IID_IDirectMusicBuffer_Value;
pub const IDirectMusicBuffer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Flush: fn(
            self: *const IDirectMusicBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TotalTime: fn(
            self: *const IDirectMusicBuffer,
            prtTime: *i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PackStructured: fn(
            self: *const IDirectMusicBuffer,
            rt: i64,
            dwChannelGroup: u32,
            dwChannelMessage: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PackUnstructured: fn(
            self: *const IDirectMusicBuffer,
            rt: i64,
            dwChannelGroup: u32,
            cb: u32,
            lpb: *u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResetReadPtr: fn(
            self: *const IDirectMusicBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNextEvent: fn(
            self: *const IDirectMusicBuffer,
            prt: *i64,
            pdwChannelGroup: *u32,
            pdwLength: *u32,
            ppData: **u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRawBufferPtr: fn(
            self: *const IDirectMusicBuffer,
            ppData: **u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStartTime: fn(
            self: *const IDirectMusicBuffer,
            prt: *i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUsedBytes: fn(
            self: *const IDirectMusicBuffer,
            pcb: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaxBytes: fn(
            self: *const IDirectMusicBuffer,
            pcb: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBufferFormat: fn(
            self: *const IDirectMusicBuffer,
            pGuidFormat: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStartTime: fn(
            self: *const IDirectMusicBuffer,
            rt: i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetUsedBytes: fn(
            self: *const IDirectMusicBuffer,
            cb: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicBuffer_Flush(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicBuffer.VTable, self.vtable).Flush(@ptrCast(*const IDirectMusicBuffer, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicBuffer_TotalTime(self: *const T, prtTime: *i64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicBuffer.VTable, self.vtable).TotalTime(@ptrCast(*const IDirectMusicBuffer, self), prtTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicBuffer_PackStructured(self: *const T, rt: i64, dwChannelGroup: u32, dwChannelMessage: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicBuffer.VTable, self.vtable).PackStructured(@ptrCast(*const IDirectMusicBuffer, self), rt, dwChannelGroup, dwChannelMessage);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicBuffer_PackUnstructured(self: *const T, rt: i64, dwChannelGroup: u32, cb: u32, lpb: *u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicBuffer.VTable, self.vtable).PackUnstructured(@ptrCast(*const IDirectMusicBuffer, self), rt, dwChannelGroup, cb, lpb);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicBuffer_ResetReadPtr(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicBuffer.VTable, self.vtable).ResetReadPtr(@ptrCast(*const IDirectMusicBuffer, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicBuffer_GetNextEvent(self: *const T, prt: *i64, pdwChannelGroup: *u32, pdwLength: *u32, ppData: **u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicBuffer.VTable, self.vtable).GetNextEvent(@ptrCast(*const IDirectMusicBuffer, self), prt, pdwChannelGroup, pdwLength, ppData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicBuffer_GetRawBufferPtr(self: *const T, ppData: **u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicBuffer.VTable, self.vtable).GetRawBufferPtr(@ptrCast(*const IDirectMusicBuffer, self), ppData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicBuffer_GetStartTime(self: *const T, prt: *i64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicBuffer.VTable, self.vtable).GetStartTime(@ptrCast(*const IDirectMusicBuffer, self), prt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicBuffer_GetUsedBytes(self: *const T, pcb: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicBuffer.VTable, self.vtable).GetUsedBytes(@ptrCast(*const IDirectMusicBuffer, self), pcb);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicBuffer_GetMaxBytes(self: *const T, pcb: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicBuffer.VTable, self.vtable).GetMaxBytes(@ptrCast(*const IDirectMusicBuffer, self), pcb);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicBuffer_GetBufferFormat(self: *const T, pGuidFormat: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicBuffer.VTable, self.vtable).GetBufferFormat(@ptrCast(*const IDirectMusicBuffer, self), pGuidFormat);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicBuffer_SetStartTime(self: *const T, rt: i64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicBuffer.VTable, self.vtable).SetStartTime(@ptrCast(*const IDirectMusicBuffer, self), rt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicBuffer_SetUsedBytes(self: *const T, cb: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicBuffer.VTable, self.vtable).SetUsedBytes(@ptrCast(*const IDirectMusicBuffer, self), cb);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectMusicInstrument_Value = @import("../zig.zig").Guid.initString("d2ac287d-b39b-11d1-8704-00600893b1bd");
pub const IID_IDirectMusicInstrument = &IID_IDirectMusicInstrument_Value;
pub const IDirectMusicInstrument = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPatch: fn(
            self: *const IDirectMusicInstrument,
            pdwPatch: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPatch: fn(
            self: *const IDirectMusicInstrument,
            dwPatch: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicInstrument_GetPatch(self: *const T, pdwPatch: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicInstrument.VTable, self.vtable).GetPatch(@ptrCast(*const IDirectMusicInstrument, self), pdwPatch);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicInstrument_SetPatch(self: *const T, dwPatch: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicInstrument.VTable, self.vtable).SetPatch(@ptrCast(*const IDirectMusicInstrument, self), dwPatch);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectMusicDownloadedInstrument_Value = @import("../zig.zig").Guid.initString("d2ac287e-b39b-11d1-8704-00600893b1bd");
pub const IID_IDirectMusicDownloadedInstrument = &IID_IDirectMusicDownloadedInstrument_Value;
pub const IDirectMusicDownloadedInstrument = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectMusicCollection_Value = @import("../zig.zig").Guid.initString("d2ac287c-b39b-11d1-8704-00600893b1bd");
pub const IID_IDirectMusicCollection = &IID_IDirectMusicCollection_Value;
pub const IDirectMusicCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetInstrument: fn(
            self: *const IDirectMusicCollection,
            dwPatch: u32,
            ppInstrument: **IDirectMusicInstrument,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumInstrument: fn(
            self: *const IDirectMusicCollection,
            dwIndex: u32,
            pdwPatch: *u32,
            pwszName: PWSTR,
            dwNameLen: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicCollection_GetInstrument(self: *const T, dwPatch: u32, ppInstrument: **IDirectMusicInstrument) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicCollection.VTable, self.vtable).GetInstrument(@ptrCast(*const IDirectMusicCollection, self), dwPatch, ppInstrument);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicCollection_EnumInstrument(self: *const T, dwIndex: u32, pdwPatch: *u32, pwszName: PWSTR, dwNameLen: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicCollection.VTable, self.vtable).EnumInstrument(@ptrCast(*const IDirectMusicCollection, self), dwIndex, pdwPatch, pwszName, dwNameLen);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectMusicDownload_Value = @import("../zig.zig").Guid.initString("d2ac287b-b39b-11d1-8704-00600893b1bd");
pub const IID_IDirectMusicDownload = &IID_IDirectMusicDownload_Value;
pub const IDirectMusicDownload = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetBuffer: fn(
            self: *const IDirectMusicDownload,
            ppvBuffer: **c_void,
            pdwSize: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicDownload_GetBuffer(self: *const T, ppvBuffer: **c_void, pdwSize: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicDownload.VTable, self.vtable).GetBuffer(@ptrCast(*const IDirectMusicDownload, self), ppvBuffer, pdwSize);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectMusicPortDownload_Value = @import("../zig.zig").Guid.initString("d2ac287a-b39b-11d1-8704-00600893b1bd");
pub const IID_IDirectMusicPortDownload = &IID_IDirectMusicPortDownload_Value;
pub const IDirectMusicPortDownload = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetBuffer: fn(
            self: *const IDirectMusicPortDownload,
            dwDLId: u32,
            ppIDMDownload: **IDirectMusicDownload,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AllocateBuffer: fn(
            self: *const IDirectMusicPortDownload,
            dwSize: u32,
            ppIDMDownload: **IDirectMusicDownload,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDLId: fn(
            self: *const IDirectMusicPortDownload,
            pdwStartDLId: *u32,
            dwCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAppend: fn(
            self: *const IDirectMusicPortDownload,
            pdwAppend: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Download: fn(
            self: *const IDirectMusicPortDownload,
            pIDMDownload: *IDirectMusicDownload,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unload: fn(
            self: *const IDirectMusicPortDownload,
            pIDMDownload: *IDirectMusicDownload,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicPortDownload_GetBuffer(self: *const T, dwDLId: u32, ppIDMDownload: **IDirectMusicDownload) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicPortDownload.VTable, self.vtable).GetBuffer(@ptrCast(*const IDirectMusicPortDownload, self), dwDLId, ppIDMDownload);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicPortDownload_AllocateBuffer(self: *const T, dwSize: u32, ppIDMDownload: **IDirectMusicDownload) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicPortDownload.VTable, self.vtable).AllocateBuffer(@ptrCast(*const IDirectMusicPortDownload, self), dwSize, ppIDMDownload);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicPortDownload_GetDLId(self: *const T, pdwStartDLId: *u32, dwCount: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicPortDownload.VTable, self.vtable).GetDLId(@ptrCast(*const IDirectMusicPortDownload, self), pdwStartDLId, dwCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicPortDownload_GetAppend(self: *const T, pdwAppend: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicPortDownload.VTable, self.vtable).GetAppend(@ptrCast(*const IDirectMusicPortDownload, self), pdwAppend);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicPortDownload_Download(self: *const T, pIDMDownload: *IDirectMusicDownload) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicPortDownload.VTable, self.vtable).Download(@ptrCast(*const IDirectMusicPortDownload, self), pIDMDownload);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicPortDownload_Unload(self: *const T, pIDMDownload: *IDirectMusicDownload) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicPortDownload.VTable, self.vtable).Unload(@ptrCast(*const IDirectMusicPortDownload, self), pIDMDownload);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectMusicPort_Value = @import("../zig.zig").Guid.initString("08f2d8c9-37c2-11d2-b9f9-0000f875ac12");
pub const IID_IDirectMusicPort = &IID_IDirectMusicPort_Value;
pub const IDirectMusicPort = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        PlayBuffer: fn(
            self: *const IDirectMusicPort,
            pBuffer: *IDirectMusicBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetReadNotificationHandle: fn(
            self: *const IDirectMusicPort,
            hEvent: HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Read: fn(
            self: *const IDirectMusicPort,
            pBuffer: *IDirectMusicBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DownloadInstrument: fn(
            self: *const IDirectMusicPort,
            pInstrument: *IDirectMusicInstrument,
            ppDownloadedInstrument: **IDirectMusicDownloadedInstrument,
            pNoteRanges: *DMUS_NOTERANGE,
            dwNumNoteRanges: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnloadInstrument: fn(
            self: *const IDirectMusicPort,
            pDownloadedInstrument: *IDirectMusicDownloadedInstrument,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLatencyClock: fn(
            self: *const IDirectMusicPort,
            ppClock: **IReferenceClock,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRunningStats: fn(
            self: *const IDirectMusicPort,
            pStats: *DMUS_SYNTHSTATS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Compact: fn(
            self: *const IDirectMusicPort,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCaps: fn(
            self: *const IDirectMusicPort,
            pPortCaps: *DMUS_PORTCAPS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeviceIoControl: fn(
            self: *const IDirectMusicPort,
            dwIoControlCode: u32,
            lpInBuffer: *c_void,
            nInBufferSize: u32,
            lpOutBuffer: *c_void,
            nOutBufferSize: u32,
            lpBytesReturned: *u32,
            lpOverlapped: *OVERLAPPED,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNumChannelGroups: fn(
            self: *const IDirectMusicPort,
            dwChannelGroups: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNumChannelGroups: fn(
            self: *const IDirectMusicPort,
            pdwChannelGroups: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Activate: fn(
            self: *const IDirectMusicPort,
            fActive: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetChannelPriority: fn(
            self: *const IDirectMusicPort,
            dwChannelGroup: u32,
            dwChannel: u32,
            dwPriority: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetChannelPriority: fn(
            self: *const IDirectMusicPort,
            dwChannelGroup: u32,
            dwChannel: u32,
            pdwPriority: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDirectSound: fn(
            self: *const IDirectMusicPort,
            pDirectSound: *IDirectSound,
            pDirectSoundBuffer: *IDirectSoundBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFormat: fn(
            self: *const IDirectMusicPort,
            pWaveFormatEx: *WAVEFORMATEX,
            pdwWaveFormatExSize: *u32,
            pdwBufferSize: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicPort_PlayBuffer(self: *const T, pBuffer: *IDirectMusicBuffer) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicPort.VTable, self.vtable).PlayBuffer(@ptrCast(*const IDirectMusicPort, self), pBuffer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicPort_SetReadNotificationHandle(self: *const T, hEvent: HANDLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicPort.VTable, self.vtable).SetReadNotificationHandle(@ptrCast(*const IDirectMusicPort, self), hEvent);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicPort_Read(self: *const T, pBuffer: *IDirectMusicBuffer) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicPort.VTable, self.vtable).Read(@ptrCast(*const IDirectMusicPort, self), pBuffer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicPort_DownloadInstrument(self: *const T, pInstrument: *IDirectMusicInstrument, ppDownloadedInstrument: **IDirectMusicDownloadedInstrument, pNoteRanges: *DMUS_NOTERANGE, dwNumNoteRanges: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicPort.VTable, self.vtable).DownloadInstrument(@ptrCast(*const IDirectMusicPort, self), pInstrument, ppDownloadedInstrument, pNoteRanges, dwNumNoteRanges);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicPort_UnloadInstrument(self: *const T, pDownloadedInstrument: *IDirectMusicDownloadedInstrument) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicPort.VTable, self.vtable).UnloadInstrument(@ptrCast(*const IDirectMusicPort, self), pDownloadedInstrument);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicPort_GetLatencyClock(self: *const T, ppClock: **IReferenceClock) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicPort.VTable, self.vtable).GetLatencyClock(@ptrCast(*const IDirectMusicPort, self), ppClock);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicPort_GetRunningStats(self: *const T, pStats: *DMUS_SYNTHSTATS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicPort.VTable, self.vtable).GetRunningStats(@ptrCast(*const IDirectMusicPort, self), pStats);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicPort_Compact(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicPort.VTable, self.vtable).Compact(@ptrCast(*const IDirectMusicPort, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicPort_GetCaps(self: *const T, pPortCaps: *DMUS_PORTCAPS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicPort.VTable, self.vtable).GetCaps(@ptrCast(*const IDirectMusicPort, self), pPortCaps);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicPort_DeviceIoControl(self: *const T, dwIoControlCode: u32, lpInBuffer: *c_void, nInBufferSize: u32, lpOutBuffer: *c_void, nOutBufferSize: u32, lpBytesReturned: *u32, lpOverlapped: *OVERLAPPED) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicPort.VTable, self.vtable).DeviceIoControl(@ptrCast(*const IDirectMusicPort, self), dwIoControlCode, lpInBuffer, nInBufferSize, lpOutBuffer, nOutBufferSize, lpBytesReturned, lpOverlapped);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicPort_SetNumChannelGroups(self: *const T, dwChannelGroups: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicPort.VTable, self.vtable).SetNumChannelGroups(@ptrCast(*const IDirectMusicPort, self), dwChannelGroups);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicPort_GetNumChannelGroups(self: *const T, pdwChannelGroups: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicPort.VTable, self.vtable).GetNumChannelGroups(@ptrCast(*const IDirectMusicPort, self), pdwChannelGroups);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicPort_Activate(self: *const T, fActive: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicPort.VTable, self.vtable).Activate(@ptrCast(*const IDirectMusicPort, self), fActive);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicPort_SetChannelPriority(self: *const T, dwChannelGroup: u32, dwChannel: u32, dwPriority: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicPort.VTable, self.vtable).SetChannelPriority(@ptrCast(*const IDirectMusicPort, self), dwChannelGroup, dwChannel, dwPriority);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicPort_GetChannelPriority(self: *const T, dwChannelGroup: u32, dwChannel: u32, pdwPriority: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicPort.VTable, self.vtable).GetChannelPriority(@ptrCast(*const IDirectMusicPort, self), dwChannelGroup, dwChannel, pdwPriority);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicPort_SetDirectSound(self: *const T, pDirectSound: *IDirectSound, pDirectSoundBuffer: *IDirectSoundBuffer) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicPort.VTable, self.vtable).SetDirectSound(@ptrCast(*const IDirectMusicPort, self), pDirectSound, pDirectSoundBuffer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicPort_GetFormat(self: *const T, pWaveFormatEx: *WAVEFORMATEX, pdwWaveFormatExSize: *u32, pdwBufferSize: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicPort.VTable, self.vtable).GetFormat(@ptrCast(*const IDirectMusicPort, self), pWaveFormatEx, pdwWaveFormatExSize, pdwBufferSize);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectMusicThru_Value = @import("../zig.zig").Guid.initString("ced153e7-3606-11d2-b9f9-0000f875ac12");
pub const IID_IDirectMusicThru = &IID_IDirectMusicThru_Value;
pub const IDirectMusicThru = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ThruChannel: fn(
            self: *const IDirectMusicThru,
            dwSourceChannelGroup: u32,
            dwSourceChannel: u32,
            dwDestinationChannelGroup: u32,
            dwDestinationChannel: u32,
            pDestinationPort: *IDirectMusicPort,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicThru_ThruChannel(self: *const T, dwSourceChannelGroup: u32, dwSourceChannel: u32, dwDestinationChannelGroup: u32, dwDestinationChannel: u32, pDestinationPort: *IDirectMusicPort) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicThru.VTable, self.vtable).ThruChannel(@ptrCast(*const IDirectMusicThru, self), dwSourceChannelGroup, dwSourceChannel, dwDestinationChannelGroup, dwDestinationChannel, pDestinationPort);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const DMUS_VOICE_STATE = extern struct {
    bExists: BOOL,
    spPosition: u64,
};

const IID_IDirectMusicSynth_Value = @import("../zig.zig").Guid.initString("09823661-5c85-11d2-afa6-00aa0024d8b6");
pub const IID_IDirectMusicSynth = &IID_IDirectMusicSynth_Value;
pub const IDirectMusicSynth = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Open: fn(
            self: *const IDirectMusicSynth,
            pPortParams: *DMUS_PORTPARAMS8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: fn(
            self: *const IDirectMusicSynth,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNumChannelGroups: fn(
            self: *const IDirectMusicSynth,
            dwGroups: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Download: fn(
            self: *const IDirectMusicSynth,
            phDownload: *HANDLE,
            pvData: *c_void,
            pbFree: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unload: fn(
            self: *const IDirectMusicSynth,
            hDownload: HANDLE,
            lpFreeHandle: isize,
            hUserData: HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PlayBuffer: fn(
            self: *const IDirectMusicSynth,
            rt: i64,
            pbBuffer: *u8,
            cbBuffer: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRunningStats: fn(
            self: *const IDirectMusicSynth,
            pStats: *DMUS_SYNTHSTATS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPortCaps: fn(
            self: *const IDirectMusicSynth,
            pCaps: *DMUS_PORTCAPS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMasterClock: fn(
            self: *const IDirectMusicSynth,
            pClock: *IReferenceClock,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLatencyClock: fn(
            self: *const IDirectMusicSynth,
            ppClock: **IReferenceClock,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Activate: fn(
            self: *const IDirectMusicSynth,
            fEnable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSynthSink: fn(
            self: *const IDirectMusicSynth,
            pSynthSink: *IDirectMusicSynthSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Render: fn(
            self: *const IDirectMusicSynth,
            pBuffer: *i16,
            dwLength: u32,
            llPosition: i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetChannelPriority: fn(
            self: *const IDirectMusicSynth,
            dwChannelGroup: u32,
            dwChannel: u32,
            dwPriority: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetChannelPriority: fn(
            self: *const IDirectMusicSynth,
            dwChannelGroup: u32,
            dwChannel: u32,
            pdwPriority: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFormat: fn(
            self: *const IDirectMusicSynth,
            pWaveFormatEx: *WAVEFORMATEX,
            pdwWaveFormatExSize: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAppend: fn(
            self: *const IDirectMusicSynth,
            pdwAppend: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicSynth_Open(self: *const T, pPortParams: *DMUS_PORTPARAMS8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicSynth.VTable, self.vtable).Open(@ptrCast(*const IDirectMusicSynth, self), pPortParams);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicSynth_Close(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicSynth.VTable, self.vtable).Close(@ptrCast(*const IDirectMusicSynth, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicSynth_SetNumChannelGroups(self: *const T, dwGroups: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicSynth.VTable, self.vtable).SetNumChannelGroups(@ptrCast(*const IDirectMusicSynth, self), dwGroups);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicSynth_Download(self: *const T, phDownload: *HANDLE, pvData: *c_void, pbFree: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicSynth.VTable, self.vtable).Download(@ptrCast(*const IDirectMusicSynth, self), phDownload, pvData, pbFree);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicSynth_Unload(self: *const T, hDownload: HANDLE, lpFreeHandle: isize, hUserData: HANDLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicSynth.VTable, self.vtable).Unload(@ptrCast(*const IDirectMusicSynth, self), hDownload, lpFreeHandle, hUserData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicSynth_PlayBuffer(self: *const T, rt: i64, pbBuffer: *u8, cbBuffer: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicSynth.VTable, self.vtable).PlayBuffer(@ptrCast(*const IDirectMusicSynth, self), rt, pbBuffer, cbBuffer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicSynth_GetRunningStats(self: *const T, pStats: *DMUS_SYNTHSTATS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicSynth.VTable, self.vtable).GetRunningStats(@ptrCast(*const IDirectMusicSynth, self), pStats);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicSynth_GetPortCaps(self: *const T, pCaps: *DMUS_PORTCAPS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicSynth.VTable, self.vtable).GetPortCaps(@ptrCast(*const IDirectMusicSynth, self), pCaps);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicSynth_SetMasterClock(self: *const T, pClock: *IReferenceClock) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicSynth.VTable, self.vtable).SetMasterClock(@ptrCast(*const IDirectMusicSynth, self), pClock);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicSynth_GetLatencyClock(self: *const T, ppClock: **IReferenceClock) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicSynth.VTable, self.vtable).GetLatencyClock(@ptrCast(*const IDirectMusicSynth, self), ppClock);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicSynth_Activate(self: *const T, fEnable: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicSynth.VTable, self.vtable).Activate(@ptrCast(*const IDirectMusicSynth, self), fEnable);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicSynth_SetSynthSink(self: *const T, pSynthSink: *IDirectMusicSynthSink) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicSynth.VTable, self.vtable).SetSynthSink(@ptrCast(*const IDirectMusicSynth, self), pSynthSink);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicSynth_Render(self: *const T, pBuffer: *i16, dwLength: u32, llPosition: i64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicSynth.VTable, self.vtable).Render(@ptrCast(*const IDirectMusicSynth, self), pBuffer, dwLength, llPosition);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicSynth_SetChannelPriority(self: *const T, dwChannelGroup: u32, dwChannel: u32, dwPriority: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicSynth.VTable, self.vtable).SetChannelPriority(@ptrCast(*const IDirectMusicSynth, self), dwChannelGroup, dwChannel, dwPriority);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicSynth_GetChannelPriority(self: *const T, dwChannelGroup: u32, dwChannel: u32, pdwPriority: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicSynth.VTable, self.vtable).GetChannelPriority(@ptrCast(*const IDirectMusicSynth, self), dwChannelGroup, dwChannel, pdwPriority);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicSynth_GetFormat(self: *const T, pWaveFormatEx: *WAVEFORMATEX, pdwWaveFormatExSize: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicSynth.VTable, self.vtable).GetFormat(@ptrCast(*const IDirectMusicSynth, self), pWaveFormatEx, pdwWaveFormatExSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicSynth_GetAppend(self: *const T, pdwAppend: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicSynth.VTable, self.vtable).GetAppend(@ptrCast(*const IDirectMusicSynth, self), pdwAppend);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectMusicSynth8_Value = @import("../zig.zig").Guid.initString("53cab625-2711-4c9f-9de7-1b7f925f6fc8");
pub const IID_IDirectMusicSynth8 = &IID_IDirectMusicSynth8_Value;
pub const IDirectMusicSynth8 = extern struct {
    pub const VTable = extern struct {
        base: IDirectMusicSynth.VTable,
        PlayVoice: fn(
            self: *const IDirectMusicSynth8,
            rt: i64,
            dwVoiceId: u32,
            dwChannelGroup: u32,
            dwChannel: u32,
            dwDLId: u32,
            prPitch: i32,
            vrVolume: i32,
            stVoiceStart: u64,
            stLoopStart: u64,
            stLoopEnd: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopVoice: fn(
            self: *const IDirectMusicSynth8,
            rt: i64,
            dwVoiceId: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVoiceState: fn(
            self: *const IDirectMusicSynth8,
            dwVoice: *u32,
            cbVoice: u32,
            dwVoiceState: *DMUS_VOICE_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: fn(
            self: *const IDirectMusicSynth8,
            dwDownloadID: u32,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AssignChannelToBuses: fn(
            self: *const IDirectMusicSynth8,
            dwChannelGroup: u32,
            dwChannel: u32,
            pdwBuses: *u32,
            cBuses: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDirectMusicSynth.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicSynth8_PlayVoice(self: *const T, rt: i64, dwVoiceId: u32, dwChannelGroup: u32, dwChannel: u32, dwDLId: u32, prPitch: i32, vrVolume: i32, stVoiceStart: u64, stLoopStart: u64, stLoopEnd: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicSynth8.VTable, self.vtable).PlayVoice(@ptrCast(*const IDirectMusicSynth8, self), rt, dwVoiceId, dwChannelGroup, dwChannel, dwDLId, prPitch, vrVolume, stVoiceStart, stLoopStart, stLoopEnd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicSynth8_StopVoice(self: *const T, rt: i64, dwVoiceId: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicSynth8.VTable, self.vtable).StopVoice(@ptrCast(*const IDirectMusicSynth8, self), rt, dwVoiceId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicSynth8_GetVoiceState(self: *const T, dwVoice: *u32, cbVoice: u32, dwVoiceState: *DMUS_VOICE_STATE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicSynth8.VTable, self.vtable).GetVoiceState(@ptrCast(*const IDirectMusicSynth8, self), dwVoice, cbVoice, dwVoiceState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicSynth8_Refresh(self: *const T, dwDownloadID: u32, dwFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicSynth8.VTable, self.vtable).Refresh(@ptrCast(*const IDirectMusicSynth8, self), dwDownloadID, dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicSynth8_AssignChannelToBuses(self: *const T, dwChannelGroup: u32, dwChannel: u32, pdwBuses: *u32, cBuses: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicSynth8.VTable, self.vtable).AssignChannelToBuses(@ptrCast(*const IDirectMusicSynth8, self), dwChannelGroup, dwChannel, pdwBuses, cBuses);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectMusicSynthSink_Value = @import("../zig.zig").Guid.initString("09823663-5c85-11d2-afa6-00aa0024d8b6");
pub const IID_IDirectMusicSynthSink = &IID_IDirectMusicSynthSink_Value;
pub const IDirectMusicSynthSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Init: fn(
            self: *const IDirectMusicSynthSink,
            pSynth: *IDirectMusicSynth,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMasterClock: fn(
            self: *const IDirectMusicSynthSink,
            pClock: *IReferenceClock,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLatencyClock: fn(
            self: *const IDirectMusicSynthSink,
            ppClock: **IReferenceClock,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Activate: fn(
            self: *const IDirectMusicSynthSink,
            fEnable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SampleToRefTime: fn(
            self: *const IDirectMusicSynthSink,
            llSampleTime: i64,
            prfTime: *i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RefTimeToSample: fn(
            self: *const IDirectMusicSynthSink,
            rfTime: i64,
            pllSampleTime: *i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDirectSound: fn(
            self: *const IDirectMusicSynthSink,
            pDirectSound: *IDirectSound,
            pDirectSoundBuffer: *IDirectSoundBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDesiredBufferSize: fn(
            self: *const IDirectMusicSynthSink,
            pdwBufferSizeInSamples: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicSynthSink_Init(self: *const T, pSynth: *IDirectMusicSynth) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicSynthSink.VTable, self.vtable).Init(@ptrCast(*const IDirectMusicSynthSink, self), pSynth);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicSynthSink_SetMasterClock(self: *const T, pClock: *IReferenceClock) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicSynthSink.VTable, self.vtable).SetMasterClock(@ptrCast(*const IDirectMusicSynthSink, self), pClock);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicSynthSink_GetLatencyClock(self: *const T, ppClock: **IReferenceClock) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicSynthSink.VTable, self.vtable).GetLatencyClock(@ptrCast(*const IDirectMusicSynthSink, self), ppClock);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicSynthSink_Activate(self: *const T, fEnable: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicSynthSink.VTable, self.vtable).Activate(@ptrCast(*const IDirectMusicSynthSink, self), fEnable);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicSynthSink_SampleToRefTime(self: *const T, llSampleTime: i64, prfTime: *i64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicSynthSink.VTable, self.vtable).SampleToRefTime(@ptrCast(*const IDirectMusicSynthSink, self), llSampleTime, prfTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicSynthSink_RefTimeToSample(self: *const T, rfTime: i64, pllSampleTime: *i64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicSynthSink.VTable, self.vtable).RefTimeToSample(@ptrCast(*const IDirectMusicSynthSink, self), rfTime, pllSampleTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicSynthSink_SetDirectSound(self: *const T, pDirectSound: *IDirectSound, pDirectSoundBuffer: *IDirectSoundBuffer) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicSynthSink.VTable, self.vtable).SetDirectSound(@ptrCast(*const IDirectMusicSynthSink, self), pDirectSound, pDirectSoundBuffer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectMusicSynthSink_GetDesiredBufferSize(self: *const T, pdwBufferSizeInSamples: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectMusicSynthSink.VTable, self.vtable).GetDesiredBufferSize(@ptrCast(*const IDirectMusicSynthSink, self), pdwBufferSizeInSamples);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const CLSID_KSPROPSETID_AudioEffectsDiscovery_Value = @import("../zig.zig").Guid.initString("0b217a72-16b8-4a4d-bded-f9d6bbedcd8f");
pub const CLSID_KSPROPSETID_AudioEffectsDiscovery = &CLSID_KSPROPSETID_AudioEffectsDiscovery_Value;

pub const KSPROPERTY_AUDIOEFFECTSDISCOVERY = extern enum(i32) {
    T = 1,
};
pub const KSPROPERTY_AUDIOEFFECTSDISCOVERY_EFFECTSLIST = KSPROPERTY_AUDIOEFFECTSDISCOVERY.T;

pub const KSP_PINMODE = extern struct {
    PinProperty: KSP_PIN,
    AudioProcessingMode: Guid,
};

const IID_IPropertyStore_Value = @import("../zig.zig").Guid.initString("886d8eeb-8cf2-4446-8d02-cdba1dbdcf99");
pub const IID_IPropertyStore = &IID_IPropertyStore_Value;
pub const IPropertyStore = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: fn(
            self: *const IPropertyStore,
            cProps: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: fn(
            self: *const IPropertyStore,
            iProp: u32,
            pkey: *PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: fn(
            self: *const IPropertyStore,
            key: *const PROPERTYKEY,
            pv: *PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetValue: fn(
            self: *const IPropertyStore,
            key: *const PROPERTYKEY,
            propvar: *const PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Commit: fn(
            self: *const IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyStore_GetCount(self: *const T, cProps: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyStore.VTable, self.vtable).GetCount(@ptrCast(*const IPropertyStore, self), cProps);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyStore_GetAt(self: *const T, iProp: u32, pkey: *PROPERTYKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyStore.VTable, self.vtable).GetAt(@ptrCast(*const IPropertyStore, self), iProp, pkey);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyStore_GetValue(self: *const T, key: *const PROPERTYKEY, pv: *PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyStore.VTable, self.vtable).GetValue(@ptrCast(*const IPropertyStore, self), key, pv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyStore_SetValue(self: *const T, key: *const PROPERTYKEY, propvar: *const PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyStore.VTable, self.vtable).SetValue(@ptrCast(*const IPropertyStore, self), key, propvar);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyStore_Commit(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyStore.VTable, self.vtable).Commit(@ptrCast(*const IPropertyStore, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const MDEVICECAPSEX = extern struct {
    cbSize: u32,
    pCaps: *c_void,
};

pub const MIDIOPENDESC = extern struct {
    hMidi: HMIDI,
    dwCallback: usize,
    dwInstance: usize,
    dnDevNode: usize,
    cIds: u32,
    rgIds: [1]midiopenstrmid_tag,
};


//--------------------------------------------------------------------------------
// Section: Functions (9)
//--------------------------------------------------------------------------------
pub extern "DSOUND" fn DirectSoundCreate(
    pcGuidDevice: ?*Guid,
    ppDS: **IDirectSound,
    pUnkOuter: *IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DSOUND" fn DirectSoundEnumerateA(
    pDSEnumCallback: LPDSENUMCALLBACKA,
    pContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DSOUND" fn DirectSoundEnumerateW(
    pDSEnumCallback: LPDSENUMCALLBACKW,
    pContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DSOUND" fn DirectSoundCaptureCreate(
    pcGuidDevice: ?*Guid,
    ppDSC: **IDirectSoundCapture,
    pUnkOuter: *IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DSOUND" fn DirectSoundCaptureEnumerateA(
    pDSEnumCallback: LPDSENUMCALLBACKA,
    pContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DSOUND" fn DirectSoundCaptureEnumerateW(
    pDSEnumCallback: LPDSENUMCALLBACKW,
    pContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DSOUND" fn DirectSoundCreate8(
    pcGuidDevice: ?*Guid,
    ppDS8: **IDirectSound8,
    pUnkOuter: *IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DSOUND" fn DirectSoundCaptureCreate8(
    pcGuidDevice: ?*Guid,
    ppDSC8: **IDirectSoundCapture,
    pUnkOuter: *IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DSOUND" fn DirectSoundFullDuplexCreate(
    pcGuidCaptureDevice: ?*Guid,
    pcGuidRenderDevice: ?*Guid,
    pcDSCBufferDesc: *DSCBUFFERDESC,
    pcDSBufferDesc: *DSBUFFERDESC,
    hWnd: HWND,
    dwLevel: u32,
    ppDSFD: **IDirectSoundFullDuplex,
    ppDSCBuffer8: **IDirectSoundCaptureBuffer8,
    ppDSBuffer8: **IDirectSoundBuffer8,
    pUnkOuter: *IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (3)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const LPDSENUMCALLBACK = LPDSENUMCALLBACKA;
        pub const DirectSoundEnumerate = DirectSoundEnumerateA;
        pub const DirectSoundCaptureEnumerate = DirectSoundCaptureEnumerateA;
    },
    .wide => struct {
        pub const LPDSENUMCALLBACK = LPDSENUMCALLBACKW;
        pub const DirectSoundEnumerate = DirectSoundEnumerateW;
        pub const DirectSoundCaptureEnumerate = DirectSoundCaptureEnumerateW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const LPDSENUMCALLBACK = *opaque{};
        pub const DirectSoundEnumerate = *opaque{};
        pub const DirectSoundCaptureEnumerate = *opaque{};
    } else struct {
        pub const LPDSENUMCALLBACK = @compileError("'LPDSENUMCALLBACK' requires that UNICODE be set to true or false in the root module");
        pub const DirectSoundEnumerate = @compileError("'DirectSoundEnumerate' requires that UNICODE be set to true or false in the root module");
        pub const DirectSoundCaptureEnumerate = @compileError("'DirectSoundCaptureEnumerate' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (20)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const LPARAM = @import("windows_and_messaging.zig").LPARAM;
const PWSTR = @import("system_services.zig").PWSTR;
const midiopenstrmid_tag = @import("multimedia.zig").midiopenstrmid_tag;
const IUnknown = @import("com.zig").IUnknown;
const HRESULT = @import("com.zig").HRESULT;
const IMMDeviceCollection = @import("core_audio.zig").IMMDeviceCollection;
const KSP_PIN = @import("core_audio.zig").KSP_PIN;
const PSTR = @import("system_services.zig").PSTR;
const IReferenceClock = @import("direct_show.zig").IReferenceClock;
const BOOL = @import("system_services.zig").BOOL;
const D3DVECTOR = @import("direct3d9.zig").D3DVECTOR;
const HWND = @import("windows_and_messaging.zig").HWND;
const PROPVARIANT = @import("structured_storage.zig").PROPVARIANT;
const APO_CONNECTION_PROPERTY = @import("remote_desktop_services.zig").APO_CONNECTION_PROPERTY;
const OVERLAPPED = @import("system_services.zig").OVERLAPPED;
const PROPERTYKEY = @import("windows_properties_system.zig").PROPERTYKEY;
const HANDLE = @import("system_services.zig").HANDLE;
const WAVEFORMATEX = @import("multimedia.zig").WAVEFORMATEX;
const HMIDI = @import("multimedia.zig").HMIDI;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "FNAPONOTIFICATIONCALLBACK")) { _ = FNAPONOTIFICATIONCALLBACK; }
    if (@hasDecl(@This(), "LPDSENUMCALLBACKA")) { _ = LPDSENUMCALLBACKA; }
    if (@hasDecl(@This(), "LPDSENUMCALLBACKW")) { _ = LPDSENUMCALLBACKW; }

    @setEvalBranchQuota(
        @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("std").builtin.is_test) return;
    inline for (@import("std").meta.declarations(@This())) |decl| {
        if (decl.is_pub) {
            _ = decl;
        }
    }
}
