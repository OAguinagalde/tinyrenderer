//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (35)
//--------------------------------------------------------------------------------
pub const PERF_PROVIDER_USER_MODE = @as(u32, 0);
pub const PERF_PROVIDER_KERNEL_MODE = @as(u32, 1);
pub const PERF_PROVIDER_DRIVER = @as(u32, 2);
pub const PERF_COUNTERSET_FLAG_MULTIPLE = @as(u32, 2);
pub const PERF_COUNTERSET_FLAG_AGGREGATE = @as(u32, 4);
pub const PERF_COUNTERSET_FLAG_HISTORY = @as(u32, 8);
pub const PERF_COUNTERSET_FLAG_INSTANCE = @as(u32, 16);
pub const PERF_COUNTERSET_SINGLE_INSTANCE = @as(u32, 0);
pub const PERF_AGGREGATE_MAX = @as(u32, 4);
pub const PERF_ATTRIB_BY_REFERENCE = @as(u64, 1);
pub const PERF_ATTRIB_NO_DISPLAYABLE = @as(u64, 2);
pub const PERF_ATTRIB_NO_GROUP_SEPARATOR = @as(u64, 4);
pub const PERF_ATTRIB_DISPLAY_AS_REAL = @as(u64, 8);
pub const PERF_ATTRIB_DISPLAY_AS_HEX = @as(u64, 16);
pub const PERF_WILDCARD_COUNTER = @as(u32, 4294967295);
pub const PERF_MAX_INSTANCE_NAME = @as(u32, 1024);
pub const PERF_ADD_COUNTER = @as(u32, 1);
pub const PERF_REMOVE_COUNTER = @as(u32, 2);
pub const PERF_ENUM_INSTANCES = @as(u32, 3);
pub const PERF_COLLECT_START = @as(u32, 5);
pub const PERF_COLLECT_END = @as(u32, 6);
pub const PERF_FILTER = @as(u32, 9);
pub const MAX_COUNTER_PATH = @as(u32, 256);
pub const PDH_MAX_COUNTER_NAME = @as(u32, 1024);
pub const PDH_MAX_INSTANCE_NAME = @as(u32, 1024);
pub const PDH_MAX_COUNTER_PATH = @as(u32, 2048);
pub const PDH_MAX_DATASOURCE_PATH = @as(u32, 1024);
pub const PDH_MAX_SCALE = @as(i32, 7);
pub const PDH_MIN_SCALE = @as(i32, -7);
pub const PDH_NOEXPANDCOUNTERS = @as(u32, 1);
pub const PDH_NOEXPANDINSTANCES = @as(u32, 2);
pub const PDH_REFRESHCOUNTERS = @as(u32, 4);
pub const PDH_LOG_TYPE_RETIRED_BIN = @as(u32, 3);
pub const PDH_LOG_TYPE_TRACE_KERNEL = @as(u32, 4);
pub const PDH_LOG_TYPE_TRACE_GENERIC = @as(u32, 5);

//--------------------------------------------------------------------------------
// Section: Types (54)
//--------------------------------------------------------------------------------
// TODO: this type has a FreeFunc 'PerfStopProvider', what can Zig do with this information?
pub const PerfProviderHandle = isize;

// TODO: this type has a FreeFunc 'PerfCloseQueryHandle', what can Zig do with this information?
pub const PerfQueryHandle = isize;

pub const PERF_COUNTERSET_INFO = extern struct {
    CounterSetGuid: Guid,
    ProviderGuid: Guid,
    NumCounters: u32,
    InstanceType: u32,
};

pub const PERF_COUNTER_INFO = extern struct {
    CounterId: u32,
    Type: u32,
    Attrib: u64,
    Size: u32,
    DetailLevel: u32,
    Scale: i32,
    Offset: u32,
};

pub const PERF_COUNTERSET_INSTANCE = extern struct {
    CounterSetGuid: Guid,
    dwSize: u32,
    InstanceId: u32,
    InstanceNameOffset: u32,
    InstanceNameSize: u32,
};

pub const PERF_COUNTER_IDENTITY = extern struct {
    CounterSetGuid: Guid,
    BufferSize: u32,
    CounterId: u32,
    InstanceId: u32,
    MachineOffset: u32,
    NameOffset: u32,
    Reserved: u32,
};

pub const PERFLIBREQUEST = fn(
    RequestCode: u32,
    Buffer: *c_void,
    BufferSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PERF_MEM_ALLOC = fn(
    AllocSize: usize,
    pContext: *c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub const PERF_MEM_FREE = fn(
    pBuffer: *c_void,
    pContext: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PERF_PROVIDER_CONTEXT = extern struct {
    ContextSize: u32,
    Reserved: u32,
    ControlCallback: PERFLIBREQUEST,
    MemAllocRoutine: PERF_MEM_ALLOC,
    MemFreeRoutine: PERF_MEM_FREE,
    pMemContext: *c_void,
};

pub const PERF_INSTANCE_HEADER = extern struct {
    Size: u32,
    InstanceId: u32,
};

pub const PerfRegInfoType = extern enum(i32) {
    COUNTERSET_STRUCT = 1,
    COUNTER_STRUCT = 2,
    COUNTERSET_NAME_STRING = 3,
    COUNTERSET_HELP_STRING = 4,
    COUNTER_NAME_STRINGS = 5,
    COUNTER_HELP_STRINGS = 6,
    PROVIDER_NAME = 7,
    PROVIDER_GUID = 8,
    COUNTERSET_ENGLISH_NAME = 9,
    COUNTER_ENGLISH_NAMES = 10,
};
pub const PERF_REG_COUNTERSET_STRUCT = PerfRegInfoType.COUNTERSET_STRUCT;
pub const PERF_REG_COUNTER_STRUCT = PerfRegInfoType.COUNTER_STRUCT;
pub const PERF_REG_COUNTERSET_NAME_STRING = PerfRegInfoType.COUNTERSET_NAME_STRING;
pub const PERF_REG_COUNTERSET_HELP_STRING = PerfRegInfoType.COUNTERSET_HELP_STRING;
pub const PERF_REG_COUNTER_NAME_STRINGS = PerfRegInfoType.COUNTER_NAME_STRINGS;
pub const PERF_REG_COUNTER_HELP_STRINGS = PerfRegInfoType.COUNTER_HELP_STRINGS;
pub const PERF_REG_PROVIDER_NAME = PerfRegInfoType.PROVIDER_NAME;
pub const PERF_REG_PROVIDER_GUID = PerfRegInfoType.PROVIDER_GUID;
pub const PERF_REG_COUNTERSET_ENGLISH_NAME = PerfRegInfoType.COUNTERSET_ENGLISH_NAME;
pub const PERF_REG_COUNTER_ENGLISH_NAMES = PerfRegInfoType.COUNTER_ENGLISH_NAMES;

pub const PERF_COUNTERSET_REG_INFO = extern struct {
    CounterSetGuid: Guid,
    CounterSetType: u32,
    DetailLevel: u32,
    NumCounters: u32,
    InstanceType: u32,
};

pub const PERF_COUNTER_REG_INFO = extern struct {
    CounterId: u32,
    Type: u32,
    Attrib: u64,
    DetailLevel: u32,
    DefaultScale: i32,
    BaseCounterId: u32,
    PerfTimeId: u32,
    PerfFreqId: u32,
    MultiId: u32,
    AggregateFunc: PERF_COUNTER_AGGREGATE_FUNC,
    Reserved: u32,
};

pub const PERF_STRING_BUFFER_HEADER = extern struct {
    dwSize: u32,
    dwCounters: u32,
};

pub const PERF_STRING_COUNTER_HEADER = extern struct {
    dwCounterId: u32,
    dwOffset: u32,
};

pub const PERF_COUNTER_IDENTIFIER = extern struct {
    CounterSetGuid: Guid,
    Status: u32,
    Size: u32,
    CounterId: u32,
    InstanceId: u32,
    Index: u32,
    Reserved: u32,
};

pub const PERF_DATA_HEADER = extern struct {
    dwTotalSize: u32,
    dwNumCounters: u32,
    PerfTimeStamp: i64,
    PerfTime100NSec: i64,
    PerfFreq: i64,
    SystemTime: SYSTEMTIME,
};

pub const PerfCounterDataType = extern enum(i32) {
    ERROR_RETURN = 0,
    SINGLE_COUNTER = 1,
    MULTIPLE_COUNTERS = 2,
    MULTIPLE_INSTANCES = 4,
    COUNTERSET = 6,
};
pub const PERF_ERROR_RETURN = PerfCounterDataType.ERROR_RETURN;
pub const PERF_SINGLE_COUNTER = PerfCounterDataType.SINGLE_COUNTER;
pub const PERF_MULTIPLE_COUNTERS = PerfCounterDataType.MULTIPLE_COUNTERS;
pub const PERF_MULTIPLE_INSTANCES = PerfCounterDataType.MULTIPLE_INSTANCES;
pub const PERF_COUNTERSET = PerfCounterDataType.COUNTERSET;

pub const PERF_COUNTER_HEADER = extern struct {
    dwStatus: u32,
    dwType: PerfCounterDataType,
    dwSize: u32,
    Reserved: u32,
};

pub const PERF_MULTI_INSTANCES = extern struct {
    dwTotalSize: u32,
    dwInstances: u32,
};

pub const PERF_MULTI_COUNTERS = extern struct {
    dwSize: u32,
    dwCounters: u32,
};

pub const PERF_COUNTER_DATA = extern struct {
    dwDataSize: u32,
    dwSize: u32,
};

pub const PDH_RAW_COUNTER = extern struct {
    CStatus: u32,
    TimeStamp: FILETIME,
    FirstValue: i64,
    SecondValue: i64,
    MultiCount: u32,
};

pub const PDH_RAW_COUNTER_ITEM_A = extern struct {
    szName: PSTR,
    RawValue: PDH_RAW_COUNTER,
};

pub const PDH_RAW_COUNTER_ITEM_W = extern struct {
    szName: PWSTR,
    RawValue: PDH_RAW_COUNTER,
};

pub const PDH_FMT_COUNTERVALUE = extern struct {
    CStatus: u32,
    Anonymous: _Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const PDH_FMT_COUNTERVALUE_ITEM_A = extern struct {
    szName: PSTR,
    FmtValue: PDH_FMT_COUNTERVALUE,
};

pub const PDH_FMT_COUNTERVALUE_ITEM_W = extern struct {
    szName: PWSTR,
    FmtValue: PDH_FMT_COUNTERVALUE,
};

pub const PDH_STATISTICS = extern struct {
    dwFormat: u32,
    count: u32,
    min: PDH_FMT_COUNTERVALUE,
    max: PDH_FMT_COUNTERVALUE,
    mean: PDH_FMT_COUNTERVALUE,
};

pub const PDH_COUNTER_PATH_ELEMENTS_A = extern struct {
    szMachineName: PSTR,
    szObjectName: PSTR,
    szInstanceName: PSTR,
    szParentInstance: PSTR,
    dwInstanceIndex: u32,
    szCounterName: PSTR,
};

pub const PDH_COUNTER_PATH_ELEMENTS_W = extern struct {
    szMachineName: PWSTR,
    szObjectName: PWSTR,
    szInstanceName: PWSTR,
    szParentInstance: PWSTR,
    dwInstanceIndex: u32,
    szCounterName: PWSTR,
};

pub const PDH_DATA_ITEM_PATH_ELEMENTS_A = extern struct {
    szMachineName: PSTR,
    ObjectGUID: Guid,
    dwItemId: u32,
    szInstanceName: PSTR,
};

pub const PDH_DATA_ITEM_PATH_ELEMENTS_W = extern struct {
    szMachineName: PWSTR,
    ObjectGUID: Guid,
    dwItemId: u32,
    szInstanceName: PWSTR,
};

pub const PDH_COUNTER_INFO_A = extern struct {
    dwLength: u32,
    dwType: u32,
    CVersion: u32,
    CStatus: u32,
    lScale: i32,
    lDefaultScale: i32,
    dwUserData: usize,
    dwQueryUserData: usize,
    szFullPath: PSTR,
    Anonymous: _Anonymous_e__Union,
    szExplainText: PSTR,
    DataBuffer: [1]u32,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const PDH_COUNTER_INFO_W = extern struct {
    dwLength: u32,
    dwType: u32,
    CVersion: u32,
    CStatus: u32,
    lScale: i32,
    lDefaultScale: i32,
    dwUserData: usize,
    dwQueryUserData: usize,
    szFullPath: PWSTR,
    Anonymous: _Anonymous_e__Union,
    szExplainText: PWSTR,
    DataBuffer: [1]u32,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const PDH_TIME_INFO = extern struct {
    StartTime: i64,
    EndTime: i64,
    SampleCount: u32,
};

pub const PDH_RAW_LOG_RECORD = extern struct {
    dwStructureSize: u32,
    dwRecordType: PDH_LOG_TYPE,
    dwItems: u32,
    RawBytes: [1]u8,
};

pub const PDH_LOG_SERVICE_QUERY_INFO_A = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwLogQuota: u32,
    szLogFileCaption: PSTR,
    szDefaultDir: PSTR,
    szBaseFileName: PSTR,
    dwFileType: u32,
    dwReserved: u32,
    Anonymous: _Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const PDH_LOG_SERVICE_QUERY_INFO_W = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwLogQuota: u32,
    szLogFileCaption: PWSTR,
    szDefaultDir: PWSTR,
    szBaseFileName: PWSTR,
    dwFileType: u32,
    dwReserved: u32,
    Anonymous: _Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const CounterPathCallBack = fn(
    param0: usize,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const PDH_BROWSE_DLG_CONFIG_HW = extern struct {
    _bitfield: u32,
    hWndOwner: HWND,
    hDataSource: isize,
    szReturnPathBuffer: PWSTR,
    cchReturnPathLength: u32,
    pCallBack: CounterPathCallBack,
    dwCallBackArg: usize,
    CallBackStatus: i32,
    dwDefaultDetailLevel: PERF_DETAIL,
    szDialogBoxCaption: PWSTR,
};

pub const PDH_BROWSE_DLG_CONFIG_HA = extern struct {
    _bitfield: u32,
    hWndOwner: HWND,
    hDataSource: isize,
    szReturnPathBuffer: PSTR,
    cchReturnPathLength: u32,
    pCallBack: CounterPathCallBack,
    dwCallBackArg: usize,
    CallBackStatus: i32,
    dwDefaultDetailLevel: PERF_DETAIL,
    szDialogBoxCaption: PSTR,
};

pub const PDH_BROWSE_DLG_CONFIG_W = extern struct {
    _bitfield: u32,
    hWndOwner: HWND,
    szDataSource: PWSTR,
    szReturnPathBuffer: PWSTR,
    cchReturnPathLength: u32,
    pCallBack: CounterPathCallBack,
    dwCallBackArg: usize,
    CallBackStatus: i32,
    dwDefaultDetailLevel: PERF_DETAIL,
    szDialogBoxCaption: PWSTR,
};

pub const PDH_BROWSE_DLG_CONFIG_A = extern struct {
    _bitfield: u32,
    hWndOwner: HWND,
    szDataSource: PSTR,
    szReturnPathBuffer: PSTR,
    cchReturnPathLength: u32,
    pCallBack: CounterPathCallBack,
    dwCallBackArg: usize,
    CallBackStatus: i32,
    dwDefaultDetailLevel: PERF_DETAIL,
    szDialogBoxCaption: PSTR,
};

pub const PERF_DETAIL = extern enum(u32) {
    NOVICE = 100,
    ADVANCED = 200,
    EXPERT = 300,
    WIZARD = 400,
};
pub const PERF_DETAIL_NOVICE = PERF_DETAIL.NOVICE;
pub const PERF_DETAIL_ADVANCED = PERF_DETAIL.ADVANCED;
pub const PERF_DETAIL_EXPERT = PERF_DETAIL.EXPERT;
pub const PERF_DETAIL_WIZARD = PERF_DETAIL.WIZARD;

pub const REAL_TIME_DATA_SOURCE_ID_FLAGS = extern enum(u32) {
    REGISTRY = 1,
    WBEM = 4,
};
pub const DATA_SOURCE_REGISTRY = REAL_TIME_DATA_SOURCE_ID_FLAGS.REGISTRY;
pub const DATA_SOURCE_WBEM = REAL_TIME_DATA_SOURCE_ID_FLAGS.WBEM;

pub const PDH_PATH_FLAGS = extern enum(u32) {
    RESULT = 1,
    INPUT = 2,
    None = 0,
};
pub const PDH_PATH_WBEM_RESULT = PDH_PATH_FLAGS.RESULT;
pub const PDH_PATH_WBEM_INPUT = PDH_PATH_FLAGS.INPUT;

pub const PDH_FMT = extern enum(u32) {
    DOUBLE = 512,
    LARGE = 1024,
    LONG = 256,
};
pub const PDH_FMT_DOUBLE = PDH_FMT.DOUBLE;
pub const PDH_FMT_LARGE = PDH_FMT.LARGE;
pub const PDH_FMT_LONG = PDH_FMT.LONG;

pub const PDH_LOG_TYPE = extern enum(u32) {
    UNDEFINED = 0,
    CSV = 1,
    SQL = 7,
    TSV = 2,
    BINARY = 8,
    PERFMON = 6,
};
pub const PDH_LOG_TYPE_UNDEFINED = PDH_LOG_TYPE.UNDEFINED;
pub const PDH_LOG_TYPE_CSV = PDH_LOG_TYPE.CSV;
pub const PDH_LOG_TYPE_SQL = PDH_LOG_TYPE.SQL;
pub const PDH_LOG_TYPE_TSV = PDH_LOG_TYPE.TSV;
pub const PDH_LOG_TYPE_BINARY = PDH_LOG_TYPE.BINARY;
pub const PDH_LOG_TYPE_PERFMON = PDH_LOG_TYPE.PERFMON;

pub const PDH_LOG = extern enum(u32) {
    READ_ACCESS = 65536,
    WRITE_ACCESS = 131072,
    UPDATE_ACCESS = 262144,
};
pub const PDH_LOG_READ_ACCESS = PDH_LOG.READ_ACCESS;
pub const PDH_LOG_WRITE_ACCESS = PDH_LOG.WRITE_ACCESS;
pub const PDH_LOG_UPDATE_ACCESS = PDH_LOG.UPDATE_ACCESS;

pub const PDH_SELECT_DATA_SOURCE_FLAGS = extern enum(u32) {
    Y = 1,
    None = 0,
};
pub const PDH_FLAGS_FILE_BROWSER_ONLY = PDH_SELECT_DATA_SOURCE_FLAGS.Y;

pub const PDH_VERSION = extern enum(u32) {
    CVERSION_WIN50 = 1280,
    VERSION = 1283,
};
// TODO: enum 'PDH_VERSION' has known issues with its value aliases

pub const PERF_COUNTER_AGGREGATE_FUNC = extern enum(u32) {
    UNDEFINED = 0,
    TOTAL = 1,
    AVG = 2,
    MIN = 3,
};
pub const PERF_AGGREGATE_UNDEFINED = PERF_COUNTER_AGGREGATE_FUNC.UNDEFINED;
pub const PERF_AGGREGATE_TOTAL = PERF_COUNTER_AGGREGATE_FUNC.TOTAL;
pub const PERF_AGGREGATE_AVG = PERF_COUNTER_AGGREGATE_FUNC.AVG;
pub const PERF_AGGREGATE_MIN = PERF_COUNTER_AGGREGATE_FUNC.MIN;


//--------------------------------------------------------------------------------
// Section: Functions (131)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "loadperf" fn LoadPerfCounterTextStringsA(
    lpCommandLine: PSTR,
    bQuietModeArg: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "loadperf" fn LoadPerfCounterTextStringsW(
    lpCommandLine: PWSTR,
    bQuietModeArg: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "loadperf" fn UnloadPerfCounterTextStringsW(
    lpCommandLine: PWSTR,
    bQuietModeArg: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "loadperf" fn UnloadPerfCounterTextStringsA(
    lpCommandLine: PSTR,
    bQuietModeArg: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "loadperf" fn UpdatePerfNameFilesA(
    szNewCtrFilePath: [*:0]const u8,
    szNewHlpFilePath: ?[*:0]const u8,
    szLanguageID: PSTR,
    dwFlags: usize,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "loadperf" fn UpdatePerfNameFilesW(
    szNewCtrFilePath: [*:0]const u16,
    szNewHlpFilePath: ?[*:0]const u16,
    szLanguageID: PWSTR,
    dwFlags: usize,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "loadperf" fn SetServiceAsTrustedA(
    szReserved: ?[*:0]const u8,
    szServiceName: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "loadperf" fn SetServiceAsTrustedW(
    szReserved: ?[*:0]const u16,
    szServiceName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "loadperf" fn BackupPerfRegistryToFileW(
    szFileName: [*:0]const u16,
    szCommentString: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "loadperf" fn RestorePerfRegistryFromFileW(
    szFileName: ?[*:0]const u16,
    szLangId: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ADVAPI32" fn PerfStartProvider(
    ProviderGuid: *Guid,
    ControlCallback: ?PERFLIBREQUEST,
    phProvider: *PerfProviderHandle,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ADVAPI32" fn PerfStartProviderEx(
    ProviderGuid: *Guid,
    ProviderContext: ?*PERF_PROVIDER_CONTEXT,
    Provider: *PerfProviderHandle,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ADVAPI32" fn PerfStopProvider(
    ProviderHandle: PerfProviderHandle,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ADVAPI32" fn PerfSetCounterSetInfo(
    ProviderHandle: HANDLE,
    // TODO: what to do with BytesParamIndex 2?
    Template: *PERF_COUNTERSET_INFO,
    TemplateSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ADVAPI32" fn PerfCreateInstance(
    ProviderHandle: PerfProviderHandle,
    CounterSetGuid: *Guid,
    Name: [*:0]const u16,
    Id: u32,
) callconv(@import("std").os.windows.WINAPI) *PERF_COUNTERSET_INSTANCE;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ADVAPI32" fn PerfDeleteInstance(
    Provider: PerfProviderHandle,
    InstanceBlock: *PERF_COUNTERSET_INSTANCE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ADVAPI32" fn PerfQueryInstance(
    ProviderHandle: HANDLE,
    CounterSetGuid: *Guid,
    Name: [*:0]const u16,
    Id: u32,
) callconv(@import("std").os.windows.WINAPI) *PERF_COUNTERSET_INSTANCE;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ADVAPI32" fn PerfSetCounterRefValue(
    Provider: HANDLE,
    Instance: *PERF_COUNTERSET_INSTANCE,
    CounterId: u32,
    Address: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ADVAPI32" fn PerfSetULongCounterValue(
    Provider: HANDLE,
    Instance: *PERF_COUNTERSET_INSTANCE,
    CounterId: u32,
    Value: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ADVAPI32" fn PerfSetULongLongCounterValue(
    Provider: HANDLE,
    Instance: *PERF_COUNTERSET_INSTANCE,
    CounterId: u32,
    Value: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ADVAPI32" fn PerfIncrementULongCounterValue(
    Provider: HANDLE,
    Instance: *PERF_COUNTERSET_INSTANCE,
    CounterId: u32,
    Value: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ADVAPI32" fn PerfIncrementULongLongCounterValue(
    Provider: HANDLE,
    Instance: *PERF_COUNTERSET_INSTANCE,
    CounterId: u32,
    Value: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ADVAPI32" fn PerfDecrementULongCounterValue(
    Provider: HANDLE,
    Instance: *PERF_COUNTERSET_INSTANCE,
    CounterId: u32,
    Value: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ADVAPI32" fn PerfDecrementULongLongCounterValue(
    Provider: HANDLE,
    Instance: *PERF_COUNTERSET_INSTANCE,
    CounterId: u32,
    Value: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows10.0.14393'
pub extern "ADVAPI32" fn PerfEnumerateCounterSet(
    szMachine: ?[*:0]const u16,
    pCounterSetIds: ?[*]Guid,
    cCounterSetIds: u32,
    pcCounterSetIdsActual: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows10.0.14393'
pub extern "ADVAPI32" fn PerfEnumerateCounterSetInstances(
    szMachine: ?[*:0]const u16,
    pCounterSetId: *Guid,
    // TODO: what to do with BytesParamIndex 3?
    pInstances: ?*PERF_INSTANCE_HEADER,
    cbInstances: u32,
    pcbInstancesActual: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows10.0.14393'
pub extern "ADVAPI32" fn PerfQueryCounterSetRegistrationInfo(
    szMachine: ?[*:0]const u16,
    pCounterSetId: *Guid,
    requestCode: PerfRegInfoType,
    requestLangId: u32,
    // TODO: what to do with BytesParamIndex 5?
    pbRegInfo: ?*u8,
    cbRegInfo: u32,
    pcbRegInfoActual: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows10.0.14393'
pub extern "ADVAPI32" fn PerfOpenQueryHandle(
    szMachine: ?[*:0]const u16,
    phQuery: *PerfQueryHandle,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows10.0.14393'
pub extern "ADVAPI32" fn PerfCloseQueryHandle(
    hQuery: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows10.0.14393'
pub extern "ADVAPI32" fn PerfQueryCounterInfo(
    hQuery: PerfQueryHandle,
    // TODO: what to do with BytesParamIndex 2?
    pCounters: ?*PERF_COUNTER_IDENTIFIER,
    cbCounters: u32,
    pcbCountersActual: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows10.0.14393'
pub extern "ADVAPI32" fn PerfQueryCounterData(
    hQuery: PerfQueryHandle,
    // TODO: what to do with BytesParamIndex 2?
    pCounterBlock: ?*PERF_DATA_HEADER,
    cbCounterBlock: u32,
    pcbCounterBlockActual: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows10.0.14393'
pub extern "ADVAPI32" fn PerfAddCounters(
    hQuery: PerfQueryHandle,
    // TODO: what to do with BytesParamIndex 2?
    pCounters: *PERF_COUNTER_IDENTIFIER,
    cbCounters: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows10.0.14393'
pub extern "ADVAPI32" fn PerfDeleteCounters(
    hQuery: PerfQueryHandle,
    // TODO: what to do with BytesParamIndex 2?
    pCounters: *PERF_COUNTER_IDENTIFIER,
    cbCounters: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetDllVersion(
    lpdwVersion: ?*PDH_VERSION,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhOpenQueryW(
    szDataSource: ?[*:0]const u16,
    dwUserData: usize,
    phQuery: *isize,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhOpenQueryA(
    szDataSource: ?[*:0]const u8,
    dwUserData: usize,
    phQuery: *isize,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhAddCounterW(
    hQuery: isize,
    szFullCounterPath: [*:0]const u16,
    dwUserData: usize,
    phCounter: *isize,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhAddCounterA(
    hQuery: isize,
    szFullCounterPath: [*:0]const u8,
    dwUserData: usize,
    phCounter: *isize,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "pdh" fn PdhAddEnglishCounterW(
    hQuery: isize,
    szFullCounterPath: [*:0]const u16,
    dwUserData: usize,
    phCounter: *isize,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "pdh" fn PdhAddEnglishCounterA(
    hQuery: isize,
    szFullCounterPath: [*:0]const u8,
    dwUserData: usize,
    phCounter: *isize,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "pdh" fn PdhCollectQueryDataWithTime(
    hQuery: isize,
    pllTimeStamp: *i64,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "pdh" fn PdhValidatePathExW(
    hDataSource: isize,
    szFullPathBuffer: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "pdh" fn PdhValidatePathExA(
    hDataSource: isize,
    szFullPathBuffer: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhRemoveCounter(
    hCounter: isize,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhCollectQueryData(
    hQuery: isize,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhCloseQuery(
    hQuery: isize,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetFormattedCounterValue(
    hCounter: isize,
    dwFormat: PDH_FMT,
    lpdwType: ?*u32,
    pValue: *PDH_FMT_COUNTERVALUE,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetFormattedCounterArrayA(
    hCounter: isize,
    dwFormat: PDH_FMT,
    lpdwBufferSize: *u32,
    lpdwItemCount: *u32,
    ItemBuffer: ?*PDH_FMT_COUNTERVALUE_ITEM_A,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetFormattedCounterArrayW(
    hCounter: isize,
    dwFormat: PDH_FMT,
    lpdwBufferSize: *u32,
    lpdwItemCount: *u32,
    ItemBuffer: ?*PDH_FMT_COUNTERVALUE_ITEM_W,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetRawCounterValue(
    hCounter: isize,
    lpdwType: ?*u32,
    pValue: *PDH_RAW_COUNTER,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetRawCounterArrayA(
    hCounter: isize,
    lpdwBufferSize: *u32,
    lpdwItemCount: *u32,
    ItemBuffer: ?*PDH_RAW_COUNTER_ITEM_A,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetRawCounterArrayW(
    hCounter: isize,
    lpdwBufferSize: *u32,
    lpdwItemCount: *u32,
    ItemBuffer: ?*PDH_RAW_COUNTER_ITEM_W,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhCalculateCounterFromRawValue(
    hCounter: isize,
    dwFormat: PDH_FMT,
    rawValue1: *PDH_RAW_COUNTER,
    rawValue2: *PDH_RAW_COUNTER,
    fmtValue: *PDH_FMT_COUNTERVALUE,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhComputeCounterStatistics(
    hCounter: isize,
    dwFormat: PDH_FMT,
    dwFirstEntry: u32,
    dwNumEntries: u32,
    lpRawValueArray: *PDH_RAW_COUNTER,
    data: *PDH_STATISTICS,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetCounterInfoW(
    hCounter: isize,
    bRetrieveExplainText: u8,
    pdwBufferSize: *u32,
    lpBuffer: ?*PDH_COUNTER_INFO_W,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetCounterInfoA(
    hCounter: isize,
    bRetrieveExplainText: u8,
    pdwBufferSize: *u32,
    lpBuffer: ?*PDH_COUNTER_INFO_A,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhSetCounterScaleFactor(
    hCounter: isize,
    lFactor: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhConnectMachineW(
    szMachineName: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhConnectMachineA(
    szMachineName: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhEnumMachinesW(
    szDataSource: ?[*:0]const u16,
    mszMachineList: ?[*]u16,
    pcchBufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhEnumMachinesA(
    szDataSource: ?[*:0]const u8,
    mszMachineList: ?[*]u8,
    pcchBufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhEnumObjectsW(
    szDataSource: ?[*:0]const u16,
    szMachineName: ?[*:0]const u16,
    mszObjectList: ?[*]u16,
    pcchBufferSize: *u32,
    dwDetailLevel: PERF_DETAIL,
    bRefresh: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhEnumObjectsA(
    szDataSource: ?[*:0]const u8,
    szMachineName: ?[*:0]const u8,
    mszObjectList: ?[*]u8,
    pcchBufferSize: *u32,
    dwDetailLevel: PERF_DETAIL,
    bRefresh: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhEnumObjectItemsW(
    szDataSource: ?[*:0]const u16,
    szMachineName: ?[*:0]const u16,
    szObjectName: [*:0]const u16,
    mszCounterList: ?[*]u16,
    pcchCounterListLength: *u32,
    mszInstanceList: ?[*]u16,
    pcchInstanceListLength: *u32,
    dwDetailLevel: PERF_DETAIL,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhEnumObjectItemsA(
    szDataSource: ?[*:0]const u8,
    szMachineName: ?[*:0]const u8,
    szObjectName: [*:0]const u8,
    mszCounterList: ?[*]u8,
    pcchCounterListLength: *u32,
    mszInstanceList: ?[*]u8,
    pcchInstanceListLength: *u32,
    dwDetailLevel: PERF_DETAIL,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhMakeCounterPathW(
    pCounterPathElements: *PDH_COUNTER_PATH_ELEMENTS_W,
    szFullPathBuffer: ?PWSTR,
    pcchBufferSize: *u32,
    dwFlags: PDH_PATH_FLAGS,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhMakeCounterPathA(
    pCounterPathElements: *PDH_COUNTER_PATH_ELEMENTS_A,
    szFullPathBuffer: ?PSTR,
    pcchBufferSize: *u32,
    dwFlags: PDH_PATH_FLAGS,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhParseCounterPathW(
    szFullPathBuffer: [*:0]const u16,
    pCounterPathElements: ?*PDH_COUNTER_PATH_ELEMENTS_W,
    pdwBufferSize: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhParseCounterPathA(
    szFullPathBuffer: [*:0]const u8,
    pCounterPathElements: ?*PDH_COUNTER_PATH_ELEMENTS_A,
    pdwBufferSize: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhParseInstanceNameW(
    szInstanceString: [*:0]const u16,
    szInstanceName: ?PWSTR,
    pcchInstanceNameLength: *u32,
    szParentName: ?PWSTR,
    pcchParentNameLength: *u32,
    lpIndex: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhParseInstanceNameA(
    szInstanceString: [*:0]const u8,
    szInstanceName: ?PSTR,
    pcchInstanceNameLength: *u32,
    szParentName: ?PSTR,
    pcchParentNameLength: *u32,
    lpIndex: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhValidatePathW(
    szFullPathBuffer: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhValidatePathA(
    szFullPathBuffer: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetDefaultPerfObjectW(
    szDataSource: ?[*:0]const u16,
    szMachineName: ?[*:0]const u16,
    szDefaultObjectName: ?PWSTR,
    pcchBufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetDefaultPerfObjectA(
    szDataSource: ?[*:0]const u8,
    szMachineName: ?[*:0]const u8,
    szDefaultObjectName: ?PSTR,
    pcchBufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetDefaultPerfCounterW(
    szDataSource: ?[*:0]const u16,
    szMachineName: ?[*:0]const u16,
    szObjectName: [*:0]const u16,
    szDefaultCounterName: ?PWSTR,
    pcchBufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetDefaultPerfCounterA(
    szDataSource: ?[*:0]const u8,
    szMachineName: ?[*:0]const u8,
    szObjectName: [*:0]const u8,
    szDefaultCounterName: ?PSTR,
    pcchBufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhBrowseCountersW(
    pBrowseDlgData: *PDH_BROWSE_DLG_CONFIG_W,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhBrowseCountersA(
    pBrowseDlgData: *PDH_BROWSE_DLG_CONFIG_A,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhExpandCounterPathW(
    szWildCardPath: [*:0]const u16,
    mszExpandedPathList: ?[*]u16,
    pcchPathListLength: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhExpandCounterPathA(
    szWildCardPath: [*:0]const u8,
    mszExpandedPathList: ?[*]u8,
    pcchPathListLength: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhLookupPerfNameByIndexW(
    szMachineName: ?[*:0]const u16,
    dwNameIndex: u32,
    szNameBuffer: ?PWSTR,
    pcchNameBufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhLookupPerfNameByIndexA(
    szMachineName: ?[*:0]const u8,
    dwNameIndex: u32,
    szNameBuffer: ?PSTR,
    pcchNameBufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhLookupPerfIndexByNameW(
    szMachineName: ?[*:0]const u16,
    szNameBuffer: [*:0]const u16,
    pdwIndex: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhLookupPerfIndexByNameA(
    szMachineName: ?[*:0]const u8,
    szNameBuffer: [*:0]const u8,
    pdwIndex: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhExpandWildCardPathA(
    szDataSource: ?[*:0]const u8,
    szWildCardPath: [*:0]const u8,
    mszExpandedPathList: ?[*]u8,
    pcchPathListLength: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhExpandWildCardPathW(
    szDataSource: ?[*:0]const u16,
    szWildCardPath: [*:0]const u16,
    mszExpandedPathList: ?[*]u16,
    pcchPathListLength: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhOpenLogW(
    szLogFileName: [*:0]const u16,
    dwAccessFlags: PDH_LOG,
    lpdwLogType: *PDH_LOG_TYPE,
    hQuery: isize,
    dwMaxSize: u32,
    szUserCaption: ?[*:0]const u16,
    phLog: *isize,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhOpenLogA(
    szLogFileName: [*:0]const u8,
    dwAccessFlags: PDH_LOG,
    lpdwLogType: *PDH_LOG_TYPE,
    hQuery: isize,
    dwMaxSize: u32,
    szUserCaption: ?[*:0]const u8,
    phLog: *isize,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhUpdateLogW(
    hLog: isize,
    szUserString: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhUpdateLogA(
    hLog: isize,
    szUserString: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhUpdateLogFileCatalog(
    hLog: isize,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetLogFileSize(
    hLog: isize,
    llSize: *i64,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhCloseLog(
    hLog: isize,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhSelectDataSourceW(
    hWndOwner: HWND,
    dwFlags: PDH_SELECT_DATA_SOURCE_FLAGS,
    szDataSource: PWSTR,
    pcchBufferLength: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhSelectDataSourceA(
    hWndOwner: HWND,
    dwFlags: PDH_SELECT_DATA_SOURCE_FLAGS,
    szDataSource: PSTR,
    pcchBufferLength: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhIsRealTimeQuery(
    hQuery: isize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhSetQueryTimeRange(
    hQuery: isize,
    pInfo: *PDH_TIME_INFO,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetDataSourceTimeRangeW(
    szDataSource: ?[*:0]const u16,
    pdwNumEntries: *u32,
    pInfo: *PDH_TIME_INFO,
    pdwBufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetDataSourceTimeRangeA(
    szDataSource: ?[*:0]const u8,
    pdwNumEntries: *u32,
    pInfo: *PDH_TIME_INFO,
    pdwBufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhCollectQueryDataEx(
    hQuery: isize,
    dwIntervalTime: u32,
    hNewDataEvent: HANDLE,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhFormatFromRawValue(
    dwCounterType: u32,
    dwFormat: PDH_FMT,
    pTimeBase: ?*i64,
    pRawValue1: *PDH_RAW_COUNTER,
    pRawValue2: *PDH_RAW_COUNTER,
    pFmtValue: *PDH_FMT_COUNTERVALUE,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetCounterTimeBase(
    hCounter: isize,
    pTimeBase: *i64,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhReadRawLogRecord(
    hLog: isize,
    ftRecord: FILETIME,
    pRawLogRecord: ?*PDH_RAW_LOG_RECORD,
    pdwBufferLength: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhSetDefaultRealTimeDataSource(
    dwDataSourceId: REAL_TIME_DATA_SOURCE_ID_FLAGS,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhBindInputDataSourceW(
    phDataSource: *isize,
    LogFileNameList: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhBindInputDataSourceA(
    phDataSource: *isize,
    LogFileNameList: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhOpenQueryH(
    hDataSource: isize,
    dwUserData: usize,
    phQuery: *isize,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhEnumMachinesHW(
    hDataSource: isize,
    mszMachineList: ?[*]u16,
    pcchBufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhEnumMachinesHA(
    hDataSource: isize,
    mszMachineList: ?[*]u8,
    pcchBufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhEnumObjectsHW(
    hDataSource: isize,
    szMachineName: ?[*:0]const u16,
    mszObjectList: ?[*]u16,
    pcchBufferSize: *u32,
    dwDetailLevel: PERF_DETAIL,
    bRefresh: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhEnumObjectsHA(
    hDataSource: isize,
    szMachineName: ?[*:0]const u8,
    mszObjectList: ?[*]u8,
    pcchBufferSize: *u32,
    dwDetailLevel: PERF_DETAIL,
    bRefresh: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhEnumObjectItemsHW(
    hDataSource: isize,
    szMachineName: ?[*:0]const u16,
    szObjectName: [*:0]const u16,
    mszCounterList: ?[*]u16,
    pcchCounterListLength: *u32,
    mszInstanceList: ?[*]u16,
    pcchInstanceListLength: *u32,
    dwDetailLevel: PERF_DETAIL,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhEnumObjectItemsHA(
    hDataSource: isize,
    szMachineName: ?[*:0]const u8,
    szObjectName: [*:0]const u8,
    mszCounterList: ?[*]u8,
    pcchCounterListLength: *u32,
    mszInstanceList: ?[*]u8,
    pcchInstanceListLength: *u32,
    dwDetailLevel: PERF_DETAIL,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhExpandWildCardPathHW(
    hDataSource: isize,
    szWildCardPath: [*:0]const u16,
    mszExpandedPathList: ?[*]u16,
    pcchPathListLength: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhExpandWildCardPathHA(
    hDataSource: isize,
    szWildCardPath: [*:0]const u8,
    mszExpandedPathList: ?[*]u8,
    pcchPathListLength: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetDataSourceTimeRangeH(
    hDataSource: isize,
    pdwNumEntries: *u32,
    pInfo: *PDH_TIME_INFO,
    pdwBufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetDefaultPerfObjectHW(
    hDataSource: isize,
    szMachineName: ?[*:0]const u16,
    szDefaultObjectName: ?PWSTR,
    pcchBufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetDefaultPerfObjectHA(
    hDataSource: isize,
    szMachineName: ?[*:0]const u8,
    szDefaultObjectName: ?PSTR,
    pcchBufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetDefaultPerfCounterHW(
    hDataSource: isize,
    szMachineName: ?[*:0]const u16,
    szObjectName: [*:0]const u16,
    szDefaultCounterName: ?PWSTR,
    pcchBufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetDefaultPerfCounterHA(
    hDataSource: isize,
    szMachineName: ?[*:0]const u8,
    szObjectName: [*:0]const u8,
    szDefaultCounterName: ?PSTR,
    pcchBufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhBrowseCountersHW(
    pBrowseDlgData: *PDH_BROWSE_DLG_CONFIG_HW,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhBrowseCountersHA(
    pBrowseDlgData: *PDH_BROWSE_DLG_CONFIG_HA,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "pdh" fn PdhVerifySQLDBW(
    szDataSource: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "pdh" fn PdhVerifySQLDBA(
    szDataSource: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "pdh" fn PdhCreateSQLTablesW(
    szDataSource: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "pdh" fn PdhCreateSQLTablesA(
    szDataSource: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhEnumLogSetNamesW(
    szDataSource: [*:0]const u16,
    mszDataSetNameList: ?[*]u16,
    pcchBufferLength: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhEnumLogSetNamesA(
    szDataSource: [*:0]const u8,
    mszDataSetNameList: ?[*]u8,
    pcchBufferLength: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "pdh" fn PdhGetLogSetGUID(
    hLog: isize,
    pGuid: ?*Guid,
    pRunId: ?*i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "pdh" fn PdhSetLogSetRunID(
    hLog: isize,
    RunId: i32,
) callconv(@import("std").os.windows.WINAPI) i32;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (49)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const PDH_RAW_COUNTER_ITEM_ = PDH_RAW_COUNTER_ITEM_A;
        pub const PDH_FMT_COUNTERVALUE_ITEM_ = PDH_FMT_COUNTERVALUE_ITEM_A;
        pub const PDH_COUNTER_PATH_ELEMENTS_ = PDH_COUNTER_PATH_ELEMENTS_A;
        pub const PDH_DATA_ITEM_PATH_ELEMENTS_ = PDH_DATA_ITEM_PATH_ELEMENTS_A;
        pub const PDH_COUNTER_INFO_ = PDH_COUNTER_INFO_A;
        pub const PDH_LOG_SERVICE_QUERY_INFO_ = PDH_LOG_SERVICE_QUERY_INFO_A;
        pub const PDH_BROWSE_DLG_CONFIG_H = PDH_BROWSE_DLG_CONFIG_HA;
        pub const PDH_BROWSE_DLG_CONFIG_ = PDH_BROWSE_DLG_CONFIG_A;
        pub const LoadPerfCounterTextStrings = LoadPerfCounterTextStringsA;
        pub const UnloadPerfCounterTextStrings = UnloadPerfCounterTextStringsA;
        pub const UpdatePerfNameFiles = UpdatePerfNameFilesA;
        pub const SetServiceAsTrusted = SetServiceAsTrustedA;
        pub const PdhOpenQuery = PdhOpenQueryA;
        pub const PdhAddCounter = PdhAddCounterA;
        pub const PdhAddEnglishCounter = PdhAddEnglishCounterA;
        pub const PdhValidatePathEx = PdhValidatePathExA;
        pub const PdhGetFormattedCounterArray = PdhGetFormattedCounterArrayA;
        pub const PdhGetRawCounterArray = PdhGetRawCounterArrayA;
        pub const PdhGetCounterInfo = PdhGetCounterInfoA;
        pub const PdhConnectMachine = PdhConnectMachineA;
        pub const PdhEnumMachines = PdhEnumMachinesA;
        pub const PdhEnumObjects = PdhEnumObjectsA;
        pub const PdhEnumObjectItems = PdhEnumObjectItemsA;
        pub const PdhMakeCounterPath = PdhMakeCounterPathA;
        pub const PdhParseCounterPath = PdhParseCounterPathA;
        pub const PdhParseInstanceName = PdhParseInstanceNameA;
        pub const PdhValidatePath = PdhValidatePathA;
        pub const PdhGetDefaultPerfObject = PdhGetDefaultPerfObjectA;
        pub const PdhGetDefaultPerfCounter = PdhGetDefaultPerfCounterA;
        pub const PdhBrowseCounters = PdhBrowseCountersA;
        pub const PdhExpandCounterPath = PdhExpandCounterPathA;
        pub const PdhLookupPerfNameByIndex = PdhLookupPerfNameByIndexA;
        pub const PdhLookupPerfIndexByName = PdhLookupPerfIndexByNameA;
        pub const PdhExpandWildCardPath = PdhExpandWildCardPathA;
        pub const PdhOpenLog = PdhOpenLogA;
        pub const PdhUpdateLog = PdhUpdateLogA;
        pub const PdhSelectDataSource = PdhSelectDataSourceA;
        pub const PdhGetDataSourceTimeRange = PdhGetDataSourceTimeRangeA;
        pub const PdhBindInputDataSource = PdhBindInputDataSourceA;
        pub const PdhEnumMachinesH = PdhEnumMachinesHA;
        pub const PdhEnumObjectsH = PdhEnumObjectsHA;
        pub const PdhEnumObjectItemsH = PdhEnumObjectItemsHA;
        pub const PdhExpandWildCardPathH = PdhExpandWildCardPathHA;
        pub const PdhGetDefaultPerfObjectH = PdhGetDefaultPerfObjectHA;
        pub const PdhGetDefaultPerfCounterH = PdhGetDefaultPerfCounterHA;
        pub const PdhBrowseCountersH = PdhBrowseCountersHA;
        pub const PdhVerifySQLDB = PdhVerifySQLDBA;
        pub const PdhCreateSQLTables = PdhCreateSQLTablesA;
        pub const PdhEnumLogSetNames = PdhEnumLogSetNamesA;
    },
    .wide => struct {
        pub const PDH_RAW_COUNTER_ITEM_ = PDH_RAW_COUNTER_ITEM_W;
        pub const PDH_FMT_COUNTERVALUE_ITEM_ = PDH_FMT_COUNTERVALUE_ITEM_W;
        pub const PDH_COUNTER_PATH_ELEMENTS_ = PDH_COUNTER_PATH_ELEMENTS_W;
        pub const PDH_DATA_ITEM_PATH_ELEMENTS_ = PDH_DATA_ITEM_PATH_ELEMENTS_W;
        pub const PDH_COUNTER_INFO_ = PDH_COUNTER_INFO_W;
        pub const PDH_LOG_SERVICE_QUERY_INFO_ = PDH_LOG_SERVICE_QUERY_INFO_W;
        pub const PDH_BROWSE_DLG_CONFIG_H = PDH_BROWSE_DLG_CONFIG_HW;
        pub const PDH_BROWSE_DLG_CONFIG_ = PDH_BROWSE_DLG_CONFIG_W;
        pub const LoadPerfCounterTextStrings = LoadPerfCounterTextStringsW;
        pub const UnloadPerfCounterTextStrings = UnloadPerfCounterTextStringsW;
        pub const UpdatePerfNameFiles = UpdatePerfNameFilesW;
        pub const SetServiceAsTrusted = SetServiceAsTrustedW;
        pub const PdhOpenQuery = PdhOpenQueryW;
        pub const PdhAddCounter = PdhAddCounterW;
        pub const PdhAddEnglishCounter = PdhAddEnglishCounterW;
        pub const PdhValidatePathEx = PdhValidatePathExW;
        pub const PdhGetFormattedCounterArray = PdhGetFormattedCounterArrayW;
        pub const PdhGetRawCounterArray = PdhGetRawCounterArrayW;
        pub const PdhGetCounterInfo = PdhGetCounterInfoW;
        pub const PdhConnectMachine = PdhConnectMachineW;
        pub const PdhEnumMachines = PdhEnumMachinesW;
        pub const PdhEnumObjects = PdhEnumObjectsW;
        pub const PdhEnumObjectItems = PdhEnumObjectItemsW;
        pub const PdhMakeCounterPath = PdhMakeCounterPathW;
        pub const PdhParseCounterPath = PdhParseCounterPathW;
        pub const PdhParseInstanceName = PdhParseInstanceNameW;
        pub const PdhValidatePath = PdhValidatePathW;
        pub const PdhGetDefaultPerfObject = PdhGetDefaultPerfObjectW;
        pub const PdhGetDefaultPerfCounter = PdhGetDefaultPerfCounterW;
        pub const PdhBrowseCounters = PdhBrowseCountersW;
        pub const PdhExpandCounterPath = PdhExpandCounterPathW;
        pub const PdhLookupPerfNameByIndex = PdhLookupPerfNameByIndexW;
        pub const PdhLookupPerfIndexByName = PdhLookupPerfIndexByNameW;
        pub const PdhExpandWildCardPath = PdhExpandWildCardPathW;
        pub const PdhOpenLog = PdhOpenLogW;
        pub const PdhUpdateLog = PdhUpdateLogW;
        pub const PdhSelectDataSource = PdhSelectDataSourceW;
        pub const PdhGetDataSourceTimeRange = PdhGetDataSourceTimeRangeW;
        pub const PdhBindInputDataSource = PdhBindInputDataSourceW;
        pub const PdhEnumMachinesH = PdhEnumMachinesHW;
        pub const PdhEnumObjectsH = PdhEnumObjectsHW;
        pub const PdhEnumObjectItemsH = PdhEnumObjectItemsHW;
        pub const PdhExpandWildCardPathH = PdhExpandWildCardPathHW;
        pub const PdhGetDefaultPerfObjectH = PdhGetDefaultPerfObjectHW;
        pub const PdhGetDefaultPerfCounterH = PdhGetDefaultPerfCounterHW;
        pub const PdhBrowseCountersH = PdhBrowseCountersHW;
        pub const PdhVerifySQLDB = PdhVerifySQLDBW;
        pub const PdhCreateSQLTables = PdhCreateSQLTablesW;
        pub const PdhEnumLogSetNames = PdhEnumLogSetNamesW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const PDH_RAW_COUNTER_ITEM_ = *opaque{};
        pub const PDH_FMT_COUNTERVALUE_ITEM_ = *opaque{};
        pub const PDH_COUNTER_PATH_ELEMENTS_ = *opaque{};
        pub const PDH_DATA_ITEM_PATH_ELEMENTS_ = *opaque{};
        pub const PDH_COUNTER_INFO_ = *opaque{};
        pub const PDH_LOG_SERVICE_QUERY_INFO_ = *opaque{};
        pub const PDH_BROWSE_DLG_CONFIG_H = *opaque{};
        pub const PDH_BROWSE_DLG_CONFIG_ = *opaque{};
        pub const LoadPerfCounterTextStrings = *opaque{};
        pub const UnloadPerfCounterTextStrings = *opaque{};
        pub const UpdatePerfNameFiles = *opaque{};
        pub const SetServiceAsTrusted = *opaque{};
        pub const PdhOpenQuery = *opaque{};
        pub const PdhAddCounter = *opaque{};
        pub const PdhAddEnglishCounter = *opaque{};
        pub const PdhValidatePathEx = *opaque{};
        pub const PdhGetFormattedCounterArray = *opaque{};
        pub const PdhGetRawCounterArray = *opaque{};
        pub const PdhGetCounterInfo = *opaque{};
        pub const PdhConnectMachine = *opaque{};
        pub const PdhEnumMachines = *opaque{};
        pub const PdhEnumObjects = *opaque{};
        pub const PdhEnumObjectItems = *opaque{};
        pub const PdhMakeCounterPath = *opaque{};
        pub const PdhParseCounterPath = *opaque{};
        pub const PdhParseInstanceName = *opaque{};
        pub const PdhValidatePath = *opaque{};
        pub const PdhGetDefaultPerfObject = *opaque{};
        pub const PdhGetDefaultPerfCounter = *opaque{};
        pub const PdhBrowseCounters = *opaque{};
        pub const PdhExpandCounterPath = *opaque{};
        pub const PdhLookupPerfNameByIndex = *opaque{};
        pub const PdhLookupPerfIndexByName = *opaque{};
        pub const PdhExpandWildCardPath = *opaque{};
        pub const PdhOpenLog = *opaque{};
        pub const PdhUpdateLog = *opaque{};
        pub const PdhSelectDataSource = *opaque{};
        pub const PdhGetDataSourceTimeRange = *opaque{};
        pub const PdhBindInputDataSource = *opaque{};
        pub const PdhEnumMachinesH = *opaque{};
        pub const PdhEnumObjectsH = *opaque{};
        pub const PdhEnumObjectItemsH = *opaque{};
        pub const PdhExpandWildCardPathH = *opaque{};
        pub const PdhGetDefaultPerfObjectH = *opaque{};
        pub const PdhGetDefaultPerfCounterH = *opaque{};
        pub const PdhBrowseCountersH = *opaque{};
        pub const PdhVerifySQLDB = *opaque{};
        pub const PdhCreateSQLTables = *opaque{};
        pub const PdhEnumLogSetNames = *opaque{};
    } else struct {
        pub const PDH_RAW_COUNTER_ITEM_ = @compileError("'PDH_RAW_COUNTER_ITEM_' requires that UNICODE be set to true or false in the root module");
        pub const PDH_FMT_COUNTERVALUE_ITEM_ = @compileError("'PDH_FMT_COUNTERVALUE_ITEM_' requires that UNICODE be set to true or false in the root module");
        pub const PDH_COUNTER_PATH_ELEMENTS_ = @compileError("'PDH_COUNTER_PATH_ELEMENTS_' requires that UNICODE be set to true or false in the root module");
        pub const PDH_DATA_ITEM_PATH_ELEMENTS_ = @compileError("'PDH_DATA_ITEM_PATH_ELEMENTS_' requires that UNICODE be set to true or false in the root module");
        pub const PDH_COUNTER_INFO_ = @compileError("'PDH_COUNTER_INFO_' requires that UNICODE be set to true or false in the root module");
        pub const PDH_LOG_SERVICE_QUERY_INFO_ = @compileError("'PDH_LOG_SERVICE_QUERY_INFO_' requires that UNICODE be set to true or false in the root module");
        pub const PDH_BROWSE_DLG_CONFIG_H = @compileError("'PDH_BROWSE_DLG_CONFIG_H' requires that UNICODE be set to true or false in the root module");
        pub const PDH_BROWSE_DLG_CONFIG_ = @compileError("'PDH_BROWSE_DLG_CONFIG_' requires that UNICODE be set to true or false in the root module");
        pub const LoadPerfCounterTextStrings = @compileError("'LoadPerfCounterTextStrings' requires that UNICODE be set to true or false in the root module");
        pub const UnloadPerfCounterTextStrings = @compileError("'UnloadPerfCounterTextStrings' requires that UNICODE be set to true or false in the root module");
        pub const UpdatePerfNameFiles = @compileError("'UpdatePerfNameFiles' requires that UNICODE be set to true or false in the root module");
        pub const SetServiceAsTrusted = @compileError("'SetServiceAsTrusted' requires that UNICODE be set to true or false in the root module");
        pub const PdhOpenQuery = @compileError("'PdhOpenQuery' requires that UNICODE be set to true or false in the root module");
        pub const PdhAddCounter = @compileError("'PdhAddCounter' requires that UNICODE be set to true or false in the root module");
        pub const PdhAddEnglishCounter = @compileError("'PdhAddEnglishCounter' requires that UNICODE be set to true or false in the root module");
        pub const PdhValidatePathEx = @compileError("'PdhValidatePathEx' requires that UNICODE be set to true or false in the root module");
        pub const PdhGetFormattedCounterArray = @compileError("'PdhGetFormattedCounterArray' requires that UNICODE be set to true or false in the root module");
        pub const PdhGetRawCounterArray = @compileError("'PdhGetRawCounterArray' requires that UNICODE be set to true or false in the root module");
        pub const PdhGetCounterInfo = @compileError("'PdhGetCounterInfo' requires that UNICODE be set to true or false in the root module");
        pub const PdhConnectMachine = @compileError("'PdhConnectMachine' requires that UNICODE be set to true or false in the root module");
        pub const PdhEnumMachines = @compileError("'PdhEnumMachines' requires that UNICODE be set to true or false in the root module");
        pub const PdhEnumObjects = @compileError("'PdhEnumObjects' requires that UNICODE be set to true or false in the root module");
        pub const PdhEnumObjectItems = @compileError("'PdhEnumObjectItems' requires that UNICODE be set to true or false in the root module");
        pub const PdhMakeCounterPath = @compileError("'PdhMakeCounterPath' requires that UNICODE be set to true or false in the root module");
        pub const PdhParseCounterPath = @compileError("'PdhParseCounterPath' requires that UNICODE be set to true or false in the root module");
        pub const PdhParseInstanceName = @compileError("'PdhParseInstanceName' requires that UNICODE be set to true or false in the root module");
        pub const PdhValidatePath = @compileError("'PdhValidatePath' requires that UNICODE be set to true or false in the root module");
        pub const PdhGetDefaultPerfObject = @compileError("'PdhGetDefaultPerfObject' requires that UNICODE be set to true or false in the root module");
        pub const PdhGetDefaultPerfCounter = @compileError("'PdhGetDefaultPerfCounter' requires that UNICODE be set to true or false in the root module");
        pub const PdhBrowseCounters = @compileError("'PdhBrowseCounters' requires that UNICODE be set to true or false in the root module");
        pub const PdhExpandCounterPath = @compileError("'PdhExpandCounterPath' requires that UNICODE be set to true or false in the root module");
        pub const PdhLookupPerfNameByIndex = @compileError("'PdhLookupPerfNameByIndex' requires that UNICODE be set to true or false in the root module");
        pub const PdhLookupPerfIndexByName = @compileError("'PdhLookupPerfIndexByName' requires that UNICODE be set to true or false in the root module");
        pub const PdhExpandWildCardPath = @compileError("'PdhExpandWildCardPath' requires that UNICODE be set to true or false in the root module");
        pub const PdhOpenLog = @compileError("'PdhOpenLog' requires that UNICODE be set to true or false in the root module");
        pub const PdhUpdateLog = @compileError("'PdhUpdateLog' requires that UNICODE be set to true or false in the root module");
        pub const PdhSelectDataSource = @compileError("'PdhSelectDataSource' requires that UNICODE be set to true or false in the root module");
        pub const PdhGetDataSourceTimeRange = @compileError("'PdhGetDataSourceTimeRange' requires that UNICODE be set to true or false in the root module");
        pub const PdhBindInputDataSource = @compileError("'PdhBindInputDataSource' requires that UNICODE be set to true or false in the root module");
        pub const PdhEnumMachinesH = @compileError("'PdhEnumMachinesH' requires that UNICODE be set to true or false in the root module");
        pub const PdhEnumObjectsH = @compileError("'PdhEnumObjectsH' requires that UNICODE be set to true or false in the root module");
        pub const PdhEnumObjectItemsH = @compileError("'PdhEnumObjectItemsH' requires that UNICODE be set to true or false in the root module");
        pub const PdhExpandWildCardPathH = @compileError("'PdhExpandWildCardPathH' requires that UNICODE be set to true or false in the root module");
        pub const PdhGetDefaultPerfObjectH = @compileError("'PdhGetDefaultPerfObjectH' requires that UNICODE be set to true or false in the root module");
        pub const PdhGetDefaultPerfCounterH = @compileError("'PdhGetDefaultPerfCounterH' requires that UNICODE be set to true or false in the root module");
        pub const PdhBrowseCountersH = @compileError("'PdhBrowseCountersH' requires that UNICODE be set to true or false in the root module");
        pub const PdhVerifySQLDB = @compileError("'PdhVerifySQLDB' requires that UNICODE be set to true or false in the root module");
        pub const PdhCreateSQLTables = @compileError("'PdhCreateSQLTables' requires that UNICODE be set to true or false in the root module");
        pub const PdhEnumLogSetNames = @compileError("'PdhEnumLogSetNames' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (8)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const FILETIME = @import("windows_programming.zig").FILETIME;
const PWSTR = @import("system_services.zig").PWSTR;
const SYSTEMTIME = @import("windows_programming.zig").SYSTEMTIME;
const HANDLE = @import("system_services.zig").HANDLE;
const PSTR = @import("system_services.zig").PSTR;
const BOOL = @import("system_services.zig").BOOL;
const HWND = @import("windows_and_messaging.zig").HWND;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "PERFLIBREQUEST")) { _ = PERFLIBREQUEST; }
    if (@hasDecl(@This(), "PERF_MEM_ALLOC")) { _ = PERF_MEM_ALLOC; }
    if (@hasDecl(@This(), "PERF_MEM_FREE")) { _ = PERF_MEM_FREE; }
    if (@hasDecl(@This(), "CounterPathCallBack")) { _ = CounterPathCallBack; }

    @setEvalBranchQuota(
        @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("std").builtin.is_test) return;
    inline for (@import("std").meta.declarations(@This())) |decl| {
        if (decl.is_pub) {
            _ = decl;
        }
    }
}
