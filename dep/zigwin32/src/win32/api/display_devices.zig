//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (242)
//--------------------------------------------------------------------------------
pub const DD_GETHEAPALIGNMENTDATA = extern struct {
    comment: [*]const u8 = "TODO: why is this struct empty?"
};

pub usingnamespace switch (@import("../zig.zig").arch) {
.X64, .Arm64 => struct {

pub const IFIMETRICS = extern struct {
    cjThis: u32,
    cjIfiExtra: u32,
    dpwszFamilyName: i32,
    dpwszStyleName: i32,
    dpwszFaceName: i32,
    dpwszUniqueName: i32,
    dpFontSim: i32,
    lEmbedId: i32,
    lItalicAngle: i32,
    lCharBias: i32,
    dpCharSets: i32,
    jWinCharSet: u8,
    jWinPitchAndFamily: u8,
    usWinWeight: u16,
    flInfo: u32,
    fsSelection: u16,
    fsType: u16,
    fwdUnitsPerEm: i16,
    fwdLowestPPEm: i16,
    fwdWinAscender: i16,
    fwdWinDescender: i16,
    fwdMacAscender: i16,
    fwdMacDescender: i16,
    fwdMacLineGap: i16,
    fwdTypoAscender: i16,
    fwdTypoDescender: i16,
    fwdTypoLineGap: i16,
    fwdAveCharWidth: i16,
    fwdMaxCharInc: i16,
    fwdCapHeight: i16,
    fwdXHeight: i16,
    fwdSubscriptXSize: i16,
    fwdSubscriptYSize: i16,
    fwdSubscriptXOffset: i16,
    fwdSubscriptYOffset: i16,
    fwdSuperscriptXSize: i16,
    fwdSuperscriptYSize: i16,
    fwdSuperscriptXOffset: i16,
    fwdSuperscriptYOffset: i16,
    fwdUnderscoreSize: i16,
    fwdUnderscorePosition: i16,
    fwdStrikeoutSize: i16,
    fwdStrikeoutPosition: i16,
    chFirstChar: u8,
    chLastChar: u8,
    chDefaultChar: u8,
    chBreakChar: u8,
    wcFirstChar: u16,
    wcLastChar: u16,
    wcDefaultChar: u16,
    wcBreakChar: u16,
    ptlBaseline: POINTL,
    ptlAspect: POINTL,
    ptlCaret: POINTL,
    rclFontBox: RECTL,
    achVendId: [4]u8,
    cKerningPairs: u32,
    ulPanoseCulture: u32,
    panose: PANOSE,
    Align: *c_void,
};

}, else => struct { } };

pub const RECT = extern struct {
    left: i32,
    top: i32,
    right: i32,
    bottom: i32,
};

pub const RECTL = extern struct {
    left: i32,
    top: i32,
    right: i32,
    bottom: i32,
};

pub const POINT = extern struct {
    x: i32,
    y: i32,
};

pub const POINTL = extern struct {
    x: i32,
    y: i32,
};

pub const SIZE = extern struct {
    cx: i32,
    cy: i32,
};

pub const POINTS = extern struct {
    x: i16,
    y: i16,
};

pub const DDVIDEOPORTCAPS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwMaxWidth: u32,
    dwMaxVBIWidth: u32,
    dwMaxHeight: u32,
    dwVideoPortID: u32,
    dwCaps: u32,
    dwFX: u32,
    dwNumAutoFlipSurfaces: u32,
    dwAlignVideoPortBoundary: u32,
    dwAlignVideoPortPrescaleWidth: u32,
    dwAlignVideoPortCropBoundary: u32,
    dwAlignVideoPortCropWidth: u32,
    dwPreshrinkXStep: u32,
    dwPreshrinkYStep: u32,
    dwNumVBIAutoFlipSurfaces: u32,
    dwNumPreferredAutoflip: u32,
    wNumFilterTapsX: u16,
    wNumFilterTapsY: u16,
};

pub const DDVIDEOPORTDESC = extern struct {
    dwSize: u32,
    dwFieldWidth: u32,
    dwVBIWidth: u32,
    dwFieldHeight: u32,
    dwMicrosecondsPerField: u32,
    dwMaxPixelsPerSecond: u32,
    dwVideoPortID: u32,
    dwReserved1: u32,
    VideoPortType: DDVIDEOPORTCONNECT,
    dwReserved2: usize,
    dwReserved3: usize,
};

pub const DDVIDEOPORTINFO = extern struct {
    dwSize: u32,
    dwOriginX: u32,
    dwOriginY: u32,
    dwVPFlags: u32,
    rCrop: RECT,
    dwPrescaleWidth: u32,
    dwPrescaleHeight: u32,
    lpddpfInputFormat: *DDPIXELFORMAT,
    lpddpfVBIInputFormat: *DDPIXELFORMAT,
    lpddpfVBIOutputFormat: *DDPIXELFORMAT,
    dwVBIHeight: u32,
    dwReserved1: usize,
    dwReserved2: usize,
};

pub const DDVIDEOPORTBANDWIDTH = extern struct {
    dwSize: u32,
    dwCaps: u32,
    dwOverlay: u32,
    dwColorkey: u32,
    dwYInterpolate: u32,
    dwYInterpAndColorkey: u32,
    dwReserved1: usize,
    dwReserved2: usize,
};

pub const VIDEOMEMORY = extern struct {
    dwFlags: u32,
    fpStart: usize,
    Anonymous1: _Anonymous1_e__Union,
    ddsCaps: DDSCAPS,
    ddsCapsAlt: DDSCAPS,
    Anonymous2: _Anonymous2_e__Union,
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
};

pub const VIDEOMEMORYINFO = extern struct {
    fpPrimary: usize,
    dwFlags: u32,
    dwDisplayWidth: u32,
    dwDisplayHeight: u32,
    lDisplayPitch: i32,
    ddpfDisplay: DDPIXELFORMAT,
    dwOffscreenAlign: u32,
    dwOverlayAlign: u32,
    dwTextureAlign: u32,
    dwZBufferAlign: u32,
    dwAlphaAlign: u32,
    pvPrimary: *c_void,
};

pub const PDD_CANCREATESURFACE = fn(
    param0: *DD_CANCREATESURFACEDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDD_WAITFORVERTICALBLANK = fn(
    param0: *DD_WAITFORVERTICALBLANKDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDD_CREATESURFACE = fn(
    param0: *DD_CREATESURFACEDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDD_CREATEPALETTE = fn(
    param0: *DD_CREATEPALETTEDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDD_GETSCANLINE = fn(
    param0: *DD_GETSCANLINEDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDD_MAPMEMORY = fn(
    param0: *DD_MAPMEMORYDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDD_GETDRIVERINFO = fn(
    param0: *DD_GETDRIVERINFODATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const DD_CALLBACKS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    DestroyDriver: PDD_DESTROYDRIVER,
    CreateSurface: PDD_CREATESURFACE,
    SetColorKey: PDD_SETCOLORKEY,
    SetMode: PDD_SETMODE,
    WaitForVerticalBlank: PDD_WAITFORVERTICALBLANK,
    CanCreateSurface: PDD_CANCREATESURFACE,
    CreatePalette: PDD_CREATEPALETTE,
    GetScanLine: PDD_GETSCANLINE,
    MapMemory: PDD_MAPMEMORY,
};

pub const PDD_GETAVAILDRIVERMEMORY = fn(
    param0: *DD_GETAVAILDRIVERMEMORYDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const DD_MISCELLANEOUSCALLBACKS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    GetAvailDriverMemory: PDD_GETAVAILDRIVERMEMORY,
};

pub const PDD_CREATESURFACEEX = fn(
    param0: *DD_CREATESURFACEEXDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDD_GETDRIVERSTATE = fn(
    param0: *DD_GETDRIVERSTATEDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDD_DESTROYDDLOCAL = fn(
    param0: *DD_DESTROYDDLOCALDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const DD_MISCELLANEOUS2CALLBACKS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    AlphaBlt: PDD_ALPHABLT,
    CreateSurfaceEx: PDD_CREATESURFACEEX,
    GetDriverState: PDD_GETDRIVERSTATE,
    DestroyDDLocal: PDD_DESTROYDDLOCAL,
};

pub const PDD_FREEDRIVERMEMORY = fn(
    param0: *DD_FREEDRIVERMEMORYDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDD_SETEXCLUSIVEMODE = fn(
    param0: *DD_SETEXCLUSIVEMODEDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDD_FLIPTOGDISURFACE = fn(
    param0: *DD_FLIPTOGDISURFACEDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const DD_NTCALLBACKS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    FreeDriverMemory: PDD_FREEDRIVERMEMORY,
    SetExclusiveMode: PDD_SETEXCLUSIVEMODE,
    FlipToGDISurface: PDD_FLIPTOGDISURFACE,
};

pub const PDD_PALCB_DESTROYPALETTE = fn(
    param0: *DD_DESTROYPALETTEDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDD_PALCB_SETENTRIES = fn(
    param0: *DD_SETENTRIESDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const DD_PALETTECALLBACKS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    DestroyPalette: PDD_PALCB_DESTROYPALETTE,
    SetEntries: PDD_PALCB_SETENTRIES,
};

pub const PDD_SURFCB_LOCK = fn(
    param0: *DD_LOCKDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDD_SURFCB_UNLOCK = fn(
    param0: *DD_UNLOCKDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDD_SURFCB_BLT = fn(
    param0: *DD_BLTDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDD_SURFCB_UPDATEOVERLAY = fn(
    param0: *DD_UPDATEOVERLAYDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDD_SURFCB_SETOVERLAYPOSITION = fn(
    param0: *DD_SETOVERLAYPOSITIONDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDD_SURFCB_SETPALETTE = fn(
    param0: *DD_SETPALETTEDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDD_SURFCB_FLIP = fn(
    param0: *DD_FLIPDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDD_SURFCB_DESTROYSURFACE = fn(
    param0: *DD_DESTROYSURFACEDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDD_SURFCB_ADDATTACHEDSURFACE = fn(
    param0: *DD_ADDATTACHEDSURFACEDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDD_SURFCB_SETCOLORKEY = fn(
    param0: *DD_SETCOLORKEYDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDD_SURFCB_GETBLTSTATUS = fn(
    param0: *DD_GETBLTSTATUSDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDD_SURFCB_GETFLIPSTATUS = fn(
    param0: *DD_GETFLIPSTATUSDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const DD_SURFACECALLBACKS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    DestroySurface: PDD_SURFCB_DESTROYSURFACE,
    Flip: PDD_SURFCB_FLIP,
    SetClipList: PDD_SURFCB_SETCLIPLIST,
    Lock: PDD_SURFCB_LOCK,
    Unlock: PDD_SURFCB_UNLOCK,
    Blt: PDD_SURFCB_BLT,
    SetColorKey: PDD_SURFCB_SETCOLORKEY,
    AddAttachedSurface: PDD_SURFCB_ADDATTACHEDSURFACE,
    GetBltStatus: PDD_SURFCB_GETBLTSTATUS,
    GetFlipStatus: PDD_SURFCB_GETFLIPSTATUS,
    UpdateOverlay: PDD_SURFCB_UPDATEOVERLAY,
    SetOverlayPosition: PDD_SURFCB_SETOVERLAYPOSITION,
    reserved4: *c_void,
    SetPalette: PDD_SURFCB_SETPALETTE,
};

pub const PDD_VPORTCB_CANCREATEVIDEOPORT = fn(
    param0: *DD_CANCREATEVPORTDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDD_VPORTCB_CREATEVIDEOPORT = fn(
    param0: *DD_CREATEVPORTDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDD_VPORTCB_FLIP = fn(
    param0: *DD_FLIPVPORTDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDD_VPORTCB_GETBANDWIDTH = fn(
    param0: *DD_GETVPORTBANDWIDTHDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDD_VPORTCB_GETINPUTFORMATS = fn(
    param0: *DD_GETVPORTINPUTFORMATDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDD_VPORTCB_GETOUTPUTFORMATS = fn(
    param0: *DD_GETVPORTOUTPUTFORMATDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDD_VPORTCB_GETFIELD = fn(
    param0: *DD_GETVPORTFIELDDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDD_VPORTCB_GETLINE = fn(
    param0: *DD_GETVPORTLINEDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDD_VPORTCB_GETVPORTCONNECT = fn(
    param0: *DD_GETVPORTCONNECTDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDD_VPORTCB_DESTROYVPORT = fn(
    param0: *DD_DESTROYVPORTDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDD_VPORTCB_GETFLIPSTATUS = fn(
    param0: *DD_GETVPORTFLIPSTATUSDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDD_VPORTCB_UPDATE = fn(
    param0: *DD_UPDATEVPORTDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDD_VPORTCB_WAITFORSYNC = fn(
    param0: *DD_WAITFORVPORTSYNCDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDD_VPORTCB_GETSIGNALSTATUS = fn(
    param0: *DD_GETVPORTSIGNALDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDD_VPORTCB_COLORCONTROL = fn(
    param0: *DD_VPORTCOLORDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const DD_VIDEOPORTCALLBACKS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    CanCreateVideoPort: PDD_VPORTCB_CANCREATEVIDEOPORT,
    CreateVideoPort: PDD_VPORTCB_CREATEVIDEOPORT,
    FlipVideoPort: PDD_VPORTCB_FLIP,
    GetVideoPortBandwidth: PDD_VPORTCB_GETBANDWIDTH,
    GetVideoPortInputFormats: PDD_VPORTCB_GETINPUTFORMATS,
    GetVideoPortOutputFormats: PDD_VPORTCB_GETOUTPUTFORMATS,
    lpReserved1: *c_void,
    GetVideoPortField: PDD_VPORTCB_GETFIELD,
    GetVideoPortLine: PDD_VPORTCB_GETLINE,
    GetVideoPortConnectInfo: PDD_VPORTCB_GETVPORTCONNECT,
    DestroyVideoPort: PDD_VPORTCB_DESTROYVPORT,
    GetVideoPortFlipStatus: PDD_VPORTCB_GETFLIPSTATUS,
    UpdateVideoPort: PDD_VPORTCB_UPDATE,
    WaitForVideoPortSync: PDD_VPORTCB_WAITFORSYNC,
    GetVideoSignalStatus: PDD_VPORTCB_GETSIGNALSTATUS,
    ColorControl: PDD_VPORTCB_COLORCONTROL,
};

pub const PDD_COLORCB_COLORCONTROL = fn(
    param0: *DD_COLORCONTROLDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const DD_COLORCONTROLCALLBACKS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    ColorControl: PDD_COLORCB_COLORCONTROL,
};

pub const PDD_KERNELCB_SYNCSURFACE = fn(
    param0: *DD_SYNCSURFACEDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDD_KERNELCB_SYNCVIDEOPORT = fn(
    param0: *DD_SYNCVIDEOPORTDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const DD_KERNELCALLBACKS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    SyncSurfaceData: PDD_KERNELCB_SYNCSURFACE,
    SyncVideoPortData: PDD_KERNELCB_SYNCVIDEOPORT,
};

pub const PDD_MOCOMPCB_GETGUIDS = fn(
    param0: *DD_GETMOCOMPGUIDSDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDD_MOCOMPCB_GETFORMATS = fn(
    param0: *DD_GETMOCOMPFORMATSDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDD_MOCOMPCB_CREATE = fn(
    param0: *DD_CREATEMOCOMPDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDD_MOCOMPCB_GETCOMPBUFFINFO = fn(
    param0: *DD_GETMOCOMPCOMPBUFFDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDD_MOCOMPCB_GETINTERNALINFO = fn(
    param0: *DD_GETINTERNALMOCOMPDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDD_MOCOMPCB_BEGINFRAME = fn(
    param0: *DD_BEGINMOCOMPFRAMEDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDD_MOCOMPCB_ENDFRAME = fn(
    param0: *DD_ENDMOCOMPFRAMEDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDD_MOCOMPCB_RENDER = fn(
    param0: *DD_RENDERMOCOMPDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDD_MOCOMPCB_QUERYSTATUS = fn(
    param0: *DD_QUERYMOCOMPSTATUSDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDD_MOCOMPCB_DESTROY = fn(
    param0: *DD_DESTROYMOCOMPDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const DD_MOTIONCOMPCALLBACKS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    GetMoCompGuids: PDD_MOCOMPCB_GETGUIDS,
    GetMoCompFormats: PDD_MOCOMPCB_GETFORMATS,
    CreateMoComp: PDD_MOCOMPCB_CREATE,
    GetMoCompBuffInfo: PDD_MOCOMPCB_GETCOMPBUFFINFO,
    GetInternalMoCompInfo: PDD_MOCOMPCB_GETINTERNALINFO,
    BeginMoCompFrame: PDD_MOCOMPCB_BEGINFRAME,
    EndMoCompFrame: PDD_MOCOMPCB_ENDFRAME,
    RenderMoComp: PDD_MOCOMPCB_RENDER,
    QueryMoCompStatus: PDD_MOCOMPCB_QUERYSTATUS,
    DestroyMoComp: PDD_MOCOMPCB_DESTROY,
};

pub const DD_NONLOCALVIDMEMCAPS = extern struct {
    dwSize: u32,
    dwNLVBCaps: u32,
    dwNLVBCaps2: u32,
    dwNLVBCKeyCaps: u32,
    dwNLVBFXCaps: u32,
    dwNLVBRops: [8]u32,
};

pub const DD_PALETTE_GLOBAL = extern struct {
    dwReserved1: usize,
};

pub const DD_PALETTE_LOCAL = extern struct {
    dwReserved0: u32,
    dwReserved1: usize,
};

pub const DD_CLIPPER_GLOBAL = extern struct {
    dwReserved1: usize,
};

pub const DD_CLIPPER_LOCAL = extern struct {
    dwReserved1: usize,
};

pub const DD_ATTACHLIST = extern struct {
    lpLink: *DD_ATTACHLIST,
    lpAttached: *DD_SURFACE_LOCAL,
};

pub const DD_SURFACE_INT = extern struct {
    lpLcl: *DD_SURFACE_LOCAL,
};

pub const DD_SURFACE_GLOBAL = extern struct {
    Anonymous1: _Anonymous1_e__Union,
    Anonymous2: _Anonymous2_e__Union,
    fpVidMem: usize,
    Anonymous3: _Anonymous3_e__Union,
    yHint: i32,
    xHint: i32,
    wHeight: u32,
    wWidth: u32,
    dwReserved1: usize,
    ddpfSurface: DDPIXELFORMAT,
    fpHeapOffset: usize,
    hCreatorProcess: HANDLE,
    const _Anonymous3_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
};

pub const DD_SURFACE_MORE = extern struct {
    dwMipMapCount: u32,
    lpVideoPort: *DD_VIDEOPORT_LOCAL,
    dwOverlayFlags: u32,
    ddsCapsEx: DDSCAPSEX,
    dwSurfaceHandle: u32,
};

pub const DD_SURFACE_LOCAL = extern struct {
    lpGbl: *DD_SURFACE_GLOBAL,
    dwFlags: u32,
    ddsCaps: DDSCAPS,
    dwReserved1: usize,
    Anonymous1: _Anonymous1_e__Union,
    Anonymous2: _Anonymous2_e__Union,
    lpSurfMore: *DD_SURFACE_MORE,
    lpAttachList: *DD_ATTACHLIST,
    lpAttachListFrom: *DD_ATTACHLIST,
    rcOverlaySrc: RECT,
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
};

pub const DD_D3DBUFCALLBACKS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    CanCreateD3DBuffer: PDD_CANCREATESURFACE,
    CreateD3DBuffer: PDD_CREATESURFACE,
    DestroyD3DBuffer: PDD_SURFCB_DESTROYSURFACE,
    LockD3DBuffer: PDD_SURFCB_LOCK,
    UnlockD3DBuffer: PDD_SURFCB_UNLOCK,
};

pub const DD_HALINFO = extern struct {
    dwSize: u32,
    vmiData: VIDEOMEMORYINFO,
    ddCaps: DDNTCORECAPS,
    GetDriverInfo: PDD_GETDRIVERINFO,
    dwFlags: u32,
    lpD3DGlobalDriverData: *c_void,
    lpD3DHALCallbacks: *c_void,
    lpD3DBufCallbacks: *DD_D3DBUFCALLBACKS,
};

pub const DD_DIRECTDRAW_GLOBAL = extern struct {
    dhpdev: *c_void,
    dwReserved1: usize,
    dwReserved2: usize,
    lpDDVideoPortCaps: *DDVIDEOPORTCAPS,
};

pub const DD_DIRECTDRAW_LOCAL = extern struct {
    lpGbl: *DD_DIRECTDRAW_GLOBAL,
};

pub const DD_VIDEOPORT_LOCAL = extern struct {
    lpDD: *DD_DIRECTDRAW_LOCAL,
    ddvpDesc: DDVIDEOPORTDESC,
    ddvpInfo: DDVIDEOPORTINFO,
    lpSurface: *DD_SURFACE_INT,
    lpVBISurface: *DD_SURFACE_INT,
    dwNumAutoflip: u32,
    dwNumVBIAutoflip: u32,
    dwReserved1: usize,
    dwReserved2: usize,
    dwReserved3: usize,
};

pub const DD_MOTIONCOMP_LOCAL = extern struct {
    lpDD: *DD_DIRECTDRAW_LOCAL,
    guid: Guid,
    dwUncompWidth: u32,
    dwUncompHeight: u32,
    ddUncompPixelFormat: DDPIXELFORMAT,
    dwDriverReserved1: u32,
    dwDriverReserved2: u32,
    dwDriverReserved3: u32,
    lpDriverReserved1: *c_void,
    lpDriverReserved2: *c_void,
    lpDriverReserved3: *c_void,
};

pub const DD_MORESURFACECAPS = extern struct {
    dwSize: u32,
    ddsCapsMore: DDSCAPSEX,
    ddsExtendedHeapRestrictions: [1]NTExtendedHeapRestrictions,
    const NTExtendedHeapRestrictions = u32; // TODO: generate this nested type!
};

pub const DD_STEREOMODE = extern struct {
    dwSize: u32,
    dwHeight: u32,
    dwWidth: u32,
    dwBpp: u32,
    dwRefreshRate: u32,
    bSupported: BOOL,
};

pub const DD_UPDATENONLOCALHEAPDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_GLOBAL,
    dwHeap: u32,
    fpGARTLin: usize,
    fpGARTDev: usize,
    ulPolicyMaxBytes: usize,
    ddRVal: HRESULT,
    UpdateNonLocalHeap: *c_void,
};

pub const DD_NTPRIVATEDRIVERCAPS = extern struct {
    dwSize: u32,
    dwPrivateCaps: u32,
};

pub const DD_BLTDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_GLOBAL,
    lpDDDestSurface: *DD_SURFACE_LOCAL,
    rDest: RECTL,
    lpDDSrcSurface: *DD_SURFACE_LOCAL,
    rSrc: RECTL,
    dwFlags: u32,
    dwROPFlags: u32,
    bltFX: DDBLTFX,
    ddRVal: HRESULT,
    Blt: *c_void,
    IsClipped: BOOL,
    rOrigDest: RECTL,
    rOrigSrc: RECTL,
    dwRectCnt: u32,
    prDestRects: *RECT,
    dwAFlags: u32,
    ddargbScaleFactors: DDARGB,
};

pub const DD_LOCKDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_GLOBAL,
    lpDDSurface: *DD_SURFACE_LOCAL,
    bHasRect: u32,
    rArea: RECTL,
    lpSurfData: *c_void,
    ddRVal: HRESULT,
    Lock: *c_void,
    dwFlags: u32,
    fpProcess: usize,
};

pub const DD_UNLOCKDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_GLOBAL,
    lpDDSurface: *DD_SURFACE_LOCAL,
    ddRVal: HRESULT,
    Unlock: *c_void,
};

pub const DD_UPDATEOVERLAYDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_GLOBAL,
    lpDDDestSurface: *DD_SURFACE_LOCAL,
    rDest: RECTL,
    lpDDSrcSurface: *DD_SURFACE_LOCAL,
    rSrc: RECTL,
    dwFlags: u32,
    overlayFX: DDOVERLAYFX,
    ddRVal: HRESULT,
    UpdateOverlay: *c_void,
};

pub const DD_SETOVERLAYPOSITIONDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_GLOBAL,
    lpDDSrcSurface: *DD_SURFACE_LOCAL,
    lpDDDestSurface: *DD_SURFACE_LOCAL,
    lXPos: i32,
    lYPos: i32,
    ddRVal: HRESULT,
    SetOverlayPosition: *c_void,
};

pub const DD_SETPALETTEDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_GLOBAL,
    lpDDSurface: *DD_SURFACE_LOCAL,
    lpDDPalette: *DD_PALETTE_GLOBAL,
    ddRVal: HRESULT,
    SetPalette: *c_void,
    Attach: BOOL,
};

pub const DD_FLIPDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_GLOBAL,
    lpSurfCurr: *DD_SURFACE_LOCAL,
    lpSurfTarg: *DD_SURFACE_LOCAL,
    dwFlags: u32,
    ddRVal: HRESULT,
    Flip: *c_void,
    lpSurfCurrLeft: *DD_SURFACE_LOCAL,
    lpSurfTargLeft: *DD_SURFACE_LOCAL,
};

pub const DD_DESTROYSURFACEDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_GLOBAL,
    lpDDSurface: *DD_SURFACE_LOCAL,
    ddRVal: HRESULT,
    DestroySurface: *c_void,
};

pub const DD_ADDATTACHEDSURFACEDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_GLOBAL,
    lpDDSurface: *DD_SURFACE_LOCAL,
    lpSurfAttached: *DD_SURFACE_LOCAL,
    ddRVal: HRESULT,
    AddAttachedSurface: *c_void,
};

pub const DD_SETCOLORKEYDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_GLOBAL,
    lpDDSurface: *DD_SURFACE_LOCAL,
    dwFlags: u32,
    ckNew: DDCOLORKEY,
    ddRVal: HRESULT,
    SetColorKey: *c_void,
};

pub const DD_GETBLTSTATUSDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_GLOBAL,
    lpDDSurface: *DD_SURFACE_LOCAL,
    dwFlags: u32,
    ddRVal: HRESULT,
    GetBltStatus: *c_void,
};

pub const DD_GETFLIPSTATUSDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_GLOBAL,
    lpDDSurface: *DD_SURFACE_LOCAL,
    dwFlags: u32,
    ddRVal: HRESULT,
    GetFlipStatus: *c_void,
};

pub const DD_DESTROYPALETTEDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_GLOBAL,
    lpDDPalette: *DD_PALETTE_GLOBAL,
    ddRVal: HRESULT,
    DestroyPalette: *c_void,
};

pub const DD_SETENTRIESDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_GLOBAL,
    lpDDPalette: *DD_PALETTE_GLOBAL,
    dwBase: u32,
    dwNumEntries: u32,
    lpEntries: *PALETTEENTRY,
    ddRVal: HRESULT,
    SetEntries: *c_void,
};

pub const DD_CREATESURFACEDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_GLOBAL,
    lpDDSurfaceDesc: *DDSURFACEDESC,
    lplpSList: **DD_SURFACE_LOCAL,
    dwSCnt: u32,
    ddRVal: HRESULT,
    CreateSurface: *c_void,
};

pub const DD_CANCREATESURFACEDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_GLOBAL,
    lpDDSurfaceDesc: *DDSURFACEDESC,
    bIsDifferentPixelFormat: u32,
    ddRVal: HRESULT,
    CanCreateSurface: *c_void,
};

pub const DD_CREATEPALETTEDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_GLOBAL,
    lpDDPalette: *DD_PALETTE_GLOBAL,
    lpColorTable: *PALETTEENTRY,
    ddRVal: HRESULT,
    CreatePalette: *c_void,
    is_excl: BOOL,
};

pub const DD_WAITFORVERTICALBLANKDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_GLOBAL,
    dwFlags: u32,
    bIsInVB: u32,
    hEvent: usize,
    ddRVal: HRESULT,
    WaitForVerticalBlank: *c_void,
};

pub const DD_GETSCANLINEDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_GLOBAL,
    dwScanLine: u32,
    ddRVal: HRESULT,
    GetScanLine: *c_void,
};

pub const DD_MAPMEMORYDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_GLOBAL,
    bMap: BOOL,
    hProcess: HANDLE,
    fpProcess: usize,
    ddRVal: HRESULT,
};

pub const DD_CANCREATEVPORTDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_LOCAL,
    lpDDVideoPortDesc: *DDVIDEOPORTDESC,
    ddRVal: HRESULT,
    CanCreateVideoPort: *c_void,
};

pub const DD_CREATEVPORTDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_LOCAL,
    lpDDVideoPortDesc: *DDVIDEOPORTDESC,
    lpVideoPort: *DD_VIDEOPORT_LOCAL,
    ddRVal: HRESULT,
    CreateVideoPort: *c_void,
};

pub const DD_FLIPVPORTDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_LOCAL,
    lpVideoPort: *DD_VIDEOPORT_LOCAL,
    lpSurfCurr: *DD_SURFACE_LOCAL,
    lpSurfTarg: *DD_SURFACE_LOCAL,
    ddRVal: HRESULT,
    FlipVideoPort: *c_void,
};

pub const DD_GETVPORTBANDWIDTHDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_LOCAL,
    lpVideoPort: *DD_VIDEOPORT_LOCAL,
    lpddpfFormat: *DDPIXELFORMAT,
    dwWidth: u32,
    dwHeight: u32,
    dwFlags: u32,
    lpBandwidth: *DDVIDEOPORTBANDWIDTH,
    ddRVal: HRESULT,
    GetVideoPortBandwidth: *c_void,
};

pub const DD_GETVPORTINPUTFORMATDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_LOCAL,
    lpVideoPort: *DD_VIDEOPORT_LOCAL,
    dwFlags: u32,
    lpddpfFormat: *DDPIXELFORMAT,
    dwNumFormats: u32,
    ddRVal: HRESULT,
    GetVideoPortInputFormats: *c_void,
};

pub const DD_GETVPORTOUTPUTFORMATDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_LOCAL,
    lpVideoPort: *DD_VIDEOPORT_LOCAL,
    dwFlags: u32,
    lpddpfInputFormat: *DDPIXELFORMAT,
    lpddpfOutputFormats: *DDPIXELFORMAT,
    dwNumFormats: u32,
    ddRVal: HRESULT,
    GetVideoPortInputFormats: *c_void,
};

pub const DD_GETVPORTFIELDDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_LOCAL,
    lpVideoPort: *DD_VIDEOPORT_LOCAL,
    bField: BOOL,
    ddRVal: HRESULT,
    GetVideoPortField: *c_void,
};

pub const DD_GETVPORTLINEDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_LOCAL,
    lpVideoPort: *DD_VIDEOPORT_LOCAL,
    dwLine: u32,
    ddRVal: HRESULT,
    GetVideoPortLine: *c_void,
};

pub const DD_GETVPORTCONNECTDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_LOCAL,
    dwPortId: u32,
    lpConnect: *DDVIDEOPORTCONNECT,
    dwNumEntries: u32,
    ddRVal: HRESULT,
    GetVideoPortConnectInfo: *c_void,
};

pub const DD_DESTROYVPORTDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_LOCAL,
    lpVideoPort: *DD_VIDEOPORT_LOCAL,
    ddRVal: HRESULT,
    DestroyVideoPort: *c_void,
};

pub const DD_GETVPORTFLIPSTATUSDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_LOCAL,
    fpSurface: usize,
    ddRVal: HRESULT,
    GetVideoPortFlipStatus: *c_void,
};

pub const DD_UPDATEVPORTDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_LOCAL,
    lpVideoPort: *DD_VIDEOPORT_LOCAL,
    lplpDDSurface: **DD_SURFACE_INT,
    lplpDDVBISurface: **DD_SURFACE_INT,
    lpVideoInfo: *DDVIDEOPORTINFO,
    dwFlags: u32,
    dwNumAutoflip: u32,
    dwNumVBIAutoflip: u32,
    ddRVal: HRESULT,
    UpdateVideoPort: *c_void,
};

pub const DD_WAITFORVPORTSYNCDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_LOCAL,
    lpVideoPort: *DD_VIDEOPORT_LOCAL,
    dwFlags: u32,
    dwLine: u32,
    dwTimeOut: u32,
    ddRVal: HRESULT,
    UpdateVideoPort: *c_void,
};

pub const DD_GETVPORTSIGNALDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_LOCAL,
    lpVideoPort: *DD_VIDEOPORT_LOCAL,
    dwStatus: u32,
    ddRVal: HRESULT,
    GetVideoSignalStatus: *c_void,
};

pub const DD_VPORTCOLORDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_LOCAL,
    lpVideoPort: *DD_VIDEOPORT_LOCAL,
    dwFlags: u32,
    lpColorData: *DDCOLORCONTROL,
    ddRVal: HRESULT,
    ColorControl: *c_void,
};

pub const DD_COLORCONTROLDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_GLOBAL,
    lpDDSurface: *DD_SURFACE_LOCAL,
    lpColorData: *DDCOLORCONTROL,
    dwFlags: u32,
    ddRVal: HRESULT,
    ColorControl: *c_void,
};

pub const DD_GETDRIVERINFODATA = extern struct {
    dhpdev: *c_void,
    dwSize: u32,
    dwFlags: u32,
    guidInfo: Guid,
    dwExpectedSize: u32,
    lpvData: *c_void,
    dwActualSize: u32,
    ddRVal: HRESULT,
};

pub const DD_GETAVAILDRIVERMEMORYDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_GLOBAL,
    DDSCaps: DDSCAPS,
    dwTotal: u32,
    dwFree: u32,
    ddRVal: HRESULT,
    GetAvailDriverMemory: *c_void,
};

pub const DD_FREEDRIVERMEMORYDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_GLOBAL,
    lpDDSurface: *DD_SURFACE_LOCAL,
    ddRVal: HRESULT,
    FreeDriverMemory: *c_void,
};

pub const DD_SETEXCLUSIVEMODEDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_GLOBAL,
    dwEnterExcl: u32,
    dwReserved: u32,
    ddRVal: HRESULT,
    SetExclusiveMode: *c_void,
};

pub const DD_FLIPTOGDISURFACEDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_GLOBAL,
    dwToGDI: u32,
    dwReserved: u32,
    ddRVal: HRESULT,
    FlipToGDISurface: *c_void,
};

pub const DD_SYNCSURFACEDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_LOCAL,
    lpDDSurface: *DD_SURFACE_LOCAL,
    dwSurfaceOffset: u32,
    fpLockPtr: usize,
    lPitch: i32,
    dwOverlayOffset: u32,
    dwDriverReserved1: u32,
    dwDriverReserved2: u32,
    dwDriverReserved3: u32,
    dwDriverReserved4: u32,
    ddRVal: HRESULT,
};

pub const DD_SYNCVIDEOPORTDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_LOCAL,
    lpVideoPort: *DD_VIDEOPORT_LOCAL,
    dwOriginOffset: u32,
    dwHeight: u32,
    dwVBIHeight: u32,
    dwDriverReserved1: u32,
    dwDriverReserved2: u32,
    dwDriverReserved3: u32,
    ddRVal: HRESULT,
};

pub const DD_GETMOCOMPGUIDSDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_LOCAL,
    dwNumGuids: u32,
    lpGuids: *Guid,
    ddRVal: HRESULT,
};

pub const DD_GETMOCOMPFORMATSDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_LOCAL,
    lpGuid: *Guid,
    dwNumFormats: u32,
    lpFormats: *DDPIXELFORMAT,
    ddRVal: HRESULT,
};

pub const DD_CREATEMOCOMPDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_LOCAL,
    lpMoComp: *DD_MOTIONCOMP_LOCAL,
    lpGuid: *Guid,
    dwUncompWidth: u32,
    dwUncompHeight: u32,
    ddUncompPixelFormat: DDPIXELFORMAT,
    lpData: *c_void,
    dwDataSize: u32,
    ddRVal: HRESULT,
};

pub const DDCOMPBUFFERINFO = extern struct {
    dwSize: u32,
    dwNumCompBuffers: u32,
    dwWidthToCreate: u32,
    dwHeightToCreate: u32,
    dwBytesToAllocate: u32,
    ddCompCaps: DDSCAPS2,
    ddPixelFormat: DDPIXELFORMAT,
};

pub const DD_GETMOCOMPCOMPBUFFDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_LOCAL,
    lpGuid: *Guid,
    dwWidth: u32,
    dwHeight: u32,
    ddPixelFormat: DDPIXELFORMAT,
    dwNumTypesCompBuffs: u32,
    lpCompBuffInfo: *DDCOMPBUFFERINFO,
    ddRVal: HRESULT,
};

pub const DD_GETINTERNALMOCOMPDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_LOCAL,
    lpGuid: *Guid,
    dwWidth: u32,
    dwHeight: u32,
    ddPixelFormat: DDPIXELFORMAT,
    dwScratchMemAlloc: u32,
    ddRVal: HRESULT,
};

pub const DD_BEGINMOCOMPFRAMEDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_LOCAL,
    lpMoComp: *DD_MOTIONCOMP_LOCAL,
    lpDestSurface: *DD_SURFACE_LOCAL,
    dwInputDataSize: u32,
    lpInputData: *c_void,
    dwOutputDataSize: u32,
    lpOutputData: *c_void,
    ddRVal: HRESULT,
};

pub const DD_ENDMOCOMPFRAMEDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_LOCAL,
    lpMoComp: *DD_MOTIONCOMP_LOCAL,
    lpInputData: *c_void,
    dwInputDataSize: u32,
    ddRVal: HRESULT,
};

pub const DDMOCOMPBUFFERINFO = extern struct {
    dwSize: u32,
    lpCompSurface: *DD_SURFACE_LOCAL,
    dwDataOffset: u32,
    dwDataSize: u32,
    lpPrivate: *c_void,
};

pub const DD_RENDERMOCOMPDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_LOCAL,
    lpMoComp: *DD_MOTIONCOMP_LOCAL,
    dwNumBuffers: u32,
    lpBufferInfo: *DDMOCOMPBUFFERINFO,
    dwFunction: u32,
    lpInputData: *c_void,
    dwInputDataSize: u32,
    lpOutputData: *c_void,
    dwOutputDataSize: u32,
    ddRVal: HRESULT,
};

pub const DD_QUERYMOCOMPSTATUSDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_LOCAL,
    lpMoComp: *DD_MOTIONCOMP_LOCAL,
    lpSurface: *DD_SURFACE_LOCAL,
    dwFlags: u32,
    ddRVal: HRESULT,
};

pub const DD_DESTROYMOCOMPDATA = extern struct {
    lpDD: *DD_DIRECTDRAW_LOCAL,
    lpMoComp: *DD_MOTIONCOMP_LOCAL,
    ddRVal: HRESULT,
};

pub const DD_CREATESURFACEEXDATA = extern struct {
    dwFlags: u32,
    lpDDLcl: *DD_DIRECTDRAW_LOCAL,
    lpDDSLcl: *DD_SURFACE_LOCAL,
    ddRVal: HRESULT,
};

pub const DD_GETDRIVERSTATEDATA = extern struct {
    dwFlags: u32,
    Anonymous: _Anonymous_e__Union,
    lpdwStates: *u32,
    dwLength: u32,
    ddRVal: HRESULT,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const FD_XFORM = extern struct {
    eXX: f32,
    eXY: f32,
    eYX: f32,
    eYY: f32,
};

pub const FD_DEVICEMETRICS = extern struct {
    flRealizedType: u32,
    pteBase: POINTE,
    pteSide: POINTE,
    lD: i32,
    fxMaxAscender: i32,
    fxMaxDescender: i32,
    ptlUnderline1: POINTL,
    ptlStrikeOut: POINTL,
    ptlULThickness: POINTL,
    ptlSOThickness: POINTL,
    cxMax: u32,
    cyMax: u32,
    cjGlyphMax: u32,
    fdxQuantized: FD_XFORM,
    lNonLinearExtLeading: i32,
    lNonLinearIntLeading: i32,
    lNonLinearMaxCharWidth: i32,
    lNonLinearAvgCharWidth: i32,
    lMinA: i32,
    lMinC: i32,
    lMinD: i32,
    alReserved: [1]i32,
};

pub const WCRUN = extern struct {
    wcLow: u16,
    cGlyphs: u16,
    phg: *u32,
};

pub const FD_GLYPHSET = extern struct {
    cjThis: u32,
    flAccel: u32,
    cGlyphsSupported: u32,
    cRuns: u32,
    awcrun: [1]WCRUN,
};

pub const FD_GLYPHATTR = extern struct {
    cjThis: u32,
    cGlyphs: u32,
    iMode: u32,
    aGlyphAttr: [1]u8,
};

pub const FD_KERNINGPAIR = extern struct {
    wcFirst: u16,
    wcSecond: u16,
    fwdKern: i16,
};

pub const FONTDIFF = extern struct {
    jReserved1: u8,
    jReserved2: u8,
    jReserved3: u8,
    bWeight: u8,
    usWinWeight: u16,
    fsSelection: u16,
    fwdAveCharWidth: i16,
    fwdMaxCharInc: i16,
    ptlCaret: POINTL,
};

pub const FONTSIM = extern struct {
    dpBold: i32,
    dpItalic: i32,
    dpBoldItalic: i32,
};

pub const IFIEXTRA = extern struct {
    ulIdentifier: u32,
    dpFontSig: i32,
    cig: u32,
    dpDesignVector: i32,
    dpAxesInfoW: i32,
    aulReserved: [1]u32,
};

pub const DRVFN = extern struct {
    iFunc: u32,
    pfn: PFN,
};

pub const DRVENABLEDATA = extern struct {
    iDriverVersion: u32,
    c: u32,
    pdrvfn: *DRVFN,
};

pub const DEVINFO = extern struct {
    flGraphicsCaps: u32,
    lfDefaultFont: LOGFONTW,
    lfAnsiVarFont: LOGFONTW,
    lfAnsiFixFont: LOGFONTW,
    cFonts: u32,
    iDitherFormat: u32,
    cxDither: u16,
    cyDither: u16,
    hpalDefault: HPALETTE,
    flGraphicsCaps2: u32,
};

pub const LINEATTRS = extern struct {
    fl: u32,
    iJoin: u32,
    iEndCap: u32,
    elWidth: FLOAT_LONG,
    eMiterLimit: f32,
    cstyle: u32,
    pstyle: *FLOAT_LONG,
    elStyleState: FLOAT_LONG,
};

pub const XFORML = extern struct {
    eM11: f32,
    eM12: f32,
    eM21: f32,
    eM22: f32,
    eDx: f32,
    eDy: f32,
};

pub const CIECHROMA = extern struct {
    x: i32,
    y: i32,
    Y: i32,
};

pub const COLORINFO = extern struct {
    Red: CIECHROMA,
    Green: CIECHROMA,
    Blue: CIECHROMA,
    Cyan: CIECHROMA,
    Magenta: CIECHROMA,
    Yellow: CIECHROMA,
    AlignmentWhite: CIECHROMA,
    RedGamma: i32,
    GreenGamma: i32,
    BlueGamma: i32,
    MagentaInCyanDye: i32,
    YellowInCyanDye: i32,
    CyanInMagentaDye: i32,
    YellowInMagentaDye: i32,
    CyanInYellowDye: i32,
    MagentaInYellowDye: i32,
};

pub const GDIINFO = extern struct {
    ulVersion: u32,
    ulTechnology: u32,
    ulHorzSize: u32,
    ulVertSize: u32,
    ulHorzRes: u32,
    ulVertRes: u32,
    cBitsPixel: u32,
    cPlanes: u32,
    ulNumColors: u32,
    flRaster: u32,
    ulLogPixelsX: u32,
    ulLogPixelsY: u32,
    flTextCaps: u32,
    ulDACRed: u32,
    ulDACGreen: u32,
    ulDACBlue: u32,
    ulAspectX: u32,
    ulAspectY: u32,
    ulAspectXY: u32,
    xStyleStep: i32,
    yStyleStep: i32,
    denStyleStep: i32,
    ptlPhysOffset: POINTL,
    szlPhysSize: SIZE,
    ulNumPalReg: u32,
    ciDevice: COLORINFO,
    ulDevicePelsDPI: u32,
    ulPrimaryOrder: u32,
    ulHTPatternSize: u32,
    ulHTOutputFormat: u32,
    flHTFlags: u32,
    ulVRefresh: u32,
    ulBltAlignment: u32,
    ulPanningHorzRes: u32,
    ulPanningVertRes: u32,
    xPanningAlignment: u32,
    yPanningAlignment: u32,
    cxHTPat: u32,
    cyHTPat: u32,
    pHTPatA: *u8,
    pHTPatB: *u8,
    pHTPatC: *u8,
    flShadeBlend: u32,
    ulPhysicalPixelCharacteristics: u32,
    ulPhysicalPixelGamma: u32,
};

pub const BRUSHOBJ = extern struct {
    iSolidColor: u32,
    pvRbrush: *c_void,
    flColorType: u32,
};

pub const CLIPOBJ = extern struct {
    iUniq: u32,
    rclBounds: RECTL,
    iDComplexity: u8,
    iFComplexity: u8,
    iMode: u8,
    fjOptions: u8,
};

pub const DRIVEROBJ = extern struct {
    pvObj: *c_void,
    pFreeProc: FREEOBJPROC,
    hdev: HDEV,
    dhpdev: DHPDEV,
};

pub const FONTOBJ = extern struct {
    iUniq: u32,
    iFace: u32,
    cxMax: u32,
    flFontType: u32,
    iTTUniq: usize,
    iFile: usize,
    sizLogResPpi: SIZE,
    ulStyleSize: u32,
    pvConsumer: *c_void,
    pvProducer: *c_void,
};

pub const BLENDOBJ = extern struct {
    BlendFunction: BLENDFUNCTION,
};

pub const PALOBJ = extern struct {
    ulReserved: u32,
};

pub const PATHOBJ = extern struct {
    fl: u32,
    cCurves: u32,
};

pub const SURFOBJ = extern struct {
    dhsurf: DHSURF,
    hsurf: HSURF,
    dhpdev: DHPDEV,
    hdev: HDEV,
    sizlBitmap: SIZE,
    cjBits: u32,
    pvBits: *c_void,
    pvScan0: *c_void,
    lDelta: i32,
    iUniq: u32,
    iBitmapFormat: u32,
    iType: u16,
    fjBitmap: u16,
};

pub const WNDOBJ = extern struct {
    coClient: CLIPOBJ,
    pvConsumer: *c_void,
    rclClient: RECTL,
    psoOwner: *SURFOBJ,
};

pub const XLATEOBJ = extern struct {
    iUniq: u32,
    flXlate: u32,
    iSrcType: u16,
    iDstType: u16,
    cEntries: u32,
    pulXlate: *u32,
};

pub const ENUMRECTS = extern struct {
    c: u32,
    arcl: [1]RECTL,
};

pub const GLYPHBITS = extern struct {
    ptlOrigin: POINTL,
    sizlBitmap: SIZE,
    aj: [1]u8,
};

pub const GLYPHDEF = extern union {
    pgb: *GLYPHBITS,
    ppo: *PATHOBJ,
};

pub const GLYPHPOS = extern struct {
    hg: u32,
    pgdf: *GLYPHDEF,
    ptl: POINTL,
};

pub const GLYPHDATA = extern struct {
    gdf: GLYPHDEF,
    hg: u32,
    fxD: i32,
    fxA: i32,
    fxAB: i32,
    fxInkTop: i32,
    fxInkBottom: i32,
    rclInk: RECTL,
    ptqD: POINTQF,
};

pub const STROBJ = extern struct {
    cGlyphs: u32,
    flAccel: u32,
    ulCharInc: u32,
    rclBkGround: RECTL,
    pgp: *GLYPHPOS,
    pwszOrg: PWSTR,
};

pub const FONTINFO = extern struct {
    cjThis: u32,
    flCaps: u32,
    cGlyphsSupported: u32,
    cjMaxGlyph1: u32,
    cjMaxGlyph4: u32,
    cjMaxGlyph8: u32,
    cjMaxGlyph32: u32,
};

pub const PATHDATA = extern struct {
    flags: u32,
    count: u32,
    pptfx: *POINTFIX,
};

pub const RUN = extern struct {
    iStart: i32,
    iStop: i32,
};

pub const CLIPLINE = extern struct {
    ptfxA: POINTFIX,
    ptfxB: POINTFIX,
    lStyleState: i32,
    c: u32,
    arun: [1]RUN,
};

pub const PERBANDINFO = extern struct {
    bRepeatThisBand: BOOL,
    szlBand: SIZE,
    ulHorzRes: u32,
    ulVertRes: u32,
};

pub const GAMMARAMP = extern struct {
    Red: [256]u16,
    Green: [256]u16,
    Blue: [256]u16,
};

pub const DEVHTINFO = extern struct {
    HTFlags: u32,
    HTPatternSize: u32,
    DevPelsDPI: u32,
    ColorInfo: COLORINFO,
};

pub const DEVHTADJDATA = extern struct {
    DeviceFlags: u32,
    DeviceXDPI: u32,
    DeviceYDPI: u32,
    pDefHTInfo: *DEVHTINFO,
    pAdjHTInfo: *DEVHTINFO,
};

pub const TYPE1_FONT = extern struct {
    hPFM: HANDLE,
    hPFB: HANDLE,
    ulIdentifier: u32,
};

pub const ENGSAFESEMAPHORE = extern struct {
    hsem: *HSEMAPHORE__,
    lCount: i32,
};

pub const ENG_TIME_FIELDS = extern struct {
    usYear: u16,
    usMonth: u16,
    usDay: u16,
    usHour: u16,
    usMinute: u16,
    usSecond: u16,
    usMilliseconds: u16,
    usWeekday: u16,
};

pub const PFN_DrvQueryGlyphAttrs = fn(
    param0: *FONTOBJ,
    param1: u32,
) callconv(@import("std").os.windows.WINAPI) *FD_GLYPHATTR;

pub const DEVMODEA = extern struct {
    dmDeviceName: [32]u8,
    dmSpecVersion: u16,
    dmDriverVersion: u16,
    dmSize: u16,
    dmDriverExtra: u16,
    dmFields: u32,
    Anonymous1: _Anonymous1_e__Union,
    dmColor: i16,
    dmDuplex: i16,
    dmYResolution: i16,
    dmTTOption: i16,
    dmCollate: i16,
    dmFormName: [32]u8,
    dmLogPixels: u16,
    dmBitsPerPel: u32,
    dmPelsWidth: u32,
    dmPelsHeight: u32,
    Anonymous2: _Anonymous2_e__Union,
    dmDisplayFrequency: u32,
    dmICMMethod: u32,
    dmICMIntent: u32,
    dmMediaType: u32,
    dmDitherType: u32,
    dmReserved1: u32,
    dmReserved2: u32,
    dmPanningWidth: u32,
    dmPanningHeight: u32,
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
};

pub const DEVMODEW = extern struct {
    dmDeviceName: [32]u16,
    dmSpecVersion: u16,
    dmDriverVersion: u16,
    dmSize: u16,
    dmDriverExtra: u16,
    dmFields: u32,
    Anonymous1: _Anonymous1_e__Union,
    dmColor: i16,
    dmDuplex: i16,
    dmYResolution: i16,
    dmTTOption: i16,
    dmCollate: i16,
    dmFormName: [32]u16,
    dmLogPixels: u16,
    dmBitsPerPel: u32,
    dmPelsWidth: u32,
    dmPelsHeight: u32,
    Anonymous2: _Anonymous2_e__Union,
    dmDisplayFrequency: u32,
    dmICMMethod: u32,
    dmICMIntent: u32,
    dmMediaType: u32,
    dmDitherType: u32,
    dmReserved1: u32,
    dmReserved2: u32,
    dmPanningWidth: u32,
    dmPanningHeight: u32,
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
};

pub const DISPLAYCONFIG_RATIONAL = extern struct {
    Numerator: u32,
    Denominator: u32,
};

pub const DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = extern enum(i32) {
    OTHER = -1,
    HD15 = 0,
    SVIDEO = 1,
    COMPOSITE_VIDEO = 2,
    COMPONENT_VIDEO = 3,
    DVI = 4,
    HDMI = 5,
    LVDS = 6,
    D_JPN = 8,
    SDI = 9,
    DISPLAYPORT_EXTERNAL = 10,
    DISPLAYPORT_EMBEDDED = 11,
    UDI_EXTERNAL = 12,
    UDI_EMBEDDED = 13,
    SDTVDONGLE = 14,
    MIRACAST = 15,
    INDIRECT_WIRED = 16,
    INDIRECT_VIRTUAL = 17,
    INTERNAL = -2147483648,
    FORCE_UINT32 = -1,
};
pub const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER = DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.OTHER;
pub const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15 = DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.HD15;
pub const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO = DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.SVIDEO;
pub const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO = DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.COMPOSITE_VIDEO;
pub const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO = DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.COMPONENT_VIDEO;
pub const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI = DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.DVI;
pub const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI = DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.HDMI;
pub const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS = DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.LVDS;
pub const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN = DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.D_JPN;
pub const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI = DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.SDI;
pub const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL = DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.DISPLAYPORT_EXTERNAL;
pub const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED = DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.DISPLAYPORT_EMBEDDED;
pub const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL = DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.UDI_EXTERNAL;
pub const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED = DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.UDI_EMBEDDED;
pub const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE = DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.SDTVDONGLE;
pub const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_MIRACAST = DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.MIRACAST;
pub const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_WIRED = DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.INDIRECT_WIRED;
pub const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_VIRTUAL = DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.INDIRECT_VIRTUAL;
pub const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL = DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.INTERNAL;
pub const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32 = DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.FORCE_UINT32;

pub const DISPLAYCONFIG_SCANLINE_ORDERING = extern enum(i32) {
    UNSPECIFIED = 0,
    PROGRESSIVE = 1,
    INTERLACED = 2,
    INTERLACED_UPPERFIELDFIRST = 2,
    INTERLACED_LOWERFIELDFIRST = 3,
    FORCE_UINT32 = -1,
};
pub const DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED = DISPLAYCONFIG_SCANLINE_ORDERING.UNSPECIFIED;
pub const DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE = DISPLAYCONFIG_SCANLINE_ORDERING.PROGRESSIVE;
pub const DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED = DISPLAYCONFIG_SCANLINE_ORDERING.INTERLACED;
pub const DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST = DISPLAYCONFIG_SCANLINE_ORDERING.INTERLACED_UPPERFIELDFIRST;
pub const DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST = DISPLAYCONFIG_SCANLINE_ORDERING.INTERLACED_LOWERFIELDFIRST;
pub const DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32 = DISPLAYCONFIG_SCANLINE_ORDERING.FORCE_UINT32;

pub const DISPLAYCONFIG_2DREGION = extern struct {
    cx: u32,
    cy: u32,
};

pub const DISPLAYCONFIG_VIDEO_SIGNAL_INFO = extern struct {
    pixelRate: u64,
    hSyncFreq: DISPLAYCONFIG_RATIONAL,
    vSyncFreq: DISPLAYCONFIG_RATIONAL,
    activeSize: DISPLAYCONFIG_2DREGION,
    totalSize: DISPLAYCONFIG_2DREGION,
    Anonymous: _Anonymous_e__Union,
    scanLineOrdering: DISPLAYCONFIG_SCANLINE_ORDERING,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const DISPLAYCONFIG_SCALING = extern enum(i32) {
    IDENTITY = 1,
    CENTERED = 2,
    STRETCHED = 3,
    ASPECTRATIOCENTEREDMAX = 4,
    CUSTOM = 5,
    PREFERRED = 128,
    FORCE_UINT32 = -1,
};
pub const DISPLAYCONFIG_SCALING_IDENTITY = DISPLAYCONFIG_SCALING.IDENTITY;
pub const DISPLAYCONFIG_SCALING_CENTERED = DISPLAYCONFIG_SCALING.CENTERED;
pub const DISPLAYCONFIG_SCALING_STRETCHED = DISPLAYCONFIG_SCALING.STRETCHED;
pub const DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX = DISPLAYCONFIG_SCALING.ASPECTRATIOCENTEREDMAX;
pub const DISPLAYCONFIG_SCALING_CUSTOM = DISPLAYCONFIG_SCALING.CUSTOM;
pub const DISPLAYCONFIG_SCALING_PREFERRED = DISPLAYCONFIG_SCALING.PREFERRED;
pub const DISPLAYCONFIG_SCALING_FORCE_UINT32 = DISPLAYCONFIG_SCALING.FORCE_UINT32;

pub const DISPLAYCONFIG_ROTATION = extern enum(i32) {
    IDENTITY = 1,
    ROTATE90 = 2,
    ROTATE180 = 3,
    ROTATE270 = 4,
    FORCE_UINT32 = -1,
};
pub const DISPLAYCONFIG_ROTATION_IDENTITY = DISPLAYCONFIG_ROTATION.IDENTITY;
pub const DISPLAYCONFIG_ROTATION_ROTATE90 = DISPLAYCONFIG_ROTATION.ROTATE90;
pub const DISPLAYCONFIG_ROTATION_ROTATE180 = DISPLAYCONFIG_ROTATION.ROTATE180;
pub const DISPLAYCONFIG_ROTATION_ROTATE270 = DISPLAYCONFIG_ROTATION.ROTATE270;
pub const DISPLAYCONFIG_ROTATION_FORCE_UINT32 = DISPLAYCONFIG_ROTATION.FORCE_UINT32;

pub const DISPLAYCONFIG_MODE_INFO_TYPE = extern enum(i32) {
    SOURCE = 1,
    TARGET = 2,
    DESKTOP_IMAGE = 3,
    FORCE_UINT32 = -1,
};
pub const DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE = DISPLAYCONFIG_MODE_INFO_TYPE.SOURCE;
pub const DISPLAYCONFIG_MODE_INFO_TYPE_TARGET = DISPLAYCONFIG_MODE_INFO_TYPE.TARGET;
pub const DISPLAYCONFIG_MODE_INFO_TYPE_DESKTOP_IMAGE = DISPLAYCONFIG_MODE_INFO_TYPE.DESKTOP_IMAGE;
pub const DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32 = DISPLAYCONFIG_MODE_INFO_TYPE.FORCE_UINT32;

pub const DISPLAYCONFIG_PIXELFORMAT = extern enum(i32) {
    @"8BPP" = 1,
    @"16BPP" = 2,
    @"24BPP" = 3,
    @"32BPP" = 4,
    NONGDI = 5,
    FORCE_UINT32 = -1,
};
pub const DISPLAYCONFIG_PIXELFORMAT_8BPP = DISPLAYCONFIG_PIXELFORMAT.@"8BPP";
pub const DISPLAYCONFIG_PIXELFORMAT_16BPP = DISPLAYCONFIG_PIXELFORMAT.@"16BPP";
pub const DISPLAYCONFIG_PIXELFORMAT_24BPP = DISPLAYCONFIG_PIXELFORMAT.@"24BPP";
pub const DISPLAYCONFIG_PIXELFORMAT_32BPP = DISPLAYCONFIG_PIXELFORMAT.@"32BPP";
pub const DISPLAYCONFIG_PIXELFORMAT_NONGDI = DISPLAYCONFIG_PIXELFORMAT.NONGDI;
pub const DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32 = DISPLAYCONFIG_PIXELFORMAT.FORCE_UINT32;

pub const DISPLAYCONFIG_SOURCE_MODE = extern struct {
    width: u32,
    height: u32,
    pixelFormat: DISPLAYCONFIG_PIXELFORMAT,
    position: POINTL,
};

pub const DISPLAYCONFIG_TARGET_MODE = extern struct {
    targetVideoSignalInfo: DISPLAYCONFIG_VIDEO_SIGNAL_INFO,
};

pub const DISPLAYCONFIG_DESKTOP_IMAGE_INFO = extern struct {
    PathSourceSize: POINTL,
    DesktopImageRegion: RECTL,
    DesktopImageClip: RECTL,
};

pub const DISPLAYCONFIG_MODE_INFO = extern struct {
    infoType: DISPLAYCONFIG_MODE_INFO_TYPE,
    id: u32,
    adapterId: LUID,
    Anonymous: _Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const DISPLAYCONFIG_PATH_SOURCE_INFO = extern struct {
    adapterId: LUID,
    id: u32,
    Anonymous: _Anonymous_e__Union,
    statusFlags: u32,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const DISPLAYCONFIG_PATH_TARGET_INFO = extern struct {
    adapterId: LUID,
    id: u32,
    Anonymous: _Anonymous_e__Union,
    outputTechnology: DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY,
    rotation: DISPLAYCONFIG_ROTATION,
    scaling: DISPLAYCONFIG_SCALING,
    refreshRate: DISPLAYCONFIG_RATIONAL,
    scanLineOrdering: DISPLAYCONFIG_SCANLINE_ORDERING,
    targetAvailable: BOOL,
    statusFlags: u32,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const DISPLAYCONFIG_PATH_INFO = extern struct {
    sourceInfo: DISPLAYCONFIG_PATH_SOURCE_INFO,
    targetInfo: DISPLAYCONFIG_PATH_TARGET_INFO,
    flags: u32,
};

pub const DISPLAYCONFIG_TOPOLOGY_ID = extern enum(i32) {
    INTERNAL = 1,
    CLONE = 2,
    EXTEND = 4,
    EXTERNAL = 8,
    FORCE_UINT32 = -1,
};
pub const DISPLAYCONFIG_TOPOLOGY_INTERNAL = DISPLAYCONFIG_TOPOLOGY_ID.INTERNAL;
pub const DISPLAYCONFIG_TOPOLOGY_CLONE = DISPLAYCONFIG_TOPOLOGY_ID.CLONE;
pub const DISPLAYCONFIG_TOPOLOGY_EXTEND = DISPLAYCONFIG_TOPOLOGY_ID.EXTEND;
pub const DISPLAYCONFIG_TOPOLOGY_EXTERNAL = DISPLAYCONFIG_TOPOLOGY_ID.EXTERNAL;
pub const DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32 = DISPLAYCONFIG_TOPOLOGY_ID.FORCE_UINT32;

pub const DISPLAYCONFIG_DEVICE_INFO_TYPE = extern enum(i32) {
    GET_SOURCE_NAME = 1,
    GET_TARGET_NAME = 2,
    GET_TARGET_PREFERRED_MODE = 3,
    GET_ADAPTER_NAME = 4,
    SET_TARGET_PERSISTENCE = 5,
    GET_TARGET_BASE_TYPE = 6,
    GET_SUPPORT_VIRTUAL_RESOLUTION = 7,
    SET_SUPPORT_VIRTUAL_RESOLUTION = 8,
    GET_ADVANCED_COLOR_INFO = 9,
    SET_ADVANCED_COLOR_STATE = 10,
    GET_SDR_WHITE_LEVEL = 11,
    FORCE_UINT32 = -1,
};
pub const DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME = DISPLAYCONFIG_DEVICE_INFO_TYPE.GET_SOURCE_NAME;
pub const DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME = DISPLAYCONFIG_DEVICE_INFO_TYPE.GET_TARGET_NAME;
pub const DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE = DISPLAYCONFIG_DEVICE_INFO_TYPE.GET_TARGET_PREFERRED_MODE;
pub const DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME = DISPLAYCONFIG_DEVICE_INFO_TYPE.GET_ADAPTER_NAME;
pub const DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE = DISPLAYCONFIG_DEVICE_INFO_TYPE.SET_TARGET_PERSISTENCE;
pub const DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_BASE_TYPE = DISPLAYCONFIG_DEVICE_INFO_TYPE.GET_TARGET_BASE_TYPE;
pub const DISPLAYCONFIG_DEVICE_INFO_GET_SUPPORT_VIRTUAL_RESOLUTION = DISPLAYCONFIG_DEVICE_INFO_TYPE.GET_SUPPORT_VIRTUAL_RESOLUTION;
pub const DISPLAYCONFIG_DEVICE_INFO_SET_SUPPORT_VIRTUAL_RESOLUTION = DISPLAYCONFIG_DEVICE_INFO_TYPE.SET_SUPPORT_VIRTUAL_RESOLUTION;
pub const DISPLAYCONFIG_DEVICE_INFO_GET_ADVANCED_COLOR_INFO = DISPLAYCONFIG_DEVICE_INFO_TYPE.GET_ADVANCED_COLOR_INFO;
pub const DISPLAYCONFIG_DEVICE_INFO_SET_ADVANCED_COLOR_STATE = DISPLAYCONFIG_DEVICE_INFO_TYPE.SET_ADVANCED_COLOR_STATE;
pub const DISPLAYCONFIG_DEVICE_INFO_GET_SDR_WHITE_LEVEL = DISPLAYCONFIG_DEVICE_INFO_TYPE.GET_SDR_WHITE_LEVEL;
pub const DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32 = DISPLAYCONFIG_DEVICE_INFO_TYPE.FORCE_UINT32;

pub const DISPLAYCONFIG_DEVICE_INFO_HEADER = extern struct {
    type: DISPLAYCONFIG_DEVICE_INFO_TYPE,
    size: u32,
    adapterId: LUID,
    id: u32,
};

pub const DISPLAYCONFIG_SOURCE_DEVICE_NAME = extern struct {
    header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
    viewGdiDeviceName: [32]u16,
};

pub const DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS = extern struct {
    Anonymous: _Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const DISPLAYCONFIG_TARGET_DEVICE_NAME = extern struct {
    header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
    flags: DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS,
    outputTechnology: DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY,
    edidManufactureId: u16,
    edidProductCodeId: u16,
    connectorInstance: u32,
    monitorFriendlyDeviceName: [64]u16,
    monitorDevicePath: [128]u16,
};

pub const DISPLAYCONFIG_TARGET_PREFERRED_MODE = extern struct {
    header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
    width: u32,
    height: u32,
    targetMode: DISPLAYCONFIG_TARGET_MODE,
};

pub const DISPLAYCONFIG_ADAPTER_NAME = extern struct {
    header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
    adapterDevicePath: [128]u16,
};

pub const DISPLAYCONFIG_TARGET_BASE_TYPE = extern struct {
    header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
    baseOutputTechnology: DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY,
};

pub const DISPLAYCONFIG_SET_TARGET_PERSISTENCE = extern struct {
    header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
    Anonymous: _Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION = extern struct {
    header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
    Anonymous: _Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub usingnamespace switch (@import("../zig.zig").arch) {
.X86 => struct {

pub const IFIMETRICS = extern struct {
    cjThis: u32,
    cjIfiExtra: u32,
    dpwszFamilyName: i32,
    dpwszStyleName: i32,
    dpwszFaceName: i32,
    dpwszUniqueName: i32,
    dpFontSim: i32,
    lEmbedId: i32,
    lItalicAngle: i32,
    lCharBias: i32,
    dpCharSets: i32,
    jWinCharSet: u8,
    jWinPitchAndFamily: u8,
    usWinWeight: u16,
    flInfo: u32,
    fsSelection: u16,
    fsType: u16,
    fwdUnitsPerEm: i16,
    fwdLowestPPEm: i16,
    fwdWinAscender: i16,
    fwdWinDescender: i16,
    fwdMacAscender: i16,
    fwdMacDescender: i16,
    fwdMacLineGap: i16,
    fwdTypoAscender: i16,
    fwdTypoDescender: i16,
    fwdTypoLineGap: i16,
    fwdAveCharWidth: i16,
    fwdMaxCharInc: i16,
    fwdCapHeight: i16,
    fwdXHeight: i16,
    fwdSubscriptXSize: i16,
    fwdSubscriptYSize: i16,
    fwdSubscriptXOffset: i16,
    fwdSubscriptYOffset: i16,
    fwdSuperscriptXSize: i16,
    fwdSuperscriptYSize: i16,
    fwdSuperscriptXOffset: i16,
    fwdSuperscriptYOffset: i16,
    fwdUnderscoreSize: i16,
    fwdUnderscorePosition: i16,
    fwdStrikeoutSize: i16,
    fwdStrikeoutPosition: i16,
    chFirstChar: u8,
    chLastChar: u8,
    chDefaultChar: u8,
    chBreakChar: u8,
    wcFirstChar: u16,
    wcLastChar: u16,
    wcDefaultChar: u16,
    wcBreakChar: u16,
    ptlBaseline: POINTL,
    ptlAspect: POINTL,
    ptlCaret: POINTL,
    rclFontBox: RECTL,
    achVendId: [4]u8,
    cKerningPairs: u32,
    ulPanoseCulture: u32,
    panose: PANOSE,
};

}, else => struct { } };

const IID_IDirectDrawKernel_Value = @import("../zig.zig").Guid.initString("8d56c120-6a08-11d0-9b06-00a0c903a3b8");
pub const IID_IDirectDrawKernel = &IID_IDirectDrawKernel_Value;
pub const IDirectDrawKernel = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCaps: fn(
            self: *const IDirectDrawKernel,
            param0: *DDKERNELCAPS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKernelHandle: fn(
            self: *const IDirectDrawKernel,
            param0: *usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseKernelHandle: fn(
            self: *const IDirectDrawKernel,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawKernel_GetCaps(self: *const T, param0: *DDKERNELCAPS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawKernel.VTable, self.vtable).GetCaps(@ptrCast(*const IDirectDrawKernel, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawKernel_GetKernelHandle(self: *const T, param0: *usize) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawKernel.VTable, self.vtable).GetKernelHandle(@ptrCast(*const IDirectDrawKernel, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawKernel_ReleaseKernelHandle(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawKernel.VTable, self.vtable).ReleaseKernelHandle(@ptrCast(*const IDirectDrawKernel, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectDrawSurfaceKernel_Value = @import("../zig.zig").Guid.initString("60755da0-6a40-11d0-9b06-00a0c903a3b8");
pub const IID_IDirectDrawSurfaceKernel = &IID_IDirectDrawSurfaceKernel_Value;
pub const IDirectDrawSurfaceKernel = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetKernelHandle: fn(
            self: *const IDirectDrawSurfaceKernel,
            param0: *usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseKernelHandle: fn(
            self: *const IDirectDrawSurfaceKernel,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurfaceKernel_GetKernelHandle(self: *const T, param0: *usize) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurfaceKernel.VTable, self.vtable).GetKernelHandle(@ptrCast(*const IDirectDrawSurfaceKernel, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurfaceKernel_ReleaseKernelHandle(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurfaceKernel.VTable, self.vtable).ReleaseKernelHandle(@ptrCast(*const IDirectDrawSurfaceKernel, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const DDKERNELCAPS = extern struct {
    dwSize: u32,
    dwCaps: u32,
    dwIRQCaps: u32,
};

pub const SURFACEALIGNMENT = extern struct {
    Anonymous: _Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const HEAPALIGNMENT = extern struct {
    dwSize: u32,
    ddsCaps: DDSCAPS,
    dwReserved: u32,
    ExecuteBuffer: SURFACEALIGNMENT,
    Overlay: SURFACEALIGNMENT,
    Texture: SURFACEALIGNMENT,
    ZBuffer: SURFACEALIGNMENT,
    AlphaBuffer: SURFACEALIGNMENT,
    Offscreen: SURFACEALIGNMENT,
    FlipTarget: SURFACEALIGNMENT,
};

pub const VMEMHEAP = extern struct {
    dwFlags: u32,
    stride: u32,
    freeList: *c_void,
    allocList: *c_void,
    dwTotalSize: u32,
    fpGARTLin: usize,
    fpGARTDev: usize,
    dwCommitedSize: u32,
    dwCoalesceCount: u32,
    Alignment: HEAPALIGNMENT,
    ddsCapsEx: DDSCAPSEX,
    ddsCapsExAlt: DDSCAPSEX,
    liPhysAGPBase: LARGE_INTEGER,
    hdevAGP: HANDLE,
    pvPhysRsrv: *c_void,
    pAgpCommitMask: *u8,
    dwAgpCommitMaskSize: u32,
};

pub const DDCORECAPS = extern struct {
    dwSize: u32,
    dwCaps: u32,
    dwCaps2: u32,
    dwCKeyCaps: u32,
    dwFXCaps: u32,
    dwFXAlphaCaps: u32,
    dwPalCaps: u32,
    dwSVCaps: u32,
    dwAlphaBltConstBitDepths: u32,
    dwAlphaBltPixelBitDepths: u32,
    dwAlphaBltSurfaceBitDepths: u32,
    dwAlphaOverlayConstBitDepths: u32,
    dwAlphaOverlayPixelBitDepths: u32,
    dwAlphaOverlaySurfaceBitDepths: u32,
    dwZBufferBitDepths: u32,
    dwVidMemTotal: u32,
    dwVidMemFree: u32,
    dwMaxVisibleOverlays: u32,
    dwCurrVisibleOverlays: u32,
    dwNumFourCCCodes: u32,
    dwAlignBoundarySrc: u32,
    dwAlignSizeSrc: u32,
    dwAlignBoundaryDest: u32,
    dwAlignSizeDest: u32,
    dwAlignStrideAlign: u32,
    dwRops: [8]u32,
    ddsCaps: DDSCAPS,
    dwMinOverlayStretch: u32,
    dwMaxOverlayStretch: u32,
    dwMinLiveVideoStretch: u32,
    dwMaxLiveVideoStretch: u32,
    dwMinHwCodecStretch: u32,
    dwMaxHwCodecStretch: u32,
    dwReserved1: u32,
    dwReserved2: u32,
    dwReserved3: u32,
    dwSVBCaps: u32,
    dwSVBCKeyCaps: u32,
    dwSVBFXCaps: u32,
    dwSVBRops: [8]u32,
    dwVSBCaps: u32,
    dwVSBCKeyCaps: u32,
    dwVSBFXCaps: u32,
    dwVSBRops: [8]u32,
    dwSSBCaps: u32,
    dwSSBCKeyCaps: u32,
    dwSSBFXCaps: u32,
    dwSSBRops: [8]u32,
    dwMaxVideoPorts: u32,
    dwCurrVideoPorts: u32,
    dwSVBCaps2: u32,
};

pub const DDHAL_WAITFORVERTICALBLANKDATA = extern struct {
    lpDD: *DDRAWI_DIRECTDRAW_GBL,
    dwFlags: u32,
    bIsInVB: u32,
    hEvent: usize,
    ddRVal: HRESULT,
    WaitForVerticalBlank: LPDDHAL_WAITFORVERTICALBLANK,
};

pub const DDHAL_DESTROYDDLOCALDATA = extern struct {
    dwFlags: u32,
    pDDLcl: *DDRAWI_DIRECTDRAW_LCL,
    ddRVal: HRESULT,
};

pub const VIDEOPARAMETERS = extern struct {
    Guid: Guid,
    dwOffset: u32,
    dwCommand: u32,
    dwFlags: u32,
    dwMode: u32,
    dwTVStandard: u32,
    dwAvailableModes: u32,
    dwAvailableTVStandard: u32,
    dwFlickerFilter: u32,
    dwOverScanX: u32,
    dwOverScanY: u32,
    dwMaxUnscaledX: u32,
    dwMaxUnscaledY: u32,
    dwPositionX: u32,
    dwPositionY: u32,
    dwBrightness: u32,
    dwContrast: u32,
    dwCPType: u32,
    dwCPCommand: u32,
    dwCPStandard: u32,
    dwCPKey: u32,
    bCP_APSTriggerBits: u32,
    bOEMCopyProtection: [256]u8,
};


//--------------------------------------------------------------------------------
// Section: Functions (83)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn BRUSHOBJ_pvAllocRbrush(
    pbo: *BRUSHOBJ,
    cj: u32,
) callconv(@import("std").os.windows.WINAPI) *c_void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn BRUSHOBJ_pvGetRbrush(
    pbo: *BRUSHOBJ,
) callconv(@import("std").os.windows.WINAPI) *c_void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn BRUSHOBJ_ulGetBrushColor(
    pbo: *BRUSHOBJ,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn BRUSHOBJ_hGetColorTransform(
    pbo: *BRUSHOBJ,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn CLIPOBJ_cEnumStart(
    pco: *CLIPOBJ,
    bAll: BOOL,
    iType: u32,
    iDirection: u32,
    cLimit: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn CLIPOBJ_bEnum(
    pco: *CLIPOBJ,
    cj: u32,
    pul: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn CLIPOBJ_ppoGetPath(
    pco: *CLIPOBJ,
) callconv(@import("std").os.windows.WINAPI) *PATHOBJ;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn FONTOBJ_cGetAllGlyphHandles(
    pfo: *FONTOBJ,
    phg: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn FONTOBJ_vGetInfo(
    pfo: *FONTOBJ,
    cjSize: u32,
    pfi: *FONTINFO,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn FONTOBJ_cGetGlyphs(
    pfo: *FONTOBJ,
    iMode: u32,
    cGlyph: u32,
    phg: *u32,
    ppvGlyph: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn FONTOBJ_pxoGetXform(
    pfo: *FONTOBJ,
) callconv(@import("std").os.windows.WINAPI) *XFORMOBJ;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn FONTOBJ_pifi(
    pfo: *FONTOBJ,
) callconv(@import("std").os.windows.WINAPI) *IFIMETRICS;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn FONTOBJ_pfdg(
    pfo: *FONTOBJ,
) callconv(@import("std").os.windows.WINAPI) *FD_GLYPHSET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn FONTOBJ_pvTrueTypeFontFile(
    pfo: *FONTOBJ,
    pcjFile: *u32,
) callconv(@import("std").os.windows.WINAPI) *c_void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn FONTOBJ_pQueryGlyphAttrs(
    pfo: *FONTOBJ,
    iMode: u32,
) callconv(@import("std").os.windows.WINAPI) *FD_GLYPHATTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn PATHOBJ_vEnumStart(
    ppo: *PATHOBJ,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn PATHOBJ_bEnum(
    ppo: *PATHOBJ,
    ppd: *PATHDATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn PATHOBJ_vEnumStartClipLines(
    ppo: *PATHOBJ,
    pco: *CLIPOBJ,
    pso: *SURFOBJ,
    pla: *LINEATTRS,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn PATHOBJ_bEnumClipLines(
    ppo: *PATHOBJ,
    cb: u32,
    pcl: *CLIPLINE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn PATHOBJ_vGetBounds(
    ppo: *PATHOBJ,
    prectfx: *RECTFX,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn STROBJ_vEnumStart(
    pstro: *STROBJ,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn STROBJ_bEnum(
    pstro: *STROBJ,
    pc: *u32,
    ppgpos: **GLYPHPOS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn STROBJ_bEnumPositionsOnly(
    pstro: *STROBJ,
    pc: *u32,
    ppgpos: **GLYPHPOS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn STROBJ_dwGetCodePage(
    pstro: *STROBJ,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn STROBJ_bGetAdvanceWidths(
    pso: *STROBJ,
    iFirst: u32,
    c: u32,
    pptqD: *POINTQF,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn XFORMOBJ_iGetXform(
    pxo: *XFORMOBJ,
    pxform: ?*XFORML,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn XFORMOBJ_bApplyXform(
    pxo: *XFORMOBJ,
    iMode: u32,
    cPoints: u32,
    pvIn: *c_void,
    pvOut: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn XLATEOBJ_iXlate(
    pxlo: *XLATEOBJ,
    iColor: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn XLATEOBJ_piVector(
    pxlo: *XLATEOBJ,
) callconv(@import("std").os.windows.WINAPI) *u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn XLATEOBJ_cGetPalette(
    pxlo: *XLATEOBJ,
    iPal: u32,
    cPal: u32,
    pPal: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn XLATEOBJ_hGetColorTransform(
    pxlo: *XLATEOBJ,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EngCreateBitmap(
    sizl: SIZE,
    lWidth: i32,
    iFormat: u32,
    fl: u32,
    pvBits: *c_void,
) callconv(@import("std").os.windows.WINAPI) HBITMAP;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EngCreateDeviceSurface(
    dhsurf: DHSURF,
    sizl: SIZE,
    iFormatCompat: u32,
) callconv(@import("std").os.windows.WINAPI) HSURF;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EngCreateDeviceBitmap(
    dhsurf: DHSURF,
    sizl: SIZE,
    iFormatCompat: u32,
) callconv(@import("std").os.windows.WINAPI) HBITMAP;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EngDeleteSurface(
    hsurf: HSURF,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EngLockSurface(
    hsurf: HSURF,
) callconv(@import("std").os.windows.WINAPI) *SURFOBJ;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EngUnlockSurface(
    pso: *SURFOBJ,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EngEraseSurface(
    pso: *SURFOBJ,
    prcl: *RECTL,
    iColor: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EngAssociateSurface(
    hsurf: HSURF,
    hdev: HDEV,
    flHooks: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EngMarkBandingSurface(
    hsurf: HSURF,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EngCheckAbort(
    pso: *SURFOBJ,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EngDeletePath(
    ppo: *PATHOBJ,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EngCreatePalette(
    iMode: u32,
    cColors: u32,
    pulColors: *u32,
    flRed: u32,
    flGreen: u32,
    flBlue: u32,
) callconv(@import("std").os.windows.WINAPI) HPALETTE;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EngDeletePalette(
    hpal: HPALETTE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EngCreateClip(
) callconv(@import("std").os.windows.WINAPI) *CLIPOBJ;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EngDeleteClip(
    pco: *CLIPOBJ,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EngBitBlt(
    psoTrg: *SURFOBJ,
    psoSrc: *SURFOBJ,
    psoMask: *SURFOBJ,
    pco: *CLIPOBJ,
    pxlo: *XLATEOBJ,
    prclTrg: *RECTL,
    pptlSrc: *POINTL,
    pptlMask: *POINTL,
    pbo: *BRUSHOBJ,
    pptlBrush: *POINTL,
    rop4: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EngLineTo(
    pso: *SURFOBJ,
    pco: *CLIPOBJ,
    pbo: *BRUSHOBJ,
    x1: i32,
    y1: i32,
    x2: i32,
    y2: i32,
    prclBounds: *RECTL,
    mix: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EngStretchBlt(
    psoDest: *SURFOBJ,
    psoSrc: *SURFOBJ,
    psoMask: *SURFOBJ,
    pco: *CLIPOBJ,
    pxlo: *XLATEOBJ,
    pca: *COLORADJUSTMENT,
    pptlHTOrg: *POINTL,
    prclDest: *RECTL,
    prclSrc: *RECTL,
    pptlMask: *POINTL,
    iMode: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EngStretchBltROP(
    psoDest: *SURFOBJ,
    psoSrc: *SURFOBJ,
    psoMask: *SURFOBJ,
    pco: *CLIPOBJ,
    pxlo: *XLATEOBJ,
    pca: *COLORADJUSTMENT,
    pptlHTOrg: *POINTL,
    prclDest: *RECTL,
    prclSrc: *RECTL,
    pptlMask: *POINTL,
    iMode: u32,
    pbo: *BRUSHOBJ,
    rop4: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EngAlphaBlend(
    psoDest: *SURFOBJ,
    psoSrc: *SURFOBJ,
    pco: *CLIPOBJ,
    pxlo: *XLATEOBJ,
    prclDest: *RECTL,
    prclSrc: *RECTL,
    pBlendObj: *BLENDOBJ,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EngGradientFill(
    psoDest: *SURFOBJ,
    pco: *CLIPOBJ,
    pxlo: *XLATEOBJ,
    pVertex: *TRIVERTEX,
    nVertex: u32,
    pMesh: *c_void,
    nMesh: u32,
    prclExtents: *RECTL,
    pptlDitherOrg: *POINTL,
    ulMode: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EngTransparentBlt(
    psoDst: *SURFOBJ,
    psoSrc: *SURFOBJ,
    pco: ?*CLIPOBJ,
    pxlo: ?*XLATEOBJ,
    prclDst: *RECTL,
    prclSrc: *RECTL,
    TransColor: u32,
    bCalledFromBitBlt: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EngTextOut(
    pso: *SURFOBJ,
    pstro: *STROBJ,
    pfo: *FONTOBJ,
    pco: *CLIPOBJ,
    prclExtra: *RECTL,
    prclOpaque: *RECTL,
    pboFore: *BRUSHOBJ,
    pboOpaque: *BRUSHOBJ,
    pptlOrg: *POINTL,
    mix: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EngStrokePath(
    pso: *SURFOBJ,
    ppo: *PATHOBJ,
    pco: *CLIPOBJ,
    pxo: *XFORMOBJ,
    pbo: *BRUSHOBJ,
    pptlBrushOrg: *POINTL,
    plineattrs: *LINEATTRS,
    mix: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EngFillPath(
    pso: *SURFOBJ,
    ppo: *PATHOBJ,
    pco: *CLIPOBJ,
    pbo: *BRUSHOBJ,
    pptlBrushOrg: *POINTL,
    mix: u32,
    flOptions: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EngStrokeAndFillPath(
    pso: *SURFOBJ,
    ppo: *PATHOBJ,
    pco: *CLIPOBJ,
    pxo: *XFORMOBJ,
    pboStroke: *BRUSHOBJ,
    plineattrs: *LINEATTRS,
    pboFill: *BRUSHOBJ,
    pptlBrushOrg: *POINTL,
    mixFill: u32,
    flOptions: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EngPaint(
    pso: *SURFOBJ,
    pco: *CLIPOBJ,
    pbo: *BRUSHOBJ,
    pptlBrushOrg: *POINTL,
    mix: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EngCopyBits(
    psoDest: *SURFOBJ,
    psoSrc: *SURFOBJ,
    pco: *CLIPOBJ,
    pxlo: *XLATEOBJ,
    prclDest: *RECTL,
    pptlSrc: *POINTL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EngPlgBlt(
    psoTrg: *SURFOBJ,
    psoSrc: *SURFOBJ,
    psoMsk: *SURFOBJ,
    pco: *CLIPOBJ,
    pxlo: *XLATEOBJ,
    pca: *COLORADJUSTMENT,
    pptlBrushOrg: *POINTL,
    pptfx: *POINTFIX,
    prcl: *RECTL,
    pptl: *POINTL,
    iMode: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn HT_Get8BPPFormatPalette(
    pPaletteEntry: ?*PALETTEENTRY,
    RedGamma: u16,
    GreenGamma: u16,
    BlueGamma: u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn HT_Get8BPPMaskPalette(
    pPaletteEntry: ?*PALETTEENTRY,
    Use8BPPMaskPal: BOOL,
    CMYMask: u8,
    RedGamma: u16,
    GreenGamma: u16,
    BlueGamma: u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EngGetPrinterDataFileName(
    hdev: HDEV,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EngGetDriverName(
    hdev: HDEV,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EngLoadModule(
    pwsz: PWSTR,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EngFindResource(
    h: HANDLE,
    iName: i32,
    iType: i32,
    pulSize: *u32,
) callconv(@import("std").os.windows.WINAPI) *c_void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EngFreeModule(
    h: HANDLE,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EngCreateSemaphore(
) callconv(@import("std").os.windows.WINAPI) *HSEMAPHORE__;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EngAcquireSemaphore(
    hsem: *HSEMAPHORE__,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EngReleaseSemaphore(
    hsem: *HSEMAPHORE__,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EngDeleteSemaphore(
    hsem: *HSEMAPHORE__,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EngMultiByteToUnicodeN(
    // TODO: what to do with BytesParamIndex 1?
    UnicodeString: PWSTR,
    MaxBytesInUnicodeString: u32,
    BytesInUnicodeString: ?*u32,
    // TODO: what to do with BytesParamIndex 4?
    MultiByteString: [*]u8,
    BytesInMultiByteString: u32,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EngUnicodeToMultiByteN(
    // TODO: what to do with BytesParamIndex 1?
    MultiByteString: [*]u8,
    MaxBytesInMultiByteString: u32,
    BytesInMultiByteString: ?*u32,
    // TODO: what to do with BytesParamIndex 4?
    UnicodeString: PWSTR,
    BytesInUnicodeString: u32,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EngQueryLocalTime(
    param0: *ENG_TIME_FIELDS,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EngComputeGlyphSet(
    nCodePage: i32,
    nFirstChar: i32,
    cChars: i32,
) callconv(@import("std").os.windows.WINAPI) *FD_GLYPHSET;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EngMultiByteToWideChar(
    CodePage: u32,
    // TODO: what to do with BytesParamIndex 2?
    WideCharString: ?PWSTR,
    BytesInWideCharString: i32,
    // TODO: what to do with BytesParamIndex 4?
    MultiByteString: ?PSTR,
    BytesInMultiByteString: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EngWideCharToMultiByte(
    CodePage: u32,
    // TODO: what to do with BytesParamIndex 2?
    WideCharString: ?PWSTR,
    BytesInWideCharString: i32,
    // TODO: what to do with BytesParamIndex 4?
    MultiByteString: ?PSTR,
    BytesInMultiByteString: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EngGetCurrentCodePage(
    OemCodePage: *u16,
    AnsiCodePage: *u16,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "USER32" fn GetDisplayConfigBufferSizes(
    flags: u32,
    numPathArrayElements: *u32,
    numModeInfoArrayElements: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "USER32" fn SetDisplayConfig(
    numPathArrayElements: u32,
    pathArray: ?[*]DISPLAYCONFIG_PATH_INFO,
    numModeInfoArrayElements: u32,
    modeInfoArray: ?[*]DISPLAYCONFIG_MODE_INFO,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "USER32" fn QueryDisplayConfig(
    flags: u32,
    numPathArrayElements: *u32,
    pathArray: [*]DISPLAYCONFIG_PATH_INFO,
    numModeInfoArrayElements: *u32,
    modeInfoArray: [*]DISPLAYCONFIG_MODE_INFO,
    currentTopologyId: *DISPLAYCONFIG_TOPOLOGY_ID,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "USER32" fn DisplayConfigGetDeviceInfo(
    requestPacket: *DISPLAYCONFIG_DEVICE_INFO_HEADER,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "USER32" fn DisplayConfigSetDeviceInfo(
    setPacket: *DISPLAYCONFIG_DEVICE_INFO_HEADER,
) callconv(@import("std").os.windows.WINAPI) i32;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (1)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const DEVMODE = DEVMODEA;
    },
    .wide => struct {
        pub const DEVMODE = DEVMODEW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const DEVMODE = *opaque{};
    } else struct {
        pub const DEVMODE = @compileError("'DEVMODE' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (51)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const PANOSE = @import("gdi.zig").PANOSE;
const DDOVERLAYFX = @import("direct_draw.zig").DDOVERLAYFX;
const DDSCAPSEX = @import("direct_draw.zig").DDSCAPSEX;
const POINTE = @import("system_services.zig").POINTE;
const DDRAWI_DIRECTDRAW_GBL = @import("windows_programming.zig").DDRAWI_DIRECTDRAW_GBL;
const TRIVERTEX = @import("gdi.zig").TRIVERTEX;
const HRESULT = @import("com.zig").HRESULT;
const PDD_SETCOLORKEY = @import("system_services.zig").PDD_SETCOLORKEY;
const LOGFONTW = @import("gdi.zig").LOGFONTW;
const HSEMAPHORE__ = @import("system_services.zig").HSEMAPHORE__;
const BOOL = @import("system_services.zig").BOOL;
const DHSURF = @import("system_services.zig").DHSURF;
const LUID = @import("kernel.zig").LUID;
const PDD_SETMODE = @import("system_services.zig").PDD_SETMODE;
const HPALETTE = @import("gdi.zig").HPALETTE;
const DD_DESTROYDDLOCALDATA = @import("system_services.zig").DD_DESTROYDDLOCALDATA;
const DDSURFACEDESC = @import("direct_draw.zig").DDSURFACEDESC;
const FREEOBJPROC = @import("system_services.zig").FREEOBJPROC;
const DDCOLORCONTROL = @import("direct_draw.zig").DDCOLORCONTROL;
const DDARGB = @import("direct_draw.zig").DDARGB;
const POINTQF = @import("system_services.zig").POINTQF;
const XFORMOBJ = @import("system_services.zig").XFORMOBJ;
const DDCOLORKEY = @import("direct_show.zig").DDCOLORKEY;
const RECTFX = @import("system_services.zig").RECTFX;
const HSURF = @import("system_services.zig").HSURF;
const DDVIDEOPORTCONNECT = @import("core_audio.zig").DDVIDEOPORTCONNECT;
const POINTFIX = @import("system_services.zig").POINTFIX;
const COLORADJUSTMENT = @import("gdi.zig").COLORADJUSTMENT;
const PWSTR = @import("system_services.zig").PWSTR;
const DDRAWI_DIRECTDRAW_LCL = @import("windows_programming.zig").DDRAWI_DIRECTDRAW_LCL;
const IUnknown = @import("com.zig").IUnknown;
const PDD_SURFCB_SETCLIPLIST = @import("system_services.zig").PDD_SURFCB_SETCLIPLIST;
const HBITMAP = @import("gdi.zig").HBITMAP;
const PSTR = @import("system_services.zig").PSTR;
const DHPDEV = @import("system_services.zig").DHPDEV;
const DDSCAPS2 = @import("direct_draw.zig").DDSCAPS2;
const DDNTCORECAPS = @import("system_services.zig").DDNTCORECAPS;
const FLOAT_LONG = @import("system_services.zig").FLOAT_LONG;
const HDEV = @import("system_services.zig").HDEV;
const LARGE_INTEGER = @import("system_services.zig").LARGE_INTEGER;
const LPDDHAL_WAITFORVERTICALBLANK = @import("windows_programming.zig").LPDDHAL_WAITFORVERTICALBLANK;
const BLENDFUNCTION = @import("gdi.zig").BLENDFUNCTION;
const DDPIXELFORMAT = @import("direct_draw.zig").DDPIXELFORMAT;
const DDBLTFX = @import("direct_draw.zig").DDBLTFX;
const PALETTEENTRY = @import("gdi.zig").PALETTEENTRY;
const PFN = @import("system_services.zig").PFN;
const HANDLE = @import("system_services.zig").HANDLE;
const PDD_ALPHABLT = @import("system_services.zig").PDD_ALPHABLT;
const DDSCAPS = @import("direct_draw.zig").DDSCAPS;
const PDD_DESTROYDRIVER = @import("system_services.zig").PDD_DESTROYDRIVER;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "PDD_CANCREATESURFACE")) { _ = PDD_CANCREATESURFACE; }
    if (@hasDecl(@This(), "PDD_WAITFORVERTICALBLANK")) { _ = PDD_WAITFORVERTICALBLANK; }
    if (@hasDecl(@This(), "PDD_CREATESURFACE")) { _ = PDD_CREATESURFACE; }
    if (@hasDecl(@This(), "PDD_CREATEPALETTE")) { _ = PDD_CREATEPALETTE; }
    if (@hasDecl(@This(), "PDD_GETSCANLINE")) { _ = PDD_GETSCANLINE; }
    if (@hasDecl(@This(), "PDD_MAPMEMORY")) { _ = PDD_MAPMEMORY; }
    if (@hasDecl(@This(), "PDD_GETDRIVERINFO")) { _ = PDD_GETDRIVERINFO; }
    if (@hasDecl(@This(), "PDD_GETAVAILDRIVERMEMORY")) { _ = PDD_GETAVAILDRIVERMEMORY; }
    if (@hasDecl(@This(), "PDD_CREATESURFACEEX")) { _ = PDD_CREATESURFACEEX; }
    if (@hasDecl(@This(), "PDD_GETDRIVERSTATE")) { _ = PDD_GETDRIVERSTATE; }
    if (@hasDecl(@This(), "PDD_DESTROYDDLOCAL")) { _ = PDD_DESTROYDDLOCAL; }
    if (@hasDecl(@This(), "PDD_FREEDRIVERMEMORY")) { _ = PDD_FREEDRIVERMEMORY; }
    if (@hasDecl(@This(), "PDD_SETEXCLUSIVEMODE")) { _ = PDD_SETEXCLUSIVEMODE; }
    if (@hasDecl(@This(), "PDD_FLIPTOGDISURFACE")) { _ = PDD_FLIPTOGDISURFACE; }
    if (@hasDecl(@This(), "PDD_PALCB_DESTROYPALETTE")) { _ = PDD_PALCB_DESTROYPALETTE; }
    if (@hasDecl(@This(), "PDD_PALCB_SETENTRIES")) { _ = PDD_PALCB_SETENTRIES; }
    if (@hasDecl(@This(), "PDD_SURFCB_LOCK")) { _ = PDD_SURFCB_LOCK; }
    if (@hasDecl(@This(), "PDD_SURFCB_UNLOCK")) { _ = PDD_SURFCB_UNLOCK; }
    if (@hasDecl(@This(), "PDD_SURFCB_BLT")) { _ = PDD_SURFCB_BLT; }
    if (@hasDecl(@This(), "PDD_SURFCB_UPDATEOVERLAY")) { _ = PDD_SURFCB_UPDATEOVERLAY; }
    if (@hasDecl(@This(), "PDD_SURFCB_SETOVERLAYPOSITION")) { _ = PDD_SURFCB_SETOVERLAYPOSITION; }
    if (@hasDecl(@This(), "PDD_SURFCB_SETPALETTE")) { _ = PDD_SURFCB_SETPALETTE; }
    if (@hasDecl(@This(), "PDD_SURFCB_FLIP")) { _ = PDD_SURFCB_FLIP; }
    if (@hasDecl(@This(), "PDD_SURFCB_DESTROYSURFACE")) { _ = PDD_SURFCB_DESTROYSURFACE; }
    if (@hasDecl(@This(), "PDD_SURFCB_ADDATTACHEDSURFACE")) { _ = PDD_SURFCB_ADDATTACHEDSURFACE; }
    if (@hasDecl(@This(), "PDD_SURFCB_SETCOLORKEY")) { _ = PDD_SURFCB_SETCOLORKEY; }
    if (@hasDecl(@This(), "PDD_SURFCB_GETBLTSTATUS")) { _ = PDD_SURFCB_GETBLTSTATUS; }
    if (@hasDecl(@This(), "PDD_SURFCB_GETFLIPSTATUS")) { _ = PDD_SURFCB_GETFLIPSTATUS; }
    if (@hasDecl(@This(), "PDD_VPORTCB_CANCREATEVIDEOPORT")) { _ = PDD_VPORTCB_CANCREATEVIDEOPORT; }
    if (@hasDecl(@This(), "PDD_VPORTCB_CREATEVIDEOPORT")) { _ = PDD_VPORTCB_CREATEVIDEOPORT; }
    if (@hasDecl(@This(), "PDD_VPORTCB_FLIP")) { _ = PDD_VPORTCB_FLIP; }
    if (@hasDecl(@This(), "PDD_VPORTCB_GETBANDWIDTH")) { _ = PDD_VPORTCB_GETBANDWIDTH; }
    if (@hasDecl(@This(), "PDD_VPORTCB_GETINPUTFORMATS")) { _ = PDD_VPORTCB_GETINPUTFORMATS; }
    if (@hasDecl(@This(), "PDD_VPORTCB_GETOUTPUTFORMATS")) { _ = PDD_VPORTCB_GETOUTPUTFORMATS; }
    if (@hasDecl(@This(), "PDD_VPORTCB_GETFIELD")) { _ = PDD_VPORTCB_GETFIELD; }
    if (@hasDecl(@This(), "PDD_VPORTCB_GETLINE")) { _ = PDD_VPORTCB_GETLINE; }
    if (@hasDecl(@This(), "PDD_VPORTCB_GETVPORTCONNECT")) { _ = PDD_VPORTCB_GETVPORTCONNECT; }
    if (@hasDecl(@This(), "PDD_VPORTCB_DESTROYVPORT")) { _ = PDD_VPORTCB_DESTROYVPORT; }
    if (@hasDecl(@This(), "PDD_VPORTCB_GETFLIPSTATUS")) { _ = PDD_VPORTCB_GETFLIPSTATUS; }
    if (@hasDecl(@This(), "PDD_VPORTCB_UPDATE")) { _ = PDD_VPORTCB_UPDATE; }
    if (@hasDecl(@This(), "PDD_VPORTCB_WAITFORSYNC")) { _ = PDD_VPORTCB_WAITFORSYNC; }
    if (@hasDecl(@This(), "PDD_VPORTCB_GETSIGNALSTATUS")) { _ = PDD_VPORTCB_GETSIGNALSTATUS; }
    if (@hasDecl(@This(), "PDD_VPORTCB_COLORCONTROL")) { _ = PDD_VPORTCB_COLORCONTROL; }
    if (@hasDecl(@This(), "PDD_COLORCB_COLORCONTROL")) { _ = PDD_COLORCB_COLORCONTROL; }
    if (@hasDecl(@This(), "PDD_KERNELCB_SYNCSURFACE")) { _ = PDD_KERNELCB_SYNCSURFACE; }
    if (@hasDecl(@This(), "PDD_KERNELCB_SYNCVIDEOPORT")) { _ = PDD_KERNELCB_SYNCVIDEOPORT; }
    if (@hasDecl(@This(), "PDD_MOCOMPCB_GETGUIDS")) { _ = PDD_MOCOMPCB_GETGUIDS; }
    if (@hasDecl(@This(), "PDD_MOCOMPCB_GETFORMATS")) { _ = PDD_MOCOMPCB_GETFORMATS; }
    if (@hasDecl(@This(), "PDD_MOCOMPCB_CREATE")) { _ = PDD_MOCOMPCB_CREATE; }
    if (@hasDecl(@This(), "PDD_MOCOMPCB_GETCOMPBUFFINFO")) { _ = PDD_MOCOMPCB_GETCOMPBUFFINFO; }
    if (@hasDecl(@This(), "PDD_MOCOMPCB_GETINTERNALINFO")) { _ = PDD_MOCOMPCB_GETINTERNALINFO; }
    if (@hasDecl(@This(), "PDD_MOCOMPCB_BEGINFRAME")) { _ = PDD_MOCOMPCB_BEGINFRAME; }
    if (@hasDecl(@This(), "PDD_MOCOMPCB_ENDFRAME")) { _ = PDD_MOCOMPCB_ENDFRAME; }
    if (@hasDecl(@This(), "PDD_MOCOMPCB_RENDER")) { _ = PDD_MOCOMPCB_RENDER; }
    if (@hasDecl(@This(), "PDD_MOCOMPCB_QUERYSTATUS")) { _ = PDD_MOCOMPCB_QUERYSTATUS; }
    if (@hasDecl(@This(), "PDD_MOCOMPCB_DESTROY")) { _ = PDD_MOCOMPCB_DESTROY; }
    if (@hasDecl(@This(), "PFN_DrvQueryGlyphAttrs")) { _ = PFN_DrvQueryGlyphAttrs; }

    @setEvalBranchQuota(
        @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("std").builtin.is_test) return;
    inline for (@import("std").meta.declarations(@This())) |decl| {
        if (decl.is_pub) {
            _ = decl;
        }
    }
}
