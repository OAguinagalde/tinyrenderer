//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (5)
//--------------------------------------------------------------------------------
// TODO: this type has a FreeFunc 'wglDeleteContext', what can Zig do with this information?
pub const HGLRC = ?*opaque{};

pub const PIXELFORMATDESCRIPTOR = extern struct {
    nSize: u16,
    nVersion: u16,
    dwFlags: u32,
    iPixelType: u8,
    cColorBits: u8,
    cRedBits: u8,
    cRedShift: u8,
    cGreenBits: u8,
    cGreenShift: u8,
    cBlueBits: u8,
    cBlueShift: u8,
    cAlphaBits: u8,
    cAlphaShift: u8,
    cAccumBits: u8,
    cAccumRedBits: u8,
    cAccumGreenBits: u8,
    cAccumBlueBits: u8,
    cAccumAlphaBits: u8,
    cDepthBits: u8,
    cStencilBits: u8,
    cAuxBuffers: u8,
    iLayerType: u8,
    bReserved: u8,
    dwLayerMask: u32,
    dwVisibleMask: u32,
    dwDamageMask: u32,
};

pub const POINTFLOAT = extern struct {
    x: f32,
    y: f32,
};

pub const GLYPHMETRICSFLOAT = extern struct {
    gmfBlackBoxX: f32,
    gmfBlackBoxY: f32,
    gmfptGlyphOrigin: POINTFLOAT,
    gmfCellIncX: f32,
    gmfCellIncY: f32,
};

pub const LAYERPLANEDESCRIPTOR = extern struct {
    nSize: u16,
    nVersion: u16,
    dwFlags: u32,
    iPixelType: u8,
    cColorBits: u8,
    cRedBits: u8,
    cRedShift: u8,
    cGreenBits: u8,
    cGreenShift: u8,
    cBlueBits: u8,
    cBlueShift: u8,
    cAlphaBits: u8,
    cAlphaShift: u8,
    cAccumBits: u8,
    cAccumRedBits: u8,
    cAccumGreenBits: u8,
    cAccumBlueBits: u8,
    cAccumAlphaBits: u8,
    cDepthBits: u8,
    cStencilBits: u8,
    cAuxBuffers: u8,
    iLayerPlane: u8,
    bReserved: u8,
    crTransparent: u32,
};


//--------------------------------------------------------------------------------
// Section: Functions (24)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn ChoosePixelFormat(
    hdc: HDC,
    ppfd: *const PIXELFORMATDESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn DescribePixelFormat(
    hdc: HDC,
    iPixelFormat: i32,
    nBytes: u32,
    // TODO: what to do with BytesParamIndex 2?
    ppfd: ?*PIXELFORMATDESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn GetPixelFormat(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn SetPixelFormat(
    hdc: HDC,
    format: i32,
    ppfd: *const PIXELFORMATDESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn GetEnhMetaFilePixelFormat(
    hemf: HENHMETAFILE,
    cbBuffer: u32,
    // TODO: what to do with BytesParamIndex 1?
    ppfd: ?*PIXELFORMATDESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "OPENGL32" fn wglCopyContext(
    param0: HGLRC,
    param1: HGLRC,
    param2: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "OPENGL32" fn wglCreateContext(
    param0: HDC,
) callconv(@import("std").os.windows.WINAPI) HGLRC;

// TODO: this type is limited to platform 'windows5.0'
pub extern "OPENGL32" fn wglCreateLayerContext(
    param0: HDC,
    param1: i32,
) callconv(@import("std").os.windows.WINAPI) HGLRC;

// TODO: this type is limited to platform 'windows5.0'
pub extern "OPENGL32" fn wglDeleteContext(
    param0: HGLRC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "OPENGL32" fn wglGetCurrentContext(
) callconv(@import("std").os.windows.WINAPI) HGLRC;

// TODO: this type is limited to platform 'windows5.0'
pub extern "OPENGL32" fn wglGetCurrentDC(
) callconv(@import("std").os.windows.WINAPI) HDC;

// TODO: this type is limited to platform 'windows5.0'
pub extern "OPENGL32" fn wglGetProcAddress(
    param0: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) PROC;

// TODO: this type is limited to platform 'windows5.0'
pub extern "OPENGL32" fn wglMakeCurrent(
    param0: HDC,
    param1: HGLRC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "OPENGL32" fn wglShareLists(
    param0: HGLRC,
    param1: HGLRC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "OPENGL32" fn wglUseFontBitmapsA(
    param0: HDC,
    param1: u32,
    param2: u32,
    param3: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "OPENGL32" fn wglUseFontBitmapsW(
    param0: HDC,
    param1: u32,
    param2: u32,
    param3: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn SwapBuffers(
    param0: HDC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "OPENGL32" fn wglUseFontOutlinesA(
    param0: HDC,
    param1: u32,
    param2: u32,
    param3: u32,
    param4: f32,
    param5: f32,
    param6: i32,
    param7: *GLYPHMETRICSFLOAT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "OPENGL32" fn wglUseFontOutlinesW(
    param0: HDC,
    param1: u32,
    param2: u32,
    param3: u32,
    param4: f32,
    param5: f32,
    param6: i32,
    param7: *GLYPHMETRICSFLOAT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "OPENGL32" fn wglDescribeLayerPlane(
    param0: HDC,
    param1: i32,
    param2: i32,
    param3: u32,
    param4: *LAYERPLANEDESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "OPENGL32" fn wglSetLayerPaletteEntries(
    param0: HDC,
    param1: i32,
    param2: i32,
    param3: i32,
    param4: *const u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "OPENGL32" fn wglGetLayerPaletteEntries(
    param0: HDC,
    param1: i32,
    param2: i32,
    param3: i32,
    param4: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "OPENGL32" fn wglRealizeLayerPalette(
    param0: HDC,
    param1: i32,
    param2: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "OPENGL32" fn wglSwapLayerBuffers(
    param0: HDC,
    param1: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (2)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const wglUseFontBitmaps = wglUseFontBitmapsA;
        pub const wglUseFontOutlines = wglUseFontOutlinesA;
    },
    .wide => struct {
        pub const wglUseFontBitmaps = wglUseFontBitmapsW;
        pub const wglUseFontOutlines = wglUseFontOutlinesW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const wglUseFontBitmaps = *opaque{};
        pub const wglUseFontOutlines = *opaque{};
    } else struct {
        pub const wglUseFontBitmaps = @compileError("'wglUseFontBitmaps' requires that UNICODE be set to true or false in the root module");
        pub const wglUseFontOutlines = @compileError("'wglUseFontOutlines' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (5)
//--------------------------------------------------------------------------------
const HDC = @import("gdi.zig").HDC;
const PROC = @import("system_services.zig").PROC;
const HENHMETAFILE = @import("gdi.zig").HENHMETAFILE;
const PSTR = @import("system_services.zig").PSTR;
const BOOL = @import("system_services.zig").BOOL;

test {
    @setEvalBranchQuota(
        @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("std").builtin.is_test) return;
    inline for (@import("std").meta.declarations(@This())) |decl| {
        if (decl.is_pub) {
            _ = decl;
        }
    }
}
