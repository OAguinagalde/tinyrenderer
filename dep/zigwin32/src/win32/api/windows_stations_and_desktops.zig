//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (4)
//--------------------------------------------------------------------------------
// TODO: this type has a FreeFunc 'CloseWindowStation', what can Zig do with this information?
pub const HWINSTA = ?*opaque{};

// TODO: this type has a FreeFunc 'CloseDesktop', what can Zig do with this information?
pub const HDESK = ?*opaque{};

pub const USER_OBJECT_INFORMATION_INDEX = extern enum(u32) {
    FLAGS = 1,
    HEAPSIZE = 5,
    IO = 6,
    NAME = 2,
    TYPE = 3,
    USER_SID = 4,
};
pub const UOI_FLAGS = USER_OBJECT_INFORMATION_INDEX.FLAGS;
pub const UOI_HEAPSIZE = USER_OBJECT_INFORMATION_INDEX.HEAPSIZE;
pub const UOI_IO = USER_OBJECT_INFORMATION_INDEX.IO;
pub const UOI_NAME = USER_OBJECT_INFORMATION_INDEX.NAME;
pub const UOI_TYPE = USER_OBJECT_INFORMATION_INDEX.TYPE;
pub const UOI_USER_SID = USER_OBJECT_INFORMATION_INDEX.USER_SID;

pub const USEROBJECTFLAGS = extern struct {
    fInherit: BOOL,
    fReserved: BOOL,
    dwFlags: u32,
};


//--------------------------------------------------------------------------------
// Section: Functions (27)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn CreateDesktopA(
    lpszDesktop: [*:0]const u8,
    lpszDevice: [*:0]const u8,
    pDevmode: *DEVMODEA,
    dwFlags: u32,
    dwDesiredAccess: u32,
    lpsa: ?*SECURITY_ATTRIBUTES,
) callconv(@import("std").os.windows.WINAPI) HDESK;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn CreateDesktopW(
    lpszDesktop: [*:0]const u16,
    lpszDevice: [*:0]const u16,
    pDevmode: *DEVMODEW,
    dwFlags: u32,
    dwDesiredAccess: u32,
    lpsa: ?*SECURITY_ATTRIBUTES,
) callconv(@import("std").os.windows.WINAPI) HDESK;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "USER32" fn CreateDesktopExA(
    lpszDesktop: [*:0]const u8,
    lpszDevice: [*:0]const u8,
    pDevmode: *DEVMODEA,
    dwFlags: u32,
    dwDesiredAccess: u32,
    lpsa: ?*SECURITY_ATTRIBUTES,
    ulHeapSize: u32,
    pvoid: *c_void,
) callconv(@import("std").os.windows.WINAPI) HDESK;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "USER32" fn CreateDesktopExW(
    lpszDesktop: [*:0]const u16,
    lpszDevice: [*:0]const u16,
    pDevmode: *DEVMODEW,
    dwFlags: u32,
    dwDesiredAccess: u32,
    lpsa: ?*SECURITY_ATTRIBUTES,
    ulHeapSize: u32,
    pvoid: *c_void,
) callconv(@import("std").os.windows.WINAPI) HDESK;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn OpenDesktopA(
    lpszDesktop: [*:0]const u8,
    dwFlags: u32,
    fInherit: BOOL,
    dwDesiredAccess: u32,
) callconv(@import("std").os.windows.WINAPI) HDESK;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn OpenDesktopW(
    lpszDesktop: [*:0]const u16,
    dwFlags: u32,
    fInherit: BOOL,
    dwDesiredAccess: u32,
) callconv(@import("std").os.windows.WINAPI) HDESK;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn OpenInputDesktop(
    dwFlags: u32,
    fInherit: BOOL,
    dwDesiredAccess: u32,
) callconv(@import("std").os.windows.WINAPI) HDESK;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn EnumDesktopsA(
    hwinsta: HWINSTA,
    lpEnumFunc: DESKTOPENUMPROCA,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn EnumDesktopsW(
    hwinsta: HWINSTA,
    lpEnumFunc: DESKTOPENUMPROCW,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn EnumDesktopWindows(
    hDesktop: HDESK,
    lpfn: WNDENUMPROC,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn SwitchDesktop(
    hDesktop: HDESK,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn SetThreadDesktop(
    hDesktop: HDESK,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn CloseDesktop(
    hDesktop: HDESK,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn GetThreadDesktop(
    dwThreadId: u32,
) callconv(@import("std").os.windows.WINAPI) HDESK;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn CreateWindowStationA(
    lpwinsta: ?[*:0]const u8,
    dwFlags: u32,
    dwDesiredAccess: u32,
    lpsa: ?*SECURITY_ATTRIBUTES,
) callconv(@import("std").os.windows.WINAPI) HWINSTA;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn CreateWindowStationW(
    lpwinsta: ?[*:0]const u16,
    dwFlags: u32,
    dwDesiredAccess: u32,
    lpsa: ?*SECURITY_ATTRIBUTES,
) callconv(@import("std").os.windows.WINAPI) HWINSTA;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn OpenWindowStationA(
    lpszWinSta: [*:0]const u8,
    fInherit: BOOL,
    dwDesiredAccess: u32,
) callconv(@import("std").os.windows.WINAPI) HWINSTA;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn OpenWindowStationW(
    lpszWinSta: [*:0]const u16,
    fInherit: BOOL,
    dwDesiredAccess: u32,
) callconv(@import("std").os.windows.WINAPI) HWINSTA;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn EnumWindowStationsA(
    lpEnumFunc: WINSTAENUMPROCA,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn EnumWindowStationsW(
    lpEnumFunc: WINSTAENUMPROCW,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn CloseWindowStation(
    hWinSta: HWINSTA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn SetProcessWindowStation(
    hWinSta: HWINSTA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn GetProcessWindowStation(
) callconv(@import("std").os.windows.WINAPI) HWINSTA;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn GetUserObjectInformationA(
    hObj: HANDLE,
    nIndex: USER_OBJECT_INFORMATION_INDEX,
    // TODO: what to do with BytesParamIndex 3?
    pvInfo: ?*c_void,
    nLength: u32,
    lpnLengthNeeded: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn GetUserObjectInformationW(
    hObj: HANDLE,
    nIndex: USER_OBJECT_INFORMATION_INDEX,
    // TODO: what to do with BytesParamIndex 3?
    pvInfo: ?*c_void,
    nLength: u32,
    lpnLengthNeeded: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn SetUserObjectInformationA(
    hObj: HANDLE,
    nIndex: i32,
    // TODO: what to do with BytesParamIndex 3?
    pvInfo: *c_void,
    nLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn SetUserObjectInformationW(
    hObj: HANDLE,
    nIndex: i32,
    // TODO: what to do with BytesParamIndex 3?
    pvInfo: *c_void,
    nLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (9)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const CreateDesktop = CreateDesktopA;
        pub const CreateDesktopEx = CreateDesktopExA;
        pub const OpenDesktop = OpenDesktopA;
        pub const EnumDesktops = EnumDesktopsA;
        pub const CreateWindowStation = CreateWindowStationA;
        pub const OpenWindowStation = OpenWindowStationA;
        pub const EnumWindowStations = EnumWindowStationsA;
        pub const GetUserObjectInformation = GetUserObjectInformationA;
        pub const SetUserObjectInformation = SetUserObjectInformationA;
    },
    .wide => struct {
        pub const CreateDesktop = CreateDesktopW;
        pub const CreateDesktopEx = CreateDesktopExW;
        pub const OpenDesktop = OpenDesktopW;
        pub const EnumDesktops = EnumDesktopsW;
        pub const CreateWindowStation = CreateWindowStationW;
        pub const OpenWindowStation = OpenWindowStationW;
        pub const EnumWindowStations = EnumWindowStationsW;
        pub const GetUserObjectInformation = GetUserObjectInformationW;
        pub const SetUserObjectInformation = SetUserObjectInformationW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const CreateDesktop = *opaque{};
        pub const CreateDesktopEx = *opaque{};
        pub const OpenDesktop = *opaque{};
        pub const EnumDesktops = *opaque{};
        pub const CreateWindowStation = *opaque{};
        pub const OpenWindowStation = *opaque{};
        pub const EnumWindowStations = *opaque{};
        pub const GetUserObjectInformation = *opaque{};
        pub const SetUserObjectInformation = *opaque{};
    } else struct {
        pub const CreateDesktop = @compileError("'CreateDesktop' requires that UNICODE be set to true or false in the root module");
        pub const CreateDesktopEx = @compileError("'CreateDesktopEx' requires that UNICODE be set to true or false in the root module");
        pub const OpenDesktop = @compileError("'OpenDesktop' requires that UNICODE be set to true or false in the root module");
        pub const EnumDesktops = @compileError("'EnumDesktops' requires that UNICODE be set to true or false in the root module");
        pub const CreateWindowStation = @compileError("'CreateWindowStation' requires that UNICODE be set to true or false in the root module");
        pub const OpenWindowStation = @compileError("'OpenWindowStation' requires that UNICODE be set to true or false in the root module");
        pub const EnumWindowStations = @compileError("'EnumWindowStations' requires that UNICODE be set to true or false in the root module");
        pub const GetUserObjectInformation = @compileError("'GetUserObjectInformation' requires that UNICODE be set to true or false in the root module");
        pub const SetUserObjectInformation = @compileError("'SetUserObjectInformation' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (13)
//--------------------------------------------------------------------------------
const LPARAM = @import("windows_and_messaging.zig").LPARAM;
const PWSTR = @import("system_services.zig").PWSTR;
const DEVMODEW = @import("display_devices.zig").DEVMODEW;
const DESKTOPENUMPROCA = @import("windows_and_messaging.zig").DESKTOPENUMPROCA;
const SECURITY_ATTRIBUTES = @import("system_services.zig").SECURITY_ATTRIBUTES;
const PSTR = @import("system_services.zig").PSTR;
const DESKTOPENUMPROCW = @import("windows_and_messaging.zig").DESKTOPENUMPROCW;
const BOOL = @import("system_services.zig").BOOL;
const DEVMODEA = @import("display_devices.zig").DEVMODEA;
const HANDLE = @import("system_services.zig").HANDLE;
const WINSTAENUMPROCW = @import("windows_and_messaging.zig").WINSTAENUMPROCW;
const WNDENUMPROC = @import("windows_and_messaging.zig").WNDENUMPROC;
const WINSTAENUMPROCA = @import("windows_and_messaging.zig").WINSTAENUMPROCA;

test {
    @setEvalBranchQuota(
        @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("std").builtin.is_test) return;
    inline for (@import("std").meta.declarations(@This())) |decl| {
        if (decl.is_pub) {
            _ = decl;
        }
    }
}
