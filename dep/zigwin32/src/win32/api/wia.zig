//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (24)
//--------------------------------------------------------------------------------
pub const WIA_DITHER_PATTERN_DATA = extern struct {
    lSize: i32,
    bstrPatternName: BSTR,
    lPatternWidth: i32,
    lPatternLength: i32,
    cbPattern: i32,
    pbPattern: *u8,
};

pub const WIA_PROPID_TO_NAME = extern struct {
    propid: u32,
    pszName: PWSTR,
};

pub const WIA_FORMAT_INFO = extern struct {
    guidFormatID: Guid,
    lTymed: i32,
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IWiaDevMgr_Value = @import("../zig.zig").Guid.initString("5eb2502a-8cf1-11d1-bf92-0060081ed811");
pub const IID_IWiaDevMgr = &IID_IWiaDevMgr_Value;
pub const IWiaDevMgr = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        EnumDeviceInfo: fn(
            self: *const IWiaDevMgr,
            lFlag: i32,
            ppIEnum: ?*?*IEnumWIA_DEV_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDevice: fn(
            self: *const IWiaDevMgr,
            bstrDeviceID: BSTR,
            ppWiaItemRoot: **IWiaItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SelectDeviceDlg: fn(
            self: *const IWiaDevMgr,
            hwndParent: HWND,
            lDeviceType: i32,
            lFlags: i32,
            pbstrDeviceID: *BSTR,
            ppItemRoot: **IWiaItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SelectDeviceDlgID: fn(
            self: *const IWiaDevMgr,
            hwndParent: HWND,
            lDeviceType: i32,
            lFlags: i32,
            pbstrDeviceID: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetImageDlg: fn(
            self: *const IWiaDevMgr,
            hwndParent: HWND,
            lDeviceType: i32,
            lFlags: i32,
            lIntent: i32,
            pItemRoot: *IWiaItem,
            bstrFilename: BSTR,
            pguidFormat: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterEventCallbackProgram: fn(
            self: *const IWiaDevMgr,
            lFlags: i32,
            bstrDeviceID: BSTR,
            pEventGUID: *const Guid,
            bstrCommandline: BSTR,
            bstrName: BSTR,
            bstrDescription: BSTR,
            bstrIcon: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterEventCallbackInterface: fn(
            self: *const IWiaDevMgr,
            lFlags: i32,
            bstrDeviceID: BSTR,
            pEventGUID: *const Guid,
            pIWiaEventCallback: *IWiaEventCallback,
            pEventObject: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterEventCallbackCLSID: fn(
            self: *const IWiaDevMgr,
            lFlags: i32,
            bstrDeviceID: BSTR,
            pEventGUID: *const Guid,
            pClsID: *const Guid,
            bstrName: BSTR,
            bstrDescription: BSTR,
            bstrIcon: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddDeviceDlg: fn(
            self: *const IWiaDevMgr,
            hwndParent: HWND,
            lFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaDevMgr_EnumDeviceInfo(self: *const T, lFlag: i32, ppIEnum: ?*?*IEnumWIA_DEV_INFO) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaDevMgr.VTable, self.vtable).EnumDeviceInfo(@ptrCast(*const IWiaDevMgr, self), lFlag, ppIEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaDevMgr_CreateDevice(self: *const T, bstrDeviceID: BSTR, ppWiaItemRoot: **IWiaItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaDevMgr.VTable, self.vtable).CreateDevice(@ptrCast(*const IWiaDevMgr, self), bstrDeviceID, ppWiaItemRoot);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaDevMgr_SelectDeviceDlg(self: *const T, hwndParent: HWND, lDeviceType: i32, lFlags: i32, pbstrDeviceID: *BSTR, ppItemRoot: **IWiaItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaDevMgr.VTable, self.vtable).SelectDeviceDlg(@ptrCast(*const IWiaDevMgr, self), hwndParent, lDeviceType, lFlags, pbstrDeviceID, ppItemRoot);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaDevMgr_SelectDeviceDlgID(self: *const T, hwndParent: HWND, lDeviceType: i32, lFlags: i32, pbstrDeviceID: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaDevMgr.VTable, self.vtable).SelectDeviceDlgID(@ptrCast(*const IWiaDevMgr, self), hwndParent, lDeviceType, lFlags, pbstrDeviceID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaDevMgr_GetImageDlg(self: *const T, hwndParent: HWND, lDeviceType: i32, lFlags: i32, lIntent: i32, pItemRoot: *IWiaItem, bstrFilename: BSTR, pguidFormat: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaDevMgr.VTable, self.vtable).GetImageDlg(@ptrCast(*const IWiaDevMgr, self), hwndParent, lDeviceType, lFlags, lIntent, pItemRoot, bstrFilename, pguidFormat);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaDevMgr_RegisterEventCallbackProgram(self: *const T, lFlags: i32, bstrDeviceID: BSTR, pEventGUID: *const Guid, bstrCommandline: BSTR, bstrName: BSTR, bstrDescription: BSTR, bstrIcon: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaDevMgr.VTable, self.vtable).RegisterEventCallbackProgram(@ptrCast(*const IWiaDevMgr, self), lFlags, bstrDeviceID, pEventGUID, bstrCommandline, bstrName, bstrDescription, bstrIcon);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaDevMgr_RegisterEventCallbackInterface(self: *const T, lFlags: i32, bstrDeviceID: BSTR, pEventGUID: *const Guid, pIWiaEventCallback: *IWiaEventCallback, pEventObject: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaDevMgr.VTable, self.vtable).RegisterEventCallbackInterface(@ptrCast(*const IWiaDevMgr, self), lFlags, bstrDeviceID, pEventGUID, pIWiaEventCallback, pEventObject);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaDevMgr_RegisterEventCallbackCLSID(self: *const T, lFlags: i32, bstrDeviceID: BSTR, pEventGUID: *const Guid, pClsID: *const Guid, bstrName: BSTR, bstrDescription: BSTR, bstrIcon: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaDevMgr.VTable, self.vtable).RegisterEventCallbackCLSID(@ptrCast(*const IWiaDevMgr, self), lFlags, bstrDeviceID, pEventGUID, pClsID, bstrName, bstrDescription, bstrIcon);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaDevMgr_AddDeviceDlg(self: *const T, hwndParent: HWND, lFlags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaDevMgr.VTable, self.vtable).AddDeviceDlg(@ptrCast(*const IWiaDevMgr, self), hwndParent, lFlags);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IEnumWIA_DEV_INFO_Value = @import("../zig.zig").Guid.initString("5e38b83c-8cf1-11d1-bf92-0060081ed811");
pub const IID_IEnumWIA_DEV_INFO = &IID_IEnumWIA_DEV_INFO_Value;
pub const IEnumWIA_DEV_INFO = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: fn(
            self: *const IEnumWIA_DEV_INFO,
            celt: u32,
            rgelt: **IWiaPropertyStorage,
            pceltFetched: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumWIA_DEV_INFO,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumWIA_DEV_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IEnumWIA_DEV_INFO,
            ppIEnum: ?*?*IEnumWIA_DEV_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCount: fn(
            self: *const IEnumWIA_DEV_INFO,
            celt: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumWIA_DEV_INFO_Next(self: *const T, celt: u32, rgelt: **IWiaPropertyStorage, pceltFetched: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumWIA_DEV_INFO.VTable, self.vtable).Next(@ptrCast(*const IEnumWIA_DEV_INFO, self), celt, rgelt, pceltFetched);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumWIA_DEV_INFO_Skip(self: *const T, celt: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumWIA_DEV_INFO.VTable, self.vtable).Skip(@ptrCast(*const IEnumWIA_DEV_INFO, self), celt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumWIA_DEV_INFO_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumWIA_DEV_INFO.VTable, self.vtable).Reset(@ptrCast(*const IEnumWIA_DEV_INFO, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumWIA_DEV_INFO_Clone(self: *const T, ppIEnum: ?*?*IEnumWIA_DEV_INFO) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumWIA_DEV_INFO.VTable, self.vtable).Clone(@ptrCast(*const IEnumWIA_DEV_INFO, self), ppIEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumWIA_DEV_INFO_GetCount(self: *const T, celt: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumWIA_DEV_INFO.VTable, self.vtable).GetCount(@ptrCast(*const IEnumWIA_DEV_INFO, self), celt);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IWiaEventCallback_Value = @import("../zig.zig").Guid.initString("ae6287b0-0084-11d2-973b-00a0c9068f2e");
pub const IID_IWiaEventCallback = &IID_IWiaEventCallback_Value;
pub const IWiaEventCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ImageEventCallback: fn(
            self: *const IWiaEventCallback,
            pEventGUID: *const Guid,
            bstrEventDescription: BSTR,
            bstrDeviceID: BSTR,
            bstrDeviceDescription: BSTR,
            dwDeviceType: u32,
            bstrFullItemName: BSTR,
            pulEventType: *u32,
            ulReserved: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaEventCallback_ImageEventCallback(self: *const T, pEventGUID: *const Guid, bstrEventDescription: BSTR, bstrDeviceID: BSTR, bstrDeviceDescription: BSTR, dwDeviceType: u32, bstrFullItemName: BSTR, pulEventType: *u32, ulReserved: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaEventCallback.VTable, self.vtable).ImageEventCallback(@ptrCast(*const IWiaEventCallback, self), pEventGUID, bstrEventDescription, bstrDeviceID, bstrDeviceDescription, dwDeviceType, bstrFullItemName, pulEventType, ulReserved);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const WIA_DATA_CALLBACK_HEADER = extern struct {
    lSize: i32,
    guidFormatID: Guid,
    lBufferSize: i32,
    lPageCount: i32,
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IWiaDataCallback_Value = @import("../zig.zig").Guid.initString("a558a866-a5b0-11d2-a08f-00c04f72dc3c");
pub const IID_IWiaDataCallback = &IID_IWiaDataCallback_Value;
pub const IWiaDataCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        BandedDataCallback: fn(
            self: *const IWiaDataCallback,
            lMessage: i32,
            lStatus: i32,
            lPercentComplete: i32,
            lOffset: i32,
            lLength: i32,
            lReserved: i32,
            lResLength: i32,
            pbBuffer: *u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaDataCallback_BandedDataCallback(self: *const T, lMessage: i32, lStatus: i32, lPercentComplete: i32, lOffset: i32, lLength: i32, lReserved: i32, lResLength: i32, pbBuffer: *u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaDataCallback.VTable, self.vtable).BandedDataCallback(@ptrCast(*const IWiaDataCallback, self), lMessage, lStatus, lPercentComplete, lOffset, lLength, lReserved, lResLength, pbBuffer);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const WIA_DATA_TRANSFER_INFO = extern struct {
    ulSize: u32,
    ulSection: u32,
    ulBufferSize: u32,
    bDoubleBuffer: BOOL,
    ulReserved1: u32,
    ulReserved2: u32,
    ulReserved3: u32,
};

pub const WIA_EXTENDED_TRANSFER_INFO = extern struct {
    ulSize: u32,
    ulMinBufferSize: u32,
    ulOptimalBufferSize: u32,
    ulMaxBufferSize: u32,
    ulNumBuffers: u32,
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IWiaDataTransfer_Value = @import("../zig.zig").Guid.initString("a6cef998-a5b0-11d2-a08f-00c04f72dc3c");
pub const IID_IWiaDataTransfer = &IID_IWiaDataTransfer_Value;
pub const IWiaDataTransfer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        idtGetData: fn(
            self: *const IWiaDataTransfer,
            pMedium: *STGMEDIUM,
            pIWiaDataCallback: *IWiaDataCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        idtGetBandedData: fn(
            self: *const IWiaDataTransfer,
            pWiaDataTransInfo: *WIA_DATA_TRANSFER_INFO,
            pIWiaDataCallback: *IWiaDataCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        idtQueryGetData: fn(
            self: *const IWiaDataTransfer,
            pfe: ?*WIA_FORMAT_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        idtEnumWIA_FORMAT_INFO: fn(
            self: *const IWiaDataTransfer,
            ppEnum: ?*?*IEnumWIA_FORMAT_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        idtGetExtendedTransferInfo: fn(
            self: *const IWiaDataTransfer,
            pExtendedTransferInfo: *WIA_EXTENDED_TRANSFER_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaDataTransfer_idtGetData(self: *const T, pMedium: *STGMEDIUM, pIWiaDataCallback: *IWiaDataCallback) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaDataTransfer.VTable, self.vtable).idtGetData(@ptrCast(*const IWiaDataTransfer, self), pMedium, pIWiaDataCallback);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaDataTransfer_idtGetBandedData(self: *const T, pWiaDataTransInfo: *WIA_DATA_TRANSFER_INFO, pIWiaDataCallback: *IWiaDataCallback) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaDataTransfer.VTable, self.vtable).idtGetBandedData(@ptrCast(*const IWiaDataTransfer, self), pWiaDataTransInfo, pIWiaDataCallback);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaDataTransfer_idtQueryGetData(self: *const T, pfe: ?*WIA_FORMAT_INFO) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaDataTransfer.VTable, self.vtable).idtQueryGetData(@ptrCast(*const IWiaDataTransfer, self), pfe);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaDataTransfer_idtEnumWIA_FORMAT_INFO(self: *const T, ppEnum: ?*?*IEnumWIA_FORMAT_INFO) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaDataTransfer.VTable, self.vtable).idtEnumWIA_FORMAT_INFO(@ptrCast(*const IWiaDataTransfer, self), ppEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaDataTransfer_idtGetExtendedTransferInfo(self: *const T, pExtendedTransferInfo: *WIA_EXTENDED_TRANSFER_INFO) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaDataTransfer.VTable, self.vtable).idtGetExtendedTransferInfo(@ptrCast(*const IWiaDataTransfer, self), pExtendedTransferInfo);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IWiaItem_Value = @import("../zig.zig").Guid.initString("4db1ad10-3391-11d2-9a33-00c04fa36145");
pub const IID_IWiaItem = &IID_IWiaItem_Value;
pub const IWiaItem = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetItemType: fn(
            self: *const IWiaItem,
            pItemType: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AnalyzeItem: fn(
            self: *const IWiaItem,
            lFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumChildItems: fn(
            self: *const IWiaItem,
            ppIEnumWiaItem: ?*?*IEnumWiaItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteItem: fn(
            self: *const IWiaItem,
            lFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateChildItem: fn(
            self: *const IWiaItem,
            lFlags: i32,
            bstrItemName: BSTR,
            bstrFullItemName: BSTR,
            ppIWiaItem: ?*?*IWiaItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumRegisterEventInfo: fn(
            self: *const IWiaItem,
            lFlags: i32,
            pEventGUID: *const Guid,
            ppIEnum: ?*?*IEnumWIA_DEV_CAPS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindItemByName: fn(
            self: *const IWiaItem,
            lFlags: i32,
            bstrFullItemName: BSTR,
            ppIWiaItem: ?*?*IWiaItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeviceDlg: fn(
            self: *const IWiaItem,
            hwndParent: HWND,
            lFlags: i32,
            lIntent: i32,
            plItemCount: *i32,
            ppIWiaItem: ***IWiaItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeviceCommand: fn(
            self: *const IWiaItem,
            lFlags: i32,
            pCmdGUID: *const Guid,
            pIWiaItem: ?*?*IWiaItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRootItem: fn(
            self: *const IWiaItem,
            ppIWiaItem: ?*?*IWiaItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumDeviceCapabilities: fn(
            self: *const IWiaItem,
            lFlags: i32,
            ppIEnumWIA_DEV_CAPS: ?*?*IEnumWIA_DEV_CAPS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DumpItemData: fn(
            self: *const IWiaItem,
            bstrData: ?*BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DumpDrvItemData: fn(
            self: *const IWiaItem,
            bstrData: ?*BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DumpTreeItemData: fn(
            self: *const IWiaItem,
            bstrData: ?*BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Diagnostic: fn(
            self: *const IWiaItem,
            ulSize: u32,
            pBuffer: [*:0]u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaItem_GetItemType(self: *const T, pItemType: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaItem.VTable, self.vtable).GetItemType(@ptrCast(*const IWiaItem, self), pItemType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaItem_AnalyzeItem(self: *const T, lFlags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaItem.VTable, self.vtable).AnalyzeItem(@ptrCast(*const IWiaItem, self), lFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaItem_EnumChildItems(self: *const T, ppIEnumWiaItem: ?*?*IEnumWiaItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaItem.VTable, self.vtable).EnumChildItems(@ptrCast(*const IWiaItem, self), ppIEnumWiaItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaItem_DeleteItem(self: *const T, lFlags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaItem.VTable, self.vtable).DeleteItem(@ptrCast(*const IWiaItem, self), lFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaItem_CreateChildItem(self: *const T, lFlags: i32, bstrItemName: BSTR, bstrFullItemName: BSTR, ppIWiaItem: ?*?*IWiaItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaItem.VTable, self.vtable).CreateChildItem(@ptrCast(*const IWiaItem, self), lFlags, bstrItemName, bstrFullItemName, ppIWiaItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaItem_EnumRegisterEventInfo(self: *const T, lFlags: i32, pEventGUID: *const Guid, ppIEnum: ?*?*IEnumWIA_DEV_CAPS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaItem.VTable, self.vtable).EnumRegisterEventInfo(@ptrCast(*const IWiaItem, self), lFlags, pEventGUID, ppIEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaItem_FindItemByName(self: *const T, lFlags: i32, bstrFullItemName: BSTR, ppIWiaItem: ?*?*IWiaItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaItem.VTable, self.vtable).FindItemByName(@ptrCast(*const IWiaItem, self), lFlags, bstrFullItemName, ppIWiaItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaItem_DeviceDlg(self: *const T, hwndParent: HWND, lFlags: i32, lIntent: i32, plItemCount: *i32, ppIWiaItem: ***IWiaItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaItem.VTable, self.vtable).DeviceDlg(@ptrCast(*const IWiaItem, self), hwndParent, lFlags, lIntent, plItemCount, ppIWiaItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaItem_DeviceCommand(self: *const T, lFlags: i32, pCmdGUID: *const Guid, pIWiaItem: ?*?*IWiaItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaItem.VTable, self.vtable).DeviceCommand(@ptrCast(*const IWiaItem, self), lFlags, pCmdGUID, pIWiaItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaItem_GetRootItem(self: *const T, ppIWiaItem: ?*?*IWiaItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaItem.VTable, self.vtable).GetRootItem(@ptrCast(*const IWiaItem, self), ppIWiaItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaItem_EnumDeviceCapabilities(self: *const T, lFlags: i32, ppIEnumWIA_DEV_CAPS: ?*?*IEnumWIA_DEV_CAPS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaItem.VTable, self.vtable).EnumDeviceCapabilities(@ptrCast(*const IWiaItem, self), lFlags, ppIEnumWIA_DEV_CAPS);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaItem_DumpItemData(self: *const T, bstrData: ?*BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaItem.VTable, self.vtable).DumpItemData(@ptrCast(*const IWiaItem, self), bstrData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaItem_DumpDrvItemData(self: *const T, bstrData: ?*BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaItem.VTable, self.vtable).DumpDrvItemData(@ptrCast(*const IWiaItem, self), bstrData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaItem_DumpTreeItemData(self: *const T, bstrData: ?*BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaItem.VTable, self.vtable).DumpTreeItemData(@ptrCast(*const IWiaItem, self), bstrData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaItem_Diagnostic(self: *const T, ulSize: u32, pBuffer: [*:0]u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaItem.VTable, self.vtable).Diagnostic(@ptrCast(*const IWiaItem, self), ulSize, pBuffer);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IWiaPropertyStorage_Value = @import("../zig.zig").Guid.initString("98b5e8a0-29cc-491a-aac0-e6db4fdcceb6");
pub const IID_IWiaPropertyStorage = &IID_IWiaPropertyStorage_Value;
pub const IWiaPropertyStorage = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ReadMultiple: fn(
            self: *const IWiaPropertyStorage,
            cpspec: u32,
            rgpspec: [*]const PROPSPEC,
            rgpropvar: [*]PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteMultiple: fn(
            self: *const IWiaPropertyStorage,
            cpspec: u32,
            rgpspec: *const PROPSPEC,
            rgpropvar: *const PROPVARIANT,
            propidNameFirst: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteMultiple: fn(
            self: *const IWiaPropertyStorage,
            cpspec: u32,
            rgpspec: [*]const PROPSPEC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReadPropertyNames: fn(
            self: *const IWiaPropertyStorage,
            cpropid: u32,
            rgpropid: [*]const u32,
            rglpwstrName: [*]PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WritePropertyNames: fn(
            self: *const IWiaPropertyStorage,
            cpropid: u32,
            rgpropid: [*]const u32,
            rglpwstrName: [*]const [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeletePropertyNames: fn(
            self: *const IWiaPropertyStorage,
            cpropid: u32,
            rgpropid: [*]const u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Commit: fn(
            self: *const IWiaPropertyStorage,
            grfCommitFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Revert: fn(
            self: *const IWiaPropertyStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Enum: fn(
            self: *const IWiaPropertyStorage,
            ppenum: ?*?*IEnumSTATPROPSTG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTimes: fn(
            self: *const IWiaPropertyStorage,
            pctime: *const FILETIME,
            patime: *const FILETIME,
            pmtime: *const FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetClass: fn(
            self: *const IWiaPropertyStorage,
            clsid: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Stat: fn(
            self: *const IWiaPropertyStorage,
            pstatpsstg: *STATPROPSETSTG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyAttributes: fn(
            self: *const IWiaPropertyStorage,
            cpspec: u32,
            rgpspec: [*]PROPSPEC,
            rgflags: [*]u32,
            rgpropvar: [*]PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCount: fn(
            self: *const IWiaPropertyStorage,
            pulNumProps: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyStream: fn(
            self: *const IWiaPropertyStorage,
            pCompatibilityId: *Guid,
            ppIStream: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPropertyStream: fn(
            self: *const IWiaPropertyStorage,
            pCompatibilityId: *Guid,
            pIStream: *IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaPropertyStorage_ReadMultiple(self: *const T, cpspec: u32, rgpspec: [*]const PROPSPEC, rgpropvar: [*]PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaPropertyStorage.VTable, self.vtable).ReadMultiple(@ptrCast(*const IWiaPropertyStorage, self), cpspec, rgpspec, rgpropvar);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaPropertyStorage_WriteMultiple(self: *const T, cpspec: u32, rgpspec: *const PROPSPEC, rgpropvar: *const PROPVARIANT, propidNameFirst: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaPropertyStorage.VTable, self.vtable).WriteMultiple(@ptrCast(*const IWiaPropertyStorage, self), cpspec, rgpspec, rgpropvar, propidNameFirst);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaPropertyStorage_DeleteMultiple(self: *const T, cpspec: u32, rgpspec: [*]const PROPSPEC) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaPropertyStorage.VTable, self.vtable).DeleteMultiple(@ptrCast(*const IWiaPropertyStorage, self), cpspec, rgpspec);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaPropertyStorage_ReadPropertyNames(self: *const T, cpropid: u32, rgpropid: [*]const u32, rglpwstrName: [*]PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaPropertyStorage.VTable, self.vtable).ReadPropertyNames(@ptrCast(*const IWiaPropertyStorage, self), cpropid, rgpropid, rglpwstrName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaPropertyStorage_WritePropertyNames(self: *const T, cpropid: u32, rgpropid: [*]const u32, rglpwstrName: [*]const [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaPropertyStorage.VTable, self.vtable).WritePropertyNames(@ptrCast(*const IWiaPropertyStorage, self), cpropid, rgpropid, rglpwstrName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaPropertyStorage_DeletePropertyNames(self: *const T, cpropid: u32, rgpropid: [*]const u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaPropertyStorage.VTable, self.vtable).DeletePropertyNames(@ptrCast(*const IWiaPropertyStorage, self), cpropid, rgpropid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaPropertyStorage_Commit(self: *const T, grfCommitFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaPropertyStorage.VTable, self.vtable).Commit(@ptrCast(*const IWiaPropertyStorage, self), grfCommitFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaPropertyStorage_Revert(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaPropertyStorage.VTable, self.vtable).Revert(@ptrCast(*const IWiaPropertyStorage, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaPropertyStorage_Enum(self: *const T, ppenum: ?*?*IEnumSTATPROPSTG) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaPropertyStorage.VTable, self.vtable).Enum(@ptrCast(*const IWiaPropertyStorage, self), ppenum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaPropertyStorage_SetTimes(self: *const T, pctime: *const FILETIME, patime: *const FILETIME, pmtime: *const FILETIME) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaPropertyStorage.VTable, self.vtable).SetTimes(@ptrCast(*const IWiaPropertyStorage, self), pctime, patime, pmtime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaPropertyStorage_SetClass(self: *const T, clsid: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaPropertyStorage.VTable, self.vtable).SetClass(@ptrCast(*const IWiaPropertyStorage, self), clsid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaPropertyStorage_Stat(self: *const T, pstatpsstg: *STATPROPSETSTG) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaPropertyStorage.VTable, self.vtable).Stat(@ptrCast(*const IWiaPropertyStorage, self), pstatpsstg);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaPropertyStorage_GetPropertyAttributes(self: *const T, cpspec: u32, rgpspec: [*]PROPSPEC, rgflags: [*]u32, rgpropvar: [*]PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaPropertyStorage.VTable, self.vtable).GetPropertyAttributes(@ptrCast(*const IWiaPropertyStorage, self), cpspec, rgpspec, rgflags, rgpropvar);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaPropertyStorage_GetCount(self: *const T, pulNumProps: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaPropertyStorage.VTable, self.vtable).GetCount(@ptrCast(*const IWiaPropertyStorage, self), pulNumProps);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaPropertyStorage_GetPropertyStream(self: *const T, pCompatibilityId: *Guid, ppIStream: ?*?*IStream) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaPropertyStorage.VTable, self.vtable).GetPropertyStream(@ptrCast(*const IWiaPropertyStorage, self), pCompatibilityId, ppIStream);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaPropertyStorage_SetPropertyStream(self: *const T, pCompatibilityId: *Guid, pIStream: *IStream) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaPropertyStorage.VTable, self.vtable).SetPropertyStream(@ptrCast(*const IWiaPropertyStorage, self), pCompatibilityId, pIStream);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IEnumWiaItem_Value = @import("../zig.zig").Guid.initString("5e8383fc-3391-11d2-9a33-00c04fa36145");
pub const IID_IEnumWiaItem = &IID_IEnumWiaItem_Value;
pub const IEnumWiaItem = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: fn(
            self: *const IEnumWiaItem,
            celt: u32,
            ppIWiaItem: **IWiaItem,
            pceltFetched: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumWiaItem,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumWiaItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IEnumWiaItem,
            ppIEnum: ?*?*IEnumWiaItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCount: fn(
            self: *const IEnumWiaItem,
            celt: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumWiaItem_Next(self: *const T, celt: u32, ppIWiaItem: **IWiaItem, pceltFetched: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumWiaItem.VTable, self.vtable).Next(@ptrCast(*const IEnumWiaItem, self), celt, ppIWiaItem, pceltFetched);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumWiaItem_Skip(self: *const T, celt: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumWiaItem.VTable, self.vtable).Skip(@ptrCast(*const IEnumWiaItem, self), celt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumWiaItem_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumWiaItem.VTable, self.vtable).Reset(@ptrCast(*const IEnumWiaItem, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumWiaItem_Clone(self: *const T, ppIEnum: ?*?*IEnumWiaItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumWiaItem.VTable, self.vtable).Clone(@ptrCast(*const IEnumWiaItem, self), ppIEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumWiaItem_GetCount(self: *const T, celt: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumWiaItem.VTable, self.vtable).GetCount(@ptrCast(*const IEnumWiaItem, self), celt);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const WIA_DEV_CAP = extern struct {
    guid: Guid,
    ulFlags: u32,
    bstrName: BSTR,
    bstrDescription: BSTR,
    bstrIcon: BSTR,
    bstrCommandline: BSTR,
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IEnumWIA_DEV_CAPS_Value = @import("../zig.zig").Guid.initString("1fcc4287-aca6-11d2-a093-00c04f72dc3c");
pub const IID_IEnumWIA_DEV_CAPS = &IID_IEnumWIA_DEV_CAPS_Value;
pub const IEnumWIA_DEV_CAPS = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: fn(
            self: *const IEnumWIA_DEV_CAPS,
            celt: u32,
            rgelt: *WIA_DEV_CAP,
            pceltFetched: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumWIA_DEV_CAPS,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumWIA_DEV_CAPS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IEnumWIA_DEV_CAPS,
            ppIEnum: ?*?*IEnumWIA_DEV_CAPS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCount: fn(
            self: *const IEnumWIA_DEV_CAPS,
            pcelt: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumWIA_DEV_CAPS_Next(self: *const T, celt: u32, rgelt: *WIA_DEV_CAP, pceltFetched: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumWIA_DEV_CAPS.VTable, self.vtable).Next(@ptrCast(*const IEnumWIA_DEV_CAPS, self), celt, rgelt, pceltFetched);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumWIA_DEV_CAPS_Skip(self: *const T, celt: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumWIA_DEV_CAPS.VTable, self.vtable).Skip(@ptrCast(*const IEnumWIA_DEV_CAPS, self), celt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumWIA_DEV_CAPS_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumWIA_DEV_CAPS.VTable, self.vtable).Reset(@ptrCast(*const IEnumWIA_DEV_CAPS, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumWIA_DEV_CAPS_Clone(self: *const T, ppIEnum: ?*?*IEnumWIA_DEV_CAPS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumWIA_DEV_CAPS.VTable, self.vtable).Clone(@ptrCast(*const IEnumWIA_DEV_CAPS, self), ppIEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumWIA_DEV_CAPS_GetCount(self: *const T, pcelt: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumWIA_DEV_CAPS.VTable, self.vtable).GetCount(@ptrCast(*const IEnumWIA_DEV_CAPS, self), pcelt);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IEnumWIA_FORMAT_INFO_Value = @import("../zig.zig").Guid.initString("81befc5b-656d-44f1-b24c-d41d51b4dc81");
pub const IID_IEnumWIA_FORMAT_INFO = &IID_IEnumWIA_FORMAT_INFO_Value;
pub const IEnumWIA_FORMAT_INFO = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: fn(
            self: *const IEnumWIA_FORMAT_INFO,
            celt: u32,
            rgelt: *WIA_FORMAT_INFO,
            pceltFetched: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumWIA_FORMAT_INFO,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumWIA_FORMAT_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IEnumWIA_FORMAT_INFO,
            ppIEnum: ?*?*IEnumWIA_FORMAT_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCount: fn(
            self: *const IEnumWIA_FORMAT_INFO,
            pcelt: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumWIA_FORMAT_INFO_Next(self: *const T, celt: u32, rgelt: *WIA_FORMAT_INFO, pceltFetched: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumWIA_FORMAT_INFO.VTable, self.vtable).Next(@ptrCast(*const IEnumWIA_FORMAT_INFO, self), celt, rgelt, pceltFetched);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumWIA_FORMAT_INFO_Skip(self: *const T, celt: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumWIA_FORMAT_INFO.VTable, self.vtable).Skip(@ptrCast(*const IEnumWIA_FORMAT_INFO, self), celt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumWIA_FORMAT_INFO_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumWIA_FORMAT_INFO.VTable, self.vtable).Reset(@ptrCast(*const IEnumWIA_FORMAT_INFO, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumWIA_FORMAT_INFO_Clone(self: *const T, ppIEnum: ?*?*IEnumWIA_FORMAT_INFO) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumWIA_FORMAT_INFO.VTable, self.vtable).Clone(@ptrCast(*const IEnumWIA_FORMAT_INFO, self), ppIEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumWIA_FORMAT_INFO_GetCount(self: *const T, pcelt: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumWIA_FORMAT_INFO.VTable, self.vtable).GetCount(@ptrCast(*const IEnumWIA_FORMAT_INFO, self), pcelt);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IWiaLog_Value = @import("../zig.zig").Guid.initString("a00c10b6-82a1-452f-8b6c-86062aad6890");
pub const IID_IWiaLog = &IID_IWiaLog_Value;
pub const IWiaLog = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        InitializeLog: fn(
            self: *const IWiaLog,
            hInstance: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        hResult: fn(
            self: *const IWiaLog,
            hResult: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Log: fn(
            self: *const IWiaLog,
            lFlags: i32,
            lResID: i32,
            lDetail: i32,
            bstrText: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaLog_InitializeLog(self: *const T, hInstance: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaLog.VTable, self.vtable).InitializeLog(@ptrCast(*const IWiaLog, self), hInstance);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaLog_hResult(self: *const T, hResult: HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaLog.VTable, self.vtable).hResult(@ptrCast(*const IWiaLog, self), hResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaLog_Log(self: *const T, lFlags: i32, lResID: i32, lDetail: i32, bstrText: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaLog.VTable, self.vtable).Log(@ptrCast(*const IWiaLog, self), lFlags, lResID, lDetail, bstrText);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IWiaLogEx_Value = @import("../zig.zig").Guid.initString("af1f22ac-7a40-4787-b421-aeb47a1fbd0b");
pub const IID_IWiaLogEx = &IID_IWiaLogEx_Value;
pub const IWiaLogEx = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        InitializeLogEx: fn(
            self: *const IWiaLogEx,
            hInstance: *u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        hResult: fn(
            self: *const IWiaLogEx,
            hResult: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Log: fn(
            self: *const IWiaLogEx,
            lFlags: i32,
            lResID: i32,
            lDetail: i32,
            bstrText: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        hResultEx: fn(
            self: *const IWiaLogEx,
            lMethodId: i32,
            hResult: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LogEx: fn(
            self: *const IWiaLogEx,
            lMethodId: i32,
            lFlags: i32,
            lResID: i32,
            lDetail: i32,
            bstrText: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaLogEx_InitializeLogEx(self: *const T, hInstance: *u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaLogEx.VTable, self.vtable).InitializeLogEx(@ptrCast(*const IWiaLogEx, self), hInstance);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaLogEx_hResult(self: *const T, hResult: HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaLogEx.VTable, self.vtable).hResult(@ptrCast(*const IWiaLogEx, self), hResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaLogEx_Log(self: *const T, lFlags: i32, lResID: i32, lDetail: i32, bstrText: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaLogEx.VTable, self.vtable).Log(@ptrCast(*const IWiaLogEx, self), lFlags, lResID, lDetail, bstrText);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaLogEx_hResultEx(self: *const T, lMethodId: i32, hResult: HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaLogEx.VTable, self.vtable).hResultEx(@ptrCast(*const IWiaLogEx, self), lMethodId, hResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaLogEx_LogEx(self: *const T, lMethodId: i32, lFlags: i32, lResID: i32, lDetail: i32, bstrText: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaLogEx.VTable, self.vtable).LogEx(@ptrCast(*const IWiaLogEx, self), lMethodId, lFlags, lResID, lDetail, bstrText);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IWiaNotifyDevMgr_Value = @import("../zig.zig").Guid.initString("70681ea0-e7bf-4291-9fb1-4e8813a3f78e");
pub const IID_IWiaNotifyDevMgr = &IID_IWiaNotifyDevMgr_Value;
pub const IWiaNotifyDevMgr = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        NewDeviceArrival: fn(
            self: *const IWiaNotifyDevMgr,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaNotifyDevMgr_NewDeviceArrival(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaNotifyDevMgr.VTable, self.vtable).NewDeviceArrival(@ptrCast(*const IWiaNotifyDevMgr, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IWiaItemExtras_Value = @import("../zig.zig").Guid.initString("6291ef2c-36ef-4532-876a-8e132593778d");
pub const IID_IWiaItemExtras = &IID_IWiaItemExtras_Value;
pub const IWiaItemExtras = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetExtendedErrorInfo: fn(
            self: *const IWiaItemExtras,
            bstrErrorText: ?*BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Escape: fn(
            self: *const IWiaItemExtras,
            dwEscapeCode: u32,
            lpInData: [*:0]u8,
            cbInDataSize: u32,
            pOutData: *u8,
            dwOutDataSize: u32,
            pdwActualDataSize: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelPendingIO: fn(
            self: *const IWiaItemExtras,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaItemExtras_GetExtendedErrorInfo(self: *const T, bstrErrorText: ?*BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaItemExtras.VTable, self.vtable).GetExtendedErrorInfo(@ptrCast(*const IWiaItemExtras, self), bstrErrorText);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaItemExtras_Escape(self: *const T, dwEscapeCode: u32, lpInData: [*:0]u8, cbInDataSize: u32, pOutData: *u8, dwOutDataSize: u32, pdwActualDataSize: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaItemExtras.VTable, self.vtable).Escape(@ptrCast(*const IWiaItemExtras, self), dwEscapeCode, lpInData, cbInDataSize, pOutData, dwOutDataSize, pdwActualDataSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaItemExtras_CancelPendingIO(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaItemExtras.VTable, self.vtable).CancelPendingIO(@ptrCast(*const IWiaItemExtras, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const CLSID_WiaVideo_Value = @import("../zig.zig").Guid.initString("3908c3cd-4478-4536-af2f-10c25d4ef89a");
pub const CLSID_WiaVideo = &CLSID_WiaVideo_Value;

pub const WIAVIDEO_STATE = extern enum(i32) {
    NO_VIDEO = 1,
    CREATING_VIDEO = 2,
    VIDEO_CREATED = 3,
    VIDEO_PLAYING = 4,
    VIDEO_PAUSED = 5,
    DESTROYING_VIDEO = 6,
};
pub const WIAVIDEO_NO_VIDEO = WIAVIDEO_STATE.NO_VIDEO;
pub const WIAVIDEO_CREATING_VIDEO = WIAVIDEO_STATE.CREATING_VIDEO;
pub const WIAVIDEO_VIDEO_CREATED = WIAVIDEO_STATE.VIDEO_CREATED;
pub const WIAVIDEO_VIDEO_PLAYING = WIAVIDEO_STATE.VIDEO_PLAYING;
pub const WIAVIDEO_VIDEO_PAUSED = WIAVIDEO_STATE.VIDEO_PAUSED;
pub const WIAVIDEO_DESTROYING_VIDEO = WIAVIDEO_STATE.DESTROYING_VIDEO;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWiaVideo_Value = @import("../zig.zig").Guid.initString("d52920aa-db88-41f0-946c-e00dc0a19cfa");
pub const IID_IWiaVideo = &IID_IWiaVideo_Value;
pub const IWiaVideo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PreviewVisible: fn(
            self: *const IWiaVideo,
            pbPreviewVisible: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PreviewVisible: fn(
            self: *const IWiaVideo,
            bPreviewVisible: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ImagesDirectory: fn(
            self: *const IWiaVideo,
            pbstrImageDirectory: ?*BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ImagesDirectory: fn(
            self: *const IWiaVideo,
            bstrImageDirectory: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateVideoByWiaDevID: fn(
            self: *const IWiaVideo,
            bstrWiaDeviceID: BSTR,
            hwndParent: HWND,
            bStretchToFitParent: BOOL,
            bAutoBeginPlayback: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateVideoByDevNum: fn(
            self: *const IWiaVideo,
            uiDeviceNumber: u32,
            hwndParent: HWND,
            bStretchToFitParent: BOOL,
            bAutoBeginPlayback: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateVideoByName: fn(
            self: *const IWiaVideo,
            bstrFriendlyName: BSTR,
            hwndParent: HWND,
            bStretchToFitParent: BOOL,
            bAutoBeginPlayback: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DestroyVideo: fn(
            self: *const IWiaVideo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Play: fn(
            self: *const IWiaVideo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Pause: fn(
            self: *const IWiaVideo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TakePicture: fn(
            self: *const IWiaVideo,
            pbstrNewImageFilename: ?*BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResizeVideo: fn(
            self: *const IWiaVideo,
            bStretchToFitParent: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentState: fn(
            self: *const IWiaVideo,
            pState: *WIAVIDEO_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaVideo_get_PreviewVisible(self: *const T, pbPreviewVisible: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaVideo.VTable, self.vtable).get_PreviewVisible(@ptrCast(*const IWiaVideo, self), pbPreviewVisible);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaVideo_put_PreviewVisible(self: *const T, bPreviewVisible: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaVideo.VTable, self.vtable).put_PreviewVisible(@ptrCast(*const IWiaVideo, self), bPreviewVisible);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaVideo_get_ImagesDirectory(self: *const T, pbstrImageDirectory: ?*BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaVideo.VTable, self.vtable).get_ImagesDirectory(@ptrCast(*const IWiaVideo, self), pbstrImageDirectory);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaVideo_put_ImagesDirectory(self: *const T, bstrImageDirectory: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaVideo.VTable, self.vtable).put_ImagesDirectory(@ptrCast(*const IWiaVideo, self), bstrImageDirectory);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaVideo_CreateVideoByWiaDevID(self: *const T, bstrWiaDeviceID: BSTR, hwndParent: HWND, bStretchToFitParent: BOOL, bAutoBeginPlayback: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaVideo.VTable, self.vtable).CreateVideoByWiaDevID(@ptrCast(*const IWiaVideo, self), bstrWiaDeviceID, hwndParent, bStretchToFitParent, bAutoBeginPlayback);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaVideo_CreateVideoByDevNum(self: *const T, uiDeviceNumber: u32, hwndParent: HWND, bStretchToFitParent: BOOL, bAutoBeginPlayback: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaVideo.VTable, self.vtable).CreateVideoByDevNum(@ptrCast(*const IWiaVideo, self), uiDeviceNumber, hwndParent, bStretchToFitParent, bAutoBeginPlayback);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaVideo_CreateVideoByName(self: *const T, bstrFriendlyName: BSTR, hwndParent: HWND, bStretchToFitParent: BOOL, bAutoBeginPlayback: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaVideo.VTable, self.vtable).CreateVideoByName(@ptrCast(*const IWiaVideo, self), bstrFriendlyName, hwndParent, bStretchToFitParent, bAutoBeginPlayback);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaVideo_DestroyVideo(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaVideo.VTable, self.vtable).DestroyVideo(@ptrCast(*const IWiaVideo, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaVideo_Play(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaVideo.VTable, self.vtable).Play(@ptrCast(*const IWiaVideo, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaVideo_Pause(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaVideo.VTable, self.vtable).Pause(@ptrCast(*const IWiaVideo, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaVideo_TakePicture(self: *const T, pbstrNewImageFilename: ?*BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaVideo.VTable, self.vtable).TakePicture(@ptrCast(*const IWiaVideo, self), pbstrNewImageFilename);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaVideo_ResizeVideo(self: *const T, bStretchToFitParent: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaVideo.VTable, self.vtable).ResizeVideo(@ptrCast(*const IWiaVideo, self), bStretchToFitParent);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWiaVideo_GetCurrentState(self: *const T, pState: *WIAVIDEO_STATE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWiaVideo.VTable, self.vtable).GetCurrentState(@ptrCast(*const IWiaVideo, self), pState);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};


//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (14)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const IStream = @import("structured_storage.zig").IStream;
const PWSTR = @import("system_services.zig").PWSTR;
const FILETIME = @import("windows_programming.zig").FILETIME;
const IUnknown = @import("com.zig").IUnknown;
const IEnumSTATPROPSTG = @import("structured_storage.zig").IEnumSTATPROPSTG;
const HRESULT = @import("com.zig").HRESULT;
const PROPVARIANT = @import("structured_storage.zig").PROPVARIANT;
const BSTR = @import("automation.zig").BSTR;
const BOOL = @import("system_services.zig").BOOL;
const HWND = @import("windows_and_messaging.zig").HWND;
const STGMEDIUM = @import("com.zig").STGMEDIUM;
const PROPSPEC = @import("structured_storage.zig").PROPSPEC;
const STATPROPSETSTG = @import("structured_storage.zig").STATPROPSETSTG;

test {
    @setEvalBranchQuota(
        @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("std").builtin.is_test) return;
    inline for (@import("std").meta.declarations(@This())) |decl| {
        if (decl.is_pub) {
            _ = decl;
        }
    }
}
