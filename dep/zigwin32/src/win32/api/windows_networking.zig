//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (28)
//--------------------------------------------------------------------------------
pub const RESOURCE_RECENT = @as(u32, 4);
pub const RESOURCETYPE_RESERVED = @as(u32, 8);
pub const RESOURCETYPE_UNKNOWN = @as(u32, 4294967295);
pub const RESOURCEUSAGE_NOLOCALDEVICE = @as(u32, 4);
pub const RESOURCEUSAGE_SIBLING = @as(u32, 8);
pub const RESOURCEUSAGE_RESERVED = @as(u32, 2147483648);
pub const RESOURCEDISPLAYTYPE_NETWORK = @as(u32, 6);
pub const RESOURCEDISPLAYTYPE_ROOT = @as(u32, 7);
pub const RESOURCEDISPLAYTYPE_SHAREADMIN = @as(u32, 8);
pub const RESOURCEDISPLAYTYPE_DIRECTORY = @as(u32, 9);
pub const RESOURCEDISPLAYTYPE_NDSCONTAINER = @as(u32, 11);
pub const NETPROPERTY_PERSISTENT = @as(u32, 1);
pub const CONNECT_NEED_DRIVE = @as(u32, 32);
pub const CONNECT_REFCOUNT = @as(u32, 64);
pub const CONNECT_LOCALDRIVE = @as(u32, 256);
pub const CONNECT_CURRENT_MEDIA = @as(u32, 512);
pub const CONNECT_RESERVED = @as(u32, 4278190080);
pub const CONNECT_CRED_RESET = @as(u32, 8192);
pub const CONNECT_REQUIRE_INTEGRITY = @as(u32, 16384);
pub const CONNECT_REQUIRE_PRIVACY = @as(u32, 32768);
pub const CONNECT_WRITE_THROUGH_SEMANTICS = @as(u32, 65536);
pub const CONNECT_COMPRESS_NETWORK_TRAFFIC = @as(u32, 131072);
pub const WNFMT_INENUM = @as(u32, 16);
pub const WNFMT_CONNECTION = @as(u32, 32);
pub const WNCON_FORNETCARD = @as(u32, 1);
pub const WNCON_NOTROUTED = @as(u32, 2);
pub const WNCON_SLOWLINK = @as(u32, 4);
pub const WNCON_DYNAMIC = @as(u32, 8);

//--------------------------------------------------------------------------------
// Section: Types (13)
//--------------------------------------------------------------------------------
// TODO: this type has a FreeFunc 'WNetCloseEnum', what can Zig do with this information?
pub const NetEnumHandle = isize;

pub const CONNECTDLGSTRUCTA = extern struct {
    cbStructure: u32,
    hwndOwner: HWND,
    lpConnRes: *NETRESOURCEA,
    dwFlags: CONNECTDLGSTRUCT_FLAGS,
    dwDevNum: u32,
};

pub const CONNECTDLGSTRUCTW = extern struct {
    cbStructure: u32,
    hwndOwner: HWND,
    lpConnRes: *NETRESOURCEW,
    dwFlags: CONNECTDLGSTRUCT_FLAGS,
    dwDevNum: u32,
};

pub const DISCDLGSTRUCTA = extern struct {
    cbStructure: u32,
    hwndOwner: HWND,
    lpLocalName: PSTR,
    lpRemoteName: PSTR,
    dwFlags: DISCDLGSTRUCT_FLAGS,
};

pub const DISCDLGSTRUCTW = extern struct {
    cbStructure: u32,
    hwndOwner: HWND,
    lpLocalName: PWSTR,
    lpRemoteName: PWSTR,
    dwFlags: DISCDLGSTRUCT_FLAGS,
};

pub const NETINFOSTRUCT = extern struct {
    cbStructure: u32,
    dwProviderVersion: u32,
    dwStatus: WIN32_ERROR,
    dwCharacteristics: NETINFOSTRUCT_CHARACTERISTICS,
    dwHandle: usize,
    wNetType: u16,
    dwPrinters: u32,
    dwDrives: u32,
};

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const WNET_OPEN_ENUM_USAGE = extern enum(u32) {
    None = 0,
    CONNECTABLE = 1,
    CONTAINER = 2,
    ATTACHED = 16,
    ALL = 19,
    _,
};
pub const RESOURCEUSAGE_CONNECTABLE = WNET_OPEN_ENUM_USAGE.CONNECTABLE;
pub const RESOURCEUSAGE_CONTAINER = WNET_OPEN_ENUM_USAGE.CONTAINER;
pub const RESOURCEUSAGE_ATTACHED = WNET_OPEN_ENUM_USAGE.ATTACHED;
pub const RESOURCEUSAGE_ALL = WNET_OPEN_ENUM_USAGE.ALL;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const NET_USE_CONNECT_FLAGS = extern enum(u32) {
    INTERACTIVE = 8,
    PROMPT = 16,
    REDIRECT = 128,
    UPDATE_PROFILE = 1,
    COMMANDLINE = 2048,
    CMD_SAVECRED = 4096,
    TEMPORARY = 4,
    DEFERRED = 1024,
    UPDATE_RECENT = 2,
    _,
};
pub const CONNECT_INTERACTIVE = NET_USE_CONNECT_FLAGS.INTERACTIVE;
pub const CONNECT_PROMPT = NET_USE_CONNECT_FLAGS.PROMPT;
pub const CONNECT_REDIRECT = NET_USE_CONNECT_FLAGS.REDIRECT;
pub const CONNECT_UPDATE_PROFILE = NET_USE_CONNECT_FLAGS.UPDATE_PROFILE;
pub const CONNECT_COMMANDLINE = NET_USE_CONNECT_FLAGS.COMMANDLINE;
pub const CONNECT_CMD_SAVECRED = NET_USE_CONNECT_FLAGS.CMD_SAVECRED;
pub const CONNECT_TEMPORARY = NET_USE_CONNECT_FLAGS.TEMPORARY;
pub const CONNECT_DEFERRED = NET_USE_CONNECT_FLAGS.DEFERRED;
pub const CONNECT_UPDATE_RECENT = NET_USE_CONNECT_FLAGS.UPDATE_RECENT;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const NET_RESOURCE_TYPE = extern enum(u32) {
    ANY = 0,
    DISK = 1,
    PRINT = 2,
    _,
};
pub const RESOURCETYPE_ANY = NET_RESOURCE_TYPE.ANY;
pub const RESOURCETYPE_DISK = NET_RESOURCE_TYPE.DISK;
pub const RESOURCETYPE_PRINT = NET_RESOURCE_TYPE.PRINT;

pub const NET_RESOURCE_SCOPE = extern enum(u32) {
    CONNECTED = 1,
    CONTEXT = 5,
    GLOBALNET = 2,
    REMEMBERED = 3,
};
pub const RESOURCE_CONNECTED = NET_RESOURCE_SCOPE.CONNECTED;
pub const RESOURCE_CONTEXT = NET_RESOURCE_SCOPE.CONTEXT;
pub const RESOURCE_GLOBALNET = NET_RESOURCE_SCOPE.GLOBALNET;
pub const RESOURCE_REMEMBERED = NET_RESOURCE_SCOPE.REMEMBERED;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const NETINFOSTRUCT_CHARACTERISTICS = extern enum(u32) {
    DLL16 = 1,
    DISKRED = 4,
    PRINTERRED = 8,
    _,
};
pub const NETINFO_DLL16 = NETINFOSTRUCT_CHARACTERISTICS.DLL16;
pub const NETINFO_DISKRED = NETINFOSTRUCT_CHARACTERISTICS.DISKRED;
pub const NETINFO_PRINTERRED = NETINFOSTRUCT_CHARACTERISTICS.PRINTERRED;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const CONNECTDLGSTRUCT_FLAGS = extern enum(u32) {
    SidTypeUser = 1,
    CONNDLG_RO_PATH = 1,
    CONNDLG_CONN_POINT = 2,
    CONNDLG_USE_MRU = 4,
    CONNDLG_HIDE_BOX = 8,
    CONNDLG_PERSIST = 16,
    CONNDLG_NOT_PERSIST = 32,
    _,
};
pub const SidTypeUser = CONNECTDLGSTRUCT_FLAGS.SidTypeUser;
pub const CONNDLG_RO_PATH = CONNECTDLGSTRUCT_FLAGS.CONNDLG_RO_PATH;
pub const CONNDLG_CONN_POINT = CONNECTDLGSTRUCT_FLAGS.CONNDLG_CONN_POINT;
pub const CONNDLG_USE_MRU = CONNECTDLGSTRUCT_FLAGS.CONNDLG_USE_MRU;
pub const CONNDLG_HIDE_BOX = CONNECTDLGSTRUCT_FLAGS.CONNDLG_HIDE_BOX;
pub const CONNDLG_PERSIST = CONNECTDLGSTRUCT_FLAGS.CONNDLG_PERSIST;
pub const CONNDLG_NOT_PERSIST = CONNECTDLGSTRUCT_FLAGS.CONNDLG_NOT_PERSIST;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const DISCDLGSTRUCT_FLAGS = extern enum(u32) {
    UPDATE_PROFILE = 1,
    NO_FORCE = 64,
    _,
};
pub const DISC_UPDATE_PROFILE = DISCDLGSTRUCT_FLAGS.UPDATE_PROFILE;
pub const DISC_NO_FORCE = DISCDLGSTRUCT_FLAGS.NO_FORCE;


//--------------------------------------------------------------------------------
// Section: Functions (45)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows5.0'
pub extern "MPR" fn WNetAddConnectionA(
    lpRemoteName: [*:0]const u8,
    lpPassword: ?[*:0]const u8,
    lpLocalName: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "MPR" fn WNetAddConnectionW(
    lpRemoteName: [*:0]const u16,
    lpPassword: ?[*:0]const u16,
    lpLocalName: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "MPR" fn WNetAddConnection2A(
    lpNetResource: *NETRESOURCEA,
    lpPassword: ?[*:0]const u8,
    lpUserName: ?[*:0]const u8,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "MPR" fn WNetAddConnection2W(
    lpNetResource: *NETRESOURCEW,
    lpPassword: ?[*:0]const u16,
    lpUserName: ?[*:0]const u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "MPR" fn WNetAddConnection3A(
    hwndOwner: HWND,
    lpNetResource: *NETRESOURCEA,
    lpPassword: ?[*:0]const u8,
    lpUserName: ?[*:0]const u8,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "MPR" fn WNetAddConnection3W(
    hwndOwner: HWND,
    lpNetResource: *NETRESOURCEW,
    lpPassword: ?[*:0]const u16,
    lpUserName: ?[*:0]const u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPR" fn WNetAddConnection4A(
    hwndOwner: HWND,
    lpNetResource: *NETRESOURCEA,
    // TODO: what to do with BytesParamIndex 3?
    pAuthBuffer: *c_void,
    cbAuthBuffer: u32,
    dwFlags: u32,
    // TODO: what to do with BytesParamIndex 6?
    lpUseOptions: *u8,
    cbUseOptions: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPR" fn WNetAddConnection4W(
    hwndOwner: HWND,
    lpNetResource: *NETRESOURCEW,
    // TODO: what to do with BytesParamIndex 3?
    pAuthBuffer: *c_void,
    cbAuthBuffer: u32,
    dwFlags: u32,
    // TODO: what to do with BytesParamIndex 6?
    lpUseOptions: *u8,
    cbUseOptions: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "MPR" fn WNetCancelConnectionA(
    lpName: [*:0]const u8,
    fForce: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "MPR" fn WNetCancelConnectionW(
    lpName: [*:0]const u16,
    fForce: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "MPR" fn WNetCancelConnection2A(
    lpName: [*:0]const u8,
    dwFlags: u32,
    fForce: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "MPR" fn WNetCancelConnection2W(
    lpName: [*:0]const u16,
    dwFlags: u32,
    fForce: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "MPR" fn WNetGetConnectionA(
    lpLocalName: [*:0]const u8,
    lpRemoteName: ?[*:0]u8,
    lpnLength: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "MPR" fn WNetGetConnectionW(
    lpLocalName: [*:0]const u16,
    lpRemoteName: ?[*:0]u16,
    lpnLength: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "MPR" fn WNetUseConnectionA(
    hwndOwner: HWND,
    lpNetResource: *NETRESOURCEA,
    lpPassword: ?[*:0]const u8,
    lpUserId: ?[*:0]const u8,
    dwFlags: NET_USE_CONNECT_FLAGS,
    lpAccessName: ?[*:0]u8,
    lpBufferSize: ?*u32,
    lpResult: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "MPR" fn WNetUseConnectionW(
    hwndOwner: HWND,
    lpNetResource: *NETRESOURCEW,
    lpPassword: ?[*:0]const u16,
    lpUserId: ?[*:0]const u16,
    dwFlags: NET_USE_CONNECT_FLAGS,
    lpAccessName: ?[*:0]u16,
    lpBufferSize: ?*u32,
    lpResult: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPR" fn WNetUseConnection4A(
    hwndOwner: HWND,
    lpNetResource: *NETRESOURCEA,
    // TODO: what to do with BytesParamIndex 3?
    pAuthBuffer: ?*c_void,
    cbAuthBuffer: u32,
    dwFlags: u32,
    // TODO: what to do with BytesParamIndex 6?
    lpUseOptions: ?*u8,
    cbUseOptions: u32,
    lpAccessName: ?[*:0]u8,
    lpBufferSize: ?*u32,
    lpResult: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPR" fn WNetUseConnection4W(
    hwndOwner: HWND,
    lpNetResource: *NETRESOURCEW,
    // TODO: what to do with BytesParamIndex 3?
    pAuthBuffer: ?*c_void,
    cbAuthBuffer: u32,
    dwFlags: u32,
    // TODO: what to do with BytesParamIndex 6?
    lpUseOptions: ?*u8,
    cbUseOptions: u32,
    lpAccessName: ?[*:0]u16,
    lpBufferSize: ?*u32,
    lpResult: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "MPR" fn WNetConnectionDialog(
    hwnd: HWND,
    dwType: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "MPR" fn WNetDisconnectDialog(
    hwnd: HWND,
    dwType: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "MPR" fn WNetConnectionDialog1A(
    lpConnDlgStruct: *CONNECTDLGSTRUCTA,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "MPR" fn WNetConnectionDialog1W(
    lpConnDlgStruct: *CONNECTDLGSTRUCTW,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "MPR" fn WNetDisconnectDialog1A(
    lpConnDlgStruct: *DISCDLGSTRUCTA,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "MPR" fn WNetDisconnectDialog1W(
    lpConnDlgStruct: *DISCDLGSTRUCTW,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "MPR" fn WNetOpenEnumA(
    dwScope: NET_RESOURCE_SCOPE,
    dwType: NET_RESOURCE_TYPE,
    dwUsage: WNET_OPEN_ENUM_USAGE,
    lpNetResource: ?*NETRESOURCEA,
    lphEnum: *NetEnumHandle,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "MPR" fn WNetOpenEnumW(
    dwScope: NET_RESOURCE_SCOPE,
    dwType: NET_RESOURCE_TYPE,
    dwUsage: WNET_OPEN_ENUM_USAGE,
    lpNetResource: ?*NETRESOURCEW,
    lphEnum: *NetEnumHandle,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "MPR" fn WNetEnumResourceA(
    hEnum: HANDLE,
    lpcCount: *u32,
    // TODO: what to do with BytesParamIndex 3?
    lpBuffer: *c_void,
    lpBufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "MPR" fn WNetEnumResourceW(
    hEnum: HANDLE,
    lpcCount: *u32,
    // TODO: what to do with BytesParamIndex 3?
    lpBuffer: *c_void,
    lpBufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "MPR" fn WNetCloseEnum(
    hEnum: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "MPR" fn WNetGetResourceParentA(
    lpNetResource: *NETRESOURCEA,
    // TODO: what to do with BytesParamIndex 2?
    lpBuffer: *c_void,
    lpcbBuffer: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "MPR" fn WNetGetResourceParentW(
    lpNetResource: *NETRESOURCEW,
    // TODO: what to do with BytesParamIndex 2?
    lpBuffer: *c_void,
    lpcbBuffer: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "MPR" fn WNetGetResourceInformationA(
    lpNetResource: *NETRESOURCEA,
    // TODO: what to do with BytesParamIndex 2?
    lpBuffer: *c_void,
    lpcbBuffer: *u32,
    lplpSystem: *PSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "MPR" fn WNetGetResourceInformationW(
    lpNetResource: *NETRESOURCEW,
    // TODO: what to do with BytesParamIndex 2?
    lpBuffer: *c_void,
    lpcbBuffer: *u32,
    lplpSystem: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "MPR" fn WNetGetUniversalNameA(
    lpLocalPath: [*:0]const u8,
    dwInfoLevel: UNC_INFO_LEVEL,
    // TODO: what to do with BytesParamIndex 3?
    lpBuffer: *c_void,
    lpBufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "MPR" fn WNetGetUniversalNameW(
    lpLocalPath: [*:0]const u16,
    dwInfoLevel: UNC_INFO_LEVEL,
    // TODO: what to do with BytesParamIndex 3?
    lpBuffer: *c_void,
    lpBufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "MPR" fn WNetGetUserA(
    lpName: ?[*:0]const u8,
    lpUserName: [*:0]u8,
    lpnLength: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "MPR" fn WNetGetUserW(
    lpName: ?[*:0]const u16,
    lpUserName: [*:0]u16,
    lpnLength: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "MPR" fn WNetGetProviderNameA(
    dwNetType: u32,
    lpProviderName: [*:0]u8,
    lpBufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "MPR" fn WNetGetProviderNameW(
    dwNetType: u32,
    lpProviderName: [*:0]u16,
    lpBufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "MPR" fn WNetGetNetworkInformationA(
    lpProvider: [*:0]const u8,
    lpNetInfoStruct: *NETINFOSTRUCT,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "MPR" fn WNetGetNetworkInformationW(
    lpProvider: [*:0]const u16,
    lpNetInfoStruct: *NETINFOSTRUCT,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "MPR" fn WNetGetLastErrorA(
    lpError: *u32,
    lpErrorBuf: [*:0]u8,
    nErrorBufSize: u32,
    lpNameBuf: [*:0]u8,
    nNameBufSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "MPR" fn WNetGetLastErrorW(
    lpError: *u32,
    lpErrorBuf: [*:0]u16,
    nErrorBufSize: u32,
    lpNameBuf: [*:0]u16,
    nNameBufSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "MPR" fn MultinetGetConnectionPerformanceA(
    lpNetResource: *NETRESOURCEA,
    lpNetConnectInfoStruct: *NETCONNECTINFOSTRUCT,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "MPR" fn MultinetGetConnectionPerformanceW(
    lpNetResource: *NETRESOURCEW,
    lpNetConnectInfoStruct: *NETCONNECTINFOSTRUCT,
) callconv(@import("std").os.windows.WINAPI) u32;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (23)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const CONNECTDLGSTRUCT = CONNECTDLGSTRUCTA;
        pub const DISCDLGSTRUCT = DISCDLGSTRUCTA;
        pub const WNetAddConnection = WNetAddConnectionA;
        pub const WNetAddConnection2 = WNetAddConnection2A;
        pub const WNetAddConnection3 = WNetAddConnection3A;
        pub const WNetAddConnection4 = WNetAddConnection4A;
        pub const WNetCancelConnection = WNetCancelConnectionA;
        pub const WNetCancelConnection2 = WNetCancelConnection2A;
        pub const WNetGetConnection = WNetGetConnectionA;
        pub const WNetUseConnection = WNetUseConnectionA;
        pub const WNetUseConnection4 = WNetUseConnection4A;
        pub const WNetConnectionDialog1 = WNetConnectionDialog1A;
        pub const WNetDisconnectDialog1 = WNetDisconnectDialog1A;
        pub const WNetOpenEnum = WNetOpenEnumA;
        pub const WNetEnumResource = WNetEnumResourceA;
        pub const WNetGetResourceParent = WNetGetResourceParentA;
        pub const WNetGetResourceInformation = WNetGetResourceInformationA;
        pub const WNetGetUniversalName = WNetGetUniversalNameA;
        pub const WNetGetUser = WNetGetUserA;
        pub const WNetGetProviderName = WNetGetProviderNameA;
        pub const WNetGetNetworkInformation = WNetGetNetworkInformationA;
        pub const WNetGetLastError = WNetGetLastErrorA;
        pub const MultinetGetConnectionPerformance = MultinetGetConnectionPerformanceA;
    },
    .wide => struct {
        pub const CONNECTDLGSTRUCT = CONNECTDLGSTRUCTW;
        pub const DISCDLGSTRUCT = DISCDLGSTRUCTW;
        pub const WNetAddConnection = WNetAddConnectionW;
        pub const WNetAddConnection2 = WNetAddConnection2W;
        pub const WNetAddConnection3 = WNetAddConnection3W;
        pub const WNetAddConnection4 = WNetAddConnection4W;
        pub const WNetCancelConnection = WNetCancelConnectionW;
        pub const WNetCancelConnection2 = WNetCancelConnection2W;
        pub const WNetGetConnection = WNetGetConnectionW;
        pub const WNetUseConnection = WNetUseConnectionW;
        pub const WNetUseConnection4 = WNetUseConnection4W;
        pub const WNetConnectionDialog1 = WNetConnectionDialog1W;
        pub const WNetDisconnectDialog1 = WNetDisconnectDialog1W;
        pub const WNetOpenEnum = WNetOpenEnumW;
        pub const WNetEnumResource = WNetEnumResourceW;
        pub const WNetGetResourceParent = WNetGetResourceParentW;
        pub const WNetGetResourceInformation = WNetGetResourceInformationW;
        pub const WNetGetUniversalName = WNetGetUniversalNameW;
        pub const WNetGetUser = WNetGetUserW;
        pub const WNetGetProviderName = WNetGetProviderNameW;
        pub const WNetGetNetworkInformation = WNetGetNetworkInformationW;
        pub const WNetGetLastError = WNetGetLastErrorW;
        pub const MultinetGetConnectionPerformance = MultinetGetConnectionPerformanceW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const CONNECTDLGSTRUCT = *opaque{};
        pub const DISCDLGSTRUCT = *opaque{};
        pub const WNetAddConnection = *opaque{};
        pub const WNetAddConnection2 = *opaque{};
        pub const WNetAddConnection3 = *opaque{};
        pub const WNetAddConnection4 = *opaque{};
        pub const WNetCancelConnection = *opaque{};
        pub const WNetCancelConnection2 = *opaque{};
        pub const WNetGetConnection = *opaque{};
        pub const WNetUseConnection = *opaque{};
        pub const WNetUseConnection4 = *opaque{};
        pub const WNetConnectionDialog1 = *opaque{};
        pub const WNetDisconnectDialog1 = *opaque{};
        pub const WNetOpenEnum = *opaque{};
        pub const WNetEnumResource = *opaque{};
        pub const WNetGetResourceParent = *opaque{};
        pub const WNetGetResourceInformation = *opaque{};
        pub const WNetGetUniversalName = *opaque{};
        pub const WNetGetUser = *opaque{};
        pub const WNetGetProviderName = *opaque{};
        pub const WNetGetNetworkInformation = *opaque{};
        pub const WNetGetLastError = *opaque{};
        pub const MultinetGetConnectionPerformance = *opaque{};
    } else struct {
        pub const CONNECTDLGSTRUCT = @compileError("'CONNECTDLGSTRUCT' requires that UNICODE be set to true or false in the root module");
        pub const DISCDLGSTRUCT = @compileError("'DISCDLGSTRUCT' requires that UNICODE be set to true or false in the root module");
        pub const WNetAddConnection = @compileError("'WNetAddConnection' requires that UNICODE be set to true or false in the root module");
        pub const WNetAddConnection2 = @compileError("'WNetAddConnection2' requires that UNICODE be set to true or false in the root module");
        pub const WNetAddConnection3 = @compileError("'WNetAddConnection3' requires that UNICODE be set to true or false in the root module");
        pub const WNetAddConnection4 = @compileError("'WNetAddConnection4' requires that UNICODE be set to true or false in the root module");
        pub const WNetCancelConnection = @compileError("'WNetCancelConnection' requires that UNICODE be set to true or false in the root module");
        pub const WNetCancelConnection2 = @compileError("'WNetCancelConnection2' requires that UNICODE be set to true or false in the root module");
        pub const WNetGetConnection = @compileError("'WNetGetConnection' requires that UNICODE be set to true or false in the root module");
        pub const WNetUseConnection = @compileError("'WNetUseConnection' requires that UNICODE be set to true or false in the root module");
        pub const WNetUseConnection4 = @compileError("'WNetUseConnection4' requires that UNICODE be set to true or false in the root module");
        pub const WNetConnectionDialog1 = @compileError("'WNetConnectionDialog1' requires that UNICODE be set to true or false in the root module");
        pub const WNetDisconnectDialog1 = @compileError("'WNetDisconnectDialog1' requires that UNICODE be set to true or false in the root module");
        pub const WNetOpenEnum = @compileError("'WNetOpenEnum' requires that UNICODE be set to true or false in the root module");
        pub const WNetEnumResource = @compileError("'WNetEnumResource' requires that UNICODE be set to true or false in the root module");
        pub const WNetGetResourceParent = @compileError("'WNetGetResourceParent' requires that UNICODE be set to true or false in the root module");
        pub const WNetGetResourceInformation = @compileError("'WNetGetResourceInformation' requires that UNICODE be set to true or false in the root module");
        pub const WNetGetUniversalName = @compileError("'WNetGetUniversalName' requires that UNICODE be set to true or false in the root module");
        pub const WNetGetUser = @compileError("'WNetGetUser' requires that UNICODE be set to true or false in the root module");
        pub const WNetGetProviderName = @compileError("'WNetGetProviderName' requires that UNICODE be set to true or false in the root module");
        pub const WNetGetNetworkInformation = @compileError("'WNetGetNetworkInformation' requires that UNICODE be set to true or false in the root module");
        pub const WNetGetLastError = @compileError("'WNetGetLastError' requires that UNICODE be set to true or false in the root module");
        pub const MultinetGetConnectionPerformance = @compileError("'MultinetGetConnectionPerformance' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (10)
//--------------------------------------------------------------------------------
const NETRESOURCEW = @import("security.zig").NETRESOURCEW;
const WIN32_ERROR = @import("debug.zig").WIN32_ERROR;
const PWSTR = @import("system_services.zig").PWSTR;
const UNC_INFO_LEVEL = @import("security.zig").UNC_INFO_LEVEL;
const NETRESOURCEA = @import("security.zig").NETRESOURCEA;
const HANDLE = @import("system_services.zig").HANDLE;
const PSTR = @import("system_services.zig").PSTR;
const BOOL = @import("system_services.zig").BOOL;
const HWND = @import("windows_and_messaging.zig").HWND;
const NETCONNECTINFOSTRUCT = @import("security.zig").NETCONNECTINFOSTRUCT;

test {
    @setEvalBranchQuota(
        @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("std").builtin.is_test) return;
    inline for (@import("std").meta.declarations(@This())) |decl| {
        if (decl.is_pub) {
            _ = decl;
        }
    }
}
