//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (1)
//--------------------------------------------------------------------------------
pub const LOCATION_API_VERSION = @as(u32, 1);

//--------------------------------------------------------------------------------
// Section: Types (23)
//--------------------------------------------------------------------------------
const CLSID_Location_Value = @import("../zig.zig").Guid.initString("e5b8e079-ee6d-4e33-a438-c87f2e959254");
pub const CLSID_Location = &CLSID_Location_Value;

const CLSID_DefaultLocation_Value = @import("../zig.zig").Guid.initString("8b7fbfe0-5cd7-494a-af8c-283a65707506");
pub const CLSID_DefaultLocation = &CLSID_DefaultLocation_Value;

const CLSID_LatLongReport_Value = @import("../zig.zig").Guid.initString("ed81c073-1f84-4ca8-a161-183c776bc651");
pub const CLSID_LatLongReport = &CLSID_LatLongReport_Value;

const CLSID_CivicAddressReport_Value = @import("../zig.zig").Guid.initString("d39e7bdd-7d05-46b8-8721-80cf035f57d7");
pub const CLSID_CivicAddressReport = &CLSID_CivicAddressReport_Value;

const CLSID_LatLongReportFactory_Value = @import("../zig.zig").Guid.initString("9dcc3cc8-8609-4863-bad4-03601f4c65e8");
pub const CLSID_LatLongReportFactory = &CLSID_LatLongReportFactory_Value;

const CLSID_CivicAddressReportFactory_Value = @import("../zig.zig").Guid.initString("2a11f42c-3e81-4ad4-9cbe-45579d89671a");
pub const CLSID_CivicAddressReportFactory = &CLSID_CivicAddressReportFactory_Value;

const CLSID_DispLatLongReport_Value = @import("../zig.zig").Guid.initString("7a7c3277-8f84-4636-95b2-ebb5507ff77e");
pub const CLSID_DispLatLongReport = &CLSID_DispLatLongReport_Value;

const CLSID_DispCivicAddressReport_Value = @import("../zig.zig").Guid.initString("4c596aec-8544-4082-ba9f-eb0a7d8e65c6");
pub const CLSID_DispCivicAddressReport = &CLSID_DispCivicAddressReport_Value;

pub const LOCATION_REPORT_STATUS = extern enum(i32) {
    NOT_SUPPORTED = 0,
    ERROR = 1,
    ACCESS_DENIED = 2,
    INITIALIZING = 3,
    RUNNING = 4,
};
pub const REPORT_NOT_SUPPORTED = LOCATION_REPORT_STATUS.NOT_SUPPORTED;
pub const REPORT_ERROR = LOCATION_REPORT_STATUS.ERROR;
pub const REPORT_ACCESS_DENIED = LOCATION_REPORT_STATUS.ACCESS_DENIED;
pub const REPORT_INITIALIZING = LOCATION_REPORT_STATUS.INITIALIZING;
pub const REPORT_RUNNING = LOCATION_REPORT_STATUS.RUNNING;

// TODO: this type is limited to platform 'windows6.1'
const IID_ILocationReport_Value = @import("../zig.zig").Guid.initString("c8b7f7ee-75d0-4db9-b62d-7a0f369ca456");
pub const IID_ILocationReport = &IID_ILocationReport_Value;
pub const ILocationReport = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSensorID: fn(
            self: *const ILocationReport,
            pSensorID: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTimestamp: fn(
            self: *const ILocationReport,
            pCreationTime: *SYSTEMTIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: fn(
            self: *const ILocationReport,
            pKey: *const PROPERTYKEY,
            pValue: *PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocationReport_GetSensorID(self: *const T, pSensorID: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocationReport.VTable, self.vtable).GetSensorID(@ptrCast(*const ILocationReport, self), pSensorID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocationReport_GetTimestamp(self: *const T, pCreationTime: *SYSTEMTIME) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocationReport.VTable, self.vtable).GetTimestamp(@ptrCast(*const ILocationReport, self), pCreationTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocationReport_GetValue(self: *const T, pKey: *const PROPERTYKEY, pValue: *PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocationReport.VTable, self.vtable).GetValue(@ptrCast(*const ILocationReport, self), pKey, pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ILatLongReport_Value = @import("../zig.zig").Guid.initString("7fed806d-0ef8-4f07-80ac-36a0beae3134");
pub const IID_ILatLongReport = &IID_ILatLongReport_Value;
pub const ILatLongReport = extern struct {
    pub const VTable = extern struct {
        base: ILocationReport.VTable,
        GetLatitude: fn(
            self: *const ILatLongReport,
            pLatitude: *f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLongitude: fn(
            self: *const ILatLongReport,
            pLongitude: *f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetErrorRadius: fn(
            self: *const ILatLongReport,
            pErrorRadius: *f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAltitude: fn(
            self: *const ILatLongReport,
            pAltitude: *f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAltitudeError: fn(
            self: *const ILatLongReport,
            pAltitudeError: *f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ILocationReport.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILatLongReport_GetLatitude(self: *const T, pLatitude: *f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILatLongReport.VTable, self.vtable).GetLatitude(@ptrCast(*const ILatLongReport, self), pLatitude);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILatLongReport_GetLongitude(self: *const T, pLongitude: *f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILatLongReport.VTable, self.vtable).GetLongitude(@ptrCast(*const ILatLongReport, self), pLongitude);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILatLongReport_GetErrorRadius(self: *const T, pErrorRadius: *f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILatLongReport.VTable, self.vtable).GetErrorRadius(@ptrCast(*const ILatLongReport, self), pErrorRadius);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILatLongReport_GetAltitude(self: *const T, pAltitude: *f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILatLongReport.VTable, self.vtable).GetAltitude(@ptrCast(*const ILatLongReport, self), pAltitude);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILatLongReport_GetAltitudeError(self: *const T, pAltitudeError: *f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILatLongReport.VTable, self.vtable).GetAltitudeError(@ptrCast(*const ILatLongReport, self), pAltitudeError);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ICivicAddressReport_Value = @import("../zig.zig").Guid.initString("c0b19f70-4adf-445d-87f2-cad8fd711792");
pub const IID_ICivicAddressReport = &IID_ICivicAddressReport_Value;
pub const ICivicAddressReport = extern struct {
    pub const VTable = extern struct {
        base: ILocationReport.VTable,
        GetAddressLine1: fn(
            self: *const ICivicAddressReport,
            pbstrAddress1: ?*BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAddressLine2: fn(
            self: *const ICivicAddressReport,
            pbstrAddress2: ?*BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCity: fn(
            self: *const ICivicAddressReport,
            pbstrCity: ?*BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStateProvince: fn(
            self: *const ICivicAddressReport,
            pbstrStateProvince: ?*BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPostalCode: fn(
            self: *const ICivicAddressReport,
            pbstrPostalCode: ?*BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCountryRegion: fn(
            self: *const ICivicAddressReport,
            pbstrCountryRegion: ?*BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDetailLevel: fn(
            self: *const ICivicAddressReport,
            pDetailLevel: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ILocationReport.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICivicAddressReport_GetAddressLine1(self: *const T, pbstrAddress1: ?*BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICivicAddressReport.VTable, self.vtable).GetAddressLine1(@ptrCast(*const ICivicAddressReport, self), pbstrAddress1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICivicAddressReport_GetAddressLine2(self: *const T, pbstrAddress2: ?*BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICivicAddressReport.VTable, self.vtable).GetAddressLine2(@ptrCast(*const ICivicAddressReport, self), pbstrAddress2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICivicAddressReport_GetCity(self: *const T, pbstrCity: ?*BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICivicAddressReport.VTable, self.vtable).GetCity(@ptrCast(*const ICivicAddressReport, self), pbstrCity);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICivicAddressReport_GetStateProvince(self: *const T, pbstrStateProvince: ?*BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICivicAddressReport.VTable, self.vtable).GetStateProvince(@ptrCast(*const ICivicAddressReport, self), pbstrStateProvince);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICivicAddressReport_GetPostalCode(self: *const T, pbstrPostalCode: ?*BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICivicAddressReport.VTable, self.vtable).GetPostalCode(@ptrCast(*const ICivicAddressReport, self), pbstrPostalCode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICivicAddressReport_GetCountryRegion(self: *const T, pbstrCountryRegion: ?*BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICivicAddressReport.VTable, self.vtable).GetCountryRegion(@ptrCast(*const ICivicAddressReport, self), pbstrCountryRegion);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICivicAddressReport_GetDetailLevel(self: *const T, pDetailLevel: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICivicAddressReport.VTable, self.vtable).GetDetailLevel(@ptrCast(*const ICivicAddressReport, self), pDetailLevel);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ILocation_Value = @import("../zig.zig").Guid.initString("ab2ece69-56d9-4f28-b525-de1b0ee44237");
pub const IID_ILocation = &IID_ILocation_Value;
pub const ILocation = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RegisterForReport: fn(
            self: *const ILocation,
            pEvents: ?*ILocationEvents,
            reportType: *const Guid,
            dwRequestedReportInterval: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterForReport: fn(
            self: *const ILocation,
            reportType: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetReport: fn(
            self: *const ILocation,
            reportType: *const Guid,
            ppLocationReport: ?*?*ILocationReport,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetReportStatus: fn(
            self: *const ILocation,
            reportType: *const Guid,
            pStatus: *LOCATION_REPORT_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetReportInterval: fn(
            self: *const ILocation,
            reportType: *const Guid,
            pMilliseconds: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetReportInterval: fn(
            self: *const ILocation,
            reportType: *const Guid,
            millisecondsRequested: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDesiredAccuracy: fn(
            self: *const ILocation,
            reportType: *const Guid,
            pDesiredAccuracy: *LOCATION_DESIRED_ACCURACY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDesiredAccuracy: fn(
            self: *const ILocation,
            reportType: *const Guid,
            desiredAccuracy: LOCATION_DESIRED_ACCURACY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestPermissions: fn(
            self: *const ILocation,
            hParent: HWND,
            pReportTypes: [*]Guid,
            count: u32,
            fModal: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocation_RegisterForReport(self: *const T, pEvents: ?*ILocationEvents, reportType: *const Guid, dwRequestedReportInterval: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocation.VTable, self.vtable).RegisterForReport(@ptrCast(*const ILocation, self), pEvents, reportType, dwRequestedReportInterval);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocation_UnregisterForReport(self: *const T, reportType: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocation.VTable, self.vtable).UnregisterForReport(@ptrCast(*const ILocation, self), reportType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocation_GetReport(self: *const T, reportType: *const Guid, ppLocationReport: ?*?*ILocationReport) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocation.VTable, self.vtable).GetReport(@ptrCast(*const ILocation, self), reportType, ppLocationReport);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocation_GetReportStatus(self: *const T, reportType: *const Guid, pStatus: *LOCATION_REPORT_STATUS) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocation.VTable, self.vtable).GetReportStatus(@ptrCast(*const ILocation, self), reportType, pStatus);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocation_GetReportInterval(self: *const T, reportType: *const Guid, pMilliseconds: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocation.VTable, self.vtable).GetReportInterval(@ptrCast(*const ILocation, self), reportType, pMilliseconds);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocation_SetReportInterval(self: *const T, reportType: *const Guid, millisecondsRequested: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocation.VTable, self.vtable).SetReportInterval(@ptrCast(*const ILocation, self), reportType, millisecondsRequested);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocation_GetDesiredAccuracy(self: *const T, reportType: *const Guid, pDesiredAccuracy: *LOCATION_DESIRED_ACCURACY) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocation.VTable, self.vtable).GetDesiredAccuracy(@ptrCast(*const ILocation, self), reportType, pDesiredAccuracy);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocation_SetDesiredAccuracy(self: *const T, reportType: *const Guid, desiredAccuracy: LOCATION_DESIRED_ACCURACY) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocation.VTable, self.vtable).SetDesiredAccuracy(@ptrCast(*const ILocation, self), reportType, desiredAccuracy);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocation_RequestPermissions(self: *const T, hParent: HWND, pReportTypes: [*]Guid, count: u32, fModal: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocation.VTable, self.vtable).RequestPermissions(@ptrCast(*const ILocation, self), hParent, pReportTypes, count, fModal);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ILocationPower_Value = @import("../zig.zig").Guid.initString("193e7729-ab6b-4b12-8617-7596e1bb191c");
pub const IID_ILocationPower = &IID_ILocationPower_Value;
pub const ILocationPower = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Connect: fn(
            self: *const ILocationPower,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Disconnect: fn(
            self: *const ILocationPower,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocationPower_Connect(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocationPower.VTable, self.vtable).Connect(@ptrCast(*const ILocationPower, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocationPower_Disconnect(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocationPower.VTable, self.vtable).Disconnect(@ptrCast(*const ILocationPower, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDefaultLocation_Value = @import("../zig.zig").Guid.initString("a65af77e-969a-4a2e-8aca-33bb7cbb1235");
pub const IID_IDefaultLocation = &IID_IDefaultLocation_Value;
pub const IDefaultLocation = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetReport: fn(
            self: *const IDefaultLocation,
            reportType: *const Guid,
            pLocationReport: ?*ILocationReport,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetReport: fn(
            self: *const IDefaultLocation,
            reportType: *const Guid,
            ppLocationReport: ?*?*ILocationReport,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDefaultLocation_SetReport(self: *const T, reportType: *const Guid, pLocationReport: ?*ILocationReport) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDefaultLocation.VTable, self.vtable).SetReport(@ptrCast(*const IDefaultLocation, self), reportType, pLocationReport);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDefaultLocation_GetReport(self: *const T, reportType: *const Guid, ppLocationReport: ?*?*ILocationReport) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDefaultLocation.VTable, self.vtable).GetReport(@ptrCast(*const IDefaultLocation, self), reportType, ppLocationReport);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ILocationEvents_Value = @import("../zig.zig").Guid.initString("cae02bbf-798b-4508-a207-35a7906dc73d");
pub const IID_ILocationEvents = &IID_ILocationEvents_Value;
pub const ILocationEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnLocationChanged: fn(
            self: *const ILocationEvents,
            reportType: *const Guid,
            pLocationReport: ?*ILocationReport,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnStatusChanged: fn(
            self: *const ILocationEvents,
            reportType: *const Guid,
            newStatus: LOCATION_REPORT_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocationEvents_OnLocationChanged(self: *const T, reportType: *const Guid, pLocationReport: ?*ILocationReport) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocationEvents.VTable, self.vtable).OnLocationChanged(@ptrCast(*const ILocationEvents, self), reportType, pLocationReport);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocationEvents_OnStatusChanged(self: *const T, reportType: *const Guid, newStatus: LOCATION_REPORT_STATUS) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocationEvents.VTable, self.vtable).OnStatusChanged(@ptrCast(*const ILocationEvents, self), reportType, newStatus);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDispLatLongReport_Value = @import("../zig.zig").Guid.initString("8ae32723-389b-4a11-9957-5bdd48fc9617");
pub const IID_IDispLatLongReport = &IID_IDispLatLongReport_Value;
pub const IDispLatLongReport = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Latitude: fn(
            self: *const IDispLatLongReport,
            pVal: *f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Longitude: fn(
            self: *const IDispLatLongReport,
            pVal: *f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ErrorRadius: fn(
            self: *const IDispLatLongReport,
            pVal: *f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Altitude: fn(
            self: *const IDispLatLongReport,
            pVal: *f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AltitudeError: fn(
            self: *const IDispLatLongReport,
            pVal: *f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Timestamp: fn(
            self: *const IDispLatLongReport,
            pVal: *f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDispLatLongReport_get_Latitude(self: *const T, pVal: *f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDispLatLongReport.VTable, self.vtable).get_Latitude(@ptrCast(*const IDispLatLongReport, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDispLatLongReport_get_Longitude(self: *const T, pVal: *f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDispLatLongReport.VTable, self.vtable).get_Longitude(@ptrCast(*const IDispLatLongReport, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDispLatLongReport_get_ErrorRadius(self: *const T, pVal: *f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDispLatLongReport.VTable, self.vtable).get_ErrorRadius(@ptrCast(*const IDispLatLongReport, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDispLatLongReport_get_Altitude(self: *const T, pVal: *f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDispLatLongReport.VTable, self.vtable).get_Altitude(@ptrCast(*const IDispLatLongReport, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDispLatLongReport_get_AltitudeError(self: *const T, pVal: *f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDispLatLongReport.VTable, self.vtable).get_AltitudeError(@ptrCast(*const IDispLatLongReport, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDispLatLongReport_get_Timestamp(self: *const T, pVal: *f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDispLatLongReport.VTable, self.vtable).get_Timestamp(@ptrCast(*const IDispLatLongReport, self), pVal);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDispCivicAddressReport_Value = @import("../zig.zig").Guid.initString("16ff1a34-9e30-42c3-b44d-e22513b5767a");
pub const IID_IDispCivicAddressReport = &IID_IDispCivicAddressReport_Value;
pub const IDispCivicAddressReport = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AddressLine1: fn(
            self: *const IDispCivicAddressReport,
            pAddress1: ?*BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AddressLine2: fn(
            self: *const IDispCivicAddressReport,
            pAddress2: ?*BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_City: fn(
            self: *const IDispCivicAddressReport,
            pCity: ?*BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StateProvince: fn(
            self: *const IDispCivicAddressReport,
            pStateProvince: ?*BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PostalCode: fn(
            self: *const IDispCivicAddressReport,
            pPostalCode: ?*BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CountryRegion: fn(
            self: *const IDispCivicAddressReport,
            pCountryRegion: ?*BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DetailLevel: fn(
            self: *const IDispCivicAddressReport,
            pDetailLevel: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Timestamp: fn(
            self: *const IDispCivicAddressReport,
            pVal: *f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDispCivicAddressReport_get_AddressLine1(self: *const T, pAddress1: ?*BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDispCivicAddressReport.VTable, self.vtable).get_AddressLine1(@ptrCast(*const IDispCivicAddressReport, self), pAddress1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDispCivicAddressReport_get_AddressLine2(self: *const T, pAddress2: ?*BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDispCivicAddressReport.VTable, self.vtable).get_AddressLine2(@ptrCast(*const IDispCivicAddressReport, self), pAddress2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDispCivicAddressReport_get_City(self: *const T, pCity: ?*BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDispCivicAddressReport.VTable, self.vtable).get_City(@ptrCast(*const IDispCivicAddressReport, self), pCity);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDispCivicAddressReport_get_StateProvince(self: *const T, pStateProvince: ?*BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDispCivicAddressReport.VTable, self.vtable).get_StateProvince(@ptrCast(*const IDispCivicAddressReport, self), pStateProvince);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDispCivicAddressReport_get_PostalCode(self: *const T, pPostalCode: ?*BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDispCivicAddressReport.VTable, self.vtable).get_PostalCode(@ptrCast(*const IDispCivicAddressReport, self), pPostalCode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDispCivicAddressReport_get_CountryRegion(self: *const T, pCountryRegion: ?*BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDispCivicAddressReport.VTable, self.vtable).get_CountryRegion(@ptrCast(*const IDispCivicAddressReport, self), pCountryRegion);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDispCivicAddressReport_get_DetailLevel(self: *const T, pDetailLevel: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDispCivicAddressReport.VTable, self.vtable).get_DetailLevel(@ptrCast(*const IDispCivicAddressReport, self), pDetailLevel);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDispCivicAddressReport_get_Timestamp(self: *const T, pVal: *f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDispCivicAddressReport.VTable, self.vtable).get_Timestamp(@ptrCast(*const IDispCivicAddressReport, self), pVal);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ILocationReportFactory_Value = @import("../zig.zig").Guid.initString("2daec322-90b2-47e4-bb08-0da841935a6b");
pub const IID_ILocationReportFactory = &IID_ILocationReportFactory_Value;
pub const ILocationReportFactory = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        ListenForReports: fn(
            self: *const ILocationReportFactory,
            requestedReportInterval: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopListeningForReports: fn(
            self: *const ILocationReportFactory,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Status: fn(
            self: *const ILocationReportFactory,
            pVal: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReportInterval: fn(
            self: *const ILocationReportFactory,
            pMilliseconds: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ReportInterval: fn(
            self: *const ILocationReportFactory,
            millisecondsRequested: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DesiredAccuracy: fn(
            self: *const ILocationReportFactory,
            pDesiredAccuracy: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DesiredAccuracy: fn(
            self: *const ILocationReportFactory,
            desiredAccuracy: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestPermissions: fn(
            self: *const ILocationReportFactory,
            hWnd: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocationReportFactory_ListenForReports(self: *const T, requestedReportInterval: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocationReportFactory.VTable, self.vtable).ListenForReports(@ptrCast(*const ILocationReportFactory, self), requestedReportInterval);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocationReportFactory_StopListeningForReports(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocationReportFactory.VTable, self.vtable).StopListeningForReports(@ptrCast(*const ILocationReportFactory, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocationReportFactory_get_Status(self: *const T, pVal: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocationReportFactory.VTable, self.vtable).get_Status(@ptrCast(*const ILocationReportFactory, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocationReportFactory_get_ReportInterval(self: *const T, pMilliseconds: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocationReportFactory.VTable, self.vtable).get_ReportInterval(@ptrCast(*const ILocationReportFactory, self), pMilliseconds);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocationReportFactory_put_ReportInterval(self: *const T, millisecondsRequested: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocationReportFactory.VTable, self.vtable).put_ReportInterval(@ptrCast(*const ILocationReportFactory, self), millisecondsRequested);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocationReportFactory_get_DesiredAccuracy(self: *const T, pDesiredAccuracy: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocationReportFactory.VTable, self.vtable).get_DesiredAccuracy(@ptrCast(*const ILocationReportFactory, self), pDesiredAccuracy);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocationReportFactory_put_DesiredAccuracy(self: *const T, desiredAccuracy: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocationReportFactory.VTable, self.vtable).put_DesiredAccuracy(@ptrCast(*const ILocationReportFactory, self), desiredAccuracy);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocationReportFactory_RequestPermissions(self: *const T, hWnd: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocationReportFactory.VTable, self.vtable).RequestPermissions(@ptrCast(*const ILocationReportFactory, self), hWnd);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ILatLongReportFactory_Value = @import("../zig.zig").Guid.initString("3f0804cb-b114-447d-83dd-390174ebb082");
pub const IID_ILatLongReportFactory = &IID_ILatLongReportFactory_Value;
pub const ILatLongReportFactory = extern struct {
    pub const VTable = extern struct {
        base: ILocationReportFactory.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LatLongReport: fn(
            self: *const ILatLongReportFactory,
            pVal: ?*?*IDispLatLongReport,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ILocationReportFactory.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILatLongReportFactory_get_LatLongReport(self: *const T, pVal: ?*?*IDispLatLongReport) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILatLongReportFactory.VTable, self.vtable).get_LatLongReport(@ptrCast(*const ILatLongReportFactory, self), pVal);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICivicAddressReportFactory_Value = @import("../zig.zig").Guid.initString("bf773b93-c64f-4bee-beb2-67c0b8df66e0");
pub const IID_ICivicAddressReportFactory = &IID_ICivicAddressReportFactory_Value;
pub const ICivicAddressReportFactory = extern struct {
    pub const VTable = extern struct {
        base: ILocationReportFactory.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CivicAddressReport: fn(
            self: *const ICivicAddressReportFactory,
            pVal: ?*?*IDispCivicAddressReport,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ILocationReportFactory.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICivicAddressReportFactory_get_CivicAddressReport(self: *const T, pVal: ?*?*IDispCivicAddressReport) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICivicAddressReportFactory.VTable, self.vtable).get_CivicAddressReport(@ptrCast(*const ICivicAddressReportFactory, self), pVal);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID__ILatLongReportFactoryEvents_Value = @import("../zig.zig").Guid.initString("16ee6cb7-ab3c-424b-849f-269be551fcbc");
pub const IID__ILatLongReportFactoryEvents = &IID__ILatLongReportFactoryEvents_Value;
pub const _ILatLongReportFactoryEvents = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID__ICivicAddressReportFactoryEvents_Value = @import("../zig.zig").Guid.initString("c96039ff-72ec-4617-89bd-84d88bedc722");
pub const IID__ICivicAddressReportFactoryEvents = &IID__ICivicAddressReportFactoryEvents_Value;
pub const _ICivicAddressReportFactoryEvents = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
    };}
    pub usingnamespace MethodMixin(@This());
};


//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (11)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const IDispatch = @import("automation.zig").IDispatch;
const IUnknown = @import("com.zig").IUnknown;
const SYSTEMTIME = @import("windows_programming.zig").SYSTEMTIME;
const HRESULT = @import("com.zig").HRESULT;
const PROPERTYKEY = @import("windows_properties_system.zig").PROPERTYKEY;
const PROPVARIANT = @import("structured_storage.zig").PROPVARIANT;
const BSTR = @import("automation.zig").BSTR;
const LOCATION_DESIRED_ACCURACY = @import("sensors.zig").LOCATION_DESIRED_ACCURACY;
const BOOL = @import("system_services.zig").BOOL;
const HWND = @import("windows_and_messaging.zig").HWND;

test {
    @setEvalBranchQuota(
        @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("std").builtin.is_test) return;
    inline for (@import("std").meta.declarations(@This())) |decl| {
        if (decl.is_pub) {
            _ = decl;
        }
    }
}
