//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (5)
//--------------------------------------------------------------------------------
pub const HSWDEVICE = ?*opaque{};

pub const SW_DEVICE_CAPABILITIES = extern enum(i32) {
    None = 0,
    Removable = 1,
    SilentInstall = 2,
    NoDisplayInUI = 4,
    DriverRequired = 8,
};
pub const SWDeviceCapabilitiesNone = SW_DEVICE_CAPABILITIES.None;
pub const SWDeviceCapabilitiesRemovable = SW_DEVICE_CAPABILITIES.Removable;
pub const SWDeviceCapabilitiesSilentInstall = SW_DEVICE_CAPABILITIES.SilentInstall;
pub const SWDeviceCapabilitiesNoDisplayInUI = SW_DEVICE_CAPABILITIES.NoDisplayInUI;
pub const SWDeviceCapabilitiesDriverRequired = SW_DEVICE_CAPABILITIES.DriverRequired;

pub const SW_DEVICE_CREATE_INFO = extern struct {
    cbSize: u32,
    pszInstanceId: [*:0]const u16,
    pszzHardwareIds: [*]const u16,
    pszzCompatibleIds: [*]const u16,
    pContainerId: *const Guid,
    CapabilityFlags: u32,
    pszDeviceDescription: [*:0]const u16,
    pszDeviceLocation: [*:0]const u16,
    pSecurityDescriptor: *const SECURITY_DESCRIPTOR,
};

pub const SW_DEVICE_LIFETIME = extern enum(i32) {
    Handle = 0,
    ParentPresent = 1,
    Max = 2,
};
pub const SWDeviceLifetimeHandle = SW_DEVICE_LIFETIME.Handle;
pub const SWDeviceLifetimeParentPresent = SW_DEVICE_LIFETIME.ParentPresent;
pub const SWDeviceLifetimeMax = SW_DEVICE_LIFETIME.Max;

pub const SW_DEVICE_CREATE_CALLBACK = fn(
    hSwDevice: HSWDEVICE,
    CreateResult: HRESULT,
    pContext: ?*c_void,
    pszDeviceInstanceId: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) void;


//--------------------------------------------------------------------------------
// Section: Functions (9)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows8.0'
pub extern "CFGMGR32" fn SwDeviceCreate(
    pszEnumeratorName: [*:0]const u16,
    pszParentDeviceInstance: [*:0]const u16,
    pCreateInfo: *const SW_DEVICE_CREATE_INFO,
    cPropertyCount: u32,
    pProperties: ?[*]const DEVPROPERTY,
    pCallback: SW_DEVICE_CREATE_CALLBACK,
    pContext: ?*c_void,
    phSwDevice: *isize,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "CFGMGR32" fn SwDeviceClose(
    hSwDevice: HSWDEVICE,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows8.0'
pub extern "CFGMGR32" fn SwDeviceSetLifetime(
    hSwDevice: HSWDEVICE,
    Lifetime: SW_DEVICE_LIFETIME,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "CFGMGR32" fn SwDeviceGetLifetime(
    hSwDevice: HSWDEVICE,
    pLifetime: *SW_DEVICE_LIFETIME,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "CFGMGR32" fn SwDevicePropertySet(
    hSwDevice: HSWDEVICE,
    cPropertyCount: u32,
    pProperties: [*]const DEVPROPERTY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "CFGMGR32" fn SwDeviceInterfaceRegister(
    hSwDevice: HSWDEVICE,
    pInterfaceClassGuid: *const Guid,
    pszReferenceString: ?[*:0]const u16,
    cPropertyCount: u32,
    pProperties: ?[*]const DEVPROPERTY,
    fEnabled: BOOL,
    ppszDeviceInterfaceId: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "CFGMGR32" fn SwMemFree(
    pMem: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows8.0'
pub extern "CFGMGR32" fn SwDeviceInterfaceSetState(
    hSwDevice: HSWDEVICE,
    pszDeviceInterfaceId: [*:0]const u16,
    fEnabled: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "CFGMGR32" fn SwDeviceInterfacePropertySet(
    hSwDevice: HSWDEVICE,
    pszDeviceInterfaceId: [*:0]const u16,
    cPropertyCount: u32,
    pProperties: [*]const DEVPROPERTY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (6)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const SECURITY_DESCRIPTOR = @import("security.zig").SECURITY_DESCRIPTOR;
const DEVPROPERTY = @import("system_services.zig").DEVPROPERTY;
const PWSTR = @import("system_services.zig").PWSTR;
const BOOL = @import("system_services.zig").BOOL;
const HRESULT = @import("com.zig").HRESULT;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "SW_DEVICE_CREATE_CALLBACK")) { _ = SW_DEVICE_CREATE_CALLBACK; }

    @setEvalBranchQuota(
        @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("std").builtin.is_test) return;
    inline for (@import("std").meta.declarations(@This())) |decl| {
        if (decl.is_pub) {
            _ = decl;
        }
    }
}
