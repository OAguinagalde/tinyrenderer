//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Functions (3)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "KERNEL32" fn EnterCriticalSection(
    lpCriticalSection: *RTL_CRITICAL_SECTION,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "KERNEL32" fn CreatePrivateNamespaceA(
    lpPrivateNamespaceAttributes: ?*SECURITY_ATTRIBUTES,
    lpBoundaryDescriptor: *c_void,
    lpAliasPrefix: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) NamespaceHandle;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "KERNEL32" fn OpenPrivateNamespaceA(
    lpBoundaryDescriptor: *c_void,
    lpAliasPrefix: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) NamespaceHandle;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (4)
//--------------------------------------------------------------------------------
const SECURITY_ATTRIBUTES = @import("system_services.zig").SECURITY_ATTRIBUTES;
const PSTR = @import("system_services.zig").PSTR;
const NamespaceHandle = @import("system_services.zig").NamespaceHandle;
const RTL_CRITICAL_SECTION = @import("system_services.zig").RTL_CRITICAL_SECTION;

test {
    @setEvalBranchQuota(
        @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("std").builtin.is_test) return;
    inline for (@import("std").meta.declarations(@This())) |decl| {
        if (decl.is_pub) {
            _ = decl;
        }
    }
}
