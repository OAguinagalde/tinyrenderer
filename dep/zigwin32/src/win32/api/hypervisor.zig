//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (2)
//--------------------------------------------------------------------------------
pub const WHV_PROCESSOR_FEATURES_BANKS_COUNT = @as(u32, 2);
pub const WHV_HYPERCALL_CONTEXT_MAX_XMM_REGISTERS = @as(u32, 6);

//--------------------------------------------------------------------------------
// Section: Types (84)
//--------------------------------------------------------------------------------
// TODO: this type has a FreeFunc 'WHvDeletePartition', what can Zig do with this information?
pub const WHV_PARTITION_HANDLE = isize;

pub const WHV_CAPABILITY_CODE = extern enum(i32) {
    HypervisorPresent = 0,
    Features = 1,
    ExtendedVmExits = 2,
    ExceptionExitBitmap = 3,
    X64MsrExitBitmap = 4,
    ProcessorVendor = 4096,
    ProcessorFeatures = 4097,
    ProcessorClFlushSize = 4098,
    ProcessorXsaveFeatures = 4099,
    ProcessorClockFrequency = 4100,
    InterruptClockFrequency = 4101,
    ProcessorFeaturesBanks = 4102,
};
pub const WHvCapabilityCodeHypervisorPresent = WHV_CAPABILITY_CODE.HypervisorPresent;
pub const WHvCapabilityCodeFeatures = WHV_CAPABILITY_CODE.Features;
pub const WHvCapabilityCodeExtendedVmExits = WHV_CAPABILITY_CODE.ExtendedVmExits;
pub const WHvCapabilityCodeExceptionExitBitmap = WHV_CAPABILITY_CODE.ExceptionExitBitmap;
pub const WHvCapabilityCodeX64MsrExitBitmap = WHV_CAPABILITY_CODE.X64MsrExitBitmap;
pub const WHvCapabilityCodeProcessorVendor = WHV_CAPABILITY_CODE.ProcessorVendor;
pub const WHvCapabilityCodeProcessorFeatures = WHV_CAPABILITY_CODE.ProcessorFeatures;
pub const WHvCapabilityCodeProcessorClFlushSize = WHV_CAPABILITY_CODE.ProcessorClFlushSize;
pub const WHvCapabilityCodeProcessorXsaveFeatures = WHV_CAPABILITY_CODE.ProcessorXsaveFeatures;
pub const WHvCapabilityCodeProcessorClockFrequency = WHV_CAPABILITY_CODE.ProcessorClockFrequency;
pub const WHvCapabilityCodeInterruptClockFrequency = WHV_CAPABILITY_CODE.InterruptClockFrequency;
pub const WHvCapabilityCodeProcessorFeaturesBanks = WHV_CAPABILITY_CODE.ProcessorFeaturesBanks;

pub const WHV_CAPABILITY_FEATURES = extern union {
    Anonymous: _Anonymous_e__Struct,
    AsUINT64: u64,
    const _Anonymous_e__Struct = u32; // TODO: generate this nested type!
};

pub const WHV_EXTENDED_VM_EXITS = extern union {
    Anonymous: _Anonymous_e__Struct,
    AsUINT64: u64,
    const _Anonymous_e__Struct = u32; // TODO: generate this nested type!
};

pub const WHV_PROCESSOR_VENDOR = extern enum(i32) {
    Amd = 0,
    Intel = 1,
    Hygon = 2,
};
pub const WHvProcessorVendorAmd = WHV_PROCESSOR_VENDOR.Amd;
pub const WHvProcessorVendorIntel = WHV_PROCESSOR_VENDOR.Intel;
pub const WHvProcessorVendorHygon = WHV_PROCESSOR_VENDOR.Hygon;

pub const WHV_PROCESSOR_FEATURES = extern union {
    Anonymous: _Anonymous_e__Struct,
    AsUINT64: u64,
    const _Anonymous_e__Struct = u32; // TODO: generate this nested type!
};

pub const WHV_PROCESSOR_FEATURES1 = extern union {
    Anonymous: _Anonymous_e__Struct,
    AsUINT64: u64,
    const _Anonymous_e__Struct = u32; // TODO: generate this nested type!
};

pub const WHV_PROCESSOR_FEATURES_BANKS = extern struct {
    BanksCount: u32,
    Reserved0: u32,
    Anonymous: _Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const WHV_PROCESSOR_XSAVE_FEATURES = extern union {
    Anonymous: _Anonymous_e__Struct,
    AsUINT64: u64,
    const _Anonymous_e__Struct = u32; // TODO: generate this nested type!
};

pub const WHV_X64_MSR_EXIT_BITMAP = extern union {
    AsUINT64: u64,
    Anonymous: _Anonymous_e__Struct,
    const _Anonymous_e__Struct = u32; // TODO: generate this nested type!
};

pub const WHV_CAPABILITY = extern union {
    HypervisorPresent: BOOL,
    Features: WHV_CAPABILITY_FEATURES,
    ExtendedVmExits: WHV_EXTENDED_VM_EXITS,
    ProcessorVendor: WHV_PROCESSOR_VENDOR,
    ProcessorFeatures: WHV_PROCESSOR_FEATURES,
    ProcessorXsaveFeatures: WHV_PROCESSOR_XSAVE_FEATURES,
    ProcessorClFlushSize: u8,
    ExceptionExitBitmap: u64,
    X64MsrExitBitmap: WHV_X64_MSR_EXIT_BITMAP,
    ProcessorClockFrequency: u64,
    InterruptClockFrequency: u64,
    ProcessorFeaturesBanks: WHV_PROCESSOR_FEATURES_BANKS,
};

pub const WHV_PARTITION_PROPERTY_CODE = extern enum(i32) {
    ExtendedVmExits = 1,
    ExceptionExitBitmap = 2,
    SeparateSecurityDomain = 3,
    NestedVirtualization = 4,
    X64MsrExitBitmap = 5,
    ProcessorFeatures = 4097,
    ProcessorClFlushSize = 4098,
    CpuidExitList = 4099,
    CpuidResultList = 4100,
    LocalApicEmulationMode = 4101,
    ProcessorXsaveFeatures = 4102,
    ProcessorClockFrequency = 4103,
    InterruptClockFrequency = 4104,
    ApicRemoteReadSupport = 4105,
    ProcessorFeaturesBanks = 4106,
    ReferenceTime = 4107,
    ProcessorCount = 8191,
};
pub const WHvPartitionPropertyCodeExtendedVmExits = WHV_PARTITION_PROPERTY_CODE.ExtendedVmExits;
pub const WHvPartitionPropertyCodeExceptionExitBitmap = WHV_PARTITION_PROPERTY_CODE.ExceptionExitBitmap;
pub const WHvPartitionPropertyCodeSeparateSecurityDomain = WHV_PARTITION_PROPERTY_CODE.SeparateSecurityDomain;
pub const WHvPartitionPropertyCodeNestedVirtualization = WHV_PARTITION_PROPERTY_CODE.NestedVirtualization;
pub const WHvPartitionPropertyCodeX64MsrExitBitmap = WHV_PARTITION_PROPERTY_CODE.X64MsrExitBitmap;
pub const WHvPartitionPropertyCodeProcessorFeatures = WHV_PARTITION_PROPERTY_CODE.ProcessorFeatures;
pub const WHvPartitionPropertyCodeProcessorClFlushSize = WHV_PARTITION_PROPERTY_CODE.ProcessorClFlushSize;
pub const WHvPartitionPropertyCodeCpuidExitList = WHV_PARTITION_PROPERTY_CODE.CpuidExitList;
pub const WHvPartitionPropertyCodeCpuidResultList = WHV_PARTITION_PROPERTY_CODE.CpuidResultList;
pub const WHvPartitionPropertyCodeLocalApicEmulationMode = WHV_PARTITION_PROPERTY_CODE.LocalApicEmulationMode;
pub const WHvPartitionPropertyCodeProcessorXsaveFeatures = WHV_PARTITION_PROPERTY_CODE.ProcessorXsaveFeatures;
pub const WHvPartitionPropertyCodeProcessorClockFrequency = WHV_PARTITION_PROPERTY_CODE.ProcessorClockFrequency;
pub const WHvPartitionPropertyCodeInterruptClockFrequency = WHV_PARTITION_PROPERTY_CODE.InterruptClockFrequency;
pub const WHvPartitionPropertyCodeApicRemoteReadSupport = WHV_PARTITION_PROPERTY_CODE.ApicRemoteReadSupport;
pub const WHvPartitionPropertyCodeProcessorFeaturesBanks = WHV_PARTITION_PROPERTY_CODE.ProcessorFeaturesBanks;
pub const WHvPartitionPropertyCodeReferenceTime = WHV_PARTITION_PROPERTY_CODE.ReferenceTime;
pub const WHvPartitionPropertyCodeProcessorCount = WHV_PARTITION_PROPERTY_CODE.ProcessorCount;

pub const WHV_X64_CPUID_RESULT = extern struct {
    Function: u32,
    Reserved: [3]u32,
    Eax: u32,
    Ebx: u32,
    Ecx: u32,
    Edx: u32,
};

pub const WHV_EXCEPTION_TYPE = extern enum(i32) {
    DivideErrorFault = 0,
    DebugTrapOrFault = 1,
    BreakpointTrap = 3,
    OverflowTrap = 4,
    BoundRangeFault = 5,
    InvalidOpcodeFault = 6,
    DeviceNotAvailableFault = 7,
    DoubleFaultAbort = 8,
    InvalidTaskStateSegmentFault = 10,
    SegmentNotPresentFault = 11,
    StackFault = 12,
    GeneralProtectionFault = 13,
    PageFault = 14,
    FloatingPointErrorFault = 16,
    AlignmentCheckFault = 17,
    MachineCheckAbort = 18,
    SimdFloatingPointFault = 19,
};
pub const WHvX64ExceptionTypeDivideErrorFault = WHV_EXCEPTION_TYPE.DivideErrorFault;
pub const WHvX64ExceptionTypeDebugTrapOrFault = WHV_EXCEPTION_TYPE.DebugTrapOrFault;
pub const WHvX64ExceptionTypeBreakpointTrap = WHV_EXCEPTION_TYPE.BreakpointTrap;
pub const WHvX64ExceptionTypeOverflowTrap = WHV_EXCEPTION_TYPE.OverflowTrap;
pub const WHvX64ExceptionTypeBoundRangeFault = WHV_EXCEPTION_TYPE.BoundRangeFault;
pub const WHvX64ExceptionTypeInvalidOpcodeFault = WHV_EXCEPTION_TYPE.InvalidOpcodeFault;
pub const WHvX64ExceptionTypeDeviceNotAvailableFault = WHV_EXCEPTION_TYPE.DeviceNotAvailableFault;
pub const WHvX64ExceptionTypeDoubleFaultAbort = WHV_EXCEPTION_TYPE.DoubleFaultAbort;
pub const WHvX64ExceptionTypeInvalidTaskStateSegmentFault = WHV_EXCEPTION_TYPE.InvalidTaskStateSegmentFault;
pub const WHvX64ExceptionTypeSegmentNotPresentFault = WHV_EXCEPTION_TYPE.SegmentNotPresentFault;
pub const WHvX64ExceptionTypeStackFault = WHV_EXCEPTION_TYPE.StackFault;
pub const WHvX64ExceptionTypeGeneralProtectionFault = WHV_EXCEPTION_TYPE.GeneralProtectionFault;
pub const WHvX64ExceptionTypePageFault = WHV_EXCEPTION_TYPE.PageFault;
pub const WHvX64ExceptionTypeFloatingPointErrorFault = WHV_EXCEPTION_TYPE.FloatingPointErrorFault;
pub const WHvX64ExceptionTypeAlignmentCheckFault = WHV_EXCEPTION_TYPE.AlignmentCheckFault;
pub const WHvX64ExceptionTypeMachineCheckAbort = WHV_EXCEPTION_TYPE.MachineCheckAbort;
pub const WHvX64ExceptionTypeSimdFloatingPointFault = WHV_EXCEPTION_TYPE.SimdFloatingPointFault;

pub const WHV_X64_LOCAL_APIC_EMULATION_MODE = extern enum(i32) {
    None = 0,
    XApic = 1,
    X2Apic = 2,
};
pub const WHvX64LocalApicEmulationModeNone = WHV_X64_LOCAL_APIC_EMULATION_MODE.None;
pub const WHvX64LocalApicEmulationModeXApic = WHV_X64_LOCAL_APIC_EMULATION_MODE.XApic;
pub const WHvX64LocalApicEmulationModeX2Apic = WHV_X64_LOCAL_APIC_EMULATION_MODE.X2Apic;

pub const WHV_PARTITION_PROPERTY = extern union {
    ExtendedVmExits: WHV_EXTENDED_VM_EXITS,
    ProcessorFeatures: WHV_PROCESSOR_FEATURES,
    ProcessorXsaveFeatures: WHV_PROCESSOR_XSAVE_FEATURES,
    ProcessorClFlushSize: u8,
    ProcessorCount: u32,
    CpuidExitList: [1]u32,
    CpuidResultList: [1]WHV_X64_CPUID_RESULT,
    ExceptionExitBitmap: u64,
    LocalApicEmulationMode: WHV_X64_LOCAL_APIC_EMULATION_MODE,
    SeparateSecurityDomain: BOOL,
    NestedVirtualization: BOOL,
    X64MsrExitBitmap: WHV_X64_MSR_EXIT_BITMAP,
    ProcessorClockFrequency: u64,
    InterruptClockFrequency: u64,
    ApicRemoteRead: BOOL,
    ProcessorFeaturesBanks: WHV_PROCESSOR_FEATURES_BANKS,
    ReferenceTime: u64,
};

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const WHV_MAP_GPA_RANGE_FLAGS = extern enum(u32) {
    None = 0,
    Read = 1,
    Write = 2,
    Execute = 4,
    TrackDirtyPages = 8,
    _,
};
pub const WHvMapGpaRangeFlagNone = WHV_MAP_GPA_RANGE_FLAGS.None;
pub const WHvMapGpaRangeFlagRead = WHV_MAP_GPA_RANGE_FLAGS.Read;
pub const WHvMapGpaRangeFlagWrite = WHV_MAP_GPA_RANGE_FLAGS.Write;
pub const WHvMapGpaRangeFlagExecute = WHV_MAP_GPA_RANGE_FLAGS.Execute;
pub const WHvMapGpaRangeFlagTrackDirtyPages = WHV_MAP_GPA_RANGE_FLAGS.TrackDirtyPages;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const WHV_TRANSLATE_GVA_FLAGS = extern enum(u32) {
    None = 0,
    ValidateRead = 1,
    ValidateWrite = 2,
    ValidateExecute = 4,
    PrivilegeExempt = 8,
    SetPageTableBits = 16,
    _,
};
pub const WHvTranslateGvaFlagNone = WHV_TRANSLATE_GVA_FLAGS.None;
pub const WHvTranslateGvaFlagValidateRead = WHV_TRANSLATE_GVA_FLAGS.ValidateRead;
pub const WHvTranslateGvaFlagValidateWrite = WHV_TRANSLATE_GVA_FLAGS.ValidateWrite;
pub const WHvTranslateGvaFlagValidateExecute = WHV_TRANSLATE_GVA_FLAGS.ValidateExecute;
pub const WHvTranslateGvaFlagPrivilegeExempt = WHV_TRANSLATE_GVA_FLAGS.PrivilegeExempt;
pub const WHvTranslateGvaFlagSetPageTableBits = WHV_TRANSLATE_GVA_FLAGS.SetPageTableBits;

pub const WHV_TRANSLATE_GVA_RESULT_CODE = extern enum(i32) {
    Success = 0,
    PageNotPresent = 1,
    PrivilegeViolation = 2,
    InvalidPageTableFlags = 3,
    GpaUnmapped = 4,
    GpaNoReadAccess = 5,
    GpaNoWriteAccess = 6,
    GpaIllegalOverlayAccess = 7,
    Intercept = 8,
};
pub const WHvTranslateGvaResultSuccess = WHV_TRANSLATE_GVA_RESULT_CODE.Success;
pub const WHvTranslateGvaResultPageNotPresent = WHV_TRANSLATE_GVA_RESULT_CODE.PageNotPresent;
pub const WHvTranslateGvaResultPrivilegeViolation = WHV_TRANSLATE_GVA_RESULT_CODE.PrivilegeViolation;
pub const WHvTranslateGvaResultInvalidPageTableFlags = WHV_TRANSLATE_GVA_RESULT_CODE.InvalidPageTableFlags;
pub const WHvTranslateGvaResultGpaUnmapped = WHV_TRANSLATE_GVA_RESULT_CODE.GpaUnmapped;
pub const WHvTranslateGvaResultGpaNoReadAccess = WHV_TRANSLATE_GVA_RESULT_CODE.GpaNoReadAccess;
pub const WHvTranslateGvaResultGpaNoWriteAccess = WHV_TRANSLATE_GVA_RESULT_CODE.GpaNoWriteAccess;
pub const WHvTranslateGvaResultGpaIllegalOverlayAccess = WHV_TRANSLATE_GVA_RESULT_CODE.GpaIllegalOverlayAccess;
pub const WHvTranslateGvaResultIntercept = WHV_TRANSLATE_GVA_RESULT_CODE.Intercept;

pub const WHV_TRANSLATE_GVA_RESULT = extern struct {
    ResultCode: WHV_TRANSLATE_GVA_RESULT_CODE,
    Reserved: u32,
};

pub const WHV_REGISTER_NAME = extern enum(i32) {
    X64RegisterRax = 0,
    X64RegisterRcx = 1,
    X64RegisterRdx = 2,
    X64RegisterRbx = 3,
    X64RegisterRsp = 4,
    X64RegisterRbp = 5,
    X64RegisterRsi = 6,
    X64RegisterRdi = 7,
    X64RegisterR8 = 8,
    X64RegisterR9 = 9,
    X64RegisterR10 = 10,
    X64RegisterR11 = 11,
    X64RegisterR12 = 12,
    X64RegisterR13 = 13,
    X64RegisterR14 = 14,
    X64RegisterR15 = 15,
    X64RegisterRip = 16,
    X64RegisterRflags = 17,
    X64RegisterEs = 18,
    X64RegisterCs = 19,
    X64RegisterSs = 20,
    X64RegisterDs = 21,
    X64RegisterFs = 22,
    X64RegisterGs = 23,
    X64RegisterLdtr = 24,
    X64RegisterTr = 25,
    X64RegisterIdtr = 26,
    X64RegisterGdtr = 27,
    X64RegisterCr0 = 28,
    X64RegisterCr2 = 29,
    X64RegisterCr3 = 30,
    X64RegisterCr4 = 31,
    X64RegisterCr8 = 32,
    X64RegisterDr0 = 33,
    X64RegisterDr1 = 34,
    X64RegisterDr2 = 35,
    X64RegisterDr3 = 36,
    X64RegisterDr6 = 37,
    X64RegisterDr7 = 38,
    X64RegisterXCr0 = 39,
    X64RegisterXmm0 = 4096,
    X64RegisterXmm1 = 4097,
    X64RegisterXmm2 = 4098,
    X64RegisterXmm3 = 4099,
    X64RegisterXmm4 = 4100,
    X64RegisterXmm5 = 4101,
    X64RegisterXmm6 = 4102,
    X64RegisterXmm7 = 4103,
    X64RegisterXmm8 = 4104,
    X64RegisterXmm9 = 4105,
    X64RegisterXmm10 = 4106,
    X64RegisterXmm11 = 4107,
    X64RegisterXmm12 = 4108,
    X64RegisterXmm13 = 4109,
    X64RegisterXmm14 = 4110,
    X64RegisterXmm15 = 4111,
    X64RegisterFpMmx0 = 4112,
    X64RegisterFpMmx1 = 4113,
    X64RegisterFpMmx2 = 4114,
    X64RegisterFpMmx3 = 4115,
    X64RegisterFpMmx4 = 4116,
    X64RegisterFpMmx5 = 4117,
    X64RegisterFpMmx6 = 4118,
    X64RegisterFpMmx7 = 4119,
    X64RegisterFpControlStatus = 4120,
    X64RegisterXmmControlStatus = 4121,
    X64RegisterTsc = 8192,
    X64RegisterEfer = 8193,
    X64RegisterKernelGsBase = 8194,
    X64RegisterApicBase = 8195,
    X64RegisterPat = 8196,
    X64RegisterSysenterCs = 8197,
    X64RegisterSysenterEip = 8198,
    X64RegisterSysenterEsp = 8199,
    X64RegisterStar = 8200,
    X64RegisterLstar = 8201,
    X64RegisterCstar = 8202,
    X64RegisterSfmask = 8203,
    X64RegisterInitialApicId = 8204,
    X64RegisterMsrMtrrCap = 8205,
    X64RegisterMsrMtrrDefType = 8206,
    X64RegisterMsrMtrrPhysBase0 = 8208,
    X64RegisterMsrMtrrPhysBase1 = 8209,
    X64RegisterMsrMtrrPhysBase2 = 8210,
    X64RegisterMsrMtrrPhysBase3 = 8211,
    X64RegisterMsrMtrrPhysBase4 = 8212,
    X64RegisterMsrMtrrPhysBase5 = 8213,
    X64RegisterMsrMtrrPhysBase6 = 8214,
    X64RegisterMsrMtrrPhysBase7 = 8215,
    X64RegisterMsrMtrrPhysBase8 = 8216,
    X64RegisterMsrMtrrPhysBase9 = 8217,
    X64RegisterMsrMtrrPhysBaseA = 8218,
    X64RegisterMsrMtrrPhysBaseB = 8219,
    X64RegisterMsrMtrrPhysBaseC = 8220,
    X64RegisterMsrMtrrPhysBaseD = 8221,
    X64RegisterMsrMtrrPhysBaseE = 8222,
    X64RegisterMsrMtrrPhysBaseF = 8223,
    X64RegisterMsrMtrrPhysMask0 = 8256,
    X64RegisterMsrMtrrPhysMask1 = 8257,
    X64RegisterMsrMtrrPhysMask2 = 8258,
    X64RegisterMsrMtrrPhysMask3 = 8259,
    X64RegisterMsrMtrrPhysMask4 = 8260,
    X64RegisterMsrMtrrPhysMask5 = 8261,
    X64RegisterMsrMtrrPhysMask6 = 8262,
    X64RegisterMsrMtrrPhysMask7 = 8263,
    X64RegisterMsrMtrrPhysMask8 = 8264,
    X64RegisterMsrMtrrPhysMask9 = 8265,
    X64RegisterMsrMtrrPhysMaskA = 8266,
    X64RegisterMsrMtrrPhysMaskB = 8267,
    X64RegisterMsrMtrrPhysMaskC = 8268,
    X64RegisterMsrMtrrPhysMaskD = 8269,
    X64RegisterMsrMtrrPhysMaskE = 8270,
    X64RegisterMsrMtrrPhysMaskF = 8271,
    X64RegisterMsrMtrrFix64k00000 = 8304,
    X64RegisterMsrMtrrFix16k80000 = 8305,
    X64RegisterMsrMtrrFix16kA0000 = 8306,
    X64RegisterMsrMtrrFix4kC0000 = 8307,
    X64RegisterMsrMtrrFix4kC8000 = 8308,
    X64RegisterMsrMtrrFix4kD0000 = 8309,
    X64RegisterMsrMtrrFix4kD8000 = 8310,
    X64RegisterMsrMtrrFix4kE0000 = 8311,
    X64RegisterMsrMtrrFix4kE8000 = 8312,
    X64RegisterMsrMtrrFix4kF0000 = 8313,
    X64RegisterMsrMtrrFix4kF8000 = 8314,
    X64RegisterTscAux = 8315,
    X64RegisterSpecCtrl = 8324,
    X64RegisterPredCmd = 8325,
    X64RegisterTscVirtualOffset = 8327,
    X64RegisterApicId = 12290,
    X64RegisterApicVersion = 12291,
    RegisterPendingInterruption = -2147483648,
    RegisterInterruptState = -2147483647,
    RegisterPendingEvent = -2147483646,
    X64RegisterDeliverabilityNotifications = -2147483644,
    RegisterInternalActivityState = -2147483643,
    X64RegisterPendingDebugException = -2147483642,
};
pub const WHvX64RegisterRax = WHV_REGISTER_NAME.X64RegisterRax;
pub const WHvX64RegisterRcx = WHV_REGISTER_NAME.X64RegisterRcx;
pub const WHvX64RegisterRdx = WHV_REGISTER_NAME.X64RegisterRdx;
pub const WHvX64RegisterRbx = WHV_REGISTER_NAME.X64RegisterRbx;
pub const WHvX64RegisterRsp = WHV_REGISTER_NAME.X64RegisterRsp;
pub const WHvX64RegisterRbp = WHV_REGISTER_NAME.X64RegisterRbp;
pub const WHvX64RegisterRsi = WHV_REGISTER_NAME.X64RegisterRsi;
pub const WHvX64RegisterRdi = WHV_REGISTER_NAME.X64RegisterRdi;
pub const WHvX64RegisterR8 = WHV_REGISTER_NAME.X64RegisterR8;
pub const WHvX64RegisterR9 = WHV_REGISTER_NAME.X64RegisterR9;
pub const WHvX64RegisterR10 = WHV_REGISTER_NAME.X64RegisterR10;
pub const WHvX64RegisterR11 = WHV_REGISTER_NAME.X64RegisterR11;
pub const WHvX64RegisterR12 = WHV_REGISTER_NAME.X64RegisterR12;
pub const WHvX64RegisterR13 = WHV_REGISTER_NAME.X64RegisterR13;
pub const WHvX64RegisterR14 = WHV_REGISTER_NAME.X64RegisterR14;
pub const WHvX64RegisterR15 = WHV_REGISTER_NAME.X64RegisterR15;
pub const WHvX64RegisterRip = WHV_REGISTER_NAME.X64RegisterRip;
pub const WHvX64RegisterRflags = WHV_REGISTER_NAME.X64RegisterRflags;
pub const WHvX64RegisterEs = WHV_REGISTER_NAME.X64RegisterEs;
pub const WHvX64RegisterCs = WHV_REGISTER_NAME.X64RegisterCs;
pub const WHvX64RegisterSs = WHV_REGISTER_NAME.X64RegisterSs;
pub const WHvX64RegisterDs = WHV_REGISTER_NAME.X64RegisterDs;
pub const WHvX64RegisterFs = WHV_REGISTER_NAME.X64RegisterFs;
pub const WHvX64RegisterGs = WHV_REGISTER_NAME.X64RegisterGs;
pub const WHvX64RegisterLdtr = WHV_REGISTER_NAME.X64RegisterLdtr;
pub const WHvX64RegisterTr = WHV_REGISTER_NAME.X64RegisterTr;
pub const WHvX64RegisterIdtr = WHV_REGISTER_NAME.X64RegisterIdtr;
pub const WHvX64RegisterGdtr = WHV_REGISTER_NAME.X64RegisterGdtr;
pub const WHvX64RegisterCr0 = WHV_REGISTER_NAME.X64RegisterCr0;
pub const WHvX64RegisterCr2 = WHV_REGISTER_NAME.X64RegisterCr2;
pub const WHvX64RegisterCr3 = WHV_REGISTER_NAME.X64RegisterCr3;
pub const WHvX64RegisterCr4 = WHV_REGISTER_NAME.X64RegisterCr4;
pub const WHvX64RegisterCr8 = WHV_REGISTER_NAME.X64RegisterCr8;
pub const WHvX64RegisterDr0 = WHV_REGISTER_NAME.X64RegisterDr0;
pub const WHvX64RegisterDr1 = WHV_REGISTER_NAME.X64RegisterDr1;
pub const WHvX64RegisterDr2 = WHV_REGISTER_NAME.X64RegisterDr2;
pub const WHvX64RegisterDr3 = WHV_REGISTER_NAME.X64RegisterDr3;
pub const WHvX64RegisterDr6 = WHV_REGISTER_NAME.X64RegisterDr6;
pub const WHvX64RegisterDr7 = WHV_REGISTER_NAME.X64RegisterDr7;
pub const WHvX64RegisterXCr0 = WHV_REGISTER_NAME.X64RegisterXCr0;
pub const WHvX64RegisterXmm0 = WHV_REGISTER_NAME.X64RegisterXmm0;
pub const WHvX64RegisterXmm1 = WHV_REGISTER_NAME.X64RegisterXmm1;
pub const WHvX64RegisterXmm2 = WHV_REGISTER_NAME.X64RegisterXmm2;
pub const WHvX64RegisterXmm3 = WHV_REGISTER_NAME.X64RegisterXmm3;
pub const WHvX64RegisterXmm4 = WHV_REGISTER_NAME.X64RegisterXmm4;
pub const WHvX64RegisterXmm5 = WHV_REGISTER_NAME.X64RegisterXmm5;
pub const WHvX64RegisterXmm6 = WHV_REGISTER_NAME.X64RegisterXmm6;
pub const WHvX64RegisterXmm7 = WHV_REGISTER_NAME.X64RegisterXmm7;
pub const WHvX64RegisterXmm8 = WHV_REGISTER_NAME.X64RegisterXmm8;
pub const WHvX64RegisterXmm9 = WHV_REGISTER_NAME.X64RegisterXmm9;
pub const WHvX64RegisterXmm10 = WHV_REGISTER_NAME.X64RegisterXmm10;
pub const WHvX64RegisterXmm11 = WHV_REGISTER_NAME.X64RegisterXmm11;
pub const WHvX64RegisterXmm12 = WHV_REGISTER_NAME.X64RegisterXmm12;
pub const WHvX64RegisterXmm13 = WHV_REGISTER_NAME.X64RegisterXmm13;
pub const WHvX64RegisterXmm14 = WHV_REGISTER_NAME.X64RegisterXmm14;
pub const WHvX64RegisterXmm15 = WHV_REGISTER_NAME.X64RegisterXmm15;
pub const WHvX64RegisterFpMmx0 = WHV_REGISTER_NAME.X64RegisterFpMmx0;
pub const WHvX64RegisterFpMmx1 = WHV_REGISTER_NAME.X64RegisterFpMmx1;
pub const WHvX64RegisterFpMmx2 = WHV_REGISTER_NAME.X64RegisterFpMmx2;
pub const WHvX64RegisterFpMmx3 = WHV_REGISTER_NAME.X64RegisterFpMmx3;
pub const WHvX64RegisterFpMmx4 = WHV_REGISTER_NAME.X64RegisterFpMmx4;
pub const WHvX64RegisterFpMmx5 = WHV_REGISTER_NAME.X64RegisterFpMmx5;
pub const WHvX64RegisterFpMmx6 = WHV_REGISTER_NAME.X64RegisterFpMmx6;
pub const WHvX64RegisterFpMmx7 = WHV_REGISTER_NAME.X64RegisterFpMmx7;
pub const WHvX64RegisterFpControlStatus = WHV_REGISTER_NAME.X64RegisterFpControlStatus;
pub const WHvX64RegisterXmmControlStatus = WHV_REGISTER_NAME.X64RegisterXmmControlStatus;
pub const WHvX64RegisterTsc = WHV_REGISTER_NAME.X64RegisterTsc;
pub const WHvX64RegisterEfer = WHV_REGISTER_NAME.X64RegisterEfer;
pub const WHvX64RegisterKernelGsBase = WHV_REGISTER_NAME.X64RegisterKernelGsBase;
pub const WHvX64RegisterApicBase = WHV_REGISTER_NAME.X64RegisterApicBase;
pub const WHvX64RegisterPat = WHV_REGISTER_NAME.X64RegisterPat;
pub const WHvX64RegisterSysenterCs = WHV_REGISTER_NAME.X64RegisterSysenterCs;
pub const WHvX64RegisterSysenterEip = WHV_REGISTER_NAME.X64RegisterSysenterEip;
pub const WHvX64RegisterSysenterEsp = WHV_REGISTER_NAME.X64RegisterSysenterEsp;
pub const WHvX64RegisterStar = WHV_REGISTER_NAME.X64RegisterStar;
pub const WHvX64RegisterLstar = WHV_REGISTER_NAME.X64RegisterLstar;
pub const WHvX64RegisterCstar = WHV_REGISTER_NAME.X64RegisterCstar;
pub const WHvX64RegisterSfmask = WHV_REGISTER_NAME.X64RegisterSfmask;
pub const WHvX64RegisterInitialApicId = WHV_REGISTER_NAME.X64RegisterInitialApicId;
pub const WHvX64RegisterMsrMtrrCap = WHV_REGISTER_NAME.X64RegisterMsrMtrrCap;
pub const WHvX64RegisterMsrMtrrDefType = WHV_REGISTER_NAME.X64RegisterMsrMtrrDefType;
pub const WHvX64RegisterMsrMtrrPhysBase0 = WHV_REGISTER_NAME.X64RegisterMsrMtrrPhysBase0;
pub const WHvX64RegisterMsrMtrrPhysBase1 = WHV_REGISTER_NAME.X64RegisterMsrMtrrPhysBase1;
pub const WHvX64RegisterMsrMtrrPhysBase2 = WHV_REGISTER_NAME.X64RegisterMsrMtrrPhysBase2;
pub const WHvX64RegisterMsrMtrrPhysBase3 = WHV_REGISTER_NAME.X64RegisterMsrMtrrPhysBase3;
pub const WHvX64RegisterMsrMtrrPhysBase4 = WHV_REGISTER_NAME.X64RegisterMsrMtrrPhysBase4;
pub const WHvX64RegisterMsrMtrrPhysBase5 = WHV_REGISTER_NAME.X64RegisterMsrMtrrPhysBase5;
pub const WHvX64RegisterMsrMtrrPhysBase6 = WHV_REGISTER_NAME.X64RegisterMsrMtrrPhysBase6;
pub const WHvX64RegisterMsrMtrrPhysBase7 = WHV_REGISTER_NAME.X64RegisterMsrMtrrPhysBase7;
pub const WHvX64RegisterMsrMtrrPhysBase8 = WHV_REGISTER_NAME.X64RegisterMsrMtrrPhysBase8;
pub const WHvX64RegisterMsrMtrrPhysBase9 = WHV_REGISTER_NAME.X64RegisterMsrMtrrPhysBase9;
pub const WHvX64RegisterMsrMtrrPhysBaseA = WHV_REGISTER_NAME.X64RegisterMsrMtrrPhysBaseA;
pub const WHvX64RegisterMsrMtrrPhysBaseB = WHV_REGISTER_NAME.X64RegisterMsrMtrrPhysBaseB;
pub const WHvX64RegisterMsrMtrrPhysBaseC = WHV_REGISTER_NAME.X64RegisterMsrMtrrPhysBaseC;
pub const WHvX64RegisterMsrMtrrPhysBaseD = WHV_REGISTER_NAME.X64RegisterMsrMtrrPhysBaseD;
pub const WHvX64RegisterMsrMtrrPhysBaseE = WHV_REGISTER_NAME.X64RegisterMsrMtrrPhysBaseE;
pub const WHvX64RegisterMsrMtrrPhysBaseF = WHV_REGISTER_NAME.X64RegisterMsrMtrrPhysBaseF;
pub const WHvX64RegisterMsrMtrrPhysMask0 = WHV_REGISTER_NAME.X64RegisterMsrMtrrPhysMask0;
pub const WHvX64RegisterMsrMtrrPhysMask1 = WHV_REGISTER_NAME.X64RegisterMsrMtrrPhysMask1;
pub const WHvX64RegisterMsrMtrrPhysMask2 = WHV_REGISTER_NAME.X64RegisterMsrMtrrPhysMask2;
pub const WHvX64RegisterMsrMtrrPhysMask3 = WHV_REGISTER_NAME.X64RegisterMsrMtrrPhysMask3;
pub const WHvX64RegisterMsrMtrrPhysMask4 = WHV_REGISTER_NAME.X64RegisterMsrMtrrPhysMask4;
pub const WHvX64RegisterMsrMtrrPhysMask5 = WHV_REGISTER_NAME.X64RegisterMsrMtrrPhysMask5;
pub const WHvX64RegisterMsrMtrrPhysMask6 = WHV_REGISTER_NAME.X64RegisterMsrMtrrPhysMask6;
pub const WHvX64RegisterMsrMtrrPhysMask7 = WHV_REGISTER_NAME.X64RegisterMsrMtrrPhysMask7;
pub const WHvX64RegisterMsrMtrrPhysMask8 = WHV_REGISTER_NAME.X64RegisterMsrMtrrPhysMask8;
pub const WHvX64RegisterMsrMtrrPhysMask9 = WHV_REGISTER_NAME.X64RegisterMsrMtrrPhysMask9;
pub const WHvX64RegisterMsrMtrrPhysMaskA = WHV_REGISTER_NAME.X64RegisterMsrMtrrPhysMaskA;
pub const WHvX64RegisterMsrMtrrPhysMaskB = WHV_REGISTER_NAME.X64RegisterMsrMtrrPhysMaskB;
pub const WHvX64RegisterMsrMtrrPhysMaskC = WHV_REGISTER_NAME.X64RegisterMsrMtrrPhysMaskC;
pub const WHvX64RegisterMsrMtrrPhysMaskD = WHV_REGISTER_NAME.X64RegisterMsrMtrrPhysMaskD;
pub const WHvX64RegisterMsrMtrrPhysMaskE = WHV_REGISTER_NAME.X64RegisterMsrMtrrPhysMaskE;
pub const WHvX64RegisterMsrMtrrPhysMaskF = WHV_REGISTER_NAME.X64RegisterMsrMtrrPhysMaskF;
pub const WHvX64RegisterMsrMtrrFix64k00000 = WHV_REGISTER_NAME.X64RegisterMsrMtrrFix64k00000;
pub const WHvX64RegisterMsrMtrrFix16k80000 = WHV_REGISTER_NAME.X64RegisterMsrMtrrFix16k80000;
pub const WHvX64RegisterMsrMtrrFix16kA0000 = WHV_REGISTER_NAME.X64RegisterMsrMtrrFix16kA0000;
pub const WHvX64RegisterMsrMtrrFix4kC0000 = WHV_REGISTER_NAME.X64RegisterMsrMtrrFix4kC0000;
pub const WHvX64RegisterMsrMtrrFix4kC8000 = WHV_REGISTER_NAME.X64RegisterMsrMtrrFix4kC8000;
pub const WHvX64RegisterMsrMtrrFix4kD0000 = WHV_REGISTER_NAME.X64RegisterMsrMtrrFix4kD0000;
pub const WHvX64RegisterMsrMtrrFix4kD8000 = WHV_REGISTER_NAME.X64RegisterMsrMtrrFix4kD8000;
pub const WHvX64RegisterMsrMtrrFix4kE0000 = WHV_REGISTER_NAME.X64RegisterMsrMtrrFix4kE0000;
pub const WHvX64RegisterMsrMtrrFix4kE8000 = WHV_REGISTER_NAME.X64RegisterMsrMtrrFix4kE8000;
pub const WHvX64RegisterMsrMtrrFix4kF0000 = WHV_REGISTER_NAME.X64RegisterMsrMtrrFix4kF0000;
pub const WHvX64RegisterMsrMtrrFix4kF8000 = WHV_REGISTER_NAME.X64RegisterMsrMtrrFix4kF8000;
pub const WHvX64RegisterTscAux = WHV_REGISTER_NAME.X64RegisterTscAux;
pub const WHvX64RegisterSpecCtrl = WHV_REGISTER_NAME.X64RegisterSpecCtrl;
pub const WHvX64RegisterPredCmd = WHV_REGISTER_NAME.X64RegisterPredCmd;
pub const WHvX64RegisterTscVirtualOffset = WHV_REGISTER_NAME.X64RegisterTscVirtualOffset;
pub const WHvX64RegisterApicId = WHV_REGISTER_NAME.X64RegisterApicId;
pub const WHvX64RegisterApicVersion = WHV_REGISTER_NAME.X64RegisterApicVersion;
pub const WHvRegisterPendingInterruption = WHV_REGISTER_NAME.RegisterPendingInterruption;
pub const WHvRegisterInterruptState = WHV_REGISTER_NAME.RegisterInterruptState;
pub const WHvRegisterPendingEvent = WHV_REGISTER_NAME.RegisterPendingEvent;
pub const WHvX64RegisterDeliverabilityNotifications = WHV_REGISTER_NAME.X64RegisterDeliverabilityNotifications;
pub const WHvRegisterInternalActivityState = WHV_REGISTER_NAME.RegisterInternalActivityState;
pub const WHvX64RegisterPendingDebugException = WHV_REGISTER_NAME.X64RegisterPendingDebugException;

pub const WHV_UINT128 = extern union {
    Anonymous: _Anonymous_e__Struct,
    Dword: [4]u32,
    const _Anonymous_e__Struct = u32; // TODO: generate this nested type!
};

pub const WHV_X64_FP_REGISTER = extern union {
    Anonymous: _Anonymous_e__Struct,
    AsUINT128: WHV_UINT128,
    const _Anonymous_e__Struct = u32; // TODO: generate this nested type!
};

pub const WHV_X64_FP_CONTROL_STATUS_REGISTER = extern union {
    Anonymous: _Anonymous_e__Struct,
    AsUINT128: WHV_UINT128,
    const _Anonymous_e__Struct = u32; // TODO: generate this nested type!
};

pub const WHV_X64_XMM_CONTROL_STATUS_REGISTER = extern union {
    Anonymous: _Anonymous_e__Struct,
    AsUINT128: WHV_UINT128,
    const _Anonymous_e__Struct = u32; // TODO: generate this nested type!
};

pub const WHV_X64_SEGMENT_REGISTER = extern struct {
    Base: u64,
    Limit: u32,
    Selector: u16,
    Anonymous: _Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const WHV_X64_TABLE_REGISTER = extern struct {
    Pad: [3]u16,
    Limit: u16,
    Base: u64,
};

pub const WHV_X64_INTERRUPT_STATE_REGISTER = extern union {
    Anonymous: _Anonymous_e__Struct,
    AsUINT64: u64,
    const _Anonymous_e__Struct = u32; // TODO: generate this nested type!
};

pub const WHV_X64_PENDING_INTERRUPTION_REGISTER = extern union {
    Anonymous: _Anonymous_e__Struct,
    AsUINT64: u64,
    const _Anonymous_e__Struct = u32; // TODO: generate this nested type!
};

pub const WHV_X64_DELIVERABILITY_NOTIFICATIONS_REGISTER = extern union {
    Anonymous: _Anonymous_e__Struct,
    AsUINT64: u64,
    const _Anonymous_e__Struct = u32; // TODO: generate this nested type!
};

pub const WHV_X64_PENDING_EVENT_TYPE = extern enum(i32) {
    ception = 0,
    tInt = 5,
};
pub const WHvX64PendingEventException = WHV_X64_PENDING_EVENT_TYPE.ception;
pub const WHvX64PendingEventExtInt = WHV_X64_PENDING_EVENT_TYPE.tInt;

pub const WHV_X64_PENDING_EXCEPTION_EVENT = extern union {
    Anonymous: _Anonymous_e__Struct,
    AsUINT128: WHV_UINT128,
    const _Anonymous_e__Struct = u32; // TODO: generate this nested type!
};

pub const WHV_X64_PENDING_EXT_INT_EVENT = extern union {
    Anonymous: _Anonymous_e__Struct,
    AsUINT128: WHV_UINT128,
    const _Anonymous_e__Struct = u32; // TODO: generate this nested type!
};

pub const WHV_INTERNAL_ACTIVITY_REGISTER = extern union {
    Anonymous: _Anonymous_e__Struct,
    AsUINT64: u64,
    const _Anonymous_e__Struct = u32; // TODO: generate this nested type!
};

pub const WHV_X64_PENDING_DEBUG_EXCEPTION = extern union {
    AsUINT64: u64,
    Anonymous: _Anonymous_e__Struct,
    const _Anonymous_e__Struct = u32; // TODO: generate this nested type!
};

pub const WHV_REGISTER_VALUE = extern union {
    Reg128: WHV_UINT128,
    Reg64: u64,
    Reg32: u32,
    Reg16: u16,
    Reg8: u8,
    Fp: WHV_X64_FP_REGISTER,
    FpControlStatus: WHV_X64_FP_CONTROL_STATUS_REGISTER,
    XmmControlStatus: WHV_X64_XMM_CONTROL_STATUS_REGISTER,
    Segment: WHV_X64_SEGMENT_REGISTER,
    Table: WHV_X64_TABLE_REGISTER,
    InterruptState: WHV_X64_INTERRUPT_STATE_REGISTER,
    PendingInterruption: WHV_X64_PENDING_INTERRUPTION_REGISTER,
    DeliverabilityNotifications: WHV_X64_DELIVERABILITY_NOTIFICATIONS_REGISTER,
    ExceptionEvent: WHV_X64_PENDING_EXCEPTION_EVENT,
    ExtIntEvent: WHV_X64_PENDING_EXT_INT_EVENT,
    InternalActivity: WHV_INTERNAL_ACTIVITY_REGISTER,
    PendingDebugException: WHV_X64_PENDING_DEBUG_EXCEPTION,
};

pub const WHV_RUN_VP_EXIT_REASON = extern enum(i32) {
    None = 0,
    MemoryAccess = 1,
    X64IoPortAccess = 2,
    UnrecoverableException = 4,
    InvalidVpRegisterValue = 5,
    UnsupportedFeature = 6,
    X64InterruptWindow = 7,
    X64Halt = 8,
    X64ApicEoi = 9,
    X64MsrAccess = 4096,
    X64Cpuid = 4097,
    Exception = 4098,
    X64Rdtsc = 4099,
    X64ApicSmiTrap = 4100,
    Hypercall = 4101,
    X64ApicInitSipiTrap = 4102,
    Canceled = 8193,
};
pub const WHvRunVpExitReasonNone = WHV_RUN_VP_EXIT_REASON.None;
pub const WHvRunVpExitReasonMemoryAccess = WHV_RUN_VP_EXIT_REASON.MemoryAccess;
pub const WHvRunVpExitReasonX64IoPortAccess = WHV_RUN_VP_EXIT_REASON.X64IoPortAccess;
pub const WHvRunVpExitReasonUnrecoverableException = WHV_RUN_VP_EXIT_REASON.UnrecoverableException;
pub const WHvRunVpExitReasonInvalidVpRegisterValue = WHV_RUN_VP_EXIT_REASON.InvalidVpRegisterValue;
pub const WHvRunVpExitReasonUnsupportedFeature = WHV_RUN_VP_EXIT_REASON.UnsupportedFeature;
pub const WHvRunVpExitReasonX64InterruptWindow = WHV_RUN_VP_EXIT_REASON.X64InterruptWindow;
pub const WHvRunVpExitReasonX64Halt = WHV_RUN_VP_EXIT_REASON.X64Halt;
pub const WHvRunVpExitReasonX64ApicEoi = WHV_RUN_VP_EXIT_REASON.X64ApicEoi;
pub const WHvRunVpExitReasonX64MsrAccess = WHV_RUN_VP_EXIT_REASON.X64MsrAccess;
pub const WHvRunVpExitReasonX64Cpuid = WHV_RUN_VP_EXIT_REASON.X64Cpuid;
pub const WHvRunVpExitReasonException = WHV_RUN_VP_EXIT_REASON.Exception;
pub const WHvRunVpExitReasonX64Rdtsc = WHV_RUN_VP_EXIT_REASON.X64Rdtsc;
pub const WHvRunVpExitReasonX64ApicSmiTrap = WHV_RUN_VP_EXIT_REASON.X64ApicSmiTrap;
pub const WHvRunVpExitReasonHypercall = WHV_RUN_VP_EXIT_REASON.Hypercall;
pub const WHvRunVpExitReasonX64ApicInitSipiTrap = WHV_RUN_VP_EXIT_REASON.X64ApicInitSipiTrap;
pub const WHvRunVpExitReasonCanceled = WHV_RUN_VP_EXIT_REASON.Canceled;

pub const WHV_X64_VP_EXECUTION_STATE = extern union {
    Anonymous: _Anonymous_e__Struct,
    AsUINT16: u16,
    const _Anonymous_e__Struct = u32; // TODO: generate this nested type!
};

pub const WHV_VP_EXIT_CONTEXT = extern struct {
    ExecutionState: WHV_X64_VP_EXECUTION_STATE,
    _bitfield: u8,
    Reserved: u8,
    Reserved2: u32,
    Cs: WHV_X64_SEGMENT_REGISTER,
    Rip: u64,
    Rflags: u64,
};

pub const WHV_MEMORY_ACCESS_TYPE = extern enum(i32) {
    Read = 0,
    Write = 1,
    Execute = 2,
};
pub const WHvMemoryAccessRead = WHV_MEMORY_ACCESS_TYPE.Read;
pub const WHvMemoryAccessWrite = WHV_MEMORY_ACCESS_TYPE.Write;
pub const WHvMemoryAccessExecute = WHV_MEMORY_ACCESS_TYPE.Execute;

pub const WHV_MEMORY_ACCESS_INFO = extern union {
    Anonymous: _Anonymous_e__Struct,
    AsUINT32: u32,
    const _Anonymous_e__Struct = u32; // TODO: generate this nested type!
};

pub const WHV_MEMORY_ACCESS_CONTEXT = extern struct {
    InstructionByteCount: u8,
    Reserved: [3]u8,
    InstructionBytes: [16]u8,
    AccessInfo: WHV_MEMORY_ACCESS_INFO,
    Gpa: u64,
    Gva: u64,
};

pub const WHV_X64_IO_PORT_ACCESS_INFO = extern union {
    Anonymous: _Anonymous_e__Struct,
    AsUINT32: u32,
    const _Anonymous_e__Struct = u32; // TODO: generate this nested type!
};

pub const WHV_X64_IO_PORT_ACCESS_CONTEXT = extern struct {
    InstructionByteCount: u8,
    Reserved: [3]u8,
    InstructionBytes: [16]u8,
    AccessInfo: WHV_X64_IO_PORT_ACCESS_INFO,
    PortNumber: u16,
    Reserved2: [3]u16,
    Rax: u64,
    Rcx: u64,
    Rsi: u64,
    Rdi: u64,
    Ds: WHV_X64_SEGMENT_REGISTER,
    Es: WHV_X64_SEGMENT_REGISTER,
};

pub const WHV_X64_MSR_ACCESS_INFO = extern union {
    Anonymous: _Anonymous_e__Struct,
    AsUINT32: u32,
    const _Anonymous_e__Struct = u32; // TODO: generate this nested type!
};

pub const WHV_X64_MSR_ACCESS_CONTEXT = extern struct {
    AccessInfo: WHV_X64_MSR_ACCESS_INFO,
    MsrNumber: u32,
    Rax: u64,
    Rdx: u64,
};

pub const WHV_X64_CPUID_ACCESS_CONTEXT = extern struct {
    Rax: u64,
    Rcx: u64,
    Rdx: u64,
    Rbx: u64,
    DefaultResultRax: u64,
    DefaultResultRcx: u64,
    DefaultResultRdx: u64,
    DefaultResultRbx: u64,
};

pub const WHV_VP_EXCEPTION_INFO = extern union {
    Anonymous: _Anonymous_e__Struct,
    AsUINT32: u32,
    const _Anonymous_e__Struct = u32; // TODO: generate this nested type!
};

pub const WHV_VP_EXCEPTION_CONTEXT = extern struct {
    InstructionByteCount: u8,
    Reserved: [3]u8,
    InstructionBytes: [16]u8,
    ExceptionInfo: WHV_VP_EXCEPTION_INFO,
    ExceptionType: u8,
    Reserved2: [3]u8,
    ErrorCode: u32,
    ExceptionParameter: u64,
};

pub const WHV_X64_UNSUPPORTED_FEATURE_CODE = extern enum(i32) {
    Intercept = 1,
    TaskSwitchTss = 2,
};
pub const WHvUnsupportedFeatureIntercept = WHV_X64_UNSUPPORTED_FEATURE_CODE.Intercept;
pub const WHvUnsupportedFeatureTaskSwitchTss = WHV_X64_UNSUPPORTED_FEATURE_CODE.TaskSwitchTss;

pub const WHV_X64_UNSUPPORTED_FEATURE_CONTEXT = extern struct {
    FeatureCode: WHV_X64_UNSUPPORTED_FEATURE_CODE,
    Reserved: u32,
    FeatureParameter: u64,
};

pub const WHV_RUN_VP_CANCEL_REASON = extern enum(i32) {
    r = 0,
};
pub const WHvRunVpCancelReasonUser = WHV_RUN_VP_CANCEL_REASON.r;

pub const WHV_RUN_VP_CANCELED_CONTEXT = extern struct {
    CancelReason: WHV_RUN_VP_CANCEL_REASON,
};

pub const WHV_X64_PENDING_INTERRUPTION_TYPE = extern enum(i32) {
    Interrupt = 0,
    Nmi = 2,
    Exception = 3,
};
pub const WHvX64PendingInterrupt = WHV_X64_PENDING_INTERRUPTION_TYPE.Interrupt;
pub const WHvX64PendingNmi = WHV_X64_PENDING_INTERRUPTION_TYPE.Nmi;
pub const WHvX64PendingException = WHV_X64_PENDING_INTERRUPTION_TYPE.Exception;

pub const WHV_X64_INTERRUPTION_DELIVERABLE_CONTEXT = extern struct {
    DeliverableType: WHV_X64_PENDING_INTERRUPTION_TYPE,
};

pub const WHV_X64_APIC_EOI_CONTEXT = extern struct {
    InterruptVector: u32,
};

pub const WHV_X64_RDTSC_INFO = extern union {
    Anonymous: _Anonymous_e__Struct,
    AsUINT64: u64,
    const _Anonymous_e__Struct = u32; // TODO: generate this nested type!
};

pub const WHV_X64_RDTSC_CONTEXT = extern struct {
    TscAux: u64,
    VirtualOffset: u64,
    Tsc: u64,
    ReferenceTime: u64,
    RdtscInfo: WHV_X64_RDTSC_INFO,
};

pub const WHV_X64_APIC_SMI_CONTEXT = extern struct {
    ApicIcr: u64,
};

pub const WHV_HYPERCALL_CONTEXT = extern struct {
    Rax: u64,
    Rbx: u64,
    Rcx: u64,
    Rdx: u64,
    R8: u64,
    Rsi: u64,
    Rdi: u64,
    Reserved0: u64,
    XmmRegisters: [6]WHV_UINT128,
    Reserved1: [2]u64,
};

pub const WHV_X64_APIC_INIT_SIPI_CONTEXT = extern struct {
    ApicIcr: u64,
};

pub const WHV_RUN_VP_EXIT_CONTEXT = extern struct {
    ExitReason: WHV_RUN_VP_EXIT_REASON,
    Reserved: u32,
    VpContext: WHV_VP_EXIT_CONTEXT,
    Anonymous: _Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const WHV_INTERRUPT_TYPE = extern enum(i32) {
    Fixed = 0,
    LowestPriority = 1,
    Nmi = 4,
    Init = 5,
    Sipi = 6,
    LocalInt1 = 9,
};
pub const WHvX64InterruptTypeFixed = WHV_INTERRUPT_TYPE.Fixed;
pub const WHvX64InterruptTypeLowestPriority = WHV_INTERRUPT_TYPE.LowestPriority;
pub const WHvX64InterruptTypeNmi = WHV_INTERRUPT_TYPE.Nmi;
pub const WHvX64InterruptTypeInit = WHV_INTERRUPT_TYPE.Init;
pub const WHvX64InterruptTypeSipi = WHV_INTERRUPT_TYPE.Sipi;
pub const WHvX64InterruptTypeLocalInt1 = WHV_INTERRUPT_TYPE.LocalInt1;

pub const WHV_INTERRUPT_DESTINATION_MODE = extern enum(i32) {
    Physical = 0,
    Logical = 1,
};
pub const WHvX64InterruptDestinationModePhysical = WHV_INTERRUPT_DESTINATION_MODE.Physical;
pub const WHvX64InterruptDestinationModeLogical = WHV_INTERRUPT_DESTINATION_MODE.Logical;

pub const WHV_INTERRUPT_TRIGGER_MODE = extern enum(i32) {
    Edge = 0,
    Level = 1,
};
pub const WHvX64InterruptTriggerModeEdge = WHV_INTERRUPT_TRIGGER_MODE.Edge;
pub const WHvX64InterruptTriggerModeLevel = WHV_INTERRUPT_TRIGGER_MODE.Level;

pub const WHV_INTERRUPT_CONTROL = extern struct {
    _bitfield: u64,
    Destination: u32,
    Vector: u32,
};

pub const WHV_DOORBELL_MATCH_DATA = extern struct {
    GuestAddress: u64,
    Value: u64,
    Length: u32,
    _bitfield: u32,
};

pub const WHV_PARTITION_COUNTER_SET = extern enum(i32) {
    y = 0,
};
pub const WHvPartitionCounterSetMemory = WHV_PARTITION_COUNTER_SET.y;

pub const WHV_PARTITION_MEMORY_COUNTERS = extern struct {
    Mapped4KPageCount: u64,
    Mapped2MPageCount: u64,
    Mapped1GPageCount: u64,
};

pub const WHV_PROCESSOR_COUNTER_SET = extern enum(i32) {
    Runtime = 0,
    Intercepts = 1,
    Events = 2,
    Apic = 3,
};
pub const WHvProcessorCounterSetRuntime = WHV_PROCESSOR_COUNTER_SET.Runtime;
pub const WHvProcessorCounterSetIntercepts = WHV_PROCESSOR_COUNTER_SET.Intercepts;
pub const WHvProcessorCounterSetEvents = WHV_PROCESSOR_COUNTER_SET.Events;
pub const WHvProcessorCounterSetApic = WHV_PROCESSOR_COUNTER_SET.Apic;

pub const WHV_PROCESSOR_RUNTIME_COUNTERS = extern struct {
    TotalRuntime100ns: u64,
    HypervisorRuntime100ns: u64,
};

pub const WHV_PROCESSOR_INTERCEPT_COUNTER = extern struct {
    Count: u64,
    Time100ns: u64,
};

pub const WHV_PROCESSOR_INTERCEPT_COUNTERS = extern struct {
    PageInvalidations: WHV_PROCESSOR_INTERCEPT_COUNTER,
    ControlRegisterAccesses: WHV_PROCESSOR_INTERCEPT_COUNTER,
    IoInstructions: WHV_PROCESSOR_INTERCEPT_COUNTER,
    HaltInstructions: WHV_PROCESSOR_INTERCEPT_COUNTER,
    CpuidInstructions: WHV_PROCESSOR_INTERCEPT_COUNTER,
    MsrAccesses: WHV_PROCESSOR_INTERCEPT_COUNTER,
    OtherIntercepts: WHV_PROCESSOR_INTERCEPT_COUNTER,
    PendingInterrupts: WHV_PROCESSOR_INTERCEPT_COUNTER,
    EmulatedInstructions: WHV_PROCESSOR_INTERCEPT_COUNTER,
    DebugRegisterAccesses: WHV_PROCESSOR_INTERCEPT_COUNTER,
    PageFaultIntercepts: WHV_PROCESSOR_INTERCEPT_COUNTER,
};

pub const WHV_PROCESSOR_EVENT_COUNTERS = extern struct {
    PageFaultCount: u64,
    ExceptionCount: u64,
    InterruptCount: u64,
};

pub const WHV_PROCESSOR_APIC_COUNTERS = extern struct {
    MmioAccessCount: u64,
    EoiAccessCount: u64,
    TprAccessCount: u64,
    SentIpiCount: u64,
    SelfIpiCount: u64,
};

pub const WHV_EMULATOR_STATUS = extern union {
    Anonymous: _Anonymous_e__Struct,
    AsUINT32: u32,
    const _Anonymous_e__Struct = u32; // TODO: generate this nested type!
};

pub const WHV_EMULATOR_MEMORY_ACCESS_INFO = extern struct {
    GpaAddress: u64,
    Direction: u8,
    AccessSize: u8,
    Data: [8]u8,
};

pub const WHV_EMULATOR_IO_ACCESS_INFO = extern struct {
    Direction: u8,
    Port: u16,
    AccessSize: u16,
    Data: u32,
};

pub const WHV_EMULATOR_IO_PORT_CALLBACK = fn(
    Context: *c_void,
    IoAccess: *WHV_EMULATOR_IO_ACCESS_INFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const WHV_EMULATOR_MEMORY_CALLBACK = fn(
    Context: *c_void,
    MemoryAccess: *WHV_EMULATOR_MEMORY_ACCESS_INFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const WHV_EMULATOR_GET_VIRTUAL_PROCESSOR_REGISTERS_CALLBACK = fn(
    Context: *c_void,
    RegisterNames: [*]const WHV_REGISTER_NAME,
    RegisterCount: u32,
    RegisterValues: [*]WHV_REGISTER_VALUE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const WHV_EMULATOR_SET_VIRTUAL_PROCESSOR_REGISTERS_CALLBACK = fn(
    Context: *c_void,
    RegisterNames: [*]const WHV_REGISTER_NAME,
    RegisterCount: u32,
    RegisterValues: [*]const WHV_REGISTER_VALUE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const WHV_EMULATOR_TRANSLATE_GVA_PAGE_CALLBACK = fn(
    Context: *c_void,
    Gva: u64,
    TranslateFlags: WHV_TRANSLATE_GVA_FLAGS,
    TranslationResult: *WHV_TRANSLATE_GVA_RESULT_CODE,
    Gpa: *u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const WHV_EMULATOR_CALLBACKS = extern struct {
    Size: u32,
    Reserved: u32,
    WHvEmulatorIoPortCallback: WHV_EMULATOR_IO_PORT_CALLBACK,
    WHvEmulatorMemoryCallback: WHV_EMULATOR_MEMORY_CALLBACK,
    WHvEmulatorGetVirtualProcessorRegisters: WHV_EMULATOR_GET_VIRTUAL_PROCESSOR_REGISTERS_CALLBACK,
    WHvEmulatorSetVirtualProcessorRegisters: WHV_EMULATOR_SET_VIRTUAL_PROCESSOR_REGISTERS_CALLBACK,
    WHvEmulatorTranslateGvaPage: WHV_EMULATOR_TRANSLATE_GVA_PAGE_CALLBACK,
};


//--------------------------------------------------------------------------------
// Section: Functions (33)
//--------------------------------------------------------------------------------
pub extern "WinHvPlatform" fn WHvGetCapability(
    CapabilityCode: WHV_CAPABILITY_CODE,
    // TODO: what to do with BytesParamIndex 2?
    CapabilityBuffer: *c_void,
    CapabilityBufferSizeInBytes: u32,
    WrittenSizeInBytes: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "WinHvPlatform" fn WHvCreatePartition(
    Partition: *WHV_PARTITION_HANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "WinHvPlatform" fn WHvSetupPartition(
    Partition: WHV_PARTITION_HANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "WinHvPlatform" fn WHvDeletePartition(
    Partition: WHV_PARTITION_HANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "WinHvPlatform" fn WHvGetPartitionProperty(
    Partition: WHV_PARTITION_HANDLE,
    PropertyCode: WHV_PARTITION_PROPERTY_CODE,
    // TODO: what to do with BytesParamIndex 3?
    PropertyBuffer: *c_void,
    PropertyBufferSizeInBytes: u32,
    WrittenSizeInBytes: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "WinHvPlatform" fn WHvSetPartitionProperty(
    Partition: WHV_PARTITION_HANDLE,
    PropertyCode: WHV_PARTITION_PROPERTY_CODE,
    // TODO: what to do with BytesParamIndex 3?
    PropertyBuffer: *const c_void,
    PropertyBufferSizeInBytes: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "WinHvPlatform" fn WHvSuspendPartitionTime(
    Partition: WHV_PARTITION_HANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "WinHvPlatform" fn WHvResumePartitionTime(
    Partition: WHV_PARTITION_HANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "WinHvPlatform" fn WHvMapGpaRange(
    Partition: WHV_PARTITION_HANDLE,
    SourceAddress: *c_void,
    GuestAddress: u64,
    SizeInBytes: u64,
    Flags: WHV_MAP_GPA_RANGE_FLAGS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "WinHvPlatform" fn WHvUnmapGpaRange(
    Partition: WHV_PARTITION_HANDLE,
    GuestAddress: u64,
    SizeInBytes: u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "WinHvPlatform" fn WHvTranslateGva(
    Partition: WHV_PARTITION_HANDLE,
    VpIndex: u32,
    Gva: u64,
    TranslateFlags: WHV_TRANSLATE_GVA_FLAGS,
    TranslationResult: *WHV_TRANSLATE_GVA_RESULT,
    Gpa: *u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "WinHvPlatform" fn WHvCreateVirtualProcessor(
    Partition: WHV_PARTITION_HANDLE,
    VpIndex: u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "WinHvPlatform" fn WHvDeleteVirtualProcessor(
    Partition: WHV_PARTITION_HANDLE,
    VpIndex: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "WinHvPlatform" fn WHvRunVirtualProcessor(
    Partition: WHV_PARTITION_HANDLE,
    VpIndex: u32,
    // TODO: what to do with BytesParamIndex 3?
    ExitContext: *c_void,
    ExitContextSizeInBytes: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "WinHvPlatform" fn WHvCancelRunVirtualProcessor(
    Partition: WHV_PARTITION_HANDLE,
    VpIndex: u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "WinHvPlatform" fn WHvGetVirtualProcessorRegisters(
    Partition: WHV_PARTITION_HANDLE,
    VpIndex: u32,
    RegisterNames: [*]const WHV_REGISTER_NAME,
    RegisterCount: u32,
    RegisterValues: [*]WHV_REGISTER_VALUE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "WinHvPlatform" fn WHvSetVirtualProcessorRegisters(
    Partition: WHV_PARTITION_HANDLE,
    VpIndex: u32,
    RegisterNames: [*]const WHV_REGISTER_NAME,
    RegisterCount: u32,
    RegisterValues: [*]const WHV_REGISTER_VALUE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "WinHvPlatform" fn WHvGetVirtualProcessorInterruptControllerState(
    Partition: WHV_PARTITION_HANDLE,
    VpIndex: u32,
    // TODO: what to do with BytesParamIndex 3?
    State: *c_void,
    StateSize: u32,
    WrittenSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "WinHvPlatform" fn WHvSetVirtualProcessorInterruptControllerState(
    Partition: WHV_PARTITION_HANDLE,
    VpIndex: u32,
    // TODO: what to do with BytesParamIndex 3?
    State: *const c_void,
    StateSize: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "WinHvPlatform" fn WHvRequestInterrupt(
    Partition: WHV_PARTITION_HANDLE,
    Interrupt: *const WHV_INTERRUPT_CONTROL,
    InterruptControlSize: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "WinHvPlatform" fn WHvGetVirtualProcessorXsaveState(
    Partition: WHV_PARTITION_HANDLE,
    VpIndex: u32,
    // TODO: what to do with BytesParamIndex 3?
    Buffer: *c_void,
    BufferSizeInBytes: u32,
    BytesWritten: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "WinHvPlatform" fn WHvSetVirtualProcessorXsaveState(
    Partition: WHV_PARTITION_HANDLE,
    VpIndex: u32,
    // TODO: what to do with BytesParamIndex 3?
    Buffer: *const c_void,
    BufferSizeInBytes: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "WinHvPlatform" fn WHvQueryGpaRangeDirtyBitmap(
    Partition: WHV_PARTITION_HANDLE,
    GuestAddress: u64,
    RangeSizeInBytes: u64,
    // TODO: what to do with BytesParamIndex 4?
    Bitmap: ?*u64,
    BitmapSizeInBytes: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "WinHvPlatform" fn WHvGetPartitionCounters(
    Partition: WHV_PARTITION_HANDLE,
    CounterSet: WHV_PARTITION_COUNTER_SET,
    // TODO: what to do with BytesParamIndex 3?
    Buffer: *c_void,
    BufferSizeInBytes: u32,
    BytesWritten: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "WinHvPlatform" fn WHvGetVirtualProcessorCounters(
    Partition: WHV_PARTITION_HANDLE,
    VpIndex: u32,
    CounterSet: WHV_PROCESSOR_COUNTER_SET,
    // TODO: what to do with BytesParamIndex 4?
    Buffer: *c_void,
    BufferSizeInBytes: u32,
    BytesWritten: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "WinHvPlatform" fn WHvGetVirtualProcessorInterruptControllerState2(
    Partition: WHV_PARTITION_HANDLE,
    VpIndex: u32,
    // TODO: what to do with BytesParamIndex 3?
    State: *c_void,
    StateSize: u32,
    WrittenSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "WinHvPlatform" fn WHvSetVirtualProcessorInterruptControllerState2(
    Partition: WHV_PARTITION_HANDLE,
    VpIndex: u32,
    // TODO: what to do with BytesParamIndex 3?
    State: *const c_void,
    StateSize: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "WinHvPlatform" fn WHvRegisterPartitionDoorbellEvent(
    Partition: WHV_PARTITION_HANDLE,
    MatchData: *const WHV_DOORBELL_MATCH_DATA,
    EventHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "WinHvPlatform" fn WHvUnregisterPartitionDoorbellEvent(
    Partition: WHV_PARTITION_HANDLE,
    MatchData: *const WHV_DOORBELL_MATCH_DATA,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "WinHvEmulation" fn WHvEmulatorCreateEmulator(
    Callbacks: *const WHV_EMULATOR_CALLBACKS,
    Emulator: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "WinHvEmulation" fn WHvEmulatorDestroyEmulator(
    Emulator: *c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "WinHvEmulation" fn WHvEmulatorTryIoEmulation(
    Emulator: *c_void,
    Context: *c_void,
    VpContext: *const WHV_VP_EXIT_CONTEXT,
    IoInstructionContext: *const WHV_X64_IO_PORT_ACCESS_CONTEXT,
    EmulatorReturnStatus: *WHV_EMULATOR_STATUS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "WinHvEmulation" fn WHvEmulatorTryMmioEmulation(
    Emulator: *c_void,
    Context: *c_void,
    VpContext: *const WHV_VP_EXIT_CONTEXT,
    MmioInstructionContext: *const WHV_MEMORY_ACCESS_CONTEXT,
    EmulatorReturnStatus: *WHV_EMULATOR_STATUS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (3)
//--------------------------------------------------------------------------------
const HANDLE = @import("system_services.zig").HANDLE;
const BOOL = @import("system_services.zig").BOOL;
const HRESULT = @import("com.zig").HRESULT;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "WHV_EMULATOR_IO_PORT_CALLBACK")) { _ = WHV_EMULATOR_IO_PORT_CALLBACK; }
    if (@hasDecl(@This(), "WHV_EMULATOR_MEMORY_CALLBACK")) { _ = WHV_EMULATOR_MEMORY_CALLBACK; }
    if (@hasDecl(@This(), "WHV_EMULATOR_GET_VIRTUAL_PROCESSOR_REGISTERS_CALLBACK")) { _ = WHV_EMULATOR_GET_VIRTUAL_PROCESSOR_REGISTERS_CALLBACK; }
    if (@hasDecl(@This(), "WHV_EMULATOR_SET_VIRTUAL_PROCESSOR_REGISTERS_CALLBACK")) { _ = WHV_EMULATOR_SET_VIRTUAL_PROCESSOR_REGISTERS_CALLBACK; }
    if (@hasDecl(@This(), "WHV_EMULATOR_TRANSLATE_GVA_PAGE_CALLBACK")) { _ = WHV_EMULATOR_TRANSLATE_GVA_PAGE_CALLBACK; }

    @setEvalBranchQuota(
        @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("std").builtin.is_test) return;
    inline for (@import("std").meta.declarations(@This())) |decl| {
        if (decl.is_pub) {
            _ = decl;
        }
    }
}
