//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (500)
//--------------------------------------------------------------------------------
pub const HTTP_DEMAND_CBT = @as(u32, 4);
pub const HTTP_MAX_SERVER_QUEUE_LENGTH = @as(u32, 2147483647);
pub const HTTP_MIN_SERVER_QUEUE_LENGTH = @as(u32, 1);
pub const HTTP_AUTH_ENABLE_BASIC = @as(u32, 1);
pub const HTTP_AUTH_ENABLE_DIGEST = @as(u32, 2);
pub const HTTP_AUTH_ENABLE_NTLM = @as(u32, 4);
pub const HTTP_AUTH_ENABLE_NEGOTIATE = @as(u32, 8);
pub const HTTP_AUTH_ENABLE_KERBEROS = @as(u32, 16);
pub const HTTP_AUTH_EX_FLAG_ENABLE_KERBEROS_CREDENTIAL_CACHING = @as(u32, 1);
pub const HTTP_AUTH_EX_FLAG_CAPTURE_CREDENTIAL = @as(u32, 2);
pub const HTTP_CHANNEL_BIND_PROXY = @as(u32, 1);
pub const HTTP_CHANNEL_BIND_PROXY_COHOSTING = @as(u32, 32);
pub const HTTP_CHANNEL_BIND_NO_SERVICE_NAME_CHECK = @as(u32, 2);
pub const HTTP_CHANNEL_BIND_DOTLESS_SERVICE = @as(u32, 4);
pub const HTTP_CHANNEL_BIND_SECURE_CHANNEL_TOKEN = @as(u32, 8);
pub const HTTP_CHANNEL_BIND_CLIENT_SERVICE = @as(u32, 16);
pub const HTTP_LOG_FIELD_DATE = @as(u32, 1);
pub const HTTP_LOG_FIELD_TIME = @as(u32, 2);
pub const HTTP_LOG_FIELD_CLIENT_IP = @as(u32, 4);
pub const HTTP_LOG_FIELD_USER_NAME = @as(u32, 8);
pub const HTTP_LOG_FIELD_SITE_NAME = @as(u32, 16);
pub const HTTP_LOG_FIELD_COMPUTER_NAME = @as(u32, 32);
pub const HTTP_LOG_FIELD_SERVER_IP = @as(u32, 64);
pub const HTTP_LOG_FIELD_METHOD = @as(u32, 128);
pub const HTTP_LOG_FIELD_URI_STEM = @as(u32, 256);
pub const HTTP_LOG_FIELD_URI_QUERY = @as(u32, 512);
pub const HTTP_LOG_FIELD_STATUS = @as(u32, 1024);
pub const HTTP_LOG_FIELD_WIN32_STATUS = @as(u32, 2048);
pub const HTTP_LOG_FIELD_BYTES_SENT = @as(u32, 4096);
pub const HTTP_LOG_FIELD_BYTES_RECV = @as(u32, 8192);
pub const HTTP_LOG_FIELD_TIME_TAKEN = @as(u32, 16384);
pub const HTTP_LOG_FIELD_SERVER_PORT = @as(u32, 32768);
pub const HTTP_LOG_FIELD_USER_AGENT = @as(u32, 65536);
pub const HTTP_LOG_FIELD_COOKIE = @as(u32, 131072);
pub const HTTP_LOG_FIELD_REFERER = @as(u32, 262144);
pub const HTTP_LOG_FIELD_VERSION = @as(u32, 524288);
pub const HTTP_LOG_FIELD_HOST = @as(u32, 1048576);
pub const HTTP_LOG_FIELD_SUB_STATUS = @as(u32, 2097152);
pub const HTTP_LOG_FIELD_STREAM_ID = @as(u32, 134217728);
pub const HTTP_LOG_FIELD_STREAM_ID_EX = @as(u32, 268435456);
pub const HTTP_LOG_FIELD_TRANSPORT_TYPE = @as(u32, 536870912);
pub const HTTP_LOG_FIELD_CLIENT_PORT = @as(u32, 4194304);
pub const HTTP_LOG_FIELD_URI = @as(u32, 8388608);
pub const HTTP_LOG_FIELD_SITE_ID = @as(u32, 16777216);
pub const HTTP_LOG_FIELD_REASON = @as(u32, 33554432);
pub const HTTP_LOG_FIELD_QUEUE_NAME = @as(u32, 67108864);
pub const HTTP_LOGGING_FLAG_LOCAL_TIME_ROLLOVER = @as(u32, 1);
pub const HTTP_LOGGING_FLAG_USE_UTF8_CONVERSION = @as(u32, 2);
pub const HTTP_LOGGING_FLAG_LOG_ERRORS_ONLY = @as(u32, 4);
pub const HTTP_LOGGING_FLAG_LOG_SUCCESS_ONLY = @as(u32, 8);
pub const HTTP_CREATE_REQUEST_QUEUE_FLAG_OPEN_EXISTING = @as(u32, 1);
pub const HTTP_CREATE_REQUEST_QUEUE_FLAG_CONTROLLER = @as(u32, 2);
pub const HTTP_RECEIVE_REQUEST_ENTITY_BODY_FLAG_FILL_BUFFER = @as(u32, 1);
pub const HTTP_SEND_RESPONSE_FLAG_DISCONNECT = @as(u32, 1);
pub const HTTP_SEND_RESPONSE_FLAG_MORE_DATA = @as(u32, 2);
pub const HTTP_SEND_RESPONSE_FLAG_BUFFER_DATA = @as(u32, 4);
pub const HTTP_SEND_RESPONSE_FLAG_ENABLE_NAGLING = @as(u32, 8);
pub const HTTP_SEND_RESPONSE_FLAG_PROCESS_RANGES = @as(u32, 32);
pub const HTTP_SEND_RESPONSE_FLAG_OPAQUE = @as(u32, 64);
pub const HTTP_SEND_RESPONSE_FLAG_GOAWAY = @as(u32, 256);
pub const HTTP_FLUSH_RESPONSE_FLAG_RECURSIVE = @as(u32, 1);
pub const HTTP_URL_FLAG_REMOVE_ALL = @as(u32, 1);
pub const HTTP_RECEIVE_SECURE_CHANNEL_TOKEN = @as(u32, 1);
pub const HTTP_REQUEST_SIZING_INFO_FLAG_TCP_FAST_OPEN = @as(u32, 1);
pub const HTTP_REQUEST_SIZING_INFO_FLAG_TLS_SESSION_RESUMPTION = @as(u32, 2);
pub const HTTP_REQUEST_SIZING_INFO_FLAG_TLS_FALSE_START = @as(u32, 4);
pub const HTTP_REQUEST_SIZING_INFO_FLAG_FIRST_REQUEST = @as(u32, 8);
pub const HTTP_REQUEST_AUTH_FLAG_TOKEN_FOR_CACHED_CRED = @as(u32, 1);
pub const HTTP_REQUEST_FLAG_MORE_ENTITY_BODY_EXISTS = @as(u32, 1);
pub const HTTP_REQUEST_FLAG_IP_ROUTED = @as(u32, 2);
pub const HTTP_REQUEST_FLAG_HTTP2 = @as(u32, 4);
pub const HTTP_RESPONSE_FLAG_MULTIPLE_ENCODINGS_AVAILABLE = @as(u32, 1);
pub const HTTP_RESPONSE_FLAG_MORE_ENTITY_BODY_EXISTS = @as(u32, 2);
pub const HTTP_RESPONSE_INFO_FLAGS_PRESERVE_ORDER = @as(u32, 1);
pub const HTTP_SERVICE_CONFIG_SSL_FLAG_USE_DS_MAPPER = @as(u32, 1);
pub const HTTP_SERVICE_CONFIG_SSL_FLAG_NEGOTIATE_CLIENT_CERT = @as(u32, 2);
pub const HTTP_SERVICE_CONFIG_SSL_FLAG_NO_RAW_FILTER = @as(u32, 4);
pub const HTTP_SERVICE_CONFIG_SSL_FLAG_REJECT = @as(u32, 8);
pub const HTTP_SERVICE_CONFIG_SSL_FLAG_DISABLE_HTTP2 = @as(u32, 16);
pub const HTTP_SERVICE_CONFIG_SSL_FLAG_DISABLE_QUIC = @as(u32, 32);
pub const HTTP_SERVICE_CONFIG_SSL_FLAG_DISABLE_TLS13 = @as(u32, 64);
pub const HTTP_SERVICE_CONFIG_SSL_FLAG_DISABLE_OCSP_STAPLING = @as(u32, 128);
pub const HTTP_SERVICE_CONFIG_SSL_FLAG_ENABLE_TOKEN_BINDING = @as(u32, 256);
pub const HTTP_SERVICE_CONFIG_SSL_FLAG_LOG_EXTENDED_EVENTS = @as(u32, 512);
pub const HTTP_SERVICE_CONFIG_SSL_FLAG_DISABLE_LEGACY_TLS = @as(u32, 1024);
pub const HTTP_SERVICE_CONFIG_SSL_FLAG_ENABLE_SESSION_TICKET = @as(u32, 2048);
pub const HTTP_SERVICE_CONFIG_SSL_FLAG_DISABLE_TLS12 = @as(u32, 4096);
pub const HTTP_REQUEST_PROPERTY_SNI_HOST_MAX_LENGTH = @as(u32, 255);
pub const HTTP_REQUEST_PROPERTY_SNI_FLAG_SNI_USED = @as(u32, 1);
pub const HTTP_REQUEST_PROPERTY_SNI_FLAG_NO_SNI = @as(u32, 2);
pub const WINHTTP_FLAG_ASYNC = @as(u32, 268435456);
pub const WINHTTP_FLAG_SECURE_DEFAULTS = @as(u32, 805306368);
pub const SECURITY_FLAG_IGNORE_UNKNOWN_CA = @as(u32, 256);
pub const SECURITY_FLAG_IGNORE_CERT_DATE_INVALID = @as(u32, 8192);
pub const SECURITY_FLAG_IGNORE_CERT_CN_INVALID = @as(u32, 4096);
pub const SECURITY_FLAG_IGNORE_CERT_WRONG_USAGE = @as(u32, 512);
pub const INTERNET_SCHEME_HTTP = @as(u32, 1);
pub const INTERNET_SCHEME_HTTPS = @as(u32, 2);
pub const INTERNET_SCHEME_FTP = @as(u32, 3);
pub const INTERNET_SCHEME_SOCKS = @as(u32, 4);
pub const WINHTTP_AUTOPROXY_AUTO_DETECT = @as(u32, 1);
pub const WINHTTP_AUTOPROXY_CONFIG_URL = @as(u32, 2);
pub const WINHTTP_AUTOPROXY_HOST_KEEPCASE = @as(u32, 4);
pub const WINHTTP_AUTOPROXY_HOST_LOWERCASE = @as(u32, 8);
pub const WINHTTP_AUTOPROXY_ALLOW_AUTOCONFIG = @as(u32, 256);
pub const WINHTTP_AUTOPROXY_ALLOW_STATIC = @as(u32, 512);
pub const WINHTTP_AUTOPROXY_ALLOW_CM = @as(u32, 1024);
pub const WINHTTP_AUTOPROXY_RUN_INPROCESS = @as(u32, 65536);
pub const WINHTTP_AUTOPROXY_RUN_OUTPROCESS_ONLY = @as(u32, 131072);
pub const WINHTTP_AUTOPROXY_NO_DIRECTACCESS = @as(u32, 262144);
pub const WINHTTP_AUTOPROXY_NO_CACHE_CLIENT = @as(u32, 524288);
pub const WINHTTP_AUTOPROXY_NO_CACHE_SVC = @as(u32, 1048576);
pub const WINHTTP_AUTOPROXY_SORT_RESULTS = @as(u32, 4194304);
pub const WINHTTP_AUTO_DETECT_TYPE_DHCP = @as(u32, 1);
pub const WINHTTP_AUTO_DETECT_TYPE_DNS_A = @as(u32, 2);
pub const NETWORKING_KEY_BUFSIZE = @as(u32, 128);
pub const WINHTTP_PROXY_TYPE_DIRECT = @as(u32, 1);
pub const WINHTTP_PROXY_TYPE_PROXY = @as(u32, 2);
pub const WINHTTP_PROXY_TYPE_AUTO_PROXY_URL = @as(u32, 4);
pub const WINHTTP_PROXY_TYPE_AUTO_DETECT = @as(u32, 8);
pub const WINHTTP_REQUEST_STAT_FLAG_TCP_FAST_OPEN = @as(u32, 1);
pub const WINHTTP_REQUEST_STAT_FLAG_TLS_SESSION_RESUMPTION = @as(u32, 2);
pub const WINHTTP_REQUEST_STAT_FLAG_TLS_FALSE_START = @as(u32, 4);
pub const WINHTTP_REQUEST_STAT_FLAG_PROXY_TLS_SESSION_RESUMPTION = @as(u32, 8);
pub const WINHTTP_REQUEST_STAT_FLAG_PROXY_TLS_FALSE_START = @as(u32, 16);
pub const WINHTTP_REQUEST_STAT_FLAG_FIRST_REQUEST = @as(u32, 32);
pub const WINHTTP_TIME_FORMAT_BUFSIZE = @as(u32, 62);
pub const WINHTTP_OPTION_CALLBACK = @as(u32, 1);
pub const WINHTTP_OPTION_RESOLVE_TIMEOUT = @as(u32, 2);
pub const WINHTTP_OPTION_CONNECT_TIMEOUT = @as(u32, 3);
pub const WINHTTP_OPTION_CONNECT_RETRIES = @as(u32, 4);
pub const WINHTTP_OPTION_SEND_TIMEOUT = @as(u32, 5);
pub const WINHTTP_OPTION_RECEIVE_TIMEOUT = @as(u32, 6);
pub const WINHTTP_OPTION_RECEIVE_RESPONSE_TIMEOUT = @as(u32, 7);
pub const WINHTTP_OPTION_HANDLE_TYPE = @as(u32, 9);
pub const WINHTTP_OPTION_READ_BUFFER_SIZE = @as(u32, 12);
pub const WINHTTP_OPTION_WRITE_BUFFER_SIZE = @as(u32, 13);
pub const WINHTTP_OPTION_PARENT_HANDLE = @as(u32, 21);
pub const WINHTTP_OPTION_EXTENDED_ERROR = @as(u32, 24);
pub const WINHTTP_OPTION_SECURITY_FLAGS = @as(u32, 31);
pub const WINHTTP_OPTION_SECURITY_CERTIFICATE_STRUCT = @as(u32, 32);
pub const WINHTTP_OPTION_URL = @as(u32, 34);
pub const WINHTTP_OPTION_SECURITY_KEY_BITNESS = @as(u32, 36);
pub const WINHTTP_OPTION_PROXY = @as(u32, 38);
pub const WINHTTP_OPTION_PROXY_RESULT_ENTRY = @as(u32, 39);
pub const WINHTTP_OPTION_USER_AGENT = @as(u32, 41);
pub const WINHTTP_OPTION_CONTEXT_VALUE = @as(u32, 45);
pub const WINHTTP_OPTION_CLIENT_CERT_CONTEXT = @as(u32, 47);
pub const WINHTTP_OPTION_REQUEST_PRIORITY = @as(u32, 58);
pub const WINHTTP_OPTION_HTTP_VERSION = @as(u32, 59);
pub const WINHTTP_OPTION_DISABLE_FEATURE = @as(u32, 63);
pub const WINHTTP_OPTION_CODEPAGE = @as(u32, 68);
pub const WINHTTP_OPTION_MAX_CONNS_PER_SERVER = @as(u32, 73);
pub const WINHTTP_OPTION_MAX_CONNS_PER_1_0_SERVER = @as(u32, 74);
pub const WINHTTP_OPTION_AUTOLOGON_POLICY = @as(u32, 77);
pub const WINHTTP_OPTION_SERVER_CERT_CONTEXT = @as(u32, 78);
pub const WINHTTP_OPTION_ENABLE_FEATURE = @as(u32, 79);
pub const WINHTTP_OPTION_WORKER_THREAD_COUNT = @as(u32, 80);
pub const WINHTTP_OPTION_PASSPORT_COBRANDING_TEXT = @as(u32, 81);
pub const WINHTTP_OPTION_PASSPORT_COBRANDING_URL = @as(u32, 82);
pub const WINHTTP_OPTION_CONFIGURE_PASSPORT_AUTH = @as(u32, 83);
pub const WINHTTP_OPTION_SECURE_PROTOCOLS = @as(u32, 84);
pub const WINHTTP_OPTION_ENABLETRACING = @as(u32, 85);
pub const WINHTTP_OPTION_PASSPORT_SIGN_OUT = @as(u32, 86);
pub const WINHTTP_OPTION_PASSPORT_RETURN_URL = @as(u32, 87);
pub const WINHTTP_OPTION_REDIRECT_POLICY = @as(u32, 88);
pub const WINHTTP_OPTION_MAX_HTTP_AUTOMATIC_REDIRECTS = @as(u32, 89);
pub const WINHTTP_OPTION_MAX_HTTP_STATUS_CONTINUE = @as(u32, 90);
pub const WINHTTP_OPTION_MAX_RESPONSE_HEADER_SIZE = @as(u32, 91);
pub const WINHTTP_OPTION_MAX_RESPONSE_DRAIN_SIZE = @as(u32, 92);
pub const WINHTTP_OPTION_CONNECTION_INFO = @as(u32, 93);
pub const WINHTTP_OPTION_CLIENT_CERT_ISSUER_LIST = @as(u32, 94);
pub const WINHTTP_OPTION_SPN = @as(u32, 96);
pub const WINHTTP_OPTION_GLOBAL_PROXY_CREDS = @as(u32, 97);
pub const WINHTTP_OPTION_GLOBAL_SERVER_CREDS = @as(u32, 98);
pub const WINHTTP_OPTION_UNLOAD_NOTIFY_EVENT = @as(u32, 99);
pub const WINHTTP_OPTION_REJECT_USERPWD_IN_URL = @as(u32, 100);
pub const WINHTTP_OPTION_USE_GLOBAL_SERVER_CREDENTIALS = @as(u32, 101);
pub const WINHTTP_OPTION_RECEIVE_PROXY_CONNECT_RESPONSE = @as(u32, 103);
pub const WINHTTP_OPTION_IS_PROXY_CONNECT_RESPONSE = @as(u32, 104);
pub const WINHTTP_OPTION_SERVER_SPN_USED = @as(u32, 106);
pub const WINHTTP_OPTION_PROXY_SPN_USED = @as(u32, 107);
pub const WINHTTP_OPTION_SERVER_CBT = @as(u32, 108);
pub const WINHTTP_OPTION_UNSAFE_HEADER_PARSING = @as(u32, 110);
pub const WINHTTP_OPTION_ASSURED_NON_BLOCKING_CALLBACKS = @as(u32, 111);
pub const WINHTTP_OPTION_UPGRADE_TO_WEB_SOCKET = @as(u32, 114);
pub const WINHTTP_OPTION_WEB_SOCKET_CLOSE_TIMEOUT = @as(u32, 115);
pub const WINHTTP_OPTION_WEB_SOCKET_KEEPALIVE_INTERVAL = @as(u32, 116);
pub const WINHTTP_OPTION_DECOMPRESSION = @as(u32, 118);
pub const WINHTTP_OPTION_WEB_SOCKET_RECEIVE_BUFFER_SIZE = @as(u32, 122);
pub const WINHTTP_OPTION_WEB_SOCKET_SEND_BUFFER_SIZE = @as(u32, 123);
pub const WINHTTP_OPTION_TCP_PRIORITY_HINT = @as(u32, 128);
pub const WINHTTP_OPTION_CONNECTION_FILTER = @as(u32, 131);
pub const WINHTTP_OPTION_ENABLE_HTTP_PROTOCOL = @as(u32, 133);
pub const WINHTTP_OPTION_HTTP_PROTOCOL_USED = @as(u32, 134);
pub const WINHTTP_OPTION_KDC_PROXY_SETTINGS = @as(u32, 136);
pub const WINHTTP_OPTION_ENCODE_EXTRA = @as(u32, 138);
pub const WINHTTP_OPTION_DISABLE_STREAM_QUEUE = @as(u32, 139);
pub const WINHTTP_OPTION_IPV6_FAST_FALLBACK = @as(u32, 140);
pub const WINHTTP_OPTION_CONNECTION_STATS_V0 = @as(u32, 141);
pub const WINHTTP_OPTION_REQUEST_TIMES = @as(u32, 142);
pub const WINHTTP_OPTION_EXPIRE_CONNECTION = @as(u32, 143);
pub const WINHTTP_OPTION_DISABLE_SECURE_PROTOCOL_FALLBACK = @as(u32, 144);
pub const WINHTTP_OPTION_HTTP_PROTOCOL_REQUIRED = @as(u32, 145);
pub const WINHTTP_OPTION_REQUEST_STATS = @as(u32, 146);
pub const WINHTTP_OPTION_SERVER_CERT_CHAIN_CONTEXT = @as(u32, 147);
pub const WINHTTP_OPTION_CONNECTION_STATS_V1 = @as(u32, 150);
pub const WINHTTP_OPTION_SECURITY_INFO = @as(u32, 151);
pub const WINHTTP_OPTION_TCP_KEEPALIVE = @as(u32, 152);
pub const WINHTTP_OPTION_TCP_FAST_OPEN = @as(u32, 153);
pub const WINHTTP_OPTION_TLS_FALSE_START = @as(u32, 154);
pub const WINHTTP_OPTION_IGNORE_CERT_REVOCATION_OFFLINE = @as(u32, 155);
pub const WINHTTP_OPTION_SOURCE_ADDRESS = @as(u32, 156);
pub const WINHTTP_OPTION_USERNAME = @as(u32, 4096);
pub const WINHTTP_OPTION_PASSWORD = @as(u32, 4097);
pub const WINHTTP_OPTION_PROXY_USERNAME = @as(u32, 4098);
pub const WINHTTP_OPTION_PROXY_PASSWORD = @as(u32, 4099);
pub const WINHTTP_CONNS_PER_SERVER_UNLIMITED = @as(u32, 4294967295);
pub const WINHTTP_DECOMPRESSION_FLAG_GZIP = @as(u32, 1);
pub const WINHTTP_DECOMPRESSION_FLAG_DEFLATE = @as(u32, 2);
pub const WINHTTP_PROTOCOL_FLAG_HTTP2 = @as(u32, 1);
pub const WINHTTP_AUTOLOGON_SECURITY_LEVEL_MEDIUM = @as(u32, 0);
pub const WINHTTP_AUTOLOGON_SECURITY_LEVEL_LOW = @as(u32, 1);
pub const WINHTTP_AUTOLOGON_SECURITY_LEVEL_HIGH = @as(u32, 2);
pub const WINHTTP_OPTION_REDIRECT_POLICY_NEVER = @as(u32, 0);
pub const WINHTTP_OPTION_REDIRECT_POLICY_DISALLOW_HTTPS_TO_HTTP = @as(u32, 1);
pub const WINHTTP_OPTION_REDIRECT_POLICY_ALWAYS = @as(u32, 2);
pub const WINHTTP_DISABLE_PASSPORT_AUTH = @as(u32, 0);
pub const WINHTTP_ENABLE_PASSPORT_AUTH = @as(u32, 268435456);
pub const WINHTTP_DISABLE_PASSPORT_KEYRING = @as(u32, 536870912);
pub const WINHTTP_ENABLE_PASSPORT_KEYRING = @as(u32, 1073741824);
pub const WINHTTP_DISABLE_COOKIES = @as(u32, 1);
pub const WINHTTP_DISABLE_REDIRECTS = @as(u32, 2);
pub const WINHTTP_DISABLE_AUTHENTICATION = @as(u32, 4);
pub const WINHTTP_DISABLE_KEEP_ALIVE = @as(u32, 8);
pub const WINHTTP_ENABLE_SSL_REVOCATION = @as(u32, 1);
pub const WINHTTP_ENABLE_SSL_REVERT_IMPERSONATION = @as(u32, 2);
pub const WINHTTP_DISABLE_SPN_SERVER_PORT = @as(u32, 0);
pub const WINHTTP_ENABLE_SPN_SERVER_PORT = @as(u32, 1);
pub const WINHTTP_HANDLE_TYPE_SESSION = @as(u32, 1);
pub const WINHTTP_HANDLE_TYPE_CONNECT = @as(u32, 2);
pub const WINHTTP_HANDLE_TYPE_REQUEST = @as(u32, 3);
pub const WINHTTP_AUTH_SCHEME_PASSPORT = @as(u32, 4);
pub const WINHTTP_AUTH_SCHEME_DIGEST = @as(u32, 8);
pub const WINHTTP_AUTH_TARGET_SERVER = @as(u32, 0);
pub const WINHTTP_AUTH_TARGET_PROXY = @as(u32, 1);
pub const SECURITY_FLAG_SECURE = @as(u32, 1);
pub const SECURITY_FLAG_STRENGTH_WEAK = @as(u32, 268435456);
pub const SECURITY_FLAG_STRENGTH_MEDIUM = @as(u32, 1073741824);
pub const SECURITY_FLAG_STRENGTH_STRONG = @as(u32, 536870912);
pub const WINHTTP_CALLBACK_STATUS_FLAG_CERT_REV_FAILED = @as(u32, 1);
pub const WINHTTP_CALLBACK_STATUS_FLAG_INVALID_CERT = @as(u32, 2);
pub const WINHTTP_CALLBACK_STATUS_FLAG_CERT_REVOKED = @as(u32, 4);
pub const WINHTTP_CALLBACK_STATUS_FLAG_INVALID_CA = @as(u32, 8);
pub const WINHTTP_CALLBACK_STATUS_FLAG_CERT_CN_INVALID = @as(u32, 16);
pub const WINHTTP_CALLBACK_STATUS_FLAG_CERT_DATE_INVALID = @as(u32, 32);
pub const WINHTTP_CALLBACK_STATUS_FLAG_CERT_WRONG_USAGE = @as(u32, 64);
pub const WINHTTP_CALLBACK_STATUS_FLAG_SECURITY_CHANNEL_ERROR = @as(u32, 2147483648);
pub const WINHTTP_FLAG_SECURE_PROTOCOL_SSL2 = @as(u32, 8);
pub const WINHTTP_FLAG_SECURE_PROTOCOL_SSL3 = @as(u32, 32);
pub const WINHTTP_FLAG_SECURE_PROTOCOL_TLS1 = @as(u32, 128);
pub const WINHTTP_FLAG_SECURE_PROTOCOL_TLS1_1 = @as(u32, 512);
pub const WINHTTP_FLAG_SECURE_PROTOCOL_TLS1_2 = @as(u32, 2048);
pub const WINHTTP_FLAG_SECURE_PROTOCOL_TLS1_3 = @as(u32, 8192);
pub const WINHTTP_CALLBACK_STATUS_RESOLVING_NAME = @as(u32, 1);
pub const WINHTTP_CALLBACK_STATUS_NAME_RESOLVED = @as(u32, 2);
pub const WINHTTP_CALLBACK_STATUS_CONNECTING_TO_SERVER = @as(u32, 4);
pub const WINHTTP_CALLBACK_STATUS_CONNECTED_TO_SERVER = @as(u32, 8);
pub const WINHTTP_CALLBACK_STATUS_SENDING_REQUEST = @as(u32, 16);
pub const WINHTTP_CALLBACK_STATUS_REQUEST_SENT = @as(u32, 32);
pub const WINHTTP_CALLBACK_STATUS_RECEIVING_RESPONSE = @as(u32, 64);
pub const WINHTTP_CALLBACK_STATUS_RESPONSE_RECEIVED = @as(u32, 128);
pub const WINHTTP_CALLBACK_STATUS_CLOSING_CONNECTION = @as(u32, 256);
pub const WINHTTP_CALLBACK_STATUS_CONNECTION_CLOSED = @as(u32, 512);
pub const WINHTTP_CALLBACK_STATUS_HANDLE_CREATED = @as(u32, 1024);
pub const WINHTTP_CALLBACK_STATUS_HANDLE_CLOSING = @as(u32, 2048);
pub const WINHTTP_CALLBACK_STATUS_DETECTING_PROXY = @as(u32, 4096);
pub const WINHTTP_CALLBACK_STATUS_REDIRECT = @as(u32, 16384);
pub const WINHTTP_CALLBACK_STATUS_INTERMEDIATE_RESPONSE = @as(u32, 32768);
pub const WINHTTP_CALLBACK_STATUS_SECURE_FAILURE = @as(u32, 65536);
pub const WINHTTP_CALLBACK_STATUS_HEADERS_AVAILABLE = @as(u32, 131072);
pub const WINHTTP_CALLBACK_STATUS_DATA_AVAILABLE = @as(u32, 262144);
pub const WINHTTP_CALLBACK_STATUS_READ_COMPLETE = @as(u32, 524288);
pub const WINHTTP_CALLBACK_STATUS_WRITE_COMPLETE = @as(u32, 1048576);
pub const WINHTTP_CALLBACK_STATUS_REQUEST_ERROR = @as(u32, 2097152);
pub const WINHTTP_CALLBACK_STATUS_SENDREQUEST_COMPLETE = @as(u32, 4194304);
pub const WINHTTP_CALLBACK_STATUS_GETPROXYFORURL_COMPLETE = @as(u32, 16777216);
pub const WINHTTP_CALLBACK_STATUS_CLOSE_COMPLETE = @as(u32, 33554432);
pub const WINHTTP_CALLBACK_STATUS_SHUTDOWN_COMPLETE = @as(u32, 67108864);
pub const WINHTTP_CALLBACK_STATUS_SETTINGS_WRITE_COMPLETE = @as(u32, 268435456);
pub const WINHTTP_CALLBACK_STATUS_SETTINGS_READ_COMPLETE = @as(u32, 536870912);
pub const API_RECEIVE_RESPONSE = @as(u32, 1);
pub const API_QUERY_DATA_AVAILABLE = @as(u32, 2);
pub const API_READ_DATA = @as(u32, 3);
pub const API_WRITE_DATA = @as(u32, 4);
pub const API_SEND_REQUEST = @as(u32, 5);
pub const API_GET_PROXY_FOR_URL = @as(u32, 6);
pub const WINHTTP_CALLBACK_FLAG_ALL_NOTIFICATIONS = @as(u32, 4294967295);
pub const WINHTTP_QUERY_MIME_VERSION = @as(u32, 0);
pub const WINHTTP_QUERY_CONTENT_TYPE = @as(u32, 1);
pub const WINHTTP_QUERY_CONTENT_TRANSFER_ENCODING = @as(u32, 2);
pub const WINHTTP_QUERY_CONTENT_ID = @as(u32, 3);
pub const WINHTTP_QUERY_CONTENT_DESCRIPTION = @as(u32, 4);
pub const WINHTTP_QUERY_CONTENT_LENGTH = @as(u32, 5);
pub const WINHTTP_QUERY_CONTENT_LANGUAGE = @as(u32, 6);
pub const WINHTTP_QUERY_ALLOW = @as(u32, 7);
pub const WINHTTP_QUERY_PUBLIC = @as(u32, 8);
pub const WINHTTP_QUERY_DATE = @as(u32, 9);
pub const WINHTTP_QUERY_EXPIRES = @as(u32, 10);
pub const WINHTTP_QUERY_LAST_MODIFIED = @as(u32, 11);
pub const WINHTTP_QUERY_MESSAGE_ID = @as(u32, 12);
pub const WINHTTP_QUERY_URI = @as(u32, 13);
pub const WINHTTP_QUERY_DERIVED_FROM = @as(u32, 14);
pub const WINHTTP_QUERY_COST = @as(u32, 15);
pub const WINHTTP_QUERY_LINK = @as(u32, 16);
pub const WINHTTP_QUERY_PRAGMA = @as(u32, 17);
pub const WINHTTP_QUERY_VERSION = @as(u32, 18);
pub const WINHTTP_QUERY_STATUS_CODE = @as(u32, 19);
pub const WINHTTP_QUERY_STATUS_TEXT = @as(u32, 20);
pub const WINHTTP_QUERY_RAW_HEADERS = @as(u32, 21);
pub const WINHTTP_QUERY_RAW_HEADERS_CRLF = @as(u32, 22);
pub const WINHTTP_QUERY_CONNECTION = @as(u32, 23);
pub const WINHTTP_QUERY_ACCEPT = @as(u32, 24);
pub const WINHTTP_QUERY_ACCEPT_CHARSET = @as(u32, 25);
pub const WINHTTP_QUERY_ACCEPT_ENCODING = @as(u32, 26);
pub const WINHTTP_QUERY_ACCEPT_LANGUAGE = @as(u32, 27);
pub const WINHTTP_QUERY_AUTHORIZATION = @as(u32, 28);
pub const WINHTTP_QUERY_CONTENT_ENCODING = @as(u32, 29);
pub const WINHTTP_QUERY_FORWARDED = @as(u32, 30);
pub const WINHTTP_QUERY_FROM = @as(u32, 31);
pub const WINHTTP_QUERY_IF_MODIFIED_SINCE = @as(u32, 32);
pub const WINHTTP_QUERY_LOCATION = @as(u32, 33);
pub const WINHTTP_QUERY_ORIG_URI = @as(u32, 34);
pub const WINHTTP_QUERY_REFERER = @as(u32, 35);
pub const WINHTTP_QUERY_RETRY_AFTER = @as(u32, 36);
pub const WINHTTP_QUERY_SERVER = @as(u32, 37);
pub const WINHTTP_QUERY_TITLE = @as(u32, 38);
pub const WINHTTP_QUERY_USER_AGENT = @as(u32, 39);
pub const WINHTTP_QUERY_WWW_AUTHENTICATE = @as(u32, 40);
pub const WINHTTP_QUERY_PROXY_AUTHENTICATE = @as(u32, 41);
pub const WINHTTP_QUERY_ACCEPT_RANGES = @as(u32, 42);
pub const WINHTTP_QUERY_SET_COOKIE = @as(u32, 43);
pub const WINHTTP_QUERY_COOKIE = @as(u32, 44);
pub const WINHTTP_QUERY_REQUEST_METHOD = @as(u32, 45);
pub const WINHTTP_QUERY_REFRESH = @as(u32, 46);
pub const WINHTTP_QUERY_CONTENT_DISPOSITION = @as(u32, 47);
pub const WINHTTP_QUERY_AGE = @as(u32, 48);
pub const WINHTTP_QUERY_CACHE_CONTROL = @as(u32, 49);
pub const WINHTTP_QUERY_CONTENT_BASE = @as(u32, 50);
pub const WINHTTP_QUERY_CONTENT_LOCATION = @as(u32, 51);
pub const WINHTTP_QUERY_CONTENT_MD5 = @as(u32, 52);
pub const WINHTTP_QUERY_CONTENT_RANGE = @as(u32, 53);
pub const WINHTTP_QUERY_ETAG = @as(u32, 54);
pub const WINHTTP_QUERY_HOST = @as(u32, 55);
pub const WINHTTP_QUERY_IF_MATCH = @as(u32, 56);
pub const WINHTTP_QUERY_IF_NONE_MATCH = @as(u32, 57);
pub const WINHTTP_QUERY_IF_RANGE = @as(u32, 58);
pub const WINHTTP_QUERY_IF_UNMODIFIED_SINCE = @as(u32, 59);
pub const WINHTTP_QUERY_MAX_FORWARDS = @as(u32, 60);
pub const WINHTTP_QUERY_PROXY_AUTHORIZATION = @as(u32, 61);
pub const WINHTTP_QUERY_RANGE = @as(u32, 62);
pub const WINHTTP_QUERY_TRANSFER_ENCODING = @as(u32, 63);
pub const WINHTTP_QUERY_UPGRADE = @as(u32, 64);
pub const WINHTTP_QUERY_VARY = @as(u32, 65);
pub const WINHTTP_QUERY_VIA = @as(u32, 66);
pub const WINHTTP_QUERY_WARNING = @as(u32, 67);
pub const WINHTTP_QUERY_EXPECT = @as(u32, 68);
pub const WINHTTP_QUERY_PROXY_CONNECTION = @as(u32, 69);
pub const WINHTTP_QUERY_UNLESS_MODIFIED_SINCE = @as(u32, 70);
pub const WINHTTP_QUERY_PROXY_SUPPORT = @as(u32, 75);
pub const WINHTTP_QUERY_AUTHENTICATION_INFO = @as(u32, 76);
pub const WINHTTP_QUERY_PASSPORT_URLS = @as(u32, 77);
pub const WINHTTP_QUERY_PASSPORT_CONFIG = @as(u32, 78);
pub const WINHTTP_QUERY_MAX = @as(u32, 78);
pub const WINHTTP_QUERY_CUSTOM = @as(u32, 65535);
pub const WINHTTP_QUERY_FLAG_REQUEST_HEADERS = @as(u32, 2147483648);
pub const WINHTTP_QUERY_FLAG_SYSTEMTIME = @as(u32, 1073741824);
pub const WINHTTP_QUERY_FLAG_NUMBER = @as(u32, 536870912);
pub const WINHTTP_QUERY_FLAG_NUMBER64 = @as(u32, 134217728);
pub const HTTP_STATUS_CONTINUE = @as(u32, 100);
pub const HTTP_STATUS_SWITCH_PROTOCOLS = @as(u32, 101);
pub const HTTP_STATUS_OK = @as(u32, 200);
pub const HTTP_STATUS_CREATED = @as(u32, 201);
pub const HTTP_STATUS_ACCEPTED = @as(u32, 202);
pub const HTTP_STATUS_PARTIAL = @as(u32, 203);
pub const HTTP_STATUS_NO_CONTENT = @as(u32, 204);
pub const HTTP_STATUS_RESET_CONTENT = @as(u32, 205);
pub const HTTP_STATUS_PARTIAL_CONTENT = @as(u32, 206);
pub const HTTP_STATUS_WEBDAV_MULTI_STATUS = @as(u32, 207);
pub const HTTP_STATUS_AMBIGUOUS = @as(u32, 300);
pub const HTTP_STATUS_MOVED = @as(u32, 301);
pub const HTTP_STATUS_REDIRECT = @as(u32, 302);
pub const HTTP_STATUS_REDIRECT_METHOD = @as(u32, 303);
pub const HTTP_STATUS_NOT_MODIFIED = @as(u32, 304);
pub const HTTP_STATUS_USE_PROXY = @as(u32, 305);
pub const HTTP_STATUS_REDIRECT_KEEP_VERB = @as(u32, 307);
pub const HTTP_STATUS_PERMANENT_REDIRECT = @as(u32, 308);
pub const HTTP_STATUS_BAD_REQUEST = @as(u32, 400);
pub const HTTP_STATUS_DENIED = @as(u32, 401);
pub const HTTP_STATUS_PAYMENT_REQ = @as(u32, 402);
pub const HTTP_STATUS_FORBIDDEN = @as(u32, 403);
pub const HTTP_STATUS_NOT_FOUND = @as(u32, 404);
pub const HTTP_STATUS_BAD_METHOD = @as(u32, 405);
pub const HTTP_STATUS_NONE_ACCEPTABLE = @as(u32, 406);
pub const HTTP_STATUS_PROXY_AUTH_REQ = @as(u32, 407);
pub const HTTP_STATUS_REQUEST_TIMEOUT = @as(u32, 408);
pub const HTTP_STATUS_CONFLICT = @as(u32, 409);
pub const HTTP_STATUS_GONE = @as(u32, 410);
pub const HTTP_STATUS_LENGTH_REQUIRED = @as(u32, 411);
pub const HTTP_STATUS_PRECOND_FAILED = @as(u32, 412);
pub const HTTP_STATUS_REQUEST_TOO_LARGE = @as(u32, 413);
pub const HTTP_STATUS_URI_TOO_LONG = @as(u32, 414);
pub const HTTP_STATUS_UNSUPPORTED_MEDIA = @as(u32, 415);
pub const HTTP_STATUS_RETRY_WITH = @as(u32, 449);
pub const HTTP_STATUS_SERVER_ERROR = @as(u32, 500);
pub const HTTP_STATUS_NOT_SUPPORTED = @as(u32, 501);
pub const HTTP_STATUS_BAD_GATEWAY = @as(u32, 502);
pub const HTTP_STATUS_SERVICE_UNAVAIL = @as(u32, 503);
pub const HTTP_STATUS_GATEWAY_TIMEOUT = @as(u32, 504);
pub const HTTP_STATUS_VERSION_NOT_SUP = @as(u32, 505);
pub const ICU_NO_ENCODE = @as(u32, 536870912);
pub const ICU_NO_META = @as(u32, 134217728);
pub const ICU_ENCODE_SPACES_ONLY = @as(u32, 67108864);
pub const ICU_BROWSER_MODE = @as(u32, 33554432);
pub const ICU_ENCODE_PERCENT = @as(u32, 4096);
pub const ICU_ESCAPE_AUTHORITY = @as(u32, 8192);
pub const WINHTTP_ADDREQ_INDEX_MASK = @as(u32, 65535);
pub const WINHTTP_ADDREQ_FLAGS_MASK = @as(u32, 4294901760);
pub const WINHTTP_ADDREQ_FLAG_ADD_IF_NEW = @as(u32, 268435456);
pub const WINHTTP_ADDREQ_FLAG_ADD = @as(u32, 536870912);
pub const WINHTTP_ADDREQ_FLAG_COALESCE_WITH_COMMA = @as(u32, 1073741824);
pub const WINHTTP_ADDREQ_FLAG_COALESCE_WITH_SEMICOLON = @as(u32, 16777216);
pub const WINHTTP_ADDREQ_FLAG_REPLACE = @as(u32, 2147483648);
pub const WINHTTP_EXTENDED_HEADER_FLAG_UNICODE = @as(u32, 1);
pub const WINHTTP_IGNORE_REQUEST_TOTAL_LENGTH = @as(u32, 0);
pub const WINHTTP_ERROR_BASE = @as(u32, 12000);
pub const ERROR_WINHTTP_OUT_OF_HANDLES = @as(u32, 12001);
pub const ERROR_WINHTTP_TIMEOUT = @as(u32, 12002);
pub const ERROR_WINHTTP_INTERNAL_ERROR = @as(u32, 12004);
pub const ERROR_WINHTTP_INVALID_URL = @as(u32, 12005);
pub const ERROR_WINHTTP_UNRECOGNIZED_SCHEME = @as(u32, 12006);
pub const ERROR_WINHTTP_NAME_NOT_RESOLVED = @as(u32, 12007);
pub const ERROR_WINHTTP_INVALID_OPTION = @as(u32, 12009);
pub const ERROR_WINHTTP_OPTION_NOT_SETTABLE = @as(u32, 12011);
pub const ERROR_WINHTTP_SHUTDOWN = @as(u32, 12012);
pub const ERROR_WINHTTP_LOGIN_FAILURE = @as(u32, 12015);
pub const ERROR_WINHTTP_OPERATION_CANCELLED = @as(u32, 12017);
pub const ERROR_WINHTTP_INCORRECT_HANDLE_TYPE = @as(u32, 12018);
pub const ERROR_WINHTTP_INCORRECT_HANDLE_STATE = @as(u32, 12019);
pub const ERROR_WINHTTP_CANNOT_CONNECT = @as(u32, 12029);
pub const ERROR_WINHTTP_CONNECTION_ERROR = @as(u32, 12030);
pub const ERROR_WINHTTP_RESEND_REQUEST = @as(u32, 12032);
pub const ERROR_WINHTTP_CLIENT_AUTH_CERT_NEEDED = @as(u32, 12044);
pub const ERROR_WINHTTP_CANNOT_CALL_BEFORE_OPEN = @as(u32, 12100);
pub const ERROR_WINHTTP_CANNOT_CALL_BEFORE_SEND = @as(u32, 12101);
pub const ERROR_WINHTTP_CANNOT_CALL_AFTER_SEND = @as(u32, 12102);
pub const ERROR_WINHTTP_CANNOT_CALL_AFTER_OPEN = @as(u32, 12103);
pub const ERROR_WINHTTP_HEADER_NOT_FOUND = @as(u32, 12150);
pub const ERROR_WINHTTP_INVALID_SERVER_RESPONSE = @as(u32, 12152);
pub const ERROR_WINHTTP_INVALID_HEADER = @as(u32, 12153);
pub const ERROR_WINHTTP_INVALID_QUERY_REQUEST = @as(u32, 12154);
pub const ERROR_WINHTTP_HEADER_ALREADY_EXISTS = @as(u32, 12155);
pub const ERROR_WINHTTP_REDIRECT_FAILED = @as(u32, 12156);
pub const ERROR_WINHTTP_AUTO_PROXY_SERVICE_ERROR = @as(u32, 12178);
pub const ERROR_WINHTTP_BAD_AUTO_PROXY_SCRIPT = @as(u32, 12166);
pub const ERROR_WINHTTP_UNABLE_TO_DOWNLOAD_SCRIPT = @as(u32, 12167);
pub const ERROR_WINHTTP_UNHANDLED_SCRIPT_TYPE = @as(u32, 12176);
pub const ERROR_WINHTTP_SCRIPT_EXECUTION_ERROR = @as(u32, 12177);
pub const ERROR_WINHTTP_NOT_INITIALIZED = @as(u32, 12172);
pub const ERROR_WINHTTP_SECURE_FAILURE = @as(u32, 12175);
pub const ERROR_WINHTTP_SECURE_CERT_DATE_INVALID = @as(u32, 12037);
pub const ERROR_WINHTTP_SECURE_CERT_CN_INVALID = @as(u32, 12038);
pub const ERROR_WINHTTP_SECURE_INVALID_CA = @as(u32, 12045);
pub const ERROR_WINHTTP_SECURE_CERT_REV_FAILED = @as(u32, 12057);
pub const ERROR_WINHTTP_SECURE_CHANNEL_ERROR = @as(u32, 12157);
pub const ERROR_WINHTTP_SECURE_INVALID_CERT = @as(u32, 12169);
pub const ERROR_WINHTTP_SECURE_CERT_REVOKED = @as(u32, 12170);
pub const ERROR_WINHTTP_SECURE_CERT_WRONG_USAGE = @as(u32, 12179);
pub const ERROR_WINHTTP_AUTODETECTION_FAILED = @as(u32, 12180);
pub const ERROR_WINHTTP_HEADER_COUNT_EXCEEDED = @as(u32, 12181);
pub const ERROR_WINHTTP_HEADER_SIZE_OVERFLOW = @as(u32, 12182);
pub const ERROR_WINHTTP_CHUNKED_ENCODING_HEADER_SIZE_OVERFLOW = @as(u32, 12183);
pub const ERROR_WINHTTP_RESPONSE_DRAIN_OVERFLOW = @as(u32, 12184);
pub const ERROR_WINHTTP_CLIENT_CERT_NO_PRIVATE_KEY = @as(u32, 12185);
pub const ERROR_WINHTTP_CLIENT_CERT_NO_ACCESS_PRIVATE_KEY = @as(u32, 12186);
pub const ERROR_WINHTTP_CLIENT_AUTH_CERT_NEEDED_PROXY = @as(u32, 12187);
pub const ERROR_WINHTTP_SECURE_FAILURE_PROXY = @as(u32, 12188);
pub const ERROR_WINHTTP_RESERVED_189 = @as(u32, 12189);
pub const ERROR_WINHTTP_HTTP_PROTOCOL_MISMATCH = @as(u32, 12190);
pub const WINHTTP_ERROR_LAST = @as(u32, 12188);
pub const WINHTTP_RESET_STATE = @as(u32, 1);
pub const WINHTTP_RESET_SWPAD_CURRENT_NETWORK = @as(u32, 2);
pub const WINHTTP_RESET_SWPAD_ALL = @as(u32, 4);
pub const WINHTTP_RESET_SCRIPT_CACHE = @as(u32, 8);
pub const WINHTTP_RESET_ALL = @as(u32, 65535);
pub const WINHTTP_RESET_NOTIFY_NETWORK_CHANGED = @as(u32, 65536);
pub const WINHTTP_RESET_OUT_OF_PROC = @as(u32, 131072);
pub const WINHTTP_RESET_DISCARD_RESOLVERS = @as(u32, 262144);
pub const WINHTTP_WEB_SOCKET_MAX_CLOSE_REASON_LENGTH = @as(u32, 123);
pub const WINHTTP_WEB_SOCKET_MIN_KEEPALIVE_VALUE = @as(u32, 15000);

//--------------------------------------------------------------------------------
// Section: Types (145)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").arch) {
.X86 => struct {

pub const WINHTTP_CONNECTION_INFO = extern struct {
    cbSize: u32,
    LocalAddress: SOCKADDR_STORAGE,
    RemoteAddress: SOCKADDR_STORAGE,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X86 => struct {

pub const WINHTTP_REQUEST_TIMES = extern struct {
    cTimes: u32,
    rgullTimes: [64]u64,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X86 => struct {

pub const WINHTTP_REQUEST_STATS = extern struct {
    ullFlags: u64,
    ulIndex: u32,
    cStats: u32,
    rgullStats: [32]u64,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X64, .Arm64 => struct {

pub const WINHTTP_CONNECTION_INFO = extern struct {
    cbSize: u32,
    LocalAddress: SOCKADDR_STORAGE,
    RemoteAddress: SOCKADDR_STORAGE,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X64, .Arm64 => struct {

pub const WINHTTP_REQUEST_TIMES = extern struct {
    cTimes: u32,
    rgullTimes: [64]u64,
};

}, else => struct { } };

pub usingnamespace switch (@import("../zig.zig").arch) {
.X64, .Arm64 => struct {

pub const WINHTTP_REQUEST_STATS = extern struct {
    ullFlags: u64,
    ulIndex: u32,
    cStats: u32,
    rgullStats: [32]u64,
};

}, else => struct { } };

pub const HTTP_SERVER_PROPERTY = extern enum(i32) {
    AuthenticationProperty = 0,
    LoggingProperty = 1,
    QosProperty = 2,
    TimeoutsProperty = 3,
    QueueLengthProperty = 4,
    StateProperty = 5,
    @"503VerbosityProperty" = 6,
    BindingProperty = 7,
    ExtendedAuthenticationProperty = 8,
    ListenEndpointProperty = 9,
    ChannelBindProperty = 10,
    ProtectionLevelProperty = 11,
};
pub const HttpServerAuthenticationProperty = HTTP_SERVER_PROPERTY.AuthenticationProperty;
pub const HttpServerLoggingProperty = HTTP_SERVER_PROPERTY.LoggingProperty;
pub const HttpServerQosProperty = HTTP_SERVER_PROPERTY.QosProperty;
pub const HttpServerTimeoutsProperty = HTTP_SERVER_PROPERTY.TimeoutsProperty;
pub const HttpServerQueueLengthProperty = HTTP_SERVER_PROPERTY.QueueLengthProperty;
pub const HttpServerStateProperty = HTTP_SERVER_PROPERTY.StateProperty;
pub const HttpServer503VerbosityProperty = HTTP_SERVER_PROPERTY.@"503VerbosityProperty";
pub const HttpServerBindingProperty = HTTP_SERVER_PROPERTY.BindingProperty;
pub const HttpServerExtendedAuthenticationProperty = HTTP_SERVER_PROPERTY.ExtendedAuthenticationProperty;
pub const HttpServerListenEndpointProperty = HTTP_SERVER_PROPERTY.ListenEndpointProperty;
pub const HttpServerChannelBindProperty = HTTP_SERVER_PROPERTY.ChannelBindProperty;
pub const HttpServerProtectionLevelProperty = HTTP_SERVER_PROPERTY.ProtectionLevelProperty;

pub const HTTP_PROPERTY_FLAGS = extern struct {
    _bitfield: u32,
};

pub const HTTP_ENABLED_STATE = extern enum(i32) {
    Active = 0,
    Inactive = 1,
};
pub const HttpEnabledStateActive = HTTP_ENABLED_STATE.Active;
pub const HttpEnabledStateInactive = HTTP_ENABLED_STATE.Inactive;

pub const HTTP_STATE_INFO = extern struct {
    Flags: HTTP_PROPERTY_FLAGS,
    State: HTTP_ENABLED_STATE,
};

pub const HTTP_503_RESPONSE_VERBOSITY = extern enum(i32) {
    Basic = 0,
    Limited = 1,
    Full = 2,
};
pub const Http503ResponseVerbosityBasic = HTTP_503_RESPONSE_VERBOSITY.Basic;
pub const Http503ResponseVerbosityLimited = HTTP_503_RESPONSE_VERBOSITY.Limited;
pub const Http503ResponseVerbosityFull = HTTP_503_RESPONSE_VERBOSITY.Full;

pub const HTTP_QOS_SETTING_TYPE = extern enum(i32) {
    Bandwidth = 0,
    ConnectionLimit = 1,
    FlowRate = 2,
};
pub const HttpQosSettingTypeBandwidth = HTTP_QOS_SETTING_TYPE.Bandwidth;
pub const HttpQosSettingTypeConnectionLimit = HTTP_QOS_SETTING_TYPE.ConnectionLimit;
pub const HttpQosSettingTypeFlowRate = HTTP_QOS_SETTING_TYPE.FlowRate;

pub const HTTP_QOS_SETTING_INFO = extern struct {
    QosType: HTTP_QOS_SETTING_TYPE,
    QosSetting: *c_void,
};

pub const HTTP_CONNECTION_LIMIT_INFO = extern struct {
    Flags: HTTP_PROPERTY_FLAGS,
    MaxConnections: u32,
};

pub const HTTP_BANDWIDTH_LIMIT_INFO = extern struct {
    Flags: HTTP_PROPERTY_FLAGS,
    MaxBandwidth: u32,
};

pub const HTTP_FLOWRATE_INFO = extern struct {
    Flags: HTTP_PROPERTY_FLAGS,
    MaxBandwidth: u32,
    MaxPeakBandwidth: u32,
    BurstSize: u32,
};

pub const HTTP_SERVICE_CONFIG_TIMEOUT_KEY = extern enum(i32) {
    IdleConnectionTimeout = 0,
    HeaderWaitTimeout = 1,
};
pub const IdleConnectionTimeout = HTTP_SERVICE_CONFIG_TIMEOUT_KEY.IdleConnectionTimeout;
pub const HeaderWaitTimeout = HTTP_SERVICE_CONFIG_TIMEOUT_KEY.HeaderWaitTimeout;

pub const HTTP_SERVICE_CONFIG_TIMEOUT_SET = extern struct {
    KeyDesc: HTTP_SERVICE_CONFIG_TIMEOUT_KEY,
    ParamDesc: u16,
};

pub const HTTP_TIMEOUT_LIMIT_INFO = extern struct {
    Flags: HTTP_PROPERTY_FLAGS,
    EntityBody: u16,
    DrainEntityBody: u16,
    RequestQueue: u16,
    IdleConnection: u16,
    HeaderWait: u16,
    MinSendRate: u32,
};

pub const HTTP_SERVICE_CONFIG_SETTING_KEY = extern enum(i32) {
    None = 0,
    TlsThrottle = 1,
};
pub const HttpNone = HTTP_SERVICE_CONFIG_SETTING_KEY.None;
pub const HttpTlsThrottle = HTTP_SERVICE_CONFIG_SETTING_KEY.TlsThrottle;

pub const HTTP_SERVICE_CONFIG_SETTING_SET = extern struct {
    KeyDesc: HTTP_SERVICE_CONFIG_SETTING_KEY,
    ParamDesc: u32,
};

pub const HTTP_LISTEN_ENDPOINT_INFO = extern struct {
    Flags: HTTP_PROPERTY_FLAGS,
    EnableSharing: u8,
};

pub const HTTP_SERVER_AUTHENTICATION_DIGEST_PARAMS = extern struct {
    DomainNameLength: u16,
    DomainName: PWSTR,
    RealmLength: u16,
    Realm: PWSTR,
};

pub const HTTP_SERVER_AUTHENTICATION_BASIC_PARAMS = extern struct {
    RealmLength: u16,
    Realm: PWSTR,
};

pub const HTTP_SERVER_AUTHENTICATION_INFO = extern struct {
    Flags: HTTP_PROPERTY_FLAGS,
    AuthSchemes: u32,
    ReceiveMutualAuth: u8,
    ReceiveContextHandle: u8,
    DisableNTLMCredentialCaching: u8,
    ExFlags: u8,
    DigestParams: HTTP_SERVER_AUTHENTICATION_DIGEST_PARAMS,
    BasicParams: HTTP_SERVER_AUTHENTICATION_BASIC_PARAMS,
};

pub const HTTP_SERVICE_BINDING_TYPE = extern enum(i32) {
    None = 0,
    W = 1,
    A = 2,
};
pub const HttpServiceBindingTypeNone = HTTP_SERVICE_BINDING_TYPE.None;
pub const HttpServiceBindingTypeW = HTTP_SERVICE_BINDING_TYPE.W;
pub const HttpServiceBindingTypeA = HTTP_SERVICE_BINDING_TYPE.A;

pub const HTTP_SERVICE_BINDING_BASE = extern struct {
    Type: HTTP_SERVICE_BINDING_TYPE,
};

pub const HTTP_SERVICE_BINDING_A = extern struct {
    Base: HTTP_SERVICE_BINDING_BASE,
    Buffer: [*]u8,
    BufferSize: u32,
};

pub const HTTP_SERVICE_BINDING_W = extern struct {
    Base: HTTP_SERVICE_BINDING_BASE,
    Buffer: [*]u16,
    BufferSize: u32,
};

pub const HTTP_AUTHENTICATION_HARDENING_LEVELS = extern enum(i32) {
    Legacy = 0,
    Medium = 1,
    Strict = 2,
};
pub const HttpAuthenticationHardeningLegacy = HTTP_AUTHENTICATION_HARDENING_LEVELS.Legacy;
pub const HttpAuthenticationHardeningMedium = HTTP_AUTHENTICATION_HARDENING_LEVELS.Medium;
pub const HttpAuthenticationHardeningStrict = HTTP_AUTHENTICATION_HARDENING_LEVELS.Strict;

pub const HTTP_CHANNEL_BIND_INFO = extern struct {
    Hardening: HTTP_AUTHENTICATION_HARDENING_LEVELS,
    Flags: u32,
    ServiceNames: **HTTP_SERVICE_BINDING_BASE,
    NumberOfServiceNames: u32,
};

pub const HTTP_REQUEST_CHANNEL_BIND_STATUS = extern struct {
    ServiceName: *HTTP_SERVICE_BINDING_BASE,
    ChannelToken: *u8,
    ChannelTokenSize: u32,
    Flags: u32,
};

pub const HTTP_REQUEST_TOKEN_BINDING_INFO = extern struct {
    TokenBinding: *u8,
    TokenBindingSize: u32,
    EKM: *u8,
    EKMSize: u32,
    KeyType: u8,
};

pub const HTTP_LOGGING_TYPE = extern enum(i32) {
    W3C = 0,
    IIS = 1,
    NCSA = 2,
    Raw = 3,
};
pub const HttpLoggingTypeW3C = HTTP_LOGGING_TYPE.W3C;
pub const HttpLoggingTypeIIS = HTTP_LOGGING_TYPE.IIS;
pub const HttpLoggingTypeNCSA = HTTP_LOGGING_TYPE.NCSA;
pub const HttpLoggingTypeRaw = HTTP_LOGGING_TYPE.Raw;

pub const HTTP_LOGGING_ROLLOVER_TYPE = extern enum(i32) {
    Size = 0,
    Daily = 1,
    Weekly = 2,
    Monthly = 3,
    Hourly = 4,
};
pub const HttpLoggingRolloverSize = HTTP_LOGGING_ROLLOVER_TYPE.Size;
pub const HttpLoggingRolloverDaily = HTTP_LOGGING_ROLLOVER_TYPE.Daily;
pub const HttpLoggingRolloverWeekly = HTTP_LOGGING_ROLLOVER_TYPE.Weekly;
pub const HttpLoggingRolloverMonthly = HTTP_LOGGING_ROLLOVER_TYPE.Monthly;
pub const HttpLoggingRolloverHourly = HTTP_LOGGING_ROLLOVER_TYPE.Hourly;

pub const HTTP_LOGGING_INFO = extern struct {
    Flags: HTTP_PROPERTY_FLAGS,
    LoggingFlags: u32,
    SoftwareName: [*:0]const u16,
    SoftwareNameLength: u16,
    DirectoryNameLength: u16,
    DirectoryName: [*:0]const u16,
    Format: HTTP_LOGGING_TYPE,
    Fields: u32,
    pExtFields: *c_void,
    NumOfExtFields: u16,
    MaxRecordSize: u16,
    RolloverType: HTTP_LOGGING_ROLLOVER_TYPE,
    RolloverSize: u32,
    pSecurityDescriptor: *SECURITY_DESCRIPTOR,
};

pub const HTTP_BINDING_INFO = extern struct {
    Flags: HTTP_PROPERTY_FLAGS,
    RequestQueueHandle: HANDLE,
};

pub const HTTP_PROTECTION_LEVEL_TYPE = extern enum(i32) {
    Unrestricted = 0,
    EdgeRestricted = 1,
    Restricted = 2,
};
pub const HttpProtectionLevelUnrestricted = HTTP_PROTECTION_LEVEL_TYPE.Unrestricted;
pub const HttpProtectionLevelEdgeRestricted = HTTP_PROTECTION_LEVEL_TYPE.EdgeRestricted;
pub const HttpProtectionLevelRestricted = HTTP_PROTECTION_LEVEL_TYPE.Restricted;

pub const HTTP_PROTECTION_LEVEL_INFO = extern struct {
    Flags: HTTP_PROPERTY_FLAGS,
    Level: HTTP_PROTECTION_LEVEL_TYPE,
};

pub const HTTP_BYTE_RANGE = extern struct {
    StartingOffset: ULARGE_INTEGER,
    Length: ULARGE_INTEGER,
};

pub const HTTP_VERSION = extern struct {
    MajorVersion: u16,
    MinorVersion: u16,
};

pub const HTTP_SCHEME = extern enum(i32) {
    Http = 0,
    Https = 1,
    Maximum = 2,
};
pub const HttpSchemeHttp = HTTP_SCHEME.Http;
pub const HttpSchemeHttps = HTTP_SCHEME.Https;
pub const HttpSchemeMaximum = HTTP_SCHEME.Maximum;

pub const HTTP_VERB = extern enum(i32) {
    Unparsed = 0,
    Unknown = 1,
    Invalid = 2,
    OPTIONS = 3,
    GET = 4,
    HEAD = 5,
    POST = 6,
    PUT = 7,
    DELETE = 8,
    TRACE = 9,
    CONNECT = 10,
    TRACK = 11,
    MOVE = 12,
    COPY = 13,
    PROPFIND = 14,
    PROPPATCH = 15,
    MKCOL = 16,
    LOCK = 17,
    UNLOCK = 18,
    SEARCH = 19,
    Maximum = 20,
};
pub const HttpVerbUnparsed = HTTP_VERB.Unparsed;
pub const HttpVerbUnknown = HTTP_VERB.Unknown;
pub const HttpVerbInvalid = HTTP_VERB.Invalid;
pub const HttpVerbOPTIONS = HTTP_VERB.OPTIONS;
pub const HttpVerbGET = HTTP_VERB.GET;
pub const HttpVerbHEAD = HTTP_VERB.HEAD;
pub const HttpVerbPOST = HTTP_VERB.POST;
pub const HttpVerbPUT = HTTP_VERB.PUT;
pub const HttpVerbDELETE = HTTP_VERB.DELETE;
pub const HttpVerbTRACE = HTTP_VERB.TRACE;
pub const HttpVerbCONNECT = HTTP_VERB.CONNECT;
pub const HttpVerbTRACK = HTTP_VERB.TRACK;
pub const HttpVerbMOVE = HTTP_VERB.MOVE;
pub const HttpVerbCOPY = HTTP_VERB.COPY;
pub const HttpVerbPROPFIND = HTTP_VERB.PROPFIND;
pub const HttpVerbPROPPATCH = HTTP_VERB.PROPPATCH;
pub const HttpVerbMKCOL = HTTP_VERB.MKCOL;
pub const HttpVerbLOCK = HTTP_VERB.LOCK;
pub const HttpVerbUNLOCK = HTTP_VERB.UNLOCK;
pub const HttpVerbSEARCH = HTTP_VERB.SEARCH;
pub const HttpVerbMaximum = HTTP_VERB.Maximum;

pub const HTTP_HEADER_ID = extern enum(i32) {
    CacheControl = 0,
    Connection = 1,
    Date = 2,
    KeepAlive = 3,
    Pragma = 4,
    Trailer = 5,
    TransferEncoding = 6,
    Upgrade = 7,
    Via = 8,
    Warning = 9,
    Allow = 10,
    ContentLength = 11,
    ContentType = 12,
    ContentEncoding = 13,
    ContentLanguage = 14,
    ContentLocation = 15,
    ContentMd5 = 16,
    ContentRange = 17,
    Expires = 18,
    LastModified = 19,
    Accept = 20,
    AcceptCharset = 21,
    AcceptEncoding = 22,
    AcceptLanguage = 23,
    Authorization = 24,
    Cookie = 25,
    Expect = 26,
    From = 27,
    Host = 28,
    IfMatch = 29,
    IfModifiedSince = 30,
    IfNoneMatch = 31,
    IfRange = 32,
    IfUnmodifiedSince = 33,
    MaxForwards = 34,
    ProxyAuthorization = 35,
    Referer = 36,
    Range = 37,
    Te = 38,
    Translate = 39,
    UserAgent = 40,
    RequestMaximum = 41,
    AcceptRanges = 20,
    Age = 21,
    Etag = 22,
    Location = 23,
    ProxyAuthenticate = 24,
    RetryAfter = 25,
    Server = 26,
    SetCookie = 27,
    Vary = 28,
    WwwAuthenticate = 29,
    ResponseMaximum = 30,
    Maximum = 41,
};
pub const HttpHeaderCacheControl = HTTP_HEADER_ID.CacheControl;
pub const HttpHeaderConnection = HTTP_HEADER_ID.Connection;
pub const HttpHeaderDate = HTTP_HEADER_ID.Date;
pub const HttpHeaderKeepAlive = HTTP_HEADER_ID.KeepAlive;
pub const HttpHeaderPragma = HTTP_HEADER_ID.Pragma;
pub const HttpHeaderTrailer = HTTP_HEADER_ID.Trailer;
pub const HttpHeaderTransferEncoding = HTTP_HEADER_ID.TransferEncoding;
pub const HttpHeaderUpgrade = HTTP_HEADER_ID.Upgrade;
pub const HttpHeaderVia = HTTP_HEADER_ID.Via;
pub const HttpHeaderWarning = HTTP_HEADER_ID.Warning;
pub const HttpHeaderAllow = HTTP_HEADER_ID.Allow;
pub const HttpHeaderContentLength = HTTP_HEADER_ID.ContentLength;
pub const HttpHeaderContentType = HTTP_HEADER_ID.ContentType;
pub const HttpHeaderContentEncoding = HTTP_HEADER_ID.ContentEncoding;
pub const HttpHeaderContentLanguage = HTTP_HEADER_ID.ContentLanguage;
pub const HttpHeaderContentLocation = HTTP_HEADER_ID.ContentLocation;
pub const HttpHeaderContentMd5 = HTTP_HEADER_ID.ContentMd5;
pub const HttpHeaderContentRange = HTTP_HEADER_ID.ContentRange;
pub const HttpHeaderExpires = HTTP_HEADER_ID.Expires;
pub const HttpHeaderLastModified = HTTP_HEADER_ID.LastModified;
pub const HttpHeaderAccept = HTTP_HEADER_ID.Accept;
pub const HttpHeaderAcceptCharset = HTTP_HEADER_ID.AcceptCharset;
pub const HttpHeaderAcceptEncoding = HTTP_HEADER_ID.AcceptEncoding;
pub const HttpHeaderAcceptLanguage = HTTP_HEADER_ID.AcceptLanguage;
pub const HttpHeaderAuthorization = HTTP_HEADER_ID.Authorization;
pub const HttpHeaderCookie = HTTP_HEADER_ID.Cookie;
pub const HttpHeaderExpect = HTTP_HEADER_ID.Expect;
pub const HttpHeaderFrom = HTTP_HEADER_ID.From;
pub const HttpHeaderHost = HTTP_HEADER_ID.Host;
pub const HttpHeaderIfMatch = HTTP_HEADER_ID.IfMatch;
pub const HttpHeaderIfModifiedSince = HTTP_HEADER_ID.IfModifiedSince;
pub const HttpHeaderIfNoneMatch = HTTP_HEADER_ID.IfNoneMatch;
pub const HttpHeaderIfRange = HTTP_HEADER_ID.IfRange;
pub const HttpHeaderIfUnmodifiedSince = HTTP_HEADER_ID.IfUnmodifiedSince;
pub const HttpHeaderMaxForwards = HTTP_HEADER_ID.MaxForwards;
pub const HttpHeaderProxyAuthorization = HTTP_HEADER_ID.ProxyAuthorization;
pub const HttpHeaderReferer = HTTP_HEADER_ID.Referer;
pub const HttpHeaderRange = HTTP_HEADER_ID.Range;
pub const HttpHeaderTe = HTTP_HEADER_ID.Te;
pub const HttpHeaderTranslate = HTTP_HEADER_ID.Translate;
pub const HttpHeaderUserAgent = HTTP_HEADER_ID.UserAgent;
pub const HttpHeaderRequestMaximum = HTTP_HEADER_ID.RequestMaximum;
pub const HttpHeaderAcceptRanges = HTTP_HEADER_ID.AcceptRanges;
pub const HttpHeaderAge = HTTP_HEADER_ID.Age;
pub const HttpHeaderEtag = HTTP_HEADER_ID.Etag;
pub const HttpHeaderLocation = HTTP_HEADER_ID.Location;
pub const HttpHeaderProxyAuthenticate = HTTP_HEADER_ID.ProxyAuthenticate;
pub const HttpHeaderRetryAfter = HTTP_HEADER_ID.RetryAfter;
pub const HttpHeaderServer = HTTP_HEADER_ID.Server;
pub const HttpHeaderSetCookie = HTTP_HEADER_ID.SetCookie;
pub const HttpHeaderVary = HTTP_HEADER_ID.Vary;
pub const HttpHeaderWwwAuthenticate = HTTP_HEADER_ID.WwwAuthenticate;
pub const HttpHeaderResponseMaximum = HTTP_HEADER_ID.ResponseMaximum;
pub const HttpHeaderMaximum = HTTP_HEADER_ID.Maximum;

pub const HTTP_KNOWN_HEADER = extern struct {
    RawValueLength: u16,
    pRawValue: [*:0]const u8,
};

pub const HTTP_UNKNOWN_HEADER = extern struct {
    NameLength: u16,
    RawValueLength: u16,
    pName: [*:0]const u8,
    pRawValue: [*:0]const u8,
};

pub const HTTP_LOG_DATA_TYPE = extern enum(i32) {
    s = 0,
};
pub const HttpLogDataTypeFields = HTTP_LOG_DATA_TYPE.s;

pub const HTTP_LOG_DATA = extern struct {
    Type: HTTP_LOG_DATA_TYPE,
};

pub const HTTP_LOG_FIELDS_DATA = extern struct {
    Base: HTTP_LOG_DATA,
    UserNameLength: u16,
    UriStemLength: u16,
    ClientIpLength: u16,
    ServerNameLength: u16,
    ServiceNameLength: u16,
    ServerIpLength: u16,
    MethodLength: u16,
    UriQueryLength: u16,
    HostLength: u16,
    UserAgentLength: u16,
    CookieLength: u16,
    ReferrerLength: u16,
    UserName: [*]u16,
    UriStem: [*]u16,
    ClientIp: [*]u8,
    ServerName: [*]u8,
    ServiceName: [*]u8,
    ServerIp: [*]u8,
    Method: [*]u8,
    UriQuery: [*]u8,
    Host: [*]u8,
    UserAgent: [*]u8,
    Cookie: [*]u8,
    Referrer: [*]u8,
    ServerPort: u16,
    ProtocolStatus: u16,
    Win32Status: u32,
    MethodNum: HTTP_VERB,
    SubStatus: u16,
};

pub const HTTP_DATA_CHUNK_TYPE = extern enum(i32) {
    FromMemory = 0,
    FromFileHandle = 1,
    FromFragmentCache = 2,
    FromFragmentCacheEx = 3,
    Maximum = 4,
};
pub const HttpDataChunkFromMemory = HTTP_DATA_CHUNK_TYPE.FromMemory;
pub const HttpDataChunkFromFileHandle = HTTP_DATA_CHUNK_TYPE.FromFileHandle;
pub const HttpDataChunkFromFragmentCache = HTTP_DATA_CHUNK_TYPE.FromFragmentCache;
pub const HttpDataChunkFromFragmentCacheEx = HTTP_DATA_CHUNK_TYPE.FromFragmentCacheEx;
pub const HttpDataChunkMaximum = HTTP_DATA_CHUNK_TYPE.Maximum;

pub const HTTP_DATA_CHUNK = extern struct {
    DataChunkType: HTTP_DATA_CHUNK_TYPE,
    Anonymous: _Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const HTTP_REQUEST_HEADERS = extern struct {
    UnknownHeaderCount: u16,
    pUnknownHeaders: *HTTP_UNKNOWN_HEADER,
    TrailerCount: u16,
    pTrailers: *HTTP_UNKNOWN_HEADER,
    KnownHeaders: [41]HTTP_KNOWN_HEADER,
};

pub const HTTP_RESPONSE_HEADERS = extern struct {
    UnknownHeaderCount: u16,
    pUnknownHeaders: *HTTP_UNKNOWN_HEADER,
    TrailerCount: u16,
    pTrailers: *HTTP_UNKNOWN_HEADER,
    KnownHeaders: [30]HTTP_KNOWN_HEADER,
};

pub const HTTP_DELEGATE_REQUEST_PROPERTY_ID = extern enum(i32) {
    y = 0,
};
pub const DelegateRequestReservedProperty = HTTP_DELEGATE_REQUEST_PROPERTY_ID.y;

pub const HTTP_DELEGATE_REQUEST_PROPERTY_INFO = extern struct {
    ProperyId: HTTP_DELEGATE_REQUEST_PROPERTY_ID,
    PropertyInfoLength: u32,
    PropertyInfo: *c_void,
};

pub const HTTP_TRANSPORT_ADDRESS = extern struct {
    pRemoteAddress: *SOCKADDR,
    pLocalAddress: *SOCKADDR,
};

pub const HTTP_COOKED_URL = extern struct {
    FullUrlLength: u16,
    HostLength: u16,
    AbsPathLength: u16,
    QueryStringLength: u16,
    pFullUrl: [*:0]const u16,
    pHost: [*:0]const u16,
    pAbsPath: [*:0]const u16,
    pQueryString: [*:0]const u16,
};

pub const HTTP_AUTH_STATUS = extern enum(i32) {
    Success = 0,
    NotAuthenticated = 1,
    Failure = 2,
};
pub const HttpAuthStatusSuccess = HTTP_AUTH_STATUS.Success;
pub const HttpAuthStatusNotAuthenticated = HTTP_AUTH_STATUS.NotAuthenticated;
pub const HttpAuthStatusFailure = HTTP_AUTH_STATUS.Failure;

pub const HTTP_REQUEST_AUTH_TYPE = extern enum(i32) {
    None = 0,
    Basic = 1,
    Digest = 2,
    NTLM = 3,
    Negotiate = 4,
    Kerberos = 5,
};
pub const HttpRequestAuthTypeNone = HTTP_REQUEST_AUTH_TYPE.None;
pub const HttpRequestAuthTypeBasic = HTTP_REQUEST_AUTH_TYPE.Basic;
pub const HttpRequestAuthTypeDigest = HTTP_REQUEST_AUTH_TYPE.Digest;
pub const HttpRequestAuthTypeNTLM = HTTP_REQUEST_AUTH_TYPE.NTLM;
pub const HttpRequestAuthTypeNegotiate = HTTP_REQUEST_AUTH_TYPE.Negotiate;
pub const HttpRequestAuthTypeKerberos = HTTP_REQUEST_AUTH_TYPE.Kerberos;

pub const HTTP_SSL_CLIENT_CERT_INFO = extern struct {
    CertFlags: u32,
    CertEncodedSize: u32,
    pCertEncoded: *u8,
    Token: HANDLE,
    CertDeniedByMapper: u8,
};

pub const HTTP_SSL_INFO = extern struct {
    ServerCertKeySize: u16,
    ConnectionKeySize: u16,
    ServerCertIssuerSize: u32,
    ServerCertSubjectSize: u32,
    pServerCertIssuer: [*:0]const u8,
    pServerCertSubject: [*:0]const u8,
    pClientCertInfo: *HTTP_SSL_CLIENT_CERT_INFO,
    SslClientCertNegotiated: u32,
};

pub const HTTP_SSL_PROTOCOL_INFO = extern struct {
    Protocol: u32,
    CipherType: u32,
    CipherStrength: u32,
    HashType: u32,
    HashStrength: u32,
    KeyExchangeType: u32,
    KeyExchangeStrength: u32,
};

pub const HTTP_REQUEST_SIZING_TYPE = extern enum(i32) {
    TlsHandshakeLeg1ClientData = 0,
    TlsHandshakeLeg1ServerData = 1,
    TlsHandshakeLeg2ClientData = 2,
    TlsHandshakeLeg2ServerData = 3,
    Headers = 4,
    Max = 5,
};
pub const HttpRequestSizingTypeTlsHandshakeLeg1ClientData = HTTP_REQUEST_SIZING_TYPE.TlsHandshakeLeg1ClientData;
pub const HttpRequestSizingTypeTlsHandshakeLeg1ServerData = HTTP_REQUEST_SIZING_TYPE.TlsHandshakeLeg1ServerData;
pub const HttpRequestSizingTypeTlsHandshakeLeg2ClientData = HTTP_REQUEST_SIZING_TYPE.TlsHandshakeLeg2ClientData;
pub const HttpRequestSizingTypeTlsHandshakeLeg2ServerData = HTTP_REQUEST_SIZING_TYPE.TlsHandshakeLeg2ServerData;
pub const HttpRequestSizingTypeHeaders = HTTP_REQUEST_SIZING_TYPE.Headers;
pub const HttpRequestSizingTypeMax = HTTP_REQUEST_SIZING_TYPE.Max;

pub const HTTP_REQUEST_SIZING_INFO = extern struct {
    Flags: u64,
    RequestIndex: u32,
    RequestSizingCount: u32,
    RequestSizing: [5]u64,
};

pub const HTTP_REQUEST_TIMING_TYPE = extern enum(i32) {
    ConnectionStart = 0,
    DataStart = 1,
    TlsCertificateLoadStart = 2,
    TlsCertificateLoadEnd = 3,
    TlsHandshakeLeg1Start = 4,
    TlsHandshakeLeg1End = 5,
    TlsHandshakeLeg2Start = 6,
    TlsHandshakeLeg2End = 7,
    TlsAttributesQueryStart = 8,
    TlsAttributesQueryEnd = 9,
    TlsClientCertQueryStart = 10,
    TlsClientCertQueryEnd = 11,
    Http2StreamStart = 12,
    Http2HeaderDecodeStart = 13,
    Http2HeaderDecodeEnd = 14,
    RequestHeaderParseStart = 15,
    RequestHeaderParseEnd = 16,
    RequestRoutingStart = 17,
    RequestRoutingEnd = 18,
    RequestQueuedForInspection = 19,
    RequestDeliveredForInspection = 20,
    RequestReturnedAfterInspection = 21,
    RequestQueuedForDelegation = 22,
    RequestDeliveredForDelegation = 23,
    RequestReturnedAfterDelegation = 24,
    RequestQueuedForIO = 25,
    RequestDeliveredForIO = 26,
    Http3StreamStart = 27,
    Http3HeaderDecodeStart = 28,
    Http3HeaderDecodeEnd = 29,
    Max = 30,
};
pub const HttpRequestTimingTypeConnectionStart = HTTP_REQUEST_TIMING_TYPE.ConnectionStart;
pub const HttpRequestTimingTypeDataStart = HTTP_REQUEST_TIMING_TYPE.DataStart;
pub const HttpRequestTimingTypeTlsCertificateLoadStart = HTTP_REQUEST_TIMING_TYPE.TlsCertificateLoadStart;
pub const HttpRequestTimingTypeTlsCertificateLoadEnd = HTTP_REQUEST_TIMING_TYPE.TlsCertificateLoadEnd;
pub const HttpRequestTimingTypeTlsHandshakeLeg1Start = HTTP_REQUEST_TIMING_TYPE.TlsHandshakeLeg1Start;
pub const HttpRequestTimingTypeTlsHandshakeLeg1End = HTTP_REQUEST_TIMING_TYPE.TlsHandshakeLeg1End;
pub const HttpRequestTimingTypeTlsHandshakeLeg2Start = HTTP_REQUEST_TIMING_TYPE.TlsHandshakeLeg2Start;
pub const HttpRequestTimingTypeTlsHandshakeLeg2End = HTTP_REQUEST_TIMING_TYPE.TlsHandshakeLeg2End;
pub const HttpRequestTimingTypeTlsAttributesQueryStart = HTTP_REQUEST_TIMING_TYPE.TlsAttributesQueryStart;
pub const HttpRequestTimingTypeTlsAttributesQueryEnd = HTTP_REQUEST_TIMING_TYPE.TlsAttributesQueryEnd;
pub const HttpRequestTimingTypeTlsClientCertQueryStart = HTTP_REQUEST_TIMING_TYPE.TlsClientCertQueryStart;
pub const HttpRequestTimingTypeTlsClientCertQueryEnd = HTTP_REQUEST_TIMING_TYPE.TlsClientCertQueryEnd;
pub const HttpRequestTimingTypeHttp2StreamStart = HTTP_REQUEST_TIMING_TYPE.Http2StreamStart;
pub const HttpRequestTimingTypeHttp2HeaderDecodeStart = HTTP_REQUEST_TIMING_TYPE.Http2HeaderDecodeStart;
pub const HttpRequestTimingTypeHttp2HeaderDecodeEnd = HTTP_REQUEST_TIMING_TYPE.Http2HeaderDecodeEnd;
pub const HttpRequestTimingTypeRequestHeaderParseStart = HTTP_REQUEST_TIMING_TYPE.RequestHeaderParseStart;
pub const HttpRequestTimingTypeRequestHeaderParseEnd = HTTP_REQUEST_TIMING_TYPE.RequestHeaderParseEnd;
pub const HttpRequestTimingTypeRequestRoutingStart = HTTP_REQUEST_TIMING_TYPE.RequestRoutingStart;
pub const HttpRequestTimingTypeRequestRoutingEnd = HTTP_REQUEST_TIMING_TYPE.RequestRoutingEnd;
pub const HttpRequestTimingTypeRequestQueuedForInspection = HTTP_REQUEST_TIMING_TYPE.RequestQueuedForInspection;
pub const HttpRequestTimingTypeRequestDeliveredForInspection = HTTP_REQUEST_TIMING_TYPE.RequestDeliveredForInspection;
pub const HttpRequestTimingTypeRequestReturnedAfterInspection = HTTP_REQUEST_TIMING_TYPE.RequestReturnedAfterInspection;
pub const HttpRequestTimingTypeRequestQueuedForDelegation = HTTP_REQUEST_TIMING_TYPE.RequestQueuedForDelegation;
pub const HttpRequestTimingTypeRequestDeliveredForDelegation = HTTP_REQUEST_TIMING_TYPE.RequestDeliveredForDelegation;
pub const HttpRequestTimingTypeRequestReturnedAfterDelegation = HTTP_REQUEST_TIMING_TYPE.RequestReturnedAfterDelegation;
pub const HttpRequestTimingTypeRequestQueuedForIO = HTTP_REQUEST_TIMING_TYPE.RequestQueuedForIO;
pub const HttpRequestTimingTypeRequestDeliveredForIO = HTTP_REQUEST_TIMING_TYPE.RequestDeliveredForIO;
pub const HttpRequestTimingTypeHttp3StreamStart = HTTP_REQUEST_TIMING_TYPE.Http3StreamStart;
pub const HttpRequestTimingTypeHttp3HeaderDecodeStart = HTTP_REQUEST_TIMING_TYPE.Http3HeaderDecodeStart;
pub const HttpRequestTimingTypeHttp3HeaderDecodeEnd = HTTP_REQUEST_TIMING_TYPE.Http3HeaderDecodeEnd;
pub const HttpRequestTimingTypeMax = HTTP_REQUEST_TIMING_TYPE.Max;

pub const HTTP_REQUEST_TIMING_INFO = extern struct {
    RequestTimingCount: u32,
    RequestTiming: [30]u64,
};

pub const HTTP_REQUEST_INFO_TYPE = extern enum(i32) {
    Auth = 0,
    ChannelBind = 1,
    SslProtocol = 2,
    SslTokenBindingDraft = 3,
    SslTokenBinding = 4,
    RequestTiming = 5,
    TcpInfoV0 = 6,
    RequestSizing = 7,
    QuicStats = 8,
    TcpInfoV1 = 9,
};
pub const HttpRequestInfoTypeAuth = HTTP_REQUEST_INFO_TYPE.Auth;
pub const HttpRequestInfoTypeChannelBind = HTTP_REQUEST_INFO_TYPE.ChannelBind;
pub const HttpRequestInfoTypeSslProtocol = HTTP_REQUEST_INFO_TYPE.SslProtocol;
pub const HttpRequestInfoTypeSslTokenBindingDraft = HTTP_REQUEST_INFO_TYPE.SslTokenBindingDraft;
pub const HttpRequestInfoTypeSslTokenBinding = HTTP_REQUEST_INFO_TYPE.SslTokenBinding;
pub const HttpRequestInfoTypeRequestTiming = HTTP_REQUEST_INFO_TYPE.RequestTiming;
pub const HttpRequestInfoTypeTcpInfoV0 = HTTP_REQUEST_INFO_TYPE.TcpInfoV0;
pub const HttpRequestInfoTypeRequestSizing = HTTP_REQUEST_INFO_TYPE.RequestSizing;
pub const HttpRequestInfoTypeQuicStats = HTTP_REQUEST_INFO_TYPE.QuicStats;
pub const HttpRequestInfoTypeTcpInfoV1 = HTTP_REQUEST_INFO_TYPE.TcpInfoV1;

pub const HTTP_REQUEST_INFO = extern struct {
    InfoType: HTTP_REQUEST_INFO_TYPE,
    InfoLength: u32,
    pInfo: *c_void,
};

pub const HTTP_REQUEST_AUTH_INFO = extern struct {
    AuthStatus: HTTP_AUTH_STATUS,
    SecStatus: i32,
    Flags: u32,
    AuthType: HTTP_REQUEST_AUTH_TYPE,
    AccessToken: HANDLE,
    ContextAttributes: u32,
    PackedContextLength: u32,
    PackedContextType: u32,
    PackedContext: *c_void,
    MutualAuthDataLength: u32,
    pMutualAuthData: [*]u8,
    PackageNameLength: u16,
    pPackageName: PWSTR,
};

pub const HTTP_REQUEST_V1 = extern struct {
    Flags: u32,
    ConnectionId: u64,
    RequestId: u64,
    UrlContext: u64,
    Version: HTTP_VERSION,
    Verb: HTTP_VERB,
    UnknownVerbLength: u16,
    RawUrlLength: u16,
    pUnknownVerb: [*:0]const u8,
    pRawUrl: [*:0]const u8,
    CookedUrl: HTTP_COOKED_URL,
    Address: HTTP_TRANSPORT_ADDRESS,
    Headers: HTTP_REQUEST_HEADERS,
    BytesReceived: u64,
    EntityChunkCount: u16,
    pEntityChunks: *HTTP_DATA_CHUNK,
    RawConnectionId: u64,
    pSslInfo: *HTTP_SSL_INFO,
};

pub const HTTP_REQUEST_V2 = extern struct {
    __AnonymousBase_http_L1816_C35: HTTP_REQUEST_V1,
    RequestInfoCount: u16,
    pRequestInfo: *HTTP_REQUEST_INFO,
};

pub const HTTP_RESPONSE_V1 = extern struct {
    Flags: u32,
    Version: HTTP_VERSION,
    StatusCode: u16,
    ReasonLength: u16,
    pReason: [*:0]const u8,
    Headers: HTTP_RESPONSE_HEADERS,
    EntityChunkCount: u16,
    pEntityChunks: *HTTP_DATA_CHUNK,
};

pub const HTTP_RESPONSE_INFO_TYPE = extern enum(i32) {
    MultipleKnownHeaders = 0,
    AuthenticationProperty = 1,
    QoSProperty = 2,
    ChannelBind = 3,
};
pub const HttpResponseInfoTypeMultipleKnownHeaders = HTTP_RESPONSE_INFO_TYPE.MultipleKnownHeaders;
pub const HttpResponseInfoTypeAuthenticationProperty = HTTP_RESPONSE_INFO_TYPE.AuthenticationProperty;
pub const HttpResponseInfoTypeQoSProperty = HTTP_RESPONSE_INFO_TYPE.QoSProperty;
pub const HttpResponseInfoTypeChannelBind = HTTP_RESPONSE_INFO_TYPE.ChannelBind;

pub const HTTP_RESPONSE_INFO = extern struct {
    Type: HTTP_RESPONSE_INFO_TYPE,
    Length: u32,
    pInfo: *c_void,
};

pub const HTTP_MULTIPLE_KNOWN_HEADERS = extern struct {
    HeaderId: HTTP_HEADER_ID,
    Flags: u32,
    KnownHeaderCount: u16,
    KnownHeaders: *HTTP_KNOWN_HEADER,
};

pub const HTTP_RESPONSE_V2 = extern struct {
    __AnonymousBase_http_L2003_C36: HTTP_RESPONSE_V1,
    ResponseInfoCount: u16,
    pResponseInfo: *HTTP_RESPONSE_INFO,
};

pub const HTTPAPI_VERSION = extern struct {
    HttpApiMajorVersion: u16,
    HttpApiMinorVersion: u16,
};

pub const HTTP_CACHE_POLICY_TYPE = extern enum(i32) {
    Nocache = 0,
    UserInvalidates = 1,
    TimeToLive = 2,
    Maximum = 3,
};
pub const HttpCachePolicyNocache = HTTP_CACHE_POLICY_TYPE.Nocache;
pub const HttpCachePolicyUserInvalidates = HTTP_CACHE_POLICY_TYPE.UserInvalidates;
pub const HttpCachePolicyTimeToLive = HTTP_CACHE_POLICY_TYPE.TimeToLive;
pub const HttpCachePolicyMaximum = HTTP_CACHE_POLICY_TYPE.Maximum;

pub const HTTP_CACHE_POLICY = extern struct {
    Policy: HTTP_CACHE_POLICY_TYPE,
    SecondsToLive: u32,
};

pub const HTTP_SERVICE_CONFIG_ID = extern enum(i32) {
    IPListenList = 0,
    SSLCertInfo = 1,
    UrlAclInfo = 2,
    Timeout = 3,
    Cache = 4,
    SslSniCertInfo = 5,
    SslCcsCertInfo = 6,
    Setting = 7,
    SslCertInfoEx = 8,
    SslSniCertInfoEx = 9,
    SslCcsCertInfoEx = 10,
    SslScopedCcsCertInfo = 11,
    SslScopedCcsCertInfoEx = 12,
    Max = 13,
};
pub const HttpServiceConfigIPListenList = HTTP_SERVICE_CONFIG_ID.IPListenList;
pub const HttpServiceConfigSSLCertInfo = HTTP_SERVICE_CONFIG_ID.SSLCertInfo;
pub const HttpServiceConfigUrlAclInfo = HTTP_SERVICE_CONFIG_ID.UrlAclInfo;
pub const HttpServiceConfigTimeout = HTTP_SERVICE_CONFIG_ID.Timeout;
pub const HttpServiceConfigCache = HTTP_SERVICE_CONFIG_ID.Cache;
pub const HttpServiceConfigSslSniCertInfo = HTTP_SERVICE_CONFIG_ID.SslSniCertInfo;
pub const HttpServiceConfigSslCcsCertInfo = HTTP_SERVICE_CONFIG_ID.SslCcsCertInfo;
pub const HttpServiceConfigSetting = HTTP_SERVICE_CONFIG_ID.Setting;
pub const HttpServiceConfigSslCertInfoEx = HTTP_SERVICE_CONFIG_ID.SslCertInfoEx;
pub const HttpServiceConfigSslSniCertInfoEx = HTTP_SERVICE_CONFIG_ID.SslSniCertInfoEx;
pub const HttpServiceConfigSslCcsCertInfoEx = HTTP_SERVICE_CONFIG_ID.SslCcsCertInfoEx;
pub const HttpServiceConfigSslScopedCcsCertInfo = HTTP_SERVICE_CONFIG_ID.SslScopedCcsCertInfo;
pub const HttpServiceConfigSslScopedCcsCertInfoEx = HTTP_SERVICE_CONFIG_ID.SslScopedCcsCertInfoEx;
pub const HttpServiceConfigMax = HTTP_SERVICE_CONFIG_ID.Max;

pub const HTTP_SERVICE_CONFIG_QUERY_TYPE = extern enum(i32) {
    Exact = 0,
    Next = 1,
    Max = 2,
};
pub const HttpServiceConfigQueryExact = HTTP_SERVICE_CONFIG_QUERY_TYPE.Exact;
pub const HttpServiceConfigQueryNext = HTTP_SERVICE_CONFIG_QUERY_TYPE.Next;
pub const HttpServiceConfigQueryMax = HTTP_SERVICE_CONFIG_QUERY_TYPE.Max;

pub const HTTP_SERVICE_CONFIG_SSL_KEY = extern struct {
    pIpPort: *SOCKADDR,
};

pub const HTTP_SERVICE_CONFIG_SSL_KEY_EX = extern struct {
    IpPort: SOCKADDR_STORAGE,
};

pub const HTTP_SERVICE_CONFIG_SSL_SNI_KEY = extern struct {
    IpPort: SOCKADDR_STORAGE,
    Host: PWSTR,
};

pub const HTTP_SERVICE_CONFIG_SSL_CCS_KEY = extern struct {
    LocalAddress: SOCKADDR_STORAGE,
};

pub const HTTP_SERVICE_CONFIG_SSL_PARAM = extern struct {
    SslHashLength: u32,
    pSslHash: *c_void,
    AppId: Guid,
    pSslCertStoreName: PWSTR,
    DefaultCertCheckMode: u32,
    DefaultRevocationFreshnessTime: u32,
    DefaultRevocationUrlRetrievalTimeout: u32,
    pDefaultSslCtlIdentifier: PWSTR,
    pDefaultSslCtlStoreName: PWSTR,
    DefaultFlags: u32,
};

pub const HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE = extern enum(i32) {
    Http2Window = 0,
    Http2SettingsLimits = 1,
    HttpPerformance = 2,
    Max = 3,
};
pub const ExParamTypeHttp2Window = HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE.Http2Window;
pub const ExParamTypeHttp2SettingsLimits = HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE.Http2SettingsLimits;
pub const ExParamTypeHttpPerformance = HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE.HttpPerformance;
pub const ExParamTypeMax = HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE.Max;

pub const HTTP2_WINDOW_SIZE_PARAM = extern struct {
    Http2ReceiveWindowSize: u32,
};

pub const HTTP2_SETTINGS_LIMITS_PARAM = extern struct {
    Http2MaxSettingsPerFrame: u32,
    Http2MaxSettingsPerMinute: u32,
};

pub const HTTP_PERFORMANCE_PARAM = extern struct {
    SendBufferingFlags: u64,
    EnableAggressiveICW: u8,
    MaxBufferedSendBytes: u32,
    MaxConcurrentClientStreams: u32,
};

pub const HTTP_SERVICE_CONFIG_SSL_PARAM_EX = extern struct {
    ParamType: HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE,
    Flags: u64,
    Anonymous: _Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const HTTP_SERVICE_CONFIG_SSL_SET = extern struct {
    KeyDesc: HTTP_SERVICE_CONFIG_SSL_KEY,
    ParamDesc: HTTP_SERVICE_CONFIG_SSL_PARAM,
};

pub const HTTP_SERVICE_CONFIG_SSL_SNI_SET = extern struct {
    KeyDesc: HTTP_SERVICE_CONFIG_SSL_SNI_KEY,
    ParamDesc: HTTP_SERVICE_CONFIG_SSL_PARAM,
};

pub const HTTP_SERVICE_CONFIG_SSL_CCS_SET = extern struct {
    KeyDesc: HTTP_SERVICE_CONFIG_SSL_CCS_KEY,
    ParamDesc: HTTP_SERVICE_CONFIG_SSL_PARAM,
};

pub const HTTP_SERVICE_CONFIG_SSL_SET_EX = extern struct {
    KeyDesc: HTTP_SERVICE_CONFIG_SSL_KEY_EX,
    ParamDesc: HTTP_SERVICE_CONFIG_SSL_PARAM_EX,
};

pub const HTTP_SERVICE_CONFIG_SSL_SNI_SET_EX = extern struct {
    KeyDesc: HTTP_SERVICE_CONFIG_SSL_SNI_KEY,
    ParamDesc: HTTP_SERVICE_CONFIG_SSL_PARAM_EX,
};

pub const HTTP_SERVICE_CONFIG_SSL_CCS_SET_EX = extern struct {
    KeyDesc: HTTP_SERVICE_CONFIG_SSL_CCS_KEY,
    ParamDesc: HTTP_SERVICE_CONFIG_SSL_PARAM_EX,
};

pub const HTTP_SERVICE_CONFIG_SSL_QUERY = extern struct {
    QueryDesc: HTTP_SERVICE_CONFIG_QUERY_TYPE,
    KeyDesc: HTTP_SERVICE_CONFIG_SSL_KEY,
    dwToken: u32,
};

pub const HTTP_SERVICE_CONFIG_SSL_SNI_QUERY = extern struct {
    QueryDesc: HTTP_SERVICE_CONFIG_QUERY_TYPE,
    KeyDesc: HTTP_SERVICE_CONFIG_SSL_SNI_KEY,
    dwToken: u32,
};

pub const HTTP_SERVICE_CONFIG_SSL_CCS_QUERY = extern struct {
    QueryDesc: HTTP_SERVICE_CONFIG_QUERY_TYPE,
    KeyDesc: HTTP_SERVICE_CONFIG_SSL_CCS_KEY,
    dwToken: u32,
};

pub const HTTP_SERVICE_CONFIG_SSL_QUERY_EX = extern struct {
    QueryDesc: HTTP_SERVICE_CONFIG_QUERY_TYPE,
    KeyDesc: HTTP_SERVICE_CONFIG_SSL_KEY_EX,
    dwToken: u32,
    ParamType: HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE,
};

pub const HTTP_SERVICE_CONFIG_SSL_SNI_QUERY_EX = extern struct {
    QueryDesc: HTTP_SERVICE_CONFIG_QUERY_TYPE,
    KeyDesc: HTTP_SERVICE_CONFIG_SSL_SNI_KEY,
    dwToken: u32,
    ParamType: HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE,
};

pub const HTTP_SERVICE_CONFIG_SSL_CCS_QUERY_EX = extern struct {
    QueryDesc: HTTP_SERVICE_CONFIG_QUERY_TYPE,
    KeyDesc: HTTP_SERVICE_CONFIG_SSL_CCS_KEY,
    dwToken: u32,
    ParamType: HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE,
};

pub const HTTP_SERVICE_CONFIG_IP_LISTEN_PARAM = extern struct {
    AddrLength: u16,
    pAddress: *SOCKADDR,
};

pub const HTTP_SERVICE_CONFIG_IP_LISTEN_QUERY = extern struct {
    AddrCount: u32,
    AddrList: [1]SOCKADDR_STORAGE,
};

pub const HTTP_SERVICE_CONFIG_URLACL_KEY = extern struct {
    pUrlPrefix: PWSTR,
};

pub const HTTP_SERVICE_CONFIG_URLACL_PARAM = extern struct {
    pStringSecurityDescriptor: PWSTR,
};

pub const HTTP_SERVICE_CONFIG_URLACL_SET = extern struct {
    KeyDesc: HTTP_SERVICE_CONFIG_URLACL_KEY,
    ParamDesc: HTTP_SERVICE_CONFIG_URLACL_PARAM,
};

pub const HTTP_SERVICE_CONFIG_URLACL_QUERY = extern struct {
    QueryDesc: HTTP_SERVICE_CONFIG_QUERY_TYPE,
    KeyDesc: HTTP_SERVICE_CONFIG_URLACL_KEY,
    dwToken: u32,
};

pub const HTTP_SERVICE_CONFIG_CACHE_KEY = extern enum(i32) {
    MaxCacheResponseSize = 0,
    CacheRangeChunkSize = 1,
};
pub const MaxCacheResponseSize = HTTP_SERVICE_CONFIG_CACHE_KEY.MaxCacheResponseSize;
pub const CacheRangeChunkSize = HTTP_SERVICE_CONFIG_CACHE_KEY.CacheRangeChunkSize;

pub const HTTP_SERVICE_CONFIG_CACHE_SET = extern struct {
    KeyDesc: HTTP_SERVICE_CONFIG_CACHE_KEY,
    ParamDesc: u32,
};

pub const HTTP_REQUEST_PROPERTY = extern enum(i32) {
    Isb = 0,
    TcpInfoV0 = 1,
    QuicStats = 2,
    TcpInfoV1 = 3,
    Sni = 4,
};
pub const HttpRequestPropertyIsb = HTTP_REQUEST_PROPERTY.Isb;
pub const HttpRequestPropertyTcpInfoV0 = HTTP_REQUEST_PROPERTY.TcpInfoV0;
pub const HttpRequestPropertyQuicStats = HTTP_REQUEST_PROPERTY.QuicStats;
pub const HttpRequestPropertyTcpInfoV1 = HTTP_REQUEST_PROPERTY.TcpInfoV1;
pub const HttpRequestPropertySni = HTTP_REQUEST_PROPERTY.Sni;

pub const HTTP_QUERY_REQUEST_QUALIFIER_TCP = extern struct {
    Freshness: u64,
};

pub const HTTP_QUERY_REQUEST_QUALIFIER_QUIC = extern struct {
    Freshness: u64,
};

pub const HTTP_REQUEST_PROPERTY_SNI = extern struct {
    Hostname: [256]u16,
    Flags: u32,
};

pub const WINHTTP_ASYNC_RESULT = extern struct {
    dwResult: usize,
    dwError: u32,
};

pub const URL_COMPONENTS = extern struct {
    dwStructSize: u32,
    lpszScheme: PWSTR,
    dwSchemeLength: u32,
    nScheme: INTERNET_SCHEME,
    lpszHostName: PWSTR,
    dwHostNameLength: u32,
    nPort: u16,
    lpszUserName: PWSTR,
    dwUserNameLength: u32,
    lpszPassword: PWSTR,
    dwPasswordLength: u32,
    lpszUrlPath: PWSTR,
    dwUrlPathLength: u32,
    lpszExtraInfo: PWSTR,
    dwExtraInfoLength: u32,
};

pub const WINHTTP_PROXY_INFO = extern struct {
    dwAccessType: WINHTTP_ACCESS_TYPE,
    lpszProxy: PWSTR,
    lpszProxyBypass: PWSTR,
};

pub const WINHTTP_AUTOPROXY_OPTIONS = extern struct {
    dwFlags: u32,
    dwAutoDetectFlags: u32,
    lpszAutoConfigUrl: [*:0]const u16,
    lpvReserved: *c_void,
    dwReserved: u32,
    fAutoLogonIfChallenged: BOOL,
};

pub const WINHTTP_PROXY_RESULT_ENTRY = extern struct {
    fProxy: BOOL,
    fBypass: BOOL,
    ProxyScheme: INTERNET_SCHEME,
    pwszProxy: PWSTR,
    ProxyPort: u16,
};

pub const WINHTTP_PROXY_RESULT = extern struct {
    cEntries: u32,
    pEntries: *WINHTTP_PROXY_RESULT_ENTRY,
};

pub const WINHTTP_PROXY_RESULT_EX = extern struct {
    cEntries: u32,
    pEntries: *WINHTTP_PROXY_RESULT_ENTRY,
    hProxyDetectionHandle: HANDLE,
    dwProxyInterfaceAffinity: u32,
};

pub const _WinHttpProxyNetworkKey = extern struct {
    pbBuffer: [128]u8,
};

pub const WINHTTP_PROXY_SETTINGS = extern struct {
    dwStructSize: u32,
    dwFlags: u32,
    dwCurrentSettingsVersion: u32,
    pwszConnectionName: PWSTR,
    pwszProxy: PWSTR,
    pwszProxyBypass: PWSTR,
    pwszAutoconfigUrl: PWSTR,
    pwszAutoconfigSecondaryUrl: PWSTR,
    dwAutoDiscoveryFlags: u32,
    pwszLastKnownGoodAutoConfigUrl: PWSTR,
    dwAutoconfigReloadDelayMins: u32,
    ftLastKnownDetectTime: FILETIME,
    dwDetectedInterfaceIpCount: u32,
    pdwDetectedInterfaceIp: *u32,
    cNetworkKeys: u32,
    pNetworkKeys: *_WinHttpProxyNetworkKey,
};

pub const WINHTTP_CERTIFICATE_INFO = extern struct {
    ftExpiry: FILETIME,
    ftStart: FILETIME,
    lpszSubjectInfo: PWSTR,
    lpszIssuerInfo: PWSTR,
    lpszProtocolName: PWSTR,
    lpszSignatureAlgName: PWSTR,
    lpszEncryptionAlgName: PWSTR,
    dwKeySize: u32,
};

pub const WINHTTP_REQUEST_TIME_ENTRY = extern enum(i32) {
    ProxyDetectionStart = 0,
    ProxyDetectionEnd = 1,
    ConnectionAcquireStart = 2,
    ConnectionAcquireWaitEnd = 3,
    ConnectionAcquireEnd = 4,
    NameResolutionStart = 5,
    NameResolutionEnd = 6,
    ConnectionEstablishmentStart = 7,
    ConnectionEstablishmentEnd = 8,
    TlsHandshakeClientLeg1Start = 9,
    TlsHandshakeClientLeg1End = 10,
    TlsHandshakeClientLeg2Start = 11,
    TlsHandshakeClientLeg2End = 12,
    TlsHandshakeClientLeg3Start = 13,
    TlsHandshakeClientLeg3End = 14,
    StreamWaitStart = 15,
    StreamWaitEnd = 16,
    SendRequestStart = 17,
    SendRequestHeadersCompressionStart = 18,
    SendRequestHeadersCompressionEnd = 19,
    SendRequestHeadersEnd = 20,
    SendRequestEnd = 21,
    ReceiveResponseStart = 22,
    ReceiveResponseHeadersDecompressionStart = 23,
    ReceiveResponseHeadersDecompressionEnd = 24,
    ReceiveResponseHeadersEnd = 25,
    ReceiveResponseBodyDecompressionDelta = 26,
    ReceiveResponseEnd = 27,
    ProxyTunnelStart = 28,
    ProxyTunnelEnd = 29,
    ProxyTlsHandshakeClientLeg1Start = 30,
    ProxyTlsHandshakeClientLeg1End = 31,
    ProxyTlsHandshakeClientLeg2Start = 32,
    ProxyTlsHandshakeClientLeg2End = 33,
    ProxyTlsHandshakeClientLeg3Start = 34,
    ProxyTlsHandshakeClientLeg3End = 35,
    RequestTimeLast = 36,
    RequestTimeMax = 64,
};
pub const WinHttpProxyDetectionStart = WINHTTP_REQUEST_TIME_ENTRY.ProxyDetectionStart;
pub const WinHttpProxyDetectionEnd = WINHTTP_REQUEST_TIME_ENTRY.ProxyDetectionEnd;
pub const WinHttpConnectionAcquireStart = WINHTTP_REQUEST_TIME_ENTRY.ConnectionAcquireStart;
pub const WinHttpConnectionAcquireWaitEnd = WINHTTP_REQUEST_TIME_ENTRY.ConnectionAcquireWaitEnd;
pub const WinHttpConnectionAcquireEnd = WINHTTP_REQUEST_TIME_ENTRY.ConnectionAcquireEnd;
pub const WinHttpNameResolutionStart = WINHTTP_REQUEST_TIME_ENTRY.NameResolutionStart;
pub const WinHttpNameResolutionEnd = WINHTTP_REQUEST_TIME_ENTRY.NameResolutionEnd;
pub const WinHttpConnectionEstablishmentStart = WINHTTP_REQUEST_TIME_ENTRY.ConnectionEstablishmentStart;
pub const WinHttpConnectionEstablishmentEnd = WINHTTP_REQUEST_TIME_ENTRY.ConnectionEstablishmentEnd;
pub const WinHttpTlsHandshakeClientLeg1Start = WINHTTP_REQUEST_TIME_ENTRY.TlsHandshakeClientLeg1Start;
pub const WinHttpTlsHandshakeClientLeg1End = WINHTTP_REQUEST_TIME_ENTRY.TlsHandshakeClientLeg1End;
pub const WinHttpTlsHandshakeClientLeg2Start = WINHTTP_REQUEST_TIME_ENTRY.TlsHandshakeClientLeg2Start;
pub const WinHttpTlsHandshakeClientLeg2End = WINHTTP_REQUEST_TIME_ENTRY.TlsHandshakeClientLeg2End;
pub const WinHttpTlsHandshakeClientLeg3Start = WINHTTP_REQUEST_TIME_ENTRY.TlsHandshakeClientLeg3Start;
pub const WinHttpTlsHandshakeClientLeg3End = WINHTTP_REQUEST_TIME_ENTRY.TlsHandshakeClientLeg3End;
pub const WinHttpStreamWaitStart = WINHTTP_REQUEST_TIME_ENTRY.StreamWaitStart;
pub const WinHttpStreamWaitEnd = WINHTTP_REQUEST_TIME_ENTRY.StreamWaitEnd;
pub const WinHttpSendRequestStart = WINHTTP_REQUEST_TIME_ENTRY.SendRequestStart;
pub const WinHttpSendRequestHeadersCompressionStart = WINHTTP_REQUEST_TIME_ENTRY.SendRequestHeadersCompressionStart;
pub const WinHttpSendRequestHeadersCompressionEnd = WINHTTP_REQUEST_TIME_ENTRY.SendRequestHeadersCompressionEnd;
pub const WinHttpSendRequestHeadersEnd = WINHTTP_REQUEST_TIME_ENTRY.SendRequestHeadersEnd;
pub const WinHttpSendRequestEnd = WINHTTP_REQUEST_TIME_ENTRY.SendRequestEnd;
pub const WinHttpReceiveResponseStart = WINHTTP_REQUEST_TIME_ENTRY.ReceiveResponseStart;
pub const WinHttpReceiveResponseHeadersDecompressionStart = WINHTTP_REQUEST_TIME_ENTRY.ReceiveResponseHeadersDecompressionStart;
pub const WinHttpReceiveResponseHeadersDecompressionEnd = WINHTTP_REQUEST_TIME_ENTRY.ReceiveResponseHeadersDecompressionEnd;
pub const WinHttpReceiveResponseHeadersEnd = WINHTTP_REQUEST_TIME_ENTRY.ReceiveResponseHeadersEnd;
pub const WinHttpReceiveResponseBodyDecompressionDelta = WINHTTP_REQUEST_TIME_ENTRY.ReceiveResponseBodyDecompressionDelta;
pub const WinHttpReceiveResponseEnd = WINHTTP_REQUEST_TIME_ENTRY.ReceiveResponseEnd;
pub const WinHttpProxyTunnelStart = WINHTTP_REQUEST_TIME_ENTRY.ProxyTunnelStart;
pub const WinHttpProxyTunnelEnd = WINHTTP_REQUEST_TIME_ENTRY.ProxyTunnelEnd;
pub const WinHttpProxyTlsHandshakeClientLeg1Start = WINHTTP_REQUEST_TIME_ENTRY.ProxyTlsHandshakeClientLeg1Start;
pub const WinHttpProxyTlsHandshakeClientLeg1End = WINHTTP_REQUEST_TIME_ENTRY.ProxyTlsHandshakeClientLeg1End;
pub const WinHttpProxyTlsHandshakeClientLeg2Start = WINHTTP_REQUEST_TIME_ENTRY.ProxyTlsHandshakeClientLeg2Start;
pub const WinHttpProxyTlsHandshakeClientLeg2End = WINHTTP_REQUEST_TIME_ENTRY.ProxyTlsHandshakeClientLeg2End;
pub const WinHttpProxyTlsHandshakeClientLeg3Start = WINHTTP_REQUEST_TIME_ENTRY.ProxyTlsHandshakeClientLeg3Start;
pub const WinHttpProxyTlsHandshakeClientLeg3End = WINHTTP_REQUEST_TIME_ENTRY.ProxyTlsHandshakeClientLeg3End;
pub const WinHttpRequestTimeLast = WINHTTP_REQUEST_TIME_ENTRY.RequestTimeLast;
pub const WinHttpRequestTimeMax = WINHTTP_REQUEST_TIME_ENTRY.RequestTimeMax;

pub const WINHTTP_REQUEST_STAT_ENTRY = extern enum(i32) {
    ConnectFailureCount = 0,
    ProxyFailureCount = 1,
    TlsHandshakeClientLeg1Size = 2,
    TlsHandshakeServerLeg1Size = 3,
    TlsHandshakeClientLeg2Size = 4,
    TlsHandshakeServerLeg2Size = 5,
    RequestHeadersSize = 6,
    RequestHeadersCompressedSize = 7,
    ResponseHeadersSize = 8,
    ResponseHeadersCompressedSize = 9,
    ResponseBodySize = 10,
    ResponseBodyCompressedSize = 11,
    ProxyTlsHandshakeClientLeg1Size = 12,
    ProxyTlsHandshakeServerLeg1Size = 13,
    ProxyTlsHandshakeClientLeg2Size = 14,
    ProxyTlsHandshakeServerLeg2Size = 15,
    RequestStatLast = 16,
    RequestStatMax = 32,
};
pub const WinHttpConnectFailureCount = WINHTTP_REQUEST_STAT_ENTRY.ConnectFailureCount;
pub const WinHttpProxyFailureCount = WINHTTP_REQUEST_STAT_ENTRY.ProxyFailureCount;
pub const WinHttpTlsHandshakeClientLeg1Size = WINHTTP_REQUEST_STAT_ENTRY.TlsHandshakeClientLeg1Size;
pub const WinHttpTlsHandshakeServerLeg1Size = WINHTTP_REQUEST_STAT_ENTRY.TlsHandshakeServerLeg1Size;
pub const WinHttpTlsHandshakeClientLeg2Size = WINHTTP_REQUEST_STAT_ENTRY.TlsHandshakeClientLeg2Size;
pub const WinHttpTlsHandshakeServerLeg2Size = WINHTTP_REQUEST_STAT_ENTRY.TlsHandshakeServerLeg2Size;
pub const WinHttpRequestHeadersSize = WINHTTP_REQUEST_STAT_ENTRY.RequestHeadersSize;
pub const WinHttpRequestHeadersCompressedSize = WINHTTP_REQUEST_STAT_ENTRY.RequestHeadersCompressedSize;
pub const WinHttpResponseHeadersSize = WINHTTP_REQUEST_STAT_ENTRY.ResponseHeadersSize;
pub const WinHttpResponseHeadersCompressedSize = WINHTTP_REQUEST_STAT_ENTRY.ResponseHeadersCompressedSize;
pub const WinHttpResponseBodySize = WINHTTP_REQUEST_STAT_ENTRY.ResponseBodySize;
pub const WinHttpResponseBodyCompressedSize = WINHTTP_REQUEST_STAT_ENTRY.ResponseBodyCompressedSize;
pub const WinHttpProxyTlsHandshakeClientLeg1Size = WINHTTP_REQUEST_STAT_ENTRY.ProxyTlsHandshakeClientLeg1Size;
pub const WinHttpProxyTlsHandshakeServerLeg1Size = WINHTTP_REQUEST_STAT_ENTRY.ProxyTlsHandshakeServerLeg1Size;
pub const WinHttpProxyTlsHandshakeClientLeg2Size = WINHTTP_REQUEST_STAT_ENTRY.ProxyTlsHandshakeClientLeg2Size;
pub const WinHttpProxyTlsHandshakeServerLeg2Size = WINHTTP_REQUEST_STAT_ENTRY.ProxyTlsHandshakeServerLeg2Size;
pub const WinHttpRequestStatLast = WINHTTP_REQUEST_STAT_ENTRY.RequestStatLast;
pub const WinHttpRequestStatMax = WINHTTP_REQUEST_STAT_ENTRY.RequestStatMax;

pub const WINHTTP_EXTENDED_HEADER = extern struct {
    Anonymous1: _Anonymous1_e__Union,
    Anonymous2: _Anonymous2_e__Union,
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
};

pub const WINHTTP_CREDS = extern struct {
    lpszUserName: PSTR,
    lpszPassword: PSTR,
    lpszRealm: PSTR,
    dwAuthScheme: WINHTTP_CREDS_AUTHSCHEME,
    lpszHostName: PSTR,
    dwPort: u32,
};

pub const WINHTTP_CREDS_EX = extern struct {
    lpszUserName: PSTR,
    lpszPassword: PSTR,
    lpszRealm: PSTR,
    dwAuthScheme: WINHTTP_CREDS_AUTHSCHEME,
    lpszHostName: PSTR,
    dwPort: u32,
    lpszUrl: PSTR,
};

pub const WINHTTP_STATUS_CALLBACK = fn(
    hInternet: *c_void,
    dwContext: usize,
    dwInternetStatus: u32,
    lpvStatusInformation: *c_void,
    dwStatusInformationLength: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const LPWINHTTP_STATUS_CALLBACK = fn(
) callconv(@import("std").os.windows.WINAPI) void;

pub const WINHTTP_CURRENT_USER_IE_PROXY_CONFIG = extern struct {
    fAutoDetect: BOOL,
    lpszAutoConfigUrl: PWSTR,
    lpszProxy: PWSTR,
    lpszProxyBypass: PWSTR,
};

pub const WINHTTP_WEB_SOCKET_OPERATION = extern enum(i32) {
    SEND_OPERATION = 0,
    RECEIVE_OPERATION = 1,
    CLOSE_OPERATION = 2,
    SHUTDOWN_OPERATION = 3,
};
pub const WINHTTP_WEB_SOCKET_SEND_OPERATION = WINHTTP_WEB_SOCKET_OPERATION.SEND_OPERATION;
pub const WINHTTP_WEB_SOCKET_RECEIVE_OPERATION = WINHTTP_WEB_SOCKET_OPERATION.RECEIVE_OPERATION;
pub const WINHTTP_WEB_SOCKET_CLOSE_OPERATION = WINHTTP_WEB_SOCKET_OPERATION.CLOSE_OPERATION;
pub const WINHTTP_WEB_SOCKET_SHUTDOWN_OPERATION = WINHTTP_WEB_SOCKET_OPERATION.SHUTDOWN_OPERATION;

pub const WINHTTP_WEB_SOCKET_BUFFER_TYPE = extern enum(i32) {
    BINARY_MESSAGE_BUFFER_TYPE = 0,
    BINARY_FRAGMENT_BUFFER_TYPE = 1,
    UTF8_MESSAGE_BUFFER_TYPE = 2,
    UTF8_FRAGMENT_BUFFER_TYPE = 3,
    CLOSE_BUFFER_TYPE = 4,
};
pub const WINHTTP_WEB_SOCKET_BINARY_MESSAGE_BUFFER_TYPE = WINHTTP_WEB_SOCKET_BUFFER_TYPE.BINARY_MESSAGE_BUFFER_TYPE;
pub const WINHTTP_WEB_SOCKET_BINARY_FRAGMENT_BUFFER_TYPE = WINHTTP_WEB_SOCKET_BUFFER_TYPE.BINARY_FRAGMENT_BUFFER_TYPE;
pub const WINHTTP_WEB_SOCKET_UTF8_MESSAGE_BUFFER_TYPE = WINHTTP_WEB_SOCKET_BUFFER_TYPE.UTF8_MESSAGE_BUFFER_TYPE;
pub const WINHTTP_WEB_SOCKET_UTF8_FRAGMENT_BUFFER_TYPE = WINHTTP_WEB_SOCKET_BUFFER_TYPE.UTF8_FRAGMENT_BUFFER_TYPE;
pub const WINHTTP_WEB_SOCKET_CLOSE_BUFFER_TYPE = WINHTTP_WEB_SOCKET_BUFFER_TYPE.CLOSE_BUFFER_TYPE;

pub const WINHTTP_WEB_SOCKET_CLOSE_STATUS = extern enum(i32) {
    SUCCESS_CLOSE_STATUS = 1000,
    ENDPOINT_TERMINATED_CLOSE_STATUS = 1001,
    PROTOCOL_ERROR_CLOSE_STATUS = 1002,
    INVALID_DATA_TYPE_CLOSE_STATUS = 1003,
    EMPTY_CLOSE_STATUS = 1005,
    ABORTED_CLOSE_STATUS = 1006,
    INVALID_PAYLOAD_CLOSE_STATUS = 1007,
    POLICY_VIOLATION_CLOSE_STATUS = 1008,
    MESSAGE_TOO_BIG_CLOSE_STATUS = 1009,
    UNSUPPORTED_EXTENSIONS_CLOSE_STATUS = 1010,
    SERVER_ERROR_CLOSE_STATUS = 1011,
    SECURE_HANDSHAKE_ERROR_CLOSE_STATUS = 1015,
};
pub const WINHTTP_WEB_SOCKET_SUCCESS_CLOSE_STATUS = WINHTTP_WEB_SOCKET_CLOSE_STATUS.SUCCESS_CLOSE_STATUS;
pub const WINHTTP_WEB_SOCKET_ENDPOINT_TERMINATED_CLOSE_STATUS = WINHTTP_WEB_SOCKET_CLOSE_STATUS.ENDPOINT_TERMINATED_CLOSE_STATUS;
pub const WINHTTP_WEB_SOCKET_PROTOCOL_ERROR_CLOSE_STATUS = WINHTTP_WEB_SOCKET_CLOSE_STATUS.PROTOCOL_ERROR_CLOSE_STATUS;
pub const WINHTTP_WEB_SOCKET_INVALID_DATA_TYPE_CLOSE_STATUS = WINHTTP_WEB_SOCKET_CLOSE_STATUS.INVALID_DATA_TYPE_CLOSE_STATUS;
pub const WINHTTP_WEB_SOCKET_EMPTY_CLOSE_STATUS = WINHTTP_WEB_SOCKET_CLOSE_STATUS.EMPTY_CLOSE_STATUS;
pub const WINHTTP_WEB_SOCKET_ABORTED_CLOSE_STATUS = WINHTTP_WEB_SOCKET_CLOSE_STATUS.ABORTED_CLOSE_STATUS;
pub const WINHTTP_WEB_SOCKET_INVALID_PAYLOAD_CLOSE_STATUS = WINHTTP_WEB_SOCKET_CLOSE_STATUS.INVALID_PAYLOAD_CLOSE_STATUS;
pub const WINHTTP_WEB_SOCKET_POLICY_VIOLATION_CLOSE_STATUS = WINHTTP_WEB_SOCKET_CLOSE_STATUS.POLICY_VIOLATION_CLOSE_STATUS;
pub const WINHTTP_WEB_SOCKET_MESSAGE_TOO_BIG_CLOSE_STATUS = WINHTTP_WEB_SOCKET_CLOSE_STATUS.MESSAGE_TOO_BIG_CLOSE_STATUS;
pub const WINHTTP_WEB_SOCKET_UNSUPPORTED_EXTENSIONS_CLOSE_STATUS = WINHTTP_WEB_SOCKET_CLOSE_STATUS.UNSUPPORTED_EXTENSIONS_CLOSE_STATUS;
pub const WINHTTP_WEB_SOCKET_SERVER_ERROR_CLOSE_STATUS = WINHTTP_WEB_SOCKET_CLOSE_STATUS.SERVER_ERROR_CLOSE_STATUS;
pub const WINHTTP_WEB_SOCKET_SECURE_HANDSHAKE_ERROR_CLOSE_STATUS = WINHTTP_WEB_SOCKET_CLOSE_STATUS.SECURE_HANDSHAKE_ERROR_CLOSE_STATUS;

pub const WINHTTP_WEB_SOCKET_ASYNC_RESULT = extern struct {
    AsyncResult: WINHTTP_ASYNC_RESULT,
    Operation: WINHTTP_WEB_SOCKET_OPERATION,
};

pub const WINHTTP_WEB_SOCKET_STATUS = extern struct {
    dwBytesTransferred: u32,
    eBufferType: WINHTTP_WEB_SOCKET_BUFFER_TYPE,
};

pub const INTERNET_DEFAULT_PORT = extern enum(u32) {
    HTTP_PORT = 80,
    HTTPS_PORT = 443,
    PORT = 0,
};
// TODO: enum 'INTERNET_DEFAULT_PORT' has known issues with its value aliases

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const WINHTTP_OPEN_REQUEST_FLAGS = extern enum(u32) {
    BYPASS_PROXY_CACHE = 256,
    ESCAPE_DISABLE = 64,
    ESCAPE_DISABLE_QUERY = 128,
    ESCAPE_PERCENT = 4,
    NULL_CODEPAGE = 8,
    REFRESH = 256,
    SECURE = 8388608,
    _,
};
pub const WINHTTP_FLAG_BYPASS_PROXY_CACHE = WINHTTP_OPEN_REQUEST_FLAGS.BYPASS_PROXY_CACHE;
pub const WINHTTP_FLAG_ESCAPE_DISABLE = WINHTTP_OPEN_REQUEST_FLAGS.ESCAPE_DISABLE;
pub const WINHTTP_FLAG_ESCAPE_DISABLE_QUERY = WINHTTP_OPEN_REQUEST_FLAGS.ESCAPE_DISABLE_QUERY;
pub const WINHTTP_FLAG_ESCAPE_PERCENT = WINHTTP_OPEN_REQUEST_FLAGS.ESCAPE_PERCENT;
pub const WINHTTP_FLAG_NULL_CODEPAGE = WINHTTP_OPEN_REQUEST_FLAGS.NULL_CODEPAGE;
pub const WINHTTP_FLAG_REFRESH = WINHTTP_OPEN_REQUEST_FLAGS.REFRESH;
pub const WINHTTP_FLAG_SECURE = WINHTTP_OPEN_REQUEST_FLAGS.SECURE;

pub const WIN_HTTP_CREATE_URL_FLAGS = extern enum(u32) {
    ESCAPE = 2147483648,
    REJECT_USERPWD = 16384,
    DECODE = 268435456,
};
pub const ICU_ESCAPE = WIN_HTTP_CREATE_URL_FLAGS.ESCAPE;
pub const ICU_REJECT_USERPWD = WIN_HTTP_CREATE_URL_FLAGS.REJECT_USERPWD;
pub const ICU_DECODE = WIN_HTTP_CREATE_URL_FLAGS.DECODE;

pub const HTTP_RECEIVE_HTTP_REQUEST_FLAGS = extern enum(u32) {
    COPY_BODY = 1,
    FLUSH_BODY = 2,
};
pub const HTTP_RECEIVE_REQUEST_FLAG_COPY_BODY = HTTP_RECEIVE_HTTP_REQUEST_FLAGS.COPY_BODY;
pub const HTTP_RECEIVE_REQUEST_FLAG_FLUSH_BODY = HTTP_RECEIVE_HTTP_REQUEST_FLAGS.FLUSH_BODY;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const HTTP_INITIALIZE = extern enum(u32) {
    CONFIG = 2,
    SERVER = 1,
    _,
};
pub const HTTP_INITIALIZE_CONFIG = HTTP_INITIALIZE.CONFIG;
pub const HTTP_INITIALIZE_SERVER = HTTP_INITIALIZE.SERVER;

pub const WINHTTP_ACCESS_TYPE = extern enum(u32) {
    NO_PROXY = 1,
    DEFAULT_PROXY = 0,
    NAMED_PROXY = 3,
    AUTOMATIC_PROXY = 4,
};
pub const WINHTTP_ACCESS_TYPE_NO_PROXY = WINHTTP_ACCESS_TYPE.NO_PROXY;
pub const WINHTTP_ACCESS_TYPE_DEFAULT_PROXY = WINHTTP_ACCESS_TYPE.DEFAULT_PROXY;
pub const WINHTTP_ACCESS_TYPE_NAMED_PROXY = WINHTTP_ACCESS_TYPE.NAMED_PROXY;
pub const WINHTTP_ACCESS_TYPE_AUTOMATIC_PROXY = WINHTTP_ACCESS_TYPE.AUTOMATIC_PROXY;

pub const WINHTTP_CREDS_AUTHSCHEME = extern enum(u32) {
    BASIC = 1,
    NTLM = 2,
    NEGOTIATE = 16,
};
pub const WINHTTP_AUTH_SCHEME_BASIC = WINHTTP_CREDS_AUTHSCHEME.BASIC;
pub const WINHTTP_AUTH_SCHEME_NTLM = WINHTTP_CREDS_AUTHSCHEME.NTLM;
pub const WINHTTP_AUTH_SCHEME_NEGOTIATE = WINHTTP_CREDS_AUTHSCHEME.NEGOTIATE;


//--------------------------------------------------------------------------------
// Section: Functions (86)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "HTTPAPI" fn HttpInitialize(
    Version: HTTPAPI_VERSION,
    Flags: HTTP_INITIALIZE,
    pReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "HTTPAPI" fn HttpTerminate(
    Flags: HTTP_INITIALIZE,
    pReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "HTTPAPI" fn HttpCreateHttpHandle(
    RequestQueueHandle: *HANDLE,
    Reserved: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "HTTPAPI" fn HttpCreateRequestQueue(
    Version: HTTPAPI_VERSION,
    Name: [*:0]const u16,
    SecurityAttributes: *SECURITY_ATTRIBUTES,
    Flags: u32,
    RequestQueueHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "HTTPAPI" fn HttpCloseRequestQueue(
    RequestQueueHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "HTTPAPI" fn HttpSetRequestQueueProperty(
    RequestQueueHandle: HANDLE,
    Property: HTTP_SERVER_PROPERTY,
    // TODO: what to do with BytesParamIndex 3?
    PropertyInformation: *c_void,
    PropertyInformationLength: u32,
    Reserved1: u32,
    Reserved2: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "HTTPAPI" fn HttpQueryRequestQueueProperty(
    RequestQueueHandle: HANDLE,
    Property: HTTP_SERVER_PROPERTY,
    // TODO: what to do with BytesParamIndex 3?
    PropertyInformation: ?*c_void,
    PropertyInformationLength: u32,
    Reserved1: u32,
    ReturnLength: ?*u32,
    Reserved2: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "HTTPAPI" fn HttpShutdownRequestQueue(
    RequestQueueHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "HTTPAPI" fn HttpReceiveClientCertificate(
    RequestQueueHandle: HANDLE,
    ConnectionId: u64,
    Flags: u32,
    // TODO: what to do with BytesParamIndex 4?
    SslClientCertInfo: *HTTP_SSL_CLIENT_CERT_INFO,
    SslClientCertInfoSize: u32,
    BytesReceived: ?*u32,
    Overlapped: *OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "HTTPAPI" fn HttpCreateServerSession(
    Version: HTTPAPI_VERSION,
    ServerSessionId: *u64,
    Reserved: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "HTTPAPI" fn HttpCloseServerSession(
    ServerSessionId: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "HTTPAPI" fn HttpQueryServerSessionProperty(
    ServerSessionId: u64,
    Property: HTTP_SERVER_PROPERTY,
    // TODO: what to do with BytesParamIndex 3?
    PropertyInformation: ?*c_void,
    PropertyInformationLength: u32,
    ReturnLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "HTTPAPI" fn HttpSetServerSessionProperty(
    ServerSessionId: u64,
    Property: HTTP_SERVER_PROPERTY,
    // TODO: what to do with BytesParamIndex 3?
    PropertyInformation: *c_void,
    PropertyInformationLength: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "HTTPAPI" fn HttpAddUrl(
    RequestQueueHandle: HANDLE,
    FullyQualifiedUrl: [*:0]const u16,
    Reserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "HTTPAPI" fn HttpRemoveUrl(
    RequestQueueHandle: HANDLE,
    FullyQualifiedUrl: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "HTTPAPI" fn HttpCreateUrlGroup(
    ServerSessionId: u64,
    pUrlGroupId: *u64,
    Reserved: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "HTTPAPI" fn HttpCloseUrlGroup(
    UrlGroupId: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "HTTPAPI" fn HttpAddUrlToUrlGroup(
    UrlGroupId: u64,
    pFullyQualifiedUrl: [*:0]const u16,
    UrlContext: u64,
    Reserved: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "HTTPAPI" fn HttpRemoveUrlFromUrlGroup(
    UrlGroupId: u64,
    pFullyQualifiedUrl: [*:0]const u16,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "HTTPAPI" fn HttpSetUrlGroupProperty(
    UrlGroupId: u64,
    Property: HTTP_SERVER_PROPERTY,
    // TODO: what to do with BytesParamIndex 3?
    PropertyInformation: *c_void,
    PropertyInformationLength: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "HTTPAPI" fn HttpQueryUrlGroupProperty(
    UrlGroupId: u64,
    Property: HTTP_SERVER_PROPERTY,
    // TODO: what to do with BytesParamIndex 3?
    PropertyInformation: ?*c_void,
    PropertyInformationLength: u32,
    ReturnLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "HTTPAPI" fn HttpPrepareUrl(
    Reserved: *c_void,
    Flags: u32,
    Url: [*:0]const u16,
    PreparedUrl: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "HTTPAPI" fn HttpReceiveHttpRequest(
    RequestQueueHandle: HANDLE,
    RequestId: u64,
    Flags: HTTP_RECEIVE_HTTP_REQUEST_FLAGS,
    // TODO: what to do with BytesParamIndex 4?
    RequestBuffer: *HTTP_REQUEST_V2,
    RequestBufferLength: u32,
    BytesReturned: ?*u32,
    Overlapped: *OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "HTTPAPI" fn HttpReceiveRequestEntityBody(
    RequestQueueHandle: HANDLE,
    RequestId: u64,
    Flags: u32,
    // TODO: what to do with BytesParamIndex 4?
    EntityBuffer: *c_void,
    EntityBufferLength: u32,
    BytesReturned: ?*u32,
    Overlapped: *OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "HTTPAPI" fn HttpSendHttpResponse(
    RequestQueueHandle: HANDLE,
    RequestId: u64,
    Flags: u32,
    HttpResponse: *HTTP_RESPONSE_V2,
    CachePolicy: *HTTP_CACHE_POLICY,
    BytesSent: *u32,
    Reserved1: *c_void,
    Reserved2: u32,
    Overlapped: *OVERLAPPED,
    LogData: *HTTP_LOG_DATA,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "HTTPAPI" fn HttpSendResponseEntityBody(
    RequestQueueHandle: HANDLE,
    RequestId: u64,
    Flags: u32,
    EntityChunkCount: u16,
    EntityChunks: ?[*]HTTP_DATA_CHUNK,
    BytesSent: *u32,
    Reserved1: *c_void,
    Reserved2: u32,
    Overlapped: *OVERLAPPED,
    LogData: *HTTP_LOG_DATA,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows10.0.10240'
pub extern "HTTPAPI" fn HttpDeclarePush(
    RequestQueueHandle: HANDLE,
    RequestId: u64,
    Verb: HTTP_VERB,
    Path: [*:0]const u16,
    Query: ?[*:0]const u8,
    Headers: ?*HTTP_REQUEST_HEADERS,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "HTTPAPI" fn HttpWaitForDisconnect(
    RequestQueueHandle: HANDLE,
    ConnectionId: u64,
    Overlapped: *OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "HTTPAPI" fn HttpWaitForDisconnectEx(
    RequestQueueHandle: HANDLE,
    ConnectionId: u64,
    Reserved: u32,
    Overlapped: *OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "HTTPAPI" fn HttpCancelHttpRequest(
    RequestQueueHandle: HANDLE,
    RequestId: u64,
    Overlapped: *OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "HTTPAPI" fn HttpWaitForDemandStart(
    RequestQueueHandle: HANDLE,
    Overlapped: *OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "HTTPAPI" fn HttpFlushResponseCache(
    RequestQueueHandle: HANDLE,
    UrlPrefix: [*:0]const u16,
    Flags: u32,
    Overlapped: *OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "HTTPAPI" fn HttpAddFragmentToCache(
    RequestQueueHandle: HANDLE,
    UrlPrefix: [*:0]const u16,
    DataChunk: *HTTP_DATA_CHUNK,
    CachePolicy: *HTTP_CACHE_POLICY,
    Overlapped: *OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "HTTPAPI" fn HttpReadFragmentFromCache(
    RequestQueueHandle: HANDLE,
    UrlPrefix: [*:0]const u16,
    ByteRange: *HTTP_BYTE_RANGE,
    // TODO: what to do with BytesParamIndex 4?
    Buffer: *c_void,
    BufferLength: u32,
    BytesRead: ?*u32,
    Overlapped: *OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "HTTPAPI" fn HttpSetServiceConfiguration(
    ServiceHandle: HANDLE,
    ConfigId: HTTP_SERVICE_CONFIG_ID,
    // TODO: what to do with BytesParamIndex 3?
    pConfigInformation: *c_void,
    ConfigInformationLength: u32,
    pOverlapped: *OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows10.0.15063'
pub extern "HTTPAPI" fn HttpUpdateServiceConfiguration(
    Handle: HANDLE,
    ConfigId: HTTP_SERVICE_CONFIG_ID,
    // TODO: what to do with BytesParamIndex 3?
    ConfigInfo: *c_void,
    ConfigInfoLength: u32,
    Overlapped: *OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "HTTPAPI" fn HttpDeleteServiceConfiguration(
    ServiceHandle: HANDLE,
    ConfigId: HTTP_SERVICE_CONFIG_ID,
    // TODO: what to do with BytesParamIndex 3?
    pConfigInformation: *c_void,
    ConfigInformationLength: u32,
    pOverlapped: *OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "HTTPAPI" fn HttpQueryServiceConfiguration(
    ServiceHandle: HANDLE,
    ConfigId: HTTP_SERVICE_CONFIG_ID,
    // TODO: what to do with BytesParamIndex 3?
    pInput: ?*c_void,
    InputLength: u32,
    // TODO: what to do with BytesParamIndex 5?
    pOutput: ?*c_void,
    OutputLength: u32,
    pReturnLength: ?*u32,
    pOverlapped: *OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "HTTPAPI" fn HttpGetExtension(
    Version: HTTPAPI_VERSION,
    Extension: u32,
    Buffer: *c_void,
    BufferSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "WINHTTP" fn WinHttpSetStatusCallback(
    hInternet: *c_void,
    lpfnInternetCallback: WINHTTP_STATUS_CALLBACK,
    dwNotificationFlags: u32,
    dwReserved: usize,
) callconv(@import("std").os.windows.WINAPI) WINHTTP_STATUS_CALLBACK;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "WINHTTP" fn WinHttpTimeFromSystemTime(
    pst: *const SYSTEMTIME,
    pwszTime: *[62]u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "WINHTTP" fn WinHttpTimeToSystemTime(
    pwszTime: [*:0]const u16,
    pst: *SYSTEMTIME,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "WINHTTP" fn WinHttpCrackUrl(
    pwszUrl: [*:0]const u16,
    dwUrlLength: u32,
    dwFlags: u32,
    lpUrlComponents: *URL_COMPONENTS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "WINHTTP" fn WinHttpCreateUrl(
    lpUrlComponents: *URL_COMPONENTS,
    dwFlags: WIN_HTTP_CREATE_URL_FLAGS,
    pwszUrl: ?[*:0]u16,
    pdwUrlLength: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "WINHTTP" fn WinHttpCheckPlatform(
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "WINHTTP" fn WinHttpGetDefaultProxyConfiguration(
    pProxyInfo: *WINHTTP_PROXY_INFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "WINHTTP" fn WinHttpSetDefaultProxyConfiguration(
    pProxyInfo: *WINHTTP_PROXY_INFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "WINHTTP" fn WinHttpOpen(
    pszAgentW: ?[*:0]const u16,
    dwAccessType: WINHTTP_ACCESS_TYPE,
    pszProxyW: ?[*:0]const u16,
    pszProxyBypassW: ?[*:0]const u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) *c_void;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "WINHTTP" fn WinHttpCloseHandle(
    hInternet: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "WINHTTP" fn WinHttpConnect(
    hSession: *c_void,
    pswzServerName: [*:0]const u16,
    nServerPort: INTERNET_DEFAULT_PORT,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) *c_void;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "WINHTTP" fn WinHttpReadData(
    hRequest: *c_void,
    // TODO: what to do with BytesParamIndex 2?
    lpBuffer: *c_void,
    dwNumberOfBytesToRead: u32,
    lpdwNumberOfBytesRead: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "WINHTTP" fn WinHttpWriteData(
    hRequest: *c_void,
    // TODO: what to do with BytesParamIndex 2?
    lpBuffer: ?*const c_void,
    dwNumberOfBytesToWrite: u32,
    lpdwNumberOfBytesWritten: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "WINHTTP" fn WinHttpQueryDataAvailable(
    hRequest: *c_void,
    lpdwNumberOfBytesAvailable: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "WINHTTP" fn WinHttpQueryOption(
    hInternet: *c_void,
    dwOption: u32,
    // TODO: what to do with BytesParamIndex 3?
    lpBuffer: ?*c_void,
    lpdwBufferLength: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "WINHTTP" fn WinHttpSetOption(
    hInternet: ?*c_void,
    dwOption: u32,
    lpBuffer: ?[*]u8,
    dwBufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "WINHTTP" fn WinHttpSetTimeouts(
    hInternet: *c_void,
    nResolveTimeout: i32,
    nConnectTimeout: i32,
    nSendTimeout: i32,
    nReceiveTimeout: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "WINHTTP" fn WinHttpOpenRequest(
    hConnect: *c_void,
    pwszVerb: [*:0]const u16,
    pwszObjectName: [*:0]const u16,
    pwszVersion: [*:0]const u16,
    pwszReferrer: [*:0]const u16,
    ppwszAcceptTypes: *PWSTR,
    dwFlags: WINHTTP_OPEN_REQUEST_FLAGS,
) callconv(@import("std").os.windows.WINAPI) *c_void;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "WINHTTP" fn WinHttpAddRequestHeaders(
    hRequest: *c_void,
    lpszHeaders: [*:0]const u16,
    dwHeadersLength: u32,
    dwModifiers: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINHTTP" fn WinHttpAddRequestHeadersEx(
    hRequest: *c_void,
    dwModifiers: u32,
    ullFlags: u64,
    ullExtra: u64,
    cHeaders: u32,
    pHeaders: [*]WINHTTP_EXTENDED_HEADER,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "WINHTTP" fn WinHttpSendRequest(
    hRequest: *c_void,
    lpszHeaders: ?[*:0]const u16,
    dwHeadersLength: u32,
    // TODO: what to do with BytesParamIndex 4?
    lpOptional: ?*c_void,
    dwOptionalLength: u32,
    dwTotalLength: u32,
    dwContext: usize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "WINHTTP" fn WinHttpSetCredentials(
    hRequest: *c_void,
    AuthTargets: u32,
    AuthScheme: u32,
    pwszUserName: [*:0]const u16,
    pwszPassword: [*:0]const u16,
    pAuthParams: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "WINHTTP" fn WinHttpQueryAuthSchemes(
    hRequest: *c_void,
    lpdwSupportedSchemes: *u32,
    lpdwFirstScheme: *u32,
    pdwAuthTarget: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "WINHTTP" fn WinHttpReceiveResponse(
    hRequest: *c_void,
    lpReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "WINHTTP" fn WinHttpQueryHeaders(
    hRequest: *c_void,
    dwInfoLevel: u32,
    pwszName: [*:0]const u16,
    // TODO: what to do with BytesParamIndex 4?
    lpBuffer: ?*c_void,
    lpdwBufferLength: *u32,
    lpdwIndex: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "WINHTTP" fn WinHttpDetectAutoProxyConfigUrl(
    dwAutoDetectFlags: u32,
    ppwstrAutoConfigUrl: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "WINHTTP" fn WinHttpGetProxyForUrl(
    hSession: *c_void,
    lpcwszUrl: [*:0]const u16,
    pAutoProxyOptions: *WINHTTP_AUTOPROXY_OPTIONS,
    pProxyInfo: *WINHTTP_PROXY_INFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "WINHTTP" fn WinHttpCreateProxyResolver(
    hSession: *c_void,
    phResolver: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "WINHTTP" fn WinHttpGetProxyForUrlEx(
    hResolver: *c_void,
    pcwszUrl: [*:0]const u16,
    pAutoProxyOptions: *WINHTTP_AUTOPROXY_OPTIONS,
    pContext: usize,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINHTTP" fn WinHttpGetProxyForUrlEx2(
    hResolver: *c_void,
    pcwszUrl: [*:0]const u16,
    pAutoProxyOptions: *WINHTTP_AUTOPROXY_OPTIONS,
    cbInterfaceSelectionContext: u32,
    // TODO: what to do with BytesParamIndex 3?
    pInterfaceSelectionContext: ?*u8,
    pContext: usize,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "WINHTTP" fn WinHttpGetProxyResult(
    hResolver: *c_void,
    pProxyResult: *WINHTTP_PROXY_RESULT,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINHTTP" fn WinHttpGetProxyResultEx(
    hResolver: *c_void,
    pProxyResultEx: *WINHTTP_PROXY_RESULT_EX,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "WINHTTP" fn WinHttpFreeProxyResult(
    pProxyResult: *WINHTTP_PROXY_RESULT,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "WINHTTP" fn WinHttpFreeProxyResultEx(
    pProxyResultEx: *WINHTTP_PROXY_RESULT_EX,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows8.0'
pub extern "WINHTTP" fn WinHttpResetAutoProxy(
    hSession: *c_void,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "WINHTTP" fn WinHttpGetIEProxyConfigForCurrentUser(
    pProxyConfig: *WINHTTP_CURRENT_USER_IE_PROXY_CONFIG,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINHTTP" fn WinHttpWriteProxySettings(
    hSession: *c_void,
    fForceUpdate: BOOL,
    pWinHttpProxySettings: *WINHTTP_PROXY_SETTINGS,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINHTTP" fn WinHttpReadProxySettings(
    hSession: *c_void,
    pcwszConnectionName: ?[*:0]const u16,
    fFallBackToDefaultSettings: BOOL,
    fSetAutoDiscoverForDefaultSettings: BOOL,
    pdwSettingsVersion: *u32,
    pfDefaultSettingsAreReturned: *BOOL,
    pWinHttpProxySettings: *WINHTTP_PROXY_SETTINGS,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINHTTP" fn WinHttpFreeProxySettings(
    pWinHttpProxySettings: *WINHTTP_PROXY_SETTINGS,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "WINHTTP" fn WinHttpGetProxySettingsVersion(
    hSession: *c_void,
    pdwProxySettingsVersion: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINHTTP" fn WinHttpSetProxySettingsPerUser(
    fProxySettingsPerUser: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "WINHTTP" fn WinHttpWebSocketCompleteUpgrade(
    hRequest: *c_void,
    pContext: usize,
) callconv(@import("std").os.windows.WINAPI) *c_void;

// TODO: this type is limited to platform 'windows8.0'
pub extern "WINHTTP" fn WinHttpWebSocketSend(
    hWebSocket: *c_void,
    eBufferType: WINHTTP_WEB_SOCKET_BUFFER_TYPE,
    pvBuffer: ?[*]u8,
    dwBufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "WINHTTP" fn WinHttpWebSocketReceive(
    hWebSocket: *c_void,
    // TODO: what to do with BytesParamIndex 2?
    pvBuffer: *c_void,
    dwBufferLength: u32,
    pdwBytesRead: *u32,
    peBufferType: *WINHTTP_WEB_SOCKET_BUFFER_TYPE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "WINHTTP" fn WinHttpWebSocketShutdown(
    hWebSocket: *c_void,
    usStatus: u16,
    // TODO: what to do with BytesParamIndex 3?
    pvReason: ?*c_void,
    dwReasonLength: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "WINHTTP" fn WinHttpWebSocketClose(
    hWebSocket: *c_void,
    usStatus: u16,
    // TODO: what to do with BytesParamIndex 3?
    pvReason: ?*c_void,
    dwReasonLength: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "WINHTTP" fn WinHttpWebSocketQueryCloseStatus(
    hWebSocket: *c_void,
    pusStatus: *u16,
    // TODO: what to do with BytesParamIndex 3?
    pvReason: ?*c_void,
    dwReasonLength: u32,
    pdwReasonLengthConsumed: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (1)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const HTTP_SERVICE_BINDING_ = HTTP_SERVICE_BINDING_A;
    },
    .wide => struct {
        pub const HTTP_SERVICE_BINDING_ = HTTP_SERVICE_BINDING_W;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const HTTP_SERVICE_BINDING_ = *opaque{};
    } else struct {
        pub const HTTP_SERVICE_BINDING_ = @compileError("'HTTP_SERVICE_BINDING_' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (14)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const SECURITY_DESCRIPTOR = @import("security.zig").SECURITY_DESCRIPTOR;
const ULARGE_INTEGER = @import("system_services.zig").ULARGE_INTEGER;
const PWSTR = @import("system_services.zig").PWSTR;
const FILETIME = @import("windows_programming.zig").FILETIME;
const INTERNET_SCHEME = @import("win_inet.zig").INTERNET_SCHEME;
const SECURITY_ATTRIBUTES = @import("system_services.zig").SECURITY_ATTRIBUTES;
const PSTR = @import("system_services.zig").PSTR;
const BOOL = @import("system_services.zig").BOOL;
const SOCKADDR = @import("win_sock.zig").SOCKADDR;
const SOCKADDR_STORAGE = @import("win_sock.zig").SOCKADDR_STORAGE;
const OVERLAPPED = @import("system_services.zig").OVERLAPPED;
const SYSTEMTIME = @import("windows_programming.zig").SYSTEMTIME;
const HANDLE = @import("system_services.zig").HANDLE;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "WINHTTP_STATUS_CALLBACK")) { _ = WINHTTP_STATUS_CALLBACK; }
    if (@hasDecl(@This(), "LPWINHTTP_STATUS_CALLBACK")) { _ = LPWINHTTP_STATUS_CALLBACK; }

    @setEvalBranchQuota(
        @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("std").builtin.is_test) return;
    inline for (@import("std").meta.declarations(@This())) |decl| {
        if (decl.is_pub) {
            _ = decl;
        }
    }
}
