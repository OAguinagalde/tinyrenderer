// This file contains portions of the win32 API that I need and add as I go, taken from here:
// 
//     https://github.com/marlersoft/zigwin32
// 
// > Copyright 2021 Jonathan Marler
// > 
// > Permission is hereby granted, free of charge, to any person obtaining a copy of this
// > software and associated documentation files (the "Software"), to deal in the Software
// > without restriction, including without limitation the rights to use, copy, modify, merge,
// > publish, distribute, sublicense, and/or sell copies of the Software, and to permit
// > persons to whom the Software is furnished to do so, subject to the following conditions:
// > 
// > The above copyright notice and this permission notice shall be included in all copies
// > or substantial portions of the Software.
// > 
// > THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// > INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
// > PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// > LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// > TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// > USE OR OTHER DEALINGS IN THE SOFTWARE.

pub const CHAR = u8;

// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const HWAVEOUT = *opaque{};

pub const WAVEHDR = extern struct {
    lpData: ?[*]u8 align(1),
    dwBufferLength: u32 align(1),
    dwBytesRecorded: u32 align(1),
    dwUser: usize align(1),
    dwFlags: u32 align(1),
    dwLoops: u32 align(1),
    lpNext: ?*WAVEHDR align(1),
    reserved: usize align(1),
};

pub const WAVEFORMATEX = extern struct {
    wFormatTag: u16 align(1),
    nChannels: u16 align(1),
    nSamplesPerSec: u32 align(1),
    nAvgBytesPerSec: u32 align(1),
    nBlockAlign: u16 align(1),
    wBitsPerSample: u16 align(1),
    cbSize: u16 align(1),
};

// TODO: this type is limited to platform 'windows5.0'
pub extern "winmm" fn waveOutOpen(
    phwo: ?*?HWAVEOUT,
    uDeviceID: u32,
    pwfx: ?*WAVEFORMATEX,
    dwCallback: usize,
    dwInstance: usize,
    fdwOpen: MIDI_WAVE_OPEN_TYPE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winmm" fn waveOutWrite(
    hwo: ?HWAVEOUT,
    // TODO: what to do with BytesParamIndex 2?
    pwh: ?*WAVEHDR,
    cbwh: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winmm" fn waveOutUnprepareHeader(
    hwo: ?HWAVEOUT,
    // TODO: what to do with BytesParamIndex 2?
    pwh: ?*WAVEHDR,
    cbwh: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winmm" fn waveOutPrepareHeader(
    hwo: ?HWAVEOUT,
    // TODO: what to do with BytesParamIndex 2?
    pwh: ?*WAVEHDR,
    cbwh: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const MMSYSERR_BASE = @as(u32, 0);
pub const MMSYSERR_NOERROR = @as(u32, 0);
pub const MMSYSERR_ERROR = @as(u32, 1);
pub const MMSYSERR_BADDEVICEID = @as(u32, 2);
pub const MMSYSERR_NOTENABLED = @as(u32, 3);
pub const MMSYSERR_ALLOCATED = @as(u32, 4);
pub const MMSYSERR_INVALHANDLE = @as(u32, 5);
pub const MMSYSERR_NODRIVER = @as(u32, 6);
pub const MMSYSERR_NOMEM = @as(u32, 7);
pub const MMSYSERR_NOTSUPPORTED = @as(u32, 8);
pub const MMSYSERR_BADERRNUM = @as(u32, 9);
pub const MMSYSERR_INVALFLAG = @as(u32, 10);
pub const MMSYSERR_INVALPARAM = @as(u32, 11);
pub const MMSYSERR_HANDLEBUSY = @as(u32, 12);
pub const MMSYSERR_INVALIDALIAS = @as(u32, 13);
pub const MMSYSERR_BADDB = @as(u32, 14);
pub const MMSYSERR_KEYNOTFOUND = @as(u32, 15);
pub const MMSYSERR_READERROR = @as(u32, 16);
pub const MMSYSERR_WRITEERROR = @as(u32, 17);
pub const MMSYSERR_DELETEERROR = @as(u32, 18);
pub const MMSYSERR_VALNOTFOUND = @as(u32, 19);
pub const MMSYSERR_NODRIVERCB = @as(u32, 20);
pub const MMSYSERR_MOREDATA = @as(u32, 21);
pub const MMSYSERR_LASTERROR = @as(u32, 21);

pub const WAVERR_BASE = @as(u32, 32);
pub const WAVERR_BADFORMAT = @as(u32, 32);
pub const WAVERR_STILLPLAYING = @as(u32, 33);
pub const WAVERR_UNPREPARED = @as(u32, 34);
pub const WAVERR_SYNC = @as(u32, 35);
pub const WAVERR_LASTERROR = @as(u32, 35);

pub const WHDR_DONE = @as(u32, 1);
pub const WHDR_PREPARED = @as(u32, 2);
pub const WHDR_BEGINLOOP = @as(u32, 4);
pub const WHDR_ENDLOOP = @as(u32, 8);
pub const WHDR_INQUEUE = @as(u32, 16);

pub const MIDI_WAVE_OPEN_TYPE = enum(u32) {
    CALLBACK_TYPEMASK = 458752,
    CALLBACK_NULL = 0,
    CALLBACK_WINDOW = 65536,
    CALLBACK_TASK = 131072,
    CALLBACK_FUNCTION = 196608,
    // CALLBACK_THREAD = 131072, this enum value conflicts with CALLBACK_TASK
    CALLBACK_EVENT = 327680,
    WAVE_FORMAT_QUERY = 1,
    WAVE_ALLOWSYNC = 2,
    WAVE_MAPPED = 4,
    WAVE_FORMAT_DIRECT = 8,
    WAVE_FORMAT_DIRECT_QUERY = 9,
    WAVE_MAPPED_DEFAULT_COMMUNICATION_DEVICE = 16,
    MIDI_IO_STATUS = 32,
    _,
    pub fn initFlags(o: struct {
        CALLBACK_TYPEMASK: u1 = 0,
        CALLBACK_NULL: u1 = 0,
        CALLBACK_WINDOW: u1 = 0,
        CALLBACK_TASK: u1 = 0,
        CALLBACK_FUNCTION: u1 = 0,
        CALLBACK_EVENT: u1 = 0,
        WAVE_FORMAT_QUERY: u1 = 0,
        WAVE_ALLOWSYNC: u1 = 0,
        WAVE_MAPPED: u1 = 0,
        WAVE_FORMAT_DIRECT: u1 = 0,
        WAVE_FORMAT_DIRECT_QUERY: u1 = 0,
        WAVE_MAPPED_DEFAULT_COMMUNICATION_DEVICE: u1 = 0,
        MIDI_IO_STATUS: u1 = 0,
    }) MIDI_WAVE_OPEN_TYPE {
        return @as(MIDI_WAVE_OPEN_TYPE, @enumFromInt(
              (if (o.CALLBACK_TYPEMASK == 1) @intFromEnum(MIDI_WAVE_OPEN_TYPE.CALLBACK_TYPEMASK) else 0)
            | (if (o.CALLBACK_NULL == 1) @intFromEnum(MIDI_WAVE_OPEN_TYPE.CALLBACK_NULL) else 0)
            | (if (o.CALLBACK_WINDOW == 1) @intFromEnum(MIDI_WAVE_OPEN_TYPE.CALLBACK_WINDOW) else 0)
            | (if (o.CALLBACK_TASK == 1) @intFromEnum(MIDI_WAVE_OPEN_TYPE.CALLBACK_TASK) else 0)
            | (if (o.CALLBACK_FUNCTION == 1) @intFromEnum(MIDI_WAVE_OPEN_TYPE.CALLBACK_FUNCTION) else 0)
            | (if (o.CALLBACK_EVENT == 1) @intFromEnum(MIDI_WAVE_OPEN_TYPE.CALLBACK_EVENT) else 0)
            | (if (o.WAVE_FORMAT_QUERY == 1) @intFromEnum(MIDI_WAVE_OPEN_TYPE.WAVE_FORMAT_QUERY) else 0)
            | (if (o.WAVE_ALLOWSYNC == 1) @intFromEnum(MIDI_WAVE_OPEN_TYPE.WAVE_ALLOWSYNC) else 0)
            | (if (o.WAVE_MAPPED == 1) @intFromEnum(MIDI_WAVE_OPEN_TYPE.WAVE_MAPPED) else 0)
            | (if (o.WAVE_FORMAT_DIRECT == 1) @intFromEnum(MIDI_WAVE_OPEN_TYPE.WAVE_FORMAT_DIRECT) else 0)
            | (if (o.WAVE_FORMAT_DIRECT_QUERY == 1) @intFromEnum(MIDI_WAVE_OPEN_TYPE.WAVE_FORMAT_DIRECT_QUERY) else 0)
            | (if (o.WAVE_MAPPED_DEFAULT_COMMUNICATION_DEVICE == 1) @intFromEnum(MIDI_WAVE_OPEN_TYPE.WAVE_MAPPED_DEFAULT_COMMUNICATION_DEVICE) else 0)
            | (if (o.MIDI_IO_STATUS == 1) @intFromEnum(MIDI_WAVE_OPEN_TYPE.MIDI_IO_STATUS) else 0)
        ));
    }
};
pub const CALLBACK_TYPEMASK = MIDI_WAVE_OPEN_TYPE.CALLBACK_TYPEMASK;
pub const CALLBACK_NULL = MIDI_WAVE_OPEN_TYPE.CALLBACK_NULL;
pub const CALLBACK_WINDOW = MIDI_WAVE_OPEN_TYPE.CALLBACK_WINDOW;
pub const CALLBACK_TASK = MIDI_WAVE_OPEN_TYPE.CALLBACK_TASK;
pub const CALLBACK_FUNCTION = MIDI_WAVE_OPEN_TYPE.CALLBACK_FUNCTION;
pub const CALLBACK_THREAD = MIDI_WAVE_OPEN_TYPE.CALLBACK_TASK;
pub const CALLBACK_EVENT = MIDI_WAVE_OPEN_TYPE.CALLBACK_EVENT;
pub const WAVE_FORMAT_QUERY = MIDI_WAVE_OPEN_TYPE.WAVE_FORMAT_QUERY;
pub const WAVE_ALLOWSYNC = MIDI_WAVE_OPEN_TYPE.WAVE_ALLOWSYNC;
pub const WAVE_MAPPED = MIDI_WAVE_OPEN_TYPE.WAVE_MAPPED;
pub const WAVE_FORMAT_DIRECT = MIDI_WAVE_OPEN_TYPE.WAVE_FORMAT_DIRECT;
pub const WAVE_FORMAT_DIRECT_QUERY = MIDI_WAVE_OPEN_TYPE.WAVE_FORMAT_DIRECT_QUERY;
pub const WAVE_MAPPED_DEFAULT_COMMUNICATION_DEVICE = MIDI_WAVE_OPEN_TYPE.WAVE_MAPPED_DEFAULT_COMMUNICATION_DEVICE;
pub const MIDI_IO_STATUS = MIDI_WAVE_OPEN_TYPE.MIDI_IO_STATUS;

pub const WAVE_INVALIDFORMAT = @as(u32, 0);
pub const WAVE_FORMAT_1M08 = @as(u32, 1);
pub const WAVE_FORMAT_1S08 = @as(u32, 2);
pub const WAVE_FORMAT_1M16 = @as(u32, 4);
pub const WAVE_FORMAT_1S16 = @as(u32, 8);
pub const WAVE_FORMAT_2M08 = @as(u32, 16);
pub const WAVE_FORMAT_2S08 = @as(u32, 32);
pub const WAVE_FORMAT_2M16 = @as(u32, 64);
pub const WAVE_FORMAT_2S16 = @as(u32, 128);
pub const WAVE_FORMAT_4M08 = @as(u32, 256);
pub const WAVE_FORMAT_4S08 = @as(u32, 512);
pub const WAVE_FORMAT_4M16 = @as(u32, 1024);
pub const WAVE_FORMAT_4S16 = @as(u32, 2048);
pub const WAVE_FORMAT_44M08 = @as(u32, 256);
pub const WAVE_FORMAT_44S08 = @as(u32, 512);
pub const WAVE_FORMAT_44M16 = @as(u32, 1024);
pub const WAVE_FORMAT_44S16 = @as(u32, 2048);
pub const WAVE_FORMAT_48M08 = @as(u32, 4096);
pub const WAVE_FORMAT_48S08 = @as(u32, 8192);
pub const WAVE_FORMAT_48M16 = @as(u32, 16384);
pub const WAVE_FORMAT_48S16 = @as(u32, 32768);
pub const WAVE_FORMAT_96M08 = @as(u32, 65536);
pub const WAVE_FORMAT_96S08 = @as(u32, 131072);
pub const WAVE_FORMAT_96M16 = @as(u32, 262144);
pub const WAVE_FORMAT_96S16 = @as(u32, 524288);
pub const WAVE_FORMAT_PCM = @as(u32, 1);

pub const MM_WOM_OPEN = @as(u32, 955);
pub const MM_WOM_CLOSE = @as(u32, 956);
pub const MM_WOM_DONE = @as(u32, 957);

pub const WAVEOUTCAPSA = extern struct {
    wMid: u16 align(1),
    wPid: u16 align(1),
    vDriverVersion: u32 align(1),
    szPname: [32]CHAR align(1),
    dwFormats: u32 align(1),
    wChannels: u16 align(1),
    wReserved1: u16 align(1),
    dwSupport: u32 align(1),
};

pub const WAVEOUTCAPSW = extern struct {
    wMid: u16 align(1),
    wPid: u16 align(1),
    vDriverVersion: u32 align(1),
    szPname: [32]u16 align(1),
    dwFormats: u32 align(1),
    wChannels: u16 align(1),
    wReserved1: u16 align(1),
    dwSupport: u32 align(1),
};

// TODO: this type is limited to platform 'windows5.0'
pub extern "winmm" fn waveOutGetNumDevs(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "winmm" fn waveOutGetDevCapsA(
    uDeviceID: usize,
    pwoc: ?*WAVEOUTCAPSA,
    cbwoc: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "winmm" fn waveOutGetDevCapsW(
    uDeviceID: usize,
    pwoc: ?*WAVEOUTCAPSW,
    cbwoc: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const HWND = *opaque{};

pub const WPARAM = usize;

pub const LPARAM = isize;

pub const LRESULT = isize;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn DefWindowProcW(
    hWnd: ?HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn EndPaint(
    hWnd: ?HWND,
    lpPaint: ?*const PAINTSTRUCT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const BOOL = i32;

// TODO: this type has a FreeFunc 'ReleaseDC', what can Zig do with this information?
// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const HDC = *opaque{};

pub const RECT = extern struct {
    left: i32,
    top: i32,
    right: i32,
    bottom: i32,
};

pub const PAINTSTRUCT = extern struct {
    hdc: ?HDC,
    fErase: BOOL,
    rcPaint: RECT,
    fRestore: BOOL,
    fIncUpdate: BOOL,
    rgbReserved: [32]u8,
};

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "kernel32" fn GetLastError(
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

pub const ROP_CODE = enum(u32) {
    SRCCOPY = 13369376,
    SRCPAINT = 15597702,
    SRCAND = 8913094,
    SRCINVERT = 6684742,
    SRCERASE = 4457256,
    NOTSRCCOPY = 3342344,
    NOTSRCERASE = 1114278,
    MERGECOPY = 12583114,
    MERGEPAINT = 12255782,
    PATCOPY = 15728673,
    PATPAINT = 16452105,
    PATINVERT = 5898313,
    DSTINVERT = 5570569,
    BLACKNESS = 66,
    WHITENESS = 16711778,
    NOMIRRORBITMAP = 2147483648,
    CAPTUREBLT = 1073741824,
};
pub const SRCCOPY = ROP_CODE.SRCCOPY;
pub const SRCPAINT = ROP_CODE.SRCPAINT;
pub const SRCAND = ROP_CODE.SRCAND;
pub const SRCINVERT = ROP_CODE.SRCINVERT;
pub const SRCERASE = ROP_CODE.SRCERASE;
pub const NOTSRCCOPY = ROP_CODE.NOTSRCCOPY;
pub const NOTSRCERASE = ROP_CODE.NOTSRCERASE;
pub const MERGECOPY = ROP_CODE.MERGECOPY;
pub const MERGEPAINT = ROP_CODE.MERGEPAINT;
pub const PATCOPY = ROP_CODE.PATCOPY;
pub const PATPAINT = ROP_CODE.PATPAINT;
pub const PATINVERT = ROP_CODE.PATINVERT;
pub const DSTINVERT = ROP_CODE.DSTINVERT;
pub const BLACKNESS = ROP_CODE.BLACKNESS;
pub const WHITENESS = ROP_CODE.WHITENESS;
pub const NOMIRRORBITMAP = ROP_CODE.NOMIRRORBITMAP;
pub const CAPTUREBLT = ROP_CODE.CAPTUREBLT;

pub const DIB_USAGE = enum(u32) {
    RGB_COLORS = 0,
    PAL_COLORS = 1,
};
pub const DIB_RGB_COLORS = DIB_USAGE.RGB_COLORS;
pub const DIB_PAL_COLORS = DIB_USAGE.PAL_COLORS;

// TODO: this type is limited to platform 'windows5.0'
pub extern "gdi32" fn StretchDIBits(
    hdc: ?HDC,
    xDest: i32,
    yDest: i32,
    DestWidth: i32,
    DestHeight: i32,
    xSrc: i32,
    ySrc: i32,
    SrcWidth: i32,
    SrcHeight: i32,
    lpBits: ?*const anyopaque,
    lpbmi: ?*const BITMAPINFO,
    iUsage: DIB_USAGE,
    rop: ROP_CODE,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const BITMAPINFO = extern struct {
    bmiHeader: BITMAPINFOHEADER,
    bmiColors: [1]RGBQUAD,
};

pub const BITMAPINFOHEADER = extern struct {
    biSize: u32,
    biWidth: i32,
    biHeight: i32,
    biPlanes: u16,
    biBitCount: u16,
    biCompression: u32,
    biSizeImage: u32,
    biXPelsPerMeter: i32,
    biYPelsPerMeter: i32,
    biClrUsed: u32,
    biClrImportant: u32,
};

pub const RGBQUAD = extern struct {
    rgbBlue: u8,
    rgbGreen: u8,
    rgbRed: u8,
    rgbReserved: u8,
};

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn BeginPaint(
    hWnd: ?HWND,
    lpPaint: ?*PAINTSTRUCT,
) callconv(@import("std").os.windows.WINAPI) ?HDC;

pub const WM_NULL = @as(u32, 0);
pub const WM_CREATE = @as(u32, 1);
pub const WM_DESTROY = @as(u32, 2);
pub const WM_MOVE = @as(u32, 3);
pub const WM_SIZE = @as(u32, 5);
pub const WM_ACTIVATE = @as(u32, 6);
pub const WA_INACTIVE = @as(u32, 0);
pub const WA_ACTIVE = @as(u32, 1);
pub const WA_CLICKACTIVE = @as(u32, 2);
pub const WM_SETFOCUS = @as(u32, 7);
pub const WM_KILLFOCUS = @as(u32, 8);
pub const WM_ENABLE = @as(u32, 10);
pub const WM_SETREDRAW = @as(u32, 11);
pub const WM_SETTEXT = @as(u32, 12);
pub const WM_GETTEXT = @as(u32, 13);
pub const WM_GETTEXTLENGTH = @as(u32, 14);
pub const WM_PAINT = @as(u32, 15);
pub const WM_CLOSE = @as(u32, 16);
pub const WM_QUERYENDSESSION = @as(u32, 17);
pub const WM_QUERYOPEN = @as(u32, 19);
pub const WM_ENDSESSION = @as(u32, 22);
pub const WM_QUIT = @as(u32, 18);
pub const WM_ERASEBKGND = @as(u32, 20);
pub const WM_SYSCOLORCHANGE = @as(u32, 21);
pub const WM_SHOWWINDOW = @as(u32, 24);
pub const WM_WININICHANGE = @as(u32, 26);
pub const WM_SETTINGCHANGE = @as(u32, 26);
pub const WM_DEVMODECHANGE = @as(u32, 27);
pub const WM_ACTIVATEAPP = @as(u32, 28);
pub const WM_FONTCHANGE = @as(u32, 29);
pub const WM_TIMECHANGE = @as(u32, 30);
pub const WM_CANCELMODE = @as(u32, 31);
pub const WM_SETCURSOR = @as(u32, 32);
pub const WM_MOUSEACTIVATE = @as(u32, 33);
pub const WM_CHILDACTIVATE = @as(u32, 34);
pub const WM_QUEUESYNC = @as(u32, 35);
pub const WM_GETMINMAXINFO = @as(u32, 36);
pub const WM_PAINTICON = @as(u32, 38);
pub const WM_ICONERASEBKGND = @as(u32, 39);
pub const WM_NEXTDLGCTL = @as(u32, 40);
pub const WM_SPOOLERSTATUS = @as(u32, 42);
pub const WM_DRAWITEM = @as(u32, 43);
pub const WM_MEASUREITEM = @as(u32, 44);
pub const WM_DELETEITEM = @as(u32, 45);
pub const WM_VKEYTOITEM = @as(u32, 46);
pub const WM_CHARTOITEM = @as(u32, 47);
pub const WM_SETFONT = @as(u32, 48);
pub const WM_GETFONT = @as(u32, 49);
pub const WM_SETHOTKEY = @as(u32, 50);
pub const WM_GETHOTKEY = @as(u32, 51);
pub const WM_QUERYDRAGICON = @as(u32, 55);
pub const WM_COMPAREITEM = @as(u32, 57);
pub const WM_GETOBJECT = @as(u32, 61);
pub const WM_COMPACTING = @as(u32, 65);
pub const WM_COMMNOTIFY = @as(u32, 68);
pub const WM_WINDOWPOSCHANGING = @as(u32, 70);
pub const WM_WINDOWPOSCHANGED = @as(u32, 71);
pub const WM_POWER = @as(u32, 72);
pub const PWR_OK = @as(u32, 1);
pub const PWR_FAIL = @as(i32, -1);
pub const PWR_SUSPENDREQUEST = @as(u32, 1);
pub const PWR_SUSPENDRESUME = @as(u32, 2);
pub const PWR_CRITICALRESUME = @as(u32, 3);
pub const WM_COPYDATA = @as(u32, 74);
pub const WM_CANCELJOURNAL = @as(u32, 75);
pub const WM_INPUTLANGCHANGEREQUEST = @as(u32, 80);
pub const WM_INPUTLANGCHANGE = @as(u32, 81);
pub const WM_TCARD = @as(u32, 82);
pub const WM_HELP = @as(u32, 83);
pub const WM_USERCHANGED = @as(u32, 84);
pub const WM_NOTIFYFORMAT = @as(u32, 85);
pub const NFR_ANSI = @as(u32, 1);
pub const NFR_UNICODE = @as(u32, 2);
pub const NF_QUERY = @as(u32, 3);
pub const NF_REQUERY = @as(u32, 4);
pub const WM_STYLECHANGING = @as(u32, 124);
pub const WM_STYLECHANGED = @as(u32, 125);
pub const WM_DISPLAYCHANGE = @as(u32, 126);
pub const WM_GETICON = @as(u32, 127);
pub const WM_SETICON = @as(u32, 128);
pub const WM_NCCREATE = @as(u32, 129);
pub const WM_NCDESTROY = @as(u32, 130);
pub const WM_NCCALCSIZE = @as(u32, 131);
pub const WM_NCHITTEST = @as(u32, 132);
pub const WM_NCPAINT = @as(u32, 133);
pub const WM_NCACTIVATE = @as(u32, 134);
pub const WM_GETDLGCODE = @as(u32, 135);
pub const WM_SYNCPAINT = @as(u32, 136);
pub const WM_NCMOUSEMOVE = @as(u32, 160);
pub const WM_NCLBUTTONDOWN = @as(u32, 161);
pub const WM_NCLBUTTONUP = @as(u32, 162);
pub const WM_NCLBUTTONDBLCLK = @as(u32, 163);
pub const WM_NCRBUTTONDOWN = @as(u32, 164);
pub const WM_NCRBUTTONUP = @as(u32, 165);
pub const WM_NCRBUTTONDBLCLK = @as(u32, 166);
pub const WM_NCMBUTTONDOWN = @as(u32, 167);
pub const WM_NCMBUTTONUP = @as(u32, 168);
pub const WM_NCMBUTTONDBLCLK = @as(u32, 169);
pub const WM_NCXBUTTONDOWN = @as(u32, 171);
pub const WM_NCXBUTTONUP = @as(u32, 172);
pub const WM_NCXBUTTONDBLCLK = @as(u32, 173);
pub const WM_INPUT_DEVICE_CHANGE = @as(u32, 254);
pub const WM_INPUT = @as(u32, 255);
pub const WM_KEYFIRST = @as(u32, 256);
pub const WM_KEYDOWN = @as(u32, 256);
pub const WM_KEYUP = @as(u32, 257);
pub const WM_CHAR = @as(u32, 258);
pub const WM_DEADCHAR = @as(u32, 259);
pub const WM_SYSKEYDOWN = @as(u32, 260);
pub const WM_SYSKEYUP = @as(u32, 261);
pub const WM_SYSCHAR = @as(u32, 262);
pub const WM_SYSDEADCHAR = @as(u32, 263);
pub const WM_KEYLAST = @as(u32, 265);
pub const UNICODE_NOCHAR = @as(u32, 65535);
pub const WM_IME_STARTCOMPOSITION = @as(u32, 269);
pub const WM_IME_ENDCOMPOSITION = @as(u32, 270);
pub const WM_IME_COMPOSITION = @as(u32, 271);
pub const WM_IME_KEYLAST = @as(u32, 271);
pub const WM_INITDIALOG = @as(u32, 272);
pub const WM_COMMAND = @as(u32, 273);
pub const WM_SYSCOMMAND = @as(u32, 274);
pub const WM_TIMER = @as(u32, 275);
pub const WM_HSCROLL = @as(u32, 276);
pub const WM_VSCROLL = @as(u32, 277);
pub const WM_INITMENU = @as(u32, 278);
pub const WM_INITMENUPOPUP = @as(u32, 279);
pub const WM_GESTURE = @as(u32, 281);
pub const WM_GESTURENOTIFY = @as(u32, 282);
pub const WM_MENUSELECT = @as(u32, 287);
pub const WM_MENUCHAR = @as(u32, 288);
pub const WM_ENTERIDLE = @as(u32, 289);
pub const WM_MENURBUTTONUP = @as(u32, 290);
pub const WM_MENUDRAG = @as(u32, 291);
pub const WM_MENUGETOBJECT = @as(u32, 292);
pub const WM_UNINITMENUPOPUP = @as(u32, 293);
pub const WM_MENUCOMMAND = @as(u32, 294);
pub const WM_CHANGEUISTATE = @as(u32, 295);
pub const WM_UPDATEUISTATE = @as(u32, 296);
pub const WM_QUERYUISTATE = @as(u32, 297);
pub const UIS_SET = @as(u32, 1);
pub const UIS_CLEAR = @as(u32, 2);
pub const UIS_INITIALIZE = @as(u32, 3);
pub const UISF_HIDEFOCUS = @as(u32, 1);
pub const UISF_HIDEACCEL = @as(u32, 2);
pub const UISF_ACTIVE = @as(u32, 4);
pub const WM_CTLCOLORMSGBOX = @as(u32, 306);
pub const WM_CTLCOLOREDIT = @as(u32, 307);
pub const WM_CTLCOLORLISTBOX = @as(u32, 308);
pub const WM_CTLCOLORBTN = @as(u32, 309);
pub const WM_CTLCOLORDLG = @as(u32, 310);
pub const WM_CTLCOLORSCROLLBAR = @as(u32, 311);
pub const WM_CTLCOLORSTATIC = @as(u32, 312);
pub const MN_GETHMENU = @as(u32, 481);
pub const WM_MOUSEFIRST = @as(u32, 512);
pub const WM_MOUSEMOVE = @as(u32, 512);
pub const WM_LBUTTONDOWN = @as(u32, 513);
pub const WM_LBUTTONUP = @as(u32, 514);
pub const WM_LBUTTONDBLCLK = @as(u32, 515);
pub const WM_RBUTTONDOWN = @as(u32, 516);
pub const WM_RBUTTONUP = @as(u32, 517);
pub const WM_RBUTTONDBLCLK = @as(u32, 518);
pub const WM_MBUTTONDOWN = @as(u32, 519);
pub const WM_MBUTTONUP = @as(u32, 520);
pub const WM_MBUTTONDBLCLK = @as(u32, 521);
pub const WM_MOUSEWHEEL = @as(u32, 522);
pub const WM_XBUTTONDOWN = @as(u32, 523);
pub const WM_XBUTTONUP = @as(u32, 524);
pub const WM_XBUTTONDBLCLK = @as(u32, 525);
pub const WM_MOUSEHWHEEL = @as(u32, 526);
pub const WM_MOUSELAST = @as(u32, 526);
pub const WHEEL_DELTA = @as(u32, 120);
pub const WM_PARENTNOTIFY = @as(u32, 528);
pub const WM_ENTERMENULOOP = @as(u32, 529);
pub const WM_EXITMENULOOP = @as(u32, 530);
pub const WM_NEXTMENU = @as(u32, 531);
pub const WM_SIZING = @as(u32, 532);
pub const WM_CAPTURECHANGED = @as(u32, 533);
pub const WM_MOVING = @as(u32, 534);
pub const WM_POWERBROADCAST = @as(u32, 536);
pub const PBT_APMQUERYSUSPEND = @as(u32, 0);
pub const PBT_APMQUERYSTANDBY = @as(u32, 1);
pub const PBT_APMQUERYSUSPENDFAILED = @as(u32, 2);
pub const PBT_APMQUERYSTANDBYFAILED = @as(u32, 3);
pub const PBT_APMSUSPEND = @as(u32, 4);
pub const PBT_APMSTANDBY = @as(u32, 5);
pub const PBT_APMRESUMECRITICAL = @as(u32, 6);
pub const PBT_APMRESUMESUSPEND = @as(u32, 7);
pub const PBT_APMRESUMESTANDBY = @as(u32, 8);
pub const PBTF_APMRESUMEFROMFAILURE = @as(u32, 1);
pub const PBT_APMBATTERYLOW = @as(u32, 9);
pub const PBT_APMPOWERSTATUSCHANGE = @as(u32, 10);
pub const PBT_APMOEMEVENT = @as(u32, 11);
pub const PBT_APMRESUMEAUTOMATIC = @as(u32, 18);
pub const PBT_POWERSETTINGCHANGE = @as(u32, 32787);
pub const WM_MDICREATE = @as(u32, 544);
pub const WM_MDIDESTROY = @as(u32, 545);
pub const WM_MDIACTIVATE = @as(u32, 546);
pub const WM_MDIRESTORE = @as(u32, 547);
pub const WM_MDINEXT = @as(u32, 548);
pub const WM_MDIMAXIMIZE = @as(u32, 549);
pub const WM_MDITILE = @as(u32, 550);
pub const WM_MDICASCADE = @as(u32, 551);
pub const WM_MDIICONARRANGE = @as(u32, 552);
pub const WM_MDIGETACTIVE = @as(u32, 553);
pub const WM_MDISETMENU = @as(u32, 560);
pub const WM_ENTERSIZEMOVE = @as(u32, 561);
pub const WM_EXITSIZEMOVE = @as(u32, 562);
pub const WM_DROPFILES = @as(u32, 563);
pub const WM_MDIREFRESHMENU = @as(u32, 564);
pub const WM_POINTERDEVICECHANGE = @as(u32, 568);
pub const WM_POINTERDEVICEINRANGE = @as(u32, 569);
pub const WM_POINTERDEVICEOUTOFRANGE = @as(u32, 570);
pub const WM_TOUCH = @as(u32, 576);
pub const WM_NCPOINTERUPDATE = @as(u32, 577);
pub const WM_NCPOINTERDOWN = @as(u32, 578);
pub const WM_NCPOINTERUP = @as(u32, 579);
pub const WM_POINTERUPDATE = @as(u32, 581);
pub const WM_POINTERDOWN = @as(u32, 582);
pub const WM_POINTERUP = @as(u32, 583);
pub const WM_POINTERENTER = @as(u32, 585);
pub const WM_POINTERLEAVE = @as(u32, 586);
pub const WM_POINTERACTIVATE = @as(u32, 587);
pub const WM_POINTERCAPTURECHANGED = @as(u32, 588);
pub const WM_TOUCHHITTESTING = @as(u32, 589);
pub const WM_POINTERWHEEL = @as(u32, 590);
pub const WM_POINTERHWHEEL = @as(u32, 591);
pub const DM_POINTERHITTEST = @as(u32, 592);
pub const WM_POINTERROUTEDTO = @as(u32, 593);
pub const WM_POINTERROUTEDAWAY = @as(u32, 594);
pub const WM_POINTERROUTEDRELEASED = @as(u32, 595);
pub const WM_IME_SETCONTEXT = @as(u32, 641);
pub const WM_IME_NOTIFY = @as(u32, 642);
pub const WM_IME_CONTROL = @as(u32, 643);
pub const WM_IME_COMPOSITIONFULL = @as(u32, 644);
pub const WM_IME_SELECT = @as(u32, 645);
pub const WM_IME_CHAR = @as(u32, 646);
pub const WM_IME_REQUEST = @as(u32, 648);
pub const WM_IME_KEYDOWN = @as(u32, 656);
pub const WM_IME_KEYUP = @as(u32, 657);
pub const WM_NCMOUSEHOVER = @as(u32, 672);
pub const WM_NCMOUSELEAVE = @as(u32, 674);
pub const WM_WTSSESSION_CHANGE = @as(u32, 689);
pub const WM_TABLET_FIRST = @as(u32, 704);
pub const WM_TABLET_LAST = @as(u32, 735);
pub const WM_DPICHANGED = @as(u32, 736);
pub const WM_DPICHANGED_BEFOREPARENT = @as(u32, 738);
pub const WM_DPICHANGED_AFTERPARENT = @as(u32, 739);
pub const WM_GETDPISCALEDSIZE = @as(u32, 740);
pub const WM_CUT = @as(u32, 768);
pub const WM_COPY = @as(u32, 769);
pub const WM_PASTE = @as(u32, 770);
pub const WM_CLEAR = @as(u32, 771);
pub const WM_UNDO = @as(u32, 772);
pub const WM_RENDERFORMAT = @as(u32, 773);
pub const WM_RENDERALLFORMATS = @as(u32, 774);
pub const WM_DESTROYCLIPBOARD = @as(u32, 775);
pub const WM_DRAWCLIPBOARD = @as(u32, 776);
pub const WM_PAINTCLIPBOARD = @as(u32, 777);
pub const WM_VSCROLLCLIPBOARD = @as(u32, 778);
pub const WM_SIZECLIPBOARD = @as(u32, 779);
pub const WM_ASKCBFORMATNAME = @as(u32, 780);
pub const WM_CHANGECBCHAIN = @as(u32, 781);
pub const WM_HSCROLLCLIPBOARD = @as(u32, 782);
pub const WM_QUERYNEWPALETTE = @as(u32, 783);
pub const WM_PALETTEISCHANGING = @as(u32, 784);
pub const WM_PALETTECHANGED = @as(u32, 785);
pub const WM_HOTKEY = @as(u32, 786);
pub const WM_PRINT = @as(u32, 791);
pub const WM_APPCOMMAND = @as(u32, 793);
pub const WM_THEMECHANGED = @as(u32, 794);
pub const WM_CLIPBOARDUPDATE = @as(u32, 797);
pub const WM_DWMCOMPOSITIONCHANGED = @as(u32, 798);
pub const WM_DWMNCRENDERINGCHANGED = @as(u32, 799);
pub const WM_DWMCOLORIZATIONCOLORCHANGED = @as(u32, 800);
pub const WM_DWMWINDOWMAXIMIZEDCHANGE = @as(u32, 801);
pub const WM_DWMSENDICONICTHUMBNAIL = @as(u32, 803);
pub const WM_DWMSENDICONICLIVEPREVIEWBITMAP = @as(u32, 806);
pub const WM_GETTITLEBARINFOEX = @as(u32, 831);
pub const WM_HANDHELDFIRST = @as(u32, 856);
pub const WM_HANDHELDLAST = @as(u32, 863);
pub const WM_AFXFIRST = @as(u32, 864);
pub const WM_AFXLAST = @as(u32, 895);
pub const WM_PENWINFIRST = @as(u32, 896);
pub const WM_PENWINLAST = @as(u32, 911);
pub const WM_APP = @as(u32, 32768);
pub const WM_USER = @as(u32, 1024);

pub const BoolValue = enum(i32) {
    True = 1,
    False = 0,
    BoolValue_Max = 2147483647,
};
pub const True = BoolValue.True;
pub const False = BoolValue.False;
pub const BoolValue_Max = BoolValue.BoolValue_Max;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn InvalidateRect(
    hWnd: ?HWND,
    lpRect: ?*const RECT,
    bErase: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetClientRect(
    hWnd: ?HWND,
    lpRect: ?*RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn PostQuitMessage(
    nExitCode: i32,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn ReleaseDC(
    hWnd: ?HWND,
    hDC: ?HDC,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetDC(
    hWnd: ?HWND,
) callconv(@import("std").os.windows.WINAPI) ?HDC;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn ScreenToClient(
    hWnd: ?HWND,
    lpPoint: ?*POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const POINT = extern struct {
    x: i32,
    y: i32,
};

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetMessageA(
    lpMsg: ?*MSG,
    hWnd: ?HWND,
    wMsgFilterMin: u32,
    wMsgFilterMax: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetMessageW(
    lpMsg: ?*MSG,
    hWnd: ?HWND,
    wMsgFilterMin: u32,
    wMsgFilterMax: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn TranslateMessage(
    lpMsg: ?*const MSG,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn DispatchMessageA(
    lpMsg: ?*const MSG,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn DispatchMessageW(
    lpMsg: ?*const MSG,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetCursorPos(
    lpPoint: ?*POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn PeekMessageW(
    lpMsg: ?*MSG,
    hWnd: ?HWND,
    wMsgFilterMin: u32,
    wMsgFilterMax: u32,
    wRemoveMsg: PEEK_MESSAGE_REMOVE_TYPE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PEEK_MESSAGE_REMOVE_TYPE = enum(u32) {
    NOREMOVE = 0,
    REMOVE = 1,
    NOYIELD = 2,
    QS_INPUT = 67567616,
    QS_POSTMESSAGE = 9961472,
    QS_PAINT = 2097152,
    QS_SENDMESSAGE = 4194304,
    _,
    pub fn initFlags(o: struct {
        NOREMOVE: u1 = 0,
        REMOVE: u1 = 0,
        NOYIELD: u1 = 0,
        QS_INPUT: u1 = 0,
        QS_POSTMESSAGE: u1 = 0,
        QS_PAINT: u1 = 0,
        QS_SENDMESSAGE: u1 = 0,
    }) PEEK_MESSAGE_REMOVE_TYPE {
        return @as(PEEK_MESSAGE_REMOVE_TYPE, @enumFromInt(
              (if (o.NOREMOVE == 1) @intFromEnum(PEEK_MESSAGE_REMOVE_TYPE.NOREMOVE) else 0)
            | (if (o.REMOVE == 1) @intFromEnum(PEEK_MESSAGE_REMOVE_TYPE.REMOVE) else 0)
            | (if (o.NOYIELD == 1) @intFromEnum(PEEK_MESSAGE_REMOVE_TYPE.NOYIELD) else 0)
            | (if (o.QS_INPUT == 1) @intFromEnum(PEEK_MESSAGE_REMOVE_TYPE.QS_INPUT) else 0)
            | (if (o.QS_POSTMESSAGE == 1) @intFromEnum(PEEK_MESSAGE_REMOVE_TYPE.QS_POSTMESSAGE) else 0)
            | (if (o.QS_PAINT == 1) @intFromEnum(PEEK_MESSAGE_REMOVE_TYPE.QS_PAINT) else 0)
            | (if (o.QS_SENDMESSAGE == 1) @intFromEnum(PEEK_MESSAGE_REMOVE_TYPE.QS_SENDMESSAGE) else 0)
        ));
    }
};
pub const PM_NOREMOVE = PEEK_MESSAGE_REMOVE_TYPE.NOREMOVE;
pub const PM_REMOVE = PEEK_MESSAGE_REMOVE_TYPE.REMOVE;
pub const PM_NOYIELD = PEEK_MESSAGE_REMOVE_TYPE.NOYIELD;
pub const PM_QS_INPUT = PEEK_MESSAGE_REMOVE_TYPE.QS_INPUT;
pub const PM_QS_POSTMESSAGE = PEEK_MESSAGE_REMOVE_TYPE.QS_POSTMESSAGE;
pub const PM_QS_PAINT = PEEK_MESSAGE_REMOVE_TYPE.QS_PAINT;
pub const PM_QS_SENDMESSAGE = PEEK_MESSAGE_REMOVE_TYPE.QS_SENDMESSAGE;

pub const MSG = extern struct {
    hwnd: ?HWND,
    message: u32,
    wParam: WPARAM,
    lParam: LPARAM,
    time: u32,
    pt: POINT,
};

// TODO: this type is limited to platform 'windows5.0'
pub extern "kernel32" fn QueryPerformanceCounter(
    lpPerformanceCount: ?*LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "kernel32" fn QueryPerformanceFrequency(
    lpFrequency: ?*LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const LARGE_INTEGER = extern union {
    Anonymous: extern struct {
        LowPart: u32,
        HighPart: i32,
    },
    u: extern struct {
        LowPart: u32,
        HighPart: i32,
    },
    QuadPart: i64,
};

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CloseWindow(
    hWnd: ?HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn MoveWindow(
    hWnd: ?HWND,
    X: i32,
    Y: i32,
    nWidth: i32,
    nHeight: i32,
    bRepaint: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SetWindowPos(
    hWnd: ?HWND,
    hWndInsertAfter: ?HWND,
    X: i32,
    Y: i32,
    cx: i32,
    cy: i32,
    uFlags: SET_WINDOW_POS_FLAGS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const SET_WINDOW_POS_FLAGS = enum(u32) {
    ASYNCWINDOWPOS = 16384,
    DEFERERASE = 8192,
    DRAWFRAME = 32,
    // FRAMECHANGED = 32, this enum value conflicts with DRAWFRAME
    HIDEWINDOW = 128,
    NOACTIVATE = 16,
    NOCOPYBITS = 256,
    NOMOVE = 2,
    NOOWNERZORDER = 512,
    NOREDRAW = 8,
    // NOREPOSITION = 512, this enum value conflicts with NOOWNERZORDER
    NOSENDCHANGING = 1024,
    NOSIZE = 1,
    NOZORDER = 4,
    SHOWWINDOW = 64,
    // _NOOWNERZORDER = 512, this enum value conflicts with NOOWNERZORDER
    _,
    pub fn initFlags(o: struct {
        ASYNCWINDOWPOS: u1 = 0,
        DEFERERASE: u1 = 0,
        DRAWFRAME: u1 = 0,
        HIDEWINDOW: u1 = 0,
        NOACTIVATE: u1 = 0,
        NOCOPYBITS: u1 = 0,
        NOMOVE: u1 = 0,
        NOOWNERZORDER: u1 = 0,
        NOREDRAW: u1 = 0,
        NOSENDCHANGING: u1 = 0,
        NOSIZE: u1 = 0,
        NOZORDER: u1 = 0,
        SHOWWINDOW: u1 = 0,
    }) SET_WINDOW_POS_FLAGS {
        return @as(SET_WINDOW_POS_FLAGS, @enumFromInt(
              (if (o.ASYNCWINDOWPOS == 1) @intFromEnum(SET_WINDOW_POS_FLAGS.ASYNCWINDOWPOS) else 0)
            | (if (o.DEFERERASE == 1) @intFromEnum(SET_WINDOW_POS_FLAGS.DEFERERASE) else 0)
            | (if (o.DRAWFRAME == 1) @intFromEnum(SET_WINDOW_POS_FLAGS.DRAWFRAME) else 0)
            | (if (o.HIDEWINDOW == 1) @intFromEnum(SET_WINDOW_POS_FLAGS.HIDEWINDOW) else 0)
            | (if (o.NOACTIVATE == 1) @intFromEnum(SET_WINDOW_POS_FLAGS.NOACTIVATE) else 0)
            | (if (o.NOCOPYBITS == 1) @intFromEnum(SET_WINDOW_POS_FLAGS.NOCOPYBITS) else 0)
            | (if (o.NOMOVE == 1) @intFromEnum(SET_WINDOW_POS_FLAGS.NOMOVE) else 0)
            | (if (o.NOOWNERZORDER == 1) @intFromEnum(SET_WINDOW_POS_FLAGS.NOOWNERZORDER) else 0)
            | (if (o.NOREDRAW == 1) @intFromEnum(SET_WINDOW_POS_FLAGS.NOREDRAW) else 0)
            | (if (o.NOSENDCHANGING == 1) @intFromEnum(SET_WINDOW_POS_FLAGS.NOSENDCHANGING) else 0)
            | (if (o.NOSIZE == 1) @intFromEnum(SET_WINDOW_POS_FLAGS.NOSIZE) else 0)
            | (if (o.NOZORDER == 1) @intFromEnum(SET_WINDOW_POS_FLAGS.NOZORDER) else 0)
            | (if (o.SHOWWINDOW == 1) @intFromEnum(SET_WINDOW_POS_FLAGS.SHOWWINDOW) else 0)
        ));
    }
};
pub const SWP_ASYNCWINDOWPOS = SET_WINDOW_POS_FLAGS.ASYNCWINDOWPOS;
pub const SWP_DEFERERASE = SET_WINDOW_POS_FLAGS.DEFERERASE;
pub const SWP_DRAWFRAME = SET_WINDOW_POS_FLAGS.DRAWFRAME;
pub const SWP_FRAMECHANGED = SET_WINDOW_POS_FLAGS.DRAWFRAME;
pub const SWP_HIDEWINDOW = SET_WINDOW_POS_FLAGS.HIDEWINDOW;
pub const SWP_NOACTIVATE = SET_WINDOW_POS_FLAGS.NOACTIVATE;
pub const SWP_NOCOPYBITS = SET_WINDOW_POS_FLAGS.NOCOPYBITS;
pub const SWP_NOMOVE = SET_WINDOW_POS_FLAGS.NOMOVE;
pub const SWP_NOOWNERZORDER = SET_WINDOW_POS_FLAGS.NOOWNERZORDER;
pub const SWP_NOREDRAW = SET_WINDOW_POS_FLAGS.NOREDRAW;
pub const SWP_NOREPOSITION = SET_WINDOW_POS_FLAGS.NOOWNERZORDER;
pub const SWP_NOSENDCHANGING = SET_WINDOW_POS_FLAGS.NOSENDCHANGING;
pub const SWP_NOSIZE = SET_WINDOW_POS_FLAGS.NOSIZE;
pub const SWP_NOZORDER = SET_WINDOW_POS_FLAGS.NOZORDER;
pub const SWP_SHOWWINDOW = SET_WINDOW_POS_FLAGS.SHOWWINDOW;
pub const SWP__NOOWNERZORDER = SET_WINDOW_POS_FLAGS.NOOWNERZORDER;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn DestroyWindow(
    hWnd: ?HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn ShowWindow(
    hWnd: ?HWND,
    nCmdShow: SHOW_WINDOW_CMD,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetWindowPlacement(
    hWnd: ?HWND,
    lpwndpl: ?*WINDOWPLACEMENT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const WINDOWPLACEMENT = extern struct {
    length: u32,
    flags: WINDOWPLACEMENT_FLAGS,
    showCmd: SHOW_WINDOW_CMD,
    ptMinPosition: POINT,
    ptMaxPosition: POINT,
    rcNormalPosition: RECT,
};

pub const WINDOWPLACEMENT_FLAGS = enum(u32) {
    ASYNCWINDOWPLACEMENT = 4,
    RESTORETOMAXIMIZED = 2,
    SETMINPOSITION = 1,
    _,
    pub fn initFlags(o: struct {
        ASYNCWINDOWPLACEMENT: u1 = 0,
        RESTORETOMAXIMIZED: u1 = 0,
        SETMINPOSITION: u1 = 0,
    }) WINDOWPLACEMENT_FLAGS {
        return @as(WINDOWPLACEMENT_FLAGS, @enumFromInt(
              (if (o.ASYNCWINDOWPLACEMENT == 1) @intFromEnum(WINDOWPLACEMENT_FLAGS.ASYNCWINDOWPLACEMENT) else 0)
            | (if (o.RESTORETOMAXIMIZED == 1) @intFromEnum(WINDOWPLACEMENT_FLAGS.RESTORETOMAXIMIZED) else 0)
            | (if (o.SETMINPOSITION == 1) @intFromEnum(WINDOWPLACEMENT_FLAGS.SETMINPOSITION) else 0)
        ));
    }
};
pub const WPF_ASYNCWINDOWPLACEMENT = WINDOWPLACEMENT_FLAGS.ASYNCWINDOWPLACEMENT;
pub const WPF_RESTORETOMAXIMIZED = WINDOWPLACEMENT_FLAGS.RESTORETOMAXIMIZED;
pub const WPF_SETMINPOSITION = WINDOWPLACEMENT_FLAGS.SETMINPOSITION;

pub const SHOW_WINDOW_CMD = enum(u32) {
    FORCEMINIMIZE = 11,
    HIDE = 0,
    MAXIMIZE = 3,
    MINIMIZE = 6,
    RESTORE = 9,
    SHOW = 5,
    SHOWDEFAULT = 10,
    // SHOWMAXIMIZED = 3, this enum value conflicts with MAXIMIZE
    SHOWMINIMIZED = 2,
    SHOWMINNOACTIVE = 7,
    SHOWNA = 8,
    SHOWNOACTIVATE = 4,
    SHOWNORMAL = 1,
    // NORMAL = 1, this enum value conflicts with SHOWNORMAL
    // MAX = 11, this enum value conflicts with FORCEMINIMIZE
    // PARENTCLOSING = 1, this enum value conflicts with SHOWNORMAL
    // OTHERZOOM = 2, this enum value conflicts with SHOWMINIMIZED
    // PARENTOPENING = 3, this enum value conflicts with MAXIMIZE
    // OTHERUNZOOM = 4, this enum value conflicts with SHOWNOACTIVATE
    // SCROLLCHILDREN = 1, this enum value conflicts with SHOWNORMAL
    // INVALIDATE = 2, this enum value conflicts with SHOWMINIMIZED
    // ERASE = 4, this enum value conflicts with SHOWNOACTIVATE
    SMOOTHSCROLL = 16,
    _,
    pub fn initFlags(o: struct {
        FORCEMINIMIZE: u1 = 0,
        HIDE: u1 = 0,
        MAXIMIZE: u1 = 0,
        MINIMIZE: u1 = 0,
        RESTORE: u1 = 0,
        SHOW: u1 = 0,
        SHOWDEFAULT: u1 = 0,
        SHOWMINIMIZED: u1 = 0,
        SHOWMINNOACTIVE: u1 = 0,
        SHOWNA: u1 = 0,
        SHOWNOACTIVATE: u1 = 0,
        SHOWNORMAL: u1 = 0,
        SMOOTHSCROLL: u1 = 0,
    }) SHOW_WINDOW_CMD {
        return @as(SHOW_WINDOW_CMD, @enumFromInt(
              (if (o.FORCEMINIMIZE == 1) @intFromEnum(SHOW_WINDOW_CMD.FORCEMINIMIZE) else 0)
            | (if (o.HIDE == 1) @intFromEnum(SHOW_WINDOW_CMD.HIDE) else 0)
            | (if (o.MAXIMIZE == 1) @intFromEnum(SHOW_WINDOW_CMD.MAXIMIZE) else 0)
            | (if (o.MINIMIZE == 1) @intFromEnum(SHOW_WINDOW_CMD.MINIMIZE) else 0)
            | (if (o.RESTORE == 1) @intFromEnum(SHOW_WINDOW_CMD.RESTORE) else 0)
            | (if (o.SHOW == 1) @intFromEnum(SHOW_WINDOW_CMD.SHOW) else 0)
            | (if (o.SHOWDEFAULT == 1) @intFromEnum(SHOW_WINDOW_CMD.SHOWDEFAULT) else 0)
            | (if (o.SHOWMINIMIZED == 1) @intFromEnum(SHOW_WINDOW_CMD.SHOWMINIMIZED) else 0)
            | (if (o.SHOWMINNOACTIVE == 1) @intFromEnum(SHOW_WINDOW_CMD.SHOWMINNOACTIVE) else 0)
            | (if (o.SHOWNA == 1) @intFromEnum(SHOW_WINDOW_CMD.SHOWNA) else 0)
            | (if (o.SHOWNOACTIVATE == 1) @intFromEnum(SHOW_WINDOW_CMD.SHOWNOACTIVATE) else 0)
            | (if (o.SHOWNORMAL == 1) @intFromEnum(SHOW_WINDOW_CMD.SHOWNORMAL) else 0)
            | (if (o.SMOOTHSCROLL == 1) @intFromEnum(SHOW_WINDOW_CMD.SMOOTHSCROLL) else 0)
        ));
    }
};
pub const SW_FORCEMINIMIZE = SHOW_WINDOW_CMD.FORCEMINIMIZE;
pub const SW_HIDE = SHOW_WINDOW_CMD.HIDE;
pub const SW_MAXIMIZE = SHOW_WINDOW_CMD.MAXIMIZE;
pub const SW_MINIMIZE = SHOW_WINDOW_CMD.MINIMIZE;
pub const SW_RESTORE = SHOW_WINDOW_CMD.RESTORE;
pub const SW_SHOW = SHOW_WINDOW_CMD.SHOW;
pub const SW_SHOWDEFAULT = SHOW_WINDOW_CMD.SHOWDEFAULT;
pub const SW_SHOWMAXIMIZED = SHOW_WINDOW_CMD.MAXIMIZE;
pub const SW_SHOWMINIMIZED = SHOW_WINDOW_CMD.SHOWMINIMIZED;
pub const SW_SHOWMINNOACTIVE = SHOW_WINDOW_CMD.SHOWMINNOACTIVE;
pub const SW_SHOWNA = SHOW_WINDOW_CMD.SHOWNA;
pub const SW_SHOWNOACTIVATE = SHOW_WINDOW_CMD.SHOWNOACTIVATE;
pub const SW_SHOWNORMAL = SHOW_WINDOW_CMD.SHOWNORMAL;
pub const SW_NORMAL = SHOW_WINDOW_CMD.SHOWNORMAL;
pub const SW_MAX = SHOW_WINDOW_CMD.FORCEMINIMIZE;
pub const SW_PARENTCLOSING = SHOW_WINDOW_CMD.SHOWNORMAL;
pub const SW_OTHERZOOM = SHOW_WINDOW_CMD.SHOWMINIMIZED;
pub const SW_PARENTOPENING = SHOW_WINDOW_CMD.MAXIMIZE;
pub const SW_OTHERUNZOOM = SHOW_WINDOW_CMD.SHOWNOACTIVATE;
pub const SW_SCROLLCHILDREN = SHOW_WINDOW_CMD.SHOWNORMAL;
pub const SW_INVALIDATE = SHOW_WINDOW_CMD.SHOWMINIMIZED;
pub const SW_ERASE = SHOW_WINDOW_CMD.SHOWNOACTIVATE;
pub const SW_SMOOTHSCROLL = SHOW_WINDOW_CMD.SMOOTHSCROLL;

pub const L = @import("std").unicode.utf8ToUtf16LeStringLiteral;

// TODO: this type has a FreeFunc 'DestroyMenu', what can Zig do with this information?
// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const HMENU = *opaque{};

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CreateWindowExW(
    dwExStyle: WINDOW_EX_STYLE,
    lpClassName: ?[*:0]const u16,
    lpWindowName: ?[*:0]const u16,
    dwStyle: WINDOW_STYLE,
    X: i32,
    Y: i32,
    nWidth: i32,
    nHeight: i32,
    hWndParent: ?HWND,
    hMenu: ?HMENU,
    hInstance: ?HINSTANCE,
    lpParam: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) ?HWND;

pub const HINSTANCE = *opaque {};

pub const WINDOW_EX_STYLE = enum(u32) {
    DLGMODALFRAME = 1,
    NOPARENTNOTIFY = 4,
    TOPMOST = 8,
    ACCEPTFILES = 16,
    TRANSPARENT = 32,
    MDICHILD = 64,
    TOOLWINDOW = 128,
    WINDOWEDGE = 256,
    CLIENTEDGE = 512,
    CONTEXTHELP = 1024,
    RIGHT = 4096,
    LEFT = 0,
    RTLREADING = 8192,
    // LTRREADING = 0, this enum value conflicts with LEFT
    LEFTSCROLLBAR = 16384,
    // RIGHTSCROLLBAR = 0, this enum value conflicts with LEFT
    CONTROLPARENT = 65536,
    STATICEDGE = 131072,
    APPWINDOW = 262144,
    OVERLAPPEDWINDOW = 768,
    PALETTEWINDOW = 392,
    LAYERED = 524288,
    NOINHERITLAYOUT = 1048576,
    NOREDIRECTIONBITMAP = 2097152,
    LAYOUTRTL = 4194304,
    COMPOSITED = 33554432,
    NOACTIVATE = 134217728,
    _,
    pub fn initFlags(o: struct {
        DLGMODALFRAME: u1 = 0,
        NOPARENTNOTIFY: u1 = 0,
        TOPMOST: u1 = 0,
        ACCEPTFILES: u1 = 0,
        TRANSPARENT: u1 = 0,
        MDICHILD: u1 = 0,
        TOOLWINDOW: u1 = 0,
        WINDOWEDGE: u1 = 0,
        CLIENTEDGE: u1 = 0,
        CONTEXTHELP: u1 = 0,
        RIGHT: u1 = 0,
        LEFT: u1 = 0,
        RTLREADING: u1 = 0,
        LEFTSCROLLBAR: u1 = 0,
        CONTROLPARENT: u1 = 0,
        STATICEDGE: u1 = 0,
        APPWINDOW: u1 = 0,
        OVERLAPPEDWINDOW: u1 = 0,
        PALETTEWINDOW: u1 = 0,
        LAYERED: u1 = 0,
        NOINHERITLAYOUT: u1 = 0,
        NOREDIRECTIONBITMAP: u1 = 0,
        LAYOUTRTL: u1 = 0,
        COMPOSITED: u1 = 0,
        NOACTIVATE: u1 = 0,
    }) WINDOW_EX_STYLE {
        return @as(WINDOW_EX_STYLE, @enumFromInt(
              (if (o.DLGMODALFRAME == 1) @intFromEnum(WINDOW_EX_STYLE.DLGMODALFRAME) else 0)
            | (if (o.NOPARENTNOTIFY == 1) @intFromEnum(WINDOW_EX_STYLE.NOPARENTNOTIFY) else 0)
            | (if (o.TOPMOST == 1) @intFromEnum(WINDOW_EX_STYLE.TOPMOST) else 0)
            | (if (o.ACCEPTFILES == 1) @intFromEnum(WINDOW_EX_STYLE.ACCEPTFILES) else 0)
            | (if (o.TRANSPARENT == 1) @intFromEnum(WINDOW_EX_STYLE.TRANSPARENT) else 0)
            | (if (o.MDICHILD == 1) @intFromEnum(WINDOW_EX_STYLE.MDICHILD) else 0)
            | (if (o.TOOLWINDOW == 1) @intFromEnum(WINDOW_EX_STYLE.TOOLWINDOW) else 0)
            | (if (o.WINDOWEDGE == 1) @intFromEnum(WINDOW_EX_STYLE.WINDOWEDGE) else 0)
            | (if (o.CLIENTEDGE == 1) @intFromEnum(WINDOW_EX_STYLE.CLIENTEDGE) else 0)
            | (if (o.CONTEXTHELP == 1) @intFromEnum(WINDOW_EX_STYLE.CONTEXTHELP) else 0)
            | (if (o.RIGHT == 1) @intFromEnum(WINDOW_EX_STYLE.RIGHT) else 0)
            | (if (o.LEFT == 1) @intFromEnum(WINDOW_EX_STYLE.LEFT) else 0)
            | (if (o.RTLREADING == 1) @intFromEnum(WINDOW_EX_STYLE.RTLREADING) else 0)
            | (if (o.LEFTSCROLLBAR == 1) @intFromEnum(WINDOW_EX_STYLE.LEFTSCROLLBAR) else 0)
            | (if (o.CONTROLPARENT == 1) @intFromEnum(WINDOW_EX_STYLE.CONTROLPARENT) else 0)
            | (if (o.STATICEDGE == 1) @intFromEnum(WINDOW_EX_STYLE.STATICEDGE) else 0)
            | (if (o.APPWINDOW == 1) @intFromEnum(WINDOW_EX_STYLE.APPWINDOW) else 0)
            | (if (o.OVERLAPPEDWINDOW == 1) @intFromEnum(WINDOW_EX_STYLE.OVERLAPPEDWINDOW) else 0)
            | (if (o.PALETTEWINDOW == 1) @intFromEnum(WINDOW_EX_STYLE.PALETTEWINDOW) else 0)
            | (if (o.LAYERED == 1) @intFromEnum(WINDOW_EX_STYLE.LAYERED) else 0)
            | (if (o.NOINHERITLAYOUT == 1) @intFromEnum(WINDOW_EX_STYLE.NOINHERITLAYOUT) else 0)
            | (if (o.NOREDIRECTIONBITMAP == 1) @intFromEnum(WINDOW_EX_STYLE.NOREDIRECTIONBITMAP) else 0)
            | (if (o.LAYOUTRTL == 1) @intFromEnum(WINDOW_EX_STYLE.LAYOUTRTL) else 0)
            | (if (o.COMPOSITED == 1) @intFromEnum(WINDOW_EX_STYLE.COMPOSITED) else 0)
            | (if (o.NOACTIVATE == 1) @intFromEnum(WINDOW_EX_STYLE.NOACTIVATE) else 0)
        ));
    }
};
pub const WS_EX_DLGMODALFRAME = WINDOW_EX_STYLE.DLGMODALFRAME;
pub const WS_EX_NOPARENTNOTIFY = WINDOW_EX_STYLE.NOPARENTNOTIFY;
pub const WS_EX_TOPMOST = WINDOW_EX_STYLE.TOPMOST;
pub const WS_EX_ACCEPTFILES = WINDOW_EX_STYLE.ACCEPTFILES;
pub const WS_EX_TRANSPARENT = WINDOW_EX_STYLE.TRANSPARENT;
pub const WS_EX_MDICHILD = WINDOW_EX_STYLE.MDICHILD;
pub const WS_EX_TOOLWINDOW = WINDOW_EX_STYLE.TOOLWINDOW;
pub const WS_EX_WINDOWEDGE = WINDOW_EX_STYLE.WINDOWEDGE;
pub const WS_EX_CLIENTEDGE = WINDOW_EX_STYLE.CLIENTEDGE;
pub const WS_EX_CONTEXTHELP = WINDOW_EX_STYLE.CONTEXTHELP;
pub const WS_EX_RIGHT = WINDOW_EX_STYLE.RIGHT;
pub const WS_EX_LEFT = WINDOW_EX_STYLE.LEFT;
pub const WS_EX_RTLREADING = WINDOW_EX_STYLE.RTLREADING;
pub const WS_EX_LTRREADING = WINDOW_EX_STYLE.LEFT;
pub const WS_EX_LEFTSCROLLBAR = WINDOW_EX_STYLE.LEFTSCROLLBAR;
pub const WS_EX_RIGHTSCROLLBAR = WINDOW_EX_STYLE.LEFT;
pub const WS_EX_CONTROLPARENT = WINDOW_EX_STYLE.CONTROLPARENT;
pub const WS_EX_STATICEDGE = WINDOW_EX_STYLE.STATICEDGE;
pub const WS_EX_APPWINDOW = WINDOW_EX_STYLE.APPWINDOW;
pub const WS_EX_OVERLAPPEDWINDOW = WINDOW_EX_STYLE.OVERLAPPEDWINDOW;
pub const WS_EX_PALETTEWINDOW = WINDOW_EX_STYLE.PALETTEWINDOW;
pub const WS_EX_LAYERED = WINDOW_EX_STYLE.LAYERED;
pub const WS_EX_NOINHERITLAYOUT = WINDOW_EX_STYLE.NOINHERITLAYOUT;
pub const WS_EX_NOREDIRECTIONBITMAP = WINDOW_EX_STYLE.NOREDIRECTIONBITMAP;
pub const WS_EX_LAYOUTRTL = WINDOW_EX_STYLE.LAYOUTRTL;
pub const WS_EX_COMPOSITED = WINDOW_EX_STYLE.COMPOSITED;
pub const WS_EX_NOACTIVATE = WINDOW_EX_STYLE.NOACTIVATE;

pub const WINDOW_STYLE = enum(u32) {
    OVERLAPPED = 0,
    POPUP = 2147483648,
    CHILD = 1073741824,
    MINIMIZE = 536870912,
    VISIBLE = 268435456,
    DISABLED = 134217728,
    CLIPSIBLINGS = 67108864,
    CLIPCHILDREN = 33554432,
    MAXIMIZE = 16777216,
    CAPTION = 12582912,
    BORDER = 8388608,
    DLGFRAME = 4194304,
    VSCROLL = 2097152,
    HSCROLL = 1048576,
    SYSMENU = 524288,
    THICKFRAME = 262144,
    GROUP = 131072,
    TABSTOP = 65536,
    // MINIMIZEBOX = 131072, this enum value conflicts with GROUP
    // MAXIMIZEBOX = 65536, this enum value conflicts with TABSTOP
    // TILED = 0, this enum value conflicts with OVERLAPPED
    // ICONIC = 536870912, this enum value conflicts with MINIMIZE
    // SIZEBOX = 262144, this enum value conflicts with THICKFRAME
    TILEDWINDOW = 13565952,
    // OVERLAPPEDWINDOW = 13565952, this enum value conflicts with TILEDWINDOW
    POPUPWINDOW = 2156396544,
    // CHILDWINDOW = 1073741824, this enum value conflicts with CHILD
    ACTIVECAPTION = 1,
    _,
    pub fn initFlags(o: struct {
        OVERLAPPED: u1 = 0,
        POPUP: u1 = 0,
        CHILD: u1 = 0,
        MINIMIZE: u1 = 0,
        VISIBLE: u1 = 0,
        DISABLED: u1 = 0,
        CLIPSIBLINGS: u1 = 0,
        CLIPCHILDREN: u1 = 0,
        MAXIMIZE: u1 = 0,
        CAPTION: u1 = 0,
        BORDER: u1 = 0,
        DLGFRAME: u1 = 0,
        VSCROLL: u1 = 0,
        HSCROLL: u1 = 0,
        SYSMENU: u1 = 0,
        THICKFRAME: u1 = 0,
        GROUP: u1 = 0,
        TABSTOP: u1 = 0,
        TILEDWINDOW: u1 = 0,
        POPUPWINDOW: u1 = 0,
        ACTIVECAPTION: u1 = 0,
    }) WINDOW_STYLE {
        return @as(WINDOW_STYLE, @enumFromInt(
              (if (o.OVERLAPPED == 1) @intFromEnum(WINDOW_STYLE.OVERLAPPED) else 0)
            | (if (o.POPUP == 1) @intFromEnum(WINDOW_STYLE.POPUP) else 0)
            | (if (o.CHILD == 1) @intFromEnum(WINDOW_STYLE.CHILD) else 0)
            | (if (o.MINIMIZE == 1) @intFromEnum(WINDOW_STYLE.MINIMIZE) else 0)
            | (if (o.VISIBLE == 1) @intFromEnum(WINDOW_STYLE.VISIBLE) else 0)
            | (if (o.DISABLED == 1) @intFromEnum(WINDOW_STYLE.DISABLED) else 0)
            | (if (o.CLIPSIBLINGS == 1) @intFromEnum(WINDOW_STYLE.CLIPSIBLINGS) else 0)
            | (if (o.CLIPCHILDREN == 1) @intFromEnum(WINDOW_STYLE.CLIPCHILDREN) else 0)
            | (if (o.MAXIMIZE == 1) @intFromEnum(WINDOW_STYLE.MAXIMIZE) else 0)
            | (if (o.CAPTION == 1) @intFromEnum(WINDOW_STYLE.CAPTION) else 0)
            | (if (o.BORDER == 1) @intFromEnum(WINDOW_STYLE.BORDER) else 0)
            | (if (o.DLGFRAME == 1) @intFromEnum(WINDOW_STYLE.DLGFRAME) else 0)
            | (if (o.VSCROLL == 1) @intFromEnum(WINDOW_STYLE.VSCROLL) else 0)
            | (if (o.HSCROLL == 1) @intFromEnum(WINDOW_STYLE.HSCROLL) else 0)
            | (if (o.SYSMENU == 1) @intFromEnum(WINDOW_STYLE.SYSMENU) else 0)
            | (if (o.THICKFRAME == 1) @intFromEnum(WINDOW_STYLE.THICKFRAME) else 0)
            | (if (o.GROUP == 1) @intFromEnum(WINDOW_STYLE.GROUP) else 0)
            | (if (o.TABSTOP == 1) @intFromEnum(WINDOW_STYLE.TABSTOP) else 0)
            | (if (o.TILEDWINDOW == 1) @intFromEnum(WINDOW_STYLE.TILEDWINDOW) else 0)
            | (if (o.POPUPWINDOW == 1) @intFromEnum(WINDOW_STYLE.POPUPWINDOW) else 0)
            | (if (o.ACTIVECAPTION == 1) @intFromEnum(WINDOW_STYLE.ACTIVECAPTION) else 0)
        ));
    }
};
pub const WS_OVERLAPPED = WINDOW_STYLE.OVERLAPPED;
pub const WS_POPUP = WINDOW_STYLE.POPUP;
pub const WS_CHILD = WINDOW_STYLE.CHILD;
pub const WS_MINIMIZE = WINDOW_STYLE.MINIMIZE;
pub const WS_VISIBLE = WINDOW_STYLE.VISIBLE;
pub const WS_DISABLED = WINDOW_STYLE.DISABLED;
pub const WS_CLIPSIBLINGS = WINDOW_STYLE.CLIPSIBLINGS;
pub const WS_CLIPCHILDREN = WINDOW_STYLE.CLIPCHILDREN;
pub const WS_MAXIMIZE = WINDOW_STYLE.MAXIMIZE;
pub const WS_CAPTION = WINDOW_STYLE.CAPTION;
pub const WS_BORDER = WINDOW_STYLE.BORDER;
pub const WS_DLGFRAME = WINDOW_STYLE.DLGFRAME;
pub const WS_VSCROLL = WINDOW_STYLE.VSCROLL;
pub const WS_HSCROLL = WINDOW_STYLE.HSCROLL;
pub const WS_SYSMENU = WINDOW_STYLE.SYSMENU;
pub const WS_THICKFRAME = WINDOW_STYLE.THICKFRAME;
pub const WS_GROUP = WINDOW_STYLE.GROUP;
pub const WS_TABSTOP = WINDOW_STYLE.TABSTOP;
pub const WS_MINIMIZEBOX = WINDOW_STYLE.GROUP;
pub const WS_MAXIMIZEBOX = WINDOW_STYLE.TABSTOP;
pub const WS_TILED = WINDOW_STYLE.OVERLAPPED;
pub const WS_ICONIC = WINDOW_STYLE.MINIMIZE;
pub const WS_SIZEBOX = WINDOW_STYLE.THICKFRAME;
pub const WS_TILEDWINDOW = WINDOW_STYLE.TILEDWINDOW;
pub const WS_OVERLAPPEDWINDOW = WINDOW_STYLE.TILEDWINDOW;
pub const WS_POPUPWINDOW = WINDOW_STYLE.POPUPWINDOW;
pub const WS_CHILDWINDOW = WINDOW_STYLE.CHILD;
pub const WS_ACTIVECAPTION = WINDOW_STYLE.ACTIVECAPTION;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn UnregisterClassA(
    lpClassName: ?[*:0]const u8,
    hInstance: ?HINSTANCE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn UnregisterClassW(
    lpClassName: ?[*:0]const u16,
    hInstance: ?HINSTANCE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn RegisterClassW(
    lpWndClass: ?*const WNDCLASSW,
) callconv(@import("std").os.windows.WINAPI) u16;

pub const WNDPROC = switch (@import("builtin").zig_backend) {
    .stage1 => fn(
        param0: HWND,
        param1: u32,
        param2: WPARAM,
        param3: LPARAM,
    ) callconv(@import("std").os.windows.WINAPI) LRESULT,
    else => *const fn(
        param0: HWND,
        param1: u32,
        param2: WPARAM,
        param3: LPARAM,
    ) callconv(@import("std").os.windows.WINAPI) LRESULT,
} ;

// TODO: this type has a FreeFunc 'DestroyIcon', what can Zig do with this information?
// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const HICON = *opaque{};

// TODO: this type has a FreeFunc 'DestroyCursor', what can Zig do with this information?
// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
// TODO: type 'HCURSOR' is "AlsoUsableFor" 'HICON' which means this type is implicitly
//      convertible to 'HICON' but not the other way around.  I don't know how to do this
//      in Zig so for now I'm just defining it as an alias
pub const HCURSOR = HICON;

pub const WNDCLASSW = extern struct {
    style: WNDCLASS_STYLES,
    lpfnWndProc: ?WNDPROC,
    cbClsExtra: i32,
    cbWndExtra: i32,
    hInstance: ?HINSTANCE,
    hIcon: ?HICON,
    hCursor: ?HCURSOR,
    hbrBackground: ?HBRUSH,
    lpszMenuName: ?[*:0]const u16,
    lpszClassName: ?[*:0]const u16,
};

pub const BI_RGB = @as(i32, 0);
pub const BI_RLE8 = @as(i32, 1);
pub const BI_RLE4 = @as(i32, 2);
pub const BI_BITFIELDS = @as(i32, 3);
pub const BI_JPEG = @as(i32, 4);
pub const BI_PNG = @as(i32, 5);

// TODO: this type has a FreeFunc 'DeleteObject', what can Zig do with this information?
// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
//TODO: type 'HBRUSH' is "AlsoUsableFor" 'HGDIOBJ' which means this type is implicitly
//      convertible to 'HGDIOBJ' but not the other way around.  I don't know how to do this
//      in Zig so for now I'm just defining it as an alias
pub const HBRUSH = HGDIOBJ;

// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const HGDIOBJ = *opaque{};

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "kernel32" fn GetModuleHandleA(
    lpModuleName: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) ?HINSTANCE;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "kernel32" fn GetModuleHandleW(
    lpModuleName: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?HINSTANCE;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "kernel32" fn GetModuleHandleExA(
    dwFlags: u32,
    lpModuleName: ?[*:0]const u8,
    phModule: ?*?HINSTANCE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "kernel32" fn GetModuleHandleExW(
    dwFlags: u32,
    lpModuleName: ?[*:0]const u16,
    phModule: ?*?HINSTANCE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const WNDCLASS_STYLES = enum(u32) {
    VREDRAW = 1,
    HREDRAW = 2,
    DBLCLKS = 8,
    OWNDC = 32,
    CLASSDC = 64,
    PARENTDC = 128,
    NOCLOSE = 512,
    SAVEBITS = 2048,
    BYTEALIGNCLIENT = 4096,
    BYTEALIGNWINDOW = 8192,
    GLOBALCLASS = 16384,
    IME = 65536,
    DROPSHADOW = 131072,
    _,
    pub fn initFlags(o: struct {
        VREDRAW: u1 = 0,
        HREDRAW: u1 = 0,
        DBLCLKS: u1 = 0,
        OWNDC: u1 = 0,
        CLASSDC: u1 = 0,
        PARENTDC: u1 = 0,
        NOCLOSE: u1 = 0,
        SAVEBITS: u1 = 0,
        BYTEALIGNCLIENT: u1 = 0,
        BYTEALIGNWINDOW: u1 = 0,
        GLOBALCLASS: u1 = 0,
        IME: u1 = 0,
        DROPSHADOW: u1 = 0,
    }) WNDCLASS_STYLES {
        return @as(WNDCLASS_STYLES, @enumFromInt(
              (if (o.VREDRAW == 1) @intFromEnum(WNDCLASS_STYLES.VREDRAW) else 0)
            | (if (o.HREDRAW == 1) @intFromEnum(WNDCLASS_STYLES.HREDRAW) else 0)
            | (if (o.DBLCLKS == 1) @intFromEnum(WNDCLASS_STYLES.DBLCLKS) else 0)
            | (if (o.OWNDC == 1) @intFromEnum(WNDCLASS_STYLES.OWNDC) else 0)
            | (if (o.CLASSDC == 1) @intFromEnum(WNDCLASS_STYLES.CLASSDC) else 0)
            | (if (o.PARENTDC == 1) @intFromEnum(WNDCLASS_STYLES.PARENTDC) else 0)
            | (if (o.NOCLOSE == 1) @intFromEnum(WNDCLASS_STYLES.NOCLOSE) else 0)
            | (if (o.SAVEBITS == 1) @intFromEnum(WNDCLASS_STYLES.SAVEBITS) else 0)
            | (if (o.BYTEALIGNCLIENT == 1) @intFromEnum(WNDCLASS_STYLES.BYTEALIGNCLIENT) else 0)
            | (if (o.BYTEALIGNWINDOW == 1) @intFromEnum(WNDCLASS_STYLES.BYTEALIGNWINDOW) else 0)
            | (if (o.GLOBALCLASS == 1) @intFromEnum(WNDCLASS_STYLES.GLOBALCLASS) else 0)
            | (if (o.IME == 1) @intFromEnum(WNDCLASS_STYLES.IME) else 0)
            | (if (o.DROPSHADOW == 1) @intFromEnum(WNDCLASS_STYLES.DROPSHADOW) else 0)
        ));
    }
};
pub const CS_VREDRAW = WNDCLASS_STYLES.VREDRAW;
pub const CS_HREDRAW = WNDCLASS_STYLES.HREDRAW;
pub const CS_DBLCLKS = WNDCLASS_STYLES.DBLCLKS;
pub const CS_OWNDC = WNDCLASS_STYLES.OWNDC;
pub const CS_CLASSDC = WNDCLASS_STYLES.CLASSDC;
pub const CS_PARENTDC = WNDCLASS_STYLES.PARENTDC;
pub const CS_NOCLOSE = WNDCLASS_STYLES.NOCLOSE;
pub const CS_SAVEBITS = WNDCLASS_STYLES.SAVEBITS;
pub const CS_BYTEALIGNCLIENT = WNDCLASS_STYLES.BYTEALIGNCLIENT;
pub const CS_BYTEALIGNWINDOW = WNDCLASS_STYLES.BYTEALIGNWINDOW;
pub const CS_GLOBALCLASS = WNDCLASS_STYLES.GLOBALCLASS;
pub const CS_IME = WNDCLASS_STYLES.IME;
pub const CS_DROPSHADOW = WNDCLASS_STYLES.DROPSHADOW;



pub const VIRTUAL_KEY = enum(u16) {
    @"0" = 48,
    @"1" = 49,
    @"2" = 50,
    @"3" = 51,
    @"4" = 52,
    @"5" = 53,
    @"6" = 54,
    @"7" = 55,
    @"8" = 56,
    @"9" = 57,
    A = 65,
    B = 66,
    C = 67,
    D = 68,
    E = 69,
    F = 70,
    G = 71,
    H = 72,
    I = 73,
    J = 74,
    K = 75,
    L = 76,
    M = 77,
    N = 78,
    O = 79,
    P = 80,
    Q = 81,
    R = 82,
    S = 83,
    T = 84,
    U = 85,
    V = 86,
    W = 87,
    X = 88,
    Y = 89,
    Z = 90,
    LBUTTON = 1,
    RBUTTON = 2,
    CANCEL = 3,
    MBUTTON = 4,
    XBUTTON1 = 5,
    XBUTTON2 = 6,
    BACK = 8,
    TAB = 9,
    CLEAR = 12,
    RETURN = 13,
    SHIFT = 16,
    CONTROL = 17,
    MENU = 18,
    PAUSE = 19,
    CAPITAL = 20,
    KANA = 21,
    // HANGEUL = 21, this enum value conflicts with KANA
    // HANGUL = 21, this enum value conflicts with KANA
    IME_ON = 22,
    JUNJA = 23,
    FINAL = 24,
    HANJA = 25,
    // KANJI = 25, this enum value conflicts with HANJA
    IME_OFF = 26,
    ESCAPE = 27,
    CONVERT = 28,
    NONCONVERT = 29,
    ACCEPT = 30,
    MODECHANGE = 31,
    SPACE = 32,
    PRIOR = 33,
    NEXT = 34,
    END = 35,
    HOME = 36,
    LEFT = 37,
    UP = 38,
    RIGHT = 39,
    DOWN = 40,
    SELECT = 41,
    PRINT = 42,
    EXECUTE = 43,
    SNAPSHOT = 44,
    INSERT = 45,
    DELETE = 46,
    HELP = 47,
    LWIN = 91,
    RWIN = 92,
    APPS = 93,
    SLEEP = 95,
    NUMPAD0 = 96,
    NUMPAD1 = 97,
    NUMPAD2 = 98,
    NUMPAD3 = 99,
    NUMPAD4 = 100,
    NUMPAD5 = 101,
    NUMPAD6 = 102,
    NUMPAD7 = 103,
    NUMPAD8 = 104,
    NUMPAD9 = 105,
    MULTIPLY = 106,
    ADD = 107,
    SEPARATOR = 108,
    SUBTRACT = 109,
    DECIMAL = 110,
    DIVIDE = 111,
    F1 = 112,
    F2 = 113,
    F3 = 114,
    F4 = 115,
    F5 = 116,
    F6 = 117,
    F7 = 118,
    F8 = 119,
    F9 = 120,
    F10 = 121,
    F11 = 122,
    F12 = 123,
    F13 = 124,
    F14 = 125,
    F15 = 126,
    F16 = 127,
    F17 = 128,
    F18 = 129,
    F19 = 130,
    F20 = 131,
    F21 = 132,
    F22 = 133,
    F23 = 134,
    F24 = 135,
    NAVIGATION_VIEW = 136,
    NAVIGATION_MENU = 137,
    NAVIGATION_UP = 138,
    NAVIGATION_DOWN = 139,
    NAVIGATION_LEFT = 140,
    NAVIGATION_RIGHT = 141,
    NAVIGATION_ACCEPT = 142,
    NAVIGATION_CANCEL = 143,
    NUMLOCK = 144,
    SCROLL = 145,
    OEM_NEC_EQUAL = 146,
    // OEM_FJ_JISHO = 146, this enum value conflicts with OEM_NEC_EQUAL
    OEM_FJ_MASSHOU = 147,
    OEM_FJ_TOUROKU = 148,
    OEM_FJ_LOYA = 149,
    OEM_FJ_ROYA = 150,
    LSHIFT = 160,
    RSHIFT = 161,
    LCONTROL = 162,
    RCONTROL = 163,
    LMENU = 164,
    RMENU = 165,
    BROWSER_BACK = 166,
    BROWSER_FORWARD = 167,
    BROWSER_REFRESH = 168,
    BROWSER_STOP = 169,
    BROWSER_SEARCH = 170,
    BROWSER_FAVORITES = 171,
    BROWSER_HOME = 172,
    VOLUME_MUTE = 173,
    VOLUME_DOWN = 174,
    VOLUME_UP = 175,
    MEDIA_NEXT_TRACK = 176,
    MEDIA_PREV_TRACK = 177,
    MEDIA_STOP = 178,
    MEDIA_PLAY_PAUSE = 179,
    LAUNCH_MAIL = 180,
    LAUNCH_MEDIA_SELECT = 181,
    LAUNCH_APP1 = 182,
    LAUNCH_APP2 = 183,
    OEM_1 = 186,
    OEM_PLUS = 187,
    OEM_COMMA = 188,
    OEM_MINUS = 189,
    OEM_PERIOD = 190,
    OEM_2 = 191,
    OEM_3 = 192,
    GAMEPAD_A = 195,
    GAMEPAD_B = 196,
    GAMEPAD_X = 197,
    GAMEPAD_Y = 198,
    GAMEPAD_RIGHT_SHOULDER = 199,
    GAMEPAD_LEFT_SHOULDER = 200,
    GAMEPAD_LEFT_TRIGGER = 201,
    GAMEPAD_RIGHT_TRIGGER = 202,
    GAMEPAD_DPAD_UP = 203,
    GAMEPAD_DPAD_DOWN = 204,
    GAMEPAD_DPAD_LEFT = 205,
    GAMEPAD_DPAD_RIGHT = 206,
    GAMEPAD_MENU = 207,
    GAMEPAD_VIEW = 208,
    GAMEPAD_LEFT_THUMBSTICK_BUTTON = 209,
    GAMEPAD_RIGHT_THUMBSTICK_BUTTON = 210,
    GAMEPAD_LEFT_THUMBSTICK_UP = 211,
    GAMEPAD_LEFT_THUMBSTICK_DOWN = 212,
    GAMEPAD_LEFT_THUMBSTICK_RIGHT = 213,
    GAMEPAD_LEFT_THUMBSTICK_LEFT = 214,
    GAMEPAD_RIGHT_THUMBSTICK_UP = 215,
    GAMEPAD_RIGHT_THUMBSTICK_DOWN = 216,
    GAMEPAD_RIGHT_THUMBSTICK_RIGHT = 217,
    GAMEPAD_RIGHT_THUMBSTICK_LEFT = 218,
    OEM_4 = 219,
    OEM_5 = 220,
    OEM_6 = 221,
    OEM_7 = 222,
    OEM_8 = 223,
    OEM_AX = 225,
    OEM_102 = 226,
    ICO_HELP = 227,
    ICO_00 = 228,
    PROCESSKEY = 229,
    ICO_CLEAR = 230,
    PACKET = 231,
    OEM_RESET = 233,
    OEM_JUMP = 234,
    OEM_PA1 = 235,
    OEM_PA2 = 236,
    OEM_PA3 = 237,
    OEM_WSCTRL = 238,
    OEM_CUSEL = 239,
    OEM_ATTN = 240,
    OEM_FINISH = 241,
    OEM_COPY = 242,
    OEM_AUTO = 243,
    OEM_ENLW = 244,
    OEM_BACKTAB = 245,
    ATTN = 246,
    CRSEL = 247,
    EXSEL = 248,
    EREOF = 249,
    PLAY = 250,
    ZOOM = 251,
    NONAME = 252,
    PA1 = 253,
    OEM_CLEAR = 254,
};
pub const VK_0 = VIRTUAL_KEY.@"0";
pub const VK_1 = VIRTUAL_KEY.@"1";
pub const VK_2 = VIRTUAL_KEY.@"2";
pub const VK_3 = VIRTUAL_KEY.@"3";
pub const VK_4 = VIRTUAL_KEY.@"4";
pub const VK_5 = VIRTUAL_KEY.@"5";
pub const VK_6 = VIRTUAL_KEY.@"6";
pub const VK_7 = VIRTUAL_KEY.@"7";
pub const VK_8 = VIRTUAL_KEY.@"8";
pub const VK_9 = VIRTUAL_KEY.@"9";
pub const VK_A = VIRTUAL_KEY.A;
pub const VK_B = VIRTUAL_KEY.B;
pub const VK_C = VIRTUAL_KEY.C;
pub const VK_D = VIRTUAL_KEY.D;
pub const VK_E = VIRTUAL_KEY.E;
pub const VK_F = VIRTUAL_KEY.F;
pub const VK_G = VIRTUAL_KEY.G;
pub const VK_H = VIRTUAL_KEY.H;
pub const VK_I = VIRTUAL_KEY.I;
pub const VK_J = VIRTUAL_KEY.J;
pub const VK_K = VIRTUAL_KEY.K;
pub const VK_L = VIRTUAL_KEY.L;
pub const VK_M = VIRTUAL_KEY.M;
pub const VK_N = VIRTUAL_KEY.N;
pub const VK_O = VIRTUAL_KEY.O;
pub const VK_P = VIRTUAL_KEY.P;
pub const VK_Q = VIRTUAL_KEY.Q;
pub const VK_R = VIRTUAL_KEY.R;
pub const VK_S = VIRTUAL_KEY.S;
pub const VK_T = VIRTUAL_KEY.T;
pub const VK_U = VIRTUAL_KEY.U;
pub const VK_V = VIRTUAL_KEY.V;
pub const VK_W = VIRTUAL_KEY.W;
pub const VK_X = VIRTUAL_KEY.X;
pub const VK_Y = VIRTUAL_KEY.Y;
pub const VK_Z = VIRTUAL_KEY.Z;
pub const VK_LBUTTON = VIRTUAL_KEY.LBUTTON;
pub const VK_RBUTTON = VIRTUAL_KEY.RBUTTON;
pub const VK_CANCEL = VIRTUAL_KEY.CANCEL;
pub const VK_MBUTTON = VIRTUAL_KEY.MBUTTON;
pub const VK_XBUTTON1 = VIRTUAL_KEY.XBUTTON1;
pub const VK_XBUTTON2 = VIRTUAL_KEY.XBUTTON2;
pub const VK_BACK = VIRTUAL_KEY.BACK;
pub const VK_TAB = VIRTUAL_KEY.TAB;
pub const VK_CLEAR = VIRTUAL_KEY.CLEAR;
pub const VK_RETURN = VIRTUAL_KEY.RETURN;
pub const VK_SHIFT = VIRTUAL_KEY.SHIFT;
pub const VK_CONTROL = VIRTUAL_KEY.CONTROL;
pub const VK_MENU = VIRTUAL_KEY.MENU;
pub const VK_PAUSE = VIRTUAL_KEY.PAUSE;
pub const VK_CAPITAL = VIRTUAL_KEY.CAPITAL;
pub const VK_KANA = VIRTUAL_KEY.KANA;
pub const VK_HANGEUL = VIRTUAL_KEY.KANA;
pub const VK_HANGUL = VIRTUAL_KEY.KANA;
pub const VK_IME_ON = VIRTUAL_KEY.IME_ON;
pub const VK_JUNJA = VIRTUAL_KEY.JUNJA;
pub const VK_FINAL = VIRTUAL_KEY.FINAL;
pub const VK_HANJA = VIRTUAL_KEY.HANJA;
pub const VK_KANJI = VIRTUAL_KEY.HANJA;
pub const VK_IME_OFF = VIRTUAL_KEY.IME_OFF;
pub const VK_ESCAPE = VIRTUAL_KEY.ESCAPE;
pub const VK_CONVERT = VIRTUAL_KEY.CONVERT;
pub const VK_NONCONVERT = VIRTUAL_KEY.NONCONVERT;
pub const VK_ACCEPT = VIRTUAL_KEY.ACCEPT;
pub const VK_MODECHANGE = VIRTUAL_KEY.MODECHANGE;
pub const VK_SPACE = VIRTUAL_KEY.SPACE;
pub const VK_PRIOR = VIRTUAL_KEY.PRIOR;
pub const VK_NEXT = VIRTUAL_KEY.NEXT;
pub const VK_END = VIRTUAL_KEY.END;
pub const VK_HOME = VIRTUAL_KEY.HOME;
pub const VK_LEFT = VIRTUAL_KEY.LEFT;
pub const VK_UP = VIRTUAL_KEY.UP;
pub const VK_RIGHT = VIRTUAL_KEY.RIGHT;
pub const VK_DOWN = VIRTUAL_KEY.DOWN;
pub const VK_SELECT = VIRTUAL_KEY.SELECT;
pub const VK_PRINT = VIRTUAL_KEY.PRINT;
pub const VK_EXECUTE = VIRTUAL_KEY.EXECUTE;
pub const VK_SNAPSHOT = VIRTUAL_KEY.SNAPSHOT;
pub const VK_INSERT = VIRTUAL_KEY.INSERT;
pub const VK_DELETE = VIRTUAL_KEY.DELETE;
pub const VK_HELP = VIRTUAL_KEY.HELP;
pub const VK_LWIN = VIRTUAL_KEY.LWIN;
pub const VK_RWIN = VIRTUAL_KEY.RWIN;
pub const VK_APPS = VIRTUAL_KEY.APPS;
pub const VK_SLEEP = VIRTUAL_KEY.SLEEP;
pub const VK_NUMPAD0 = VIRTUAL_KEY.NUMPAD0;
pub const VK_NUMPAD1 = VIRTUAL_KEY.NUMPAD1;
pub const VK_NUMPAD2 = VIRTUAL_KEY.NUMPAD2;
pub const VK_NUMPAD3 = VIRTUAL_KEY.NUMPAD3;
pub const VK_NUMPAD4 = VIRTUAL_KEY.NUMPAD4;
pub const VK_NUMPAD5 = VIRTUAL_KEY.NUMPAD5;
pub const VK_NUMPAD6 = VIRTUAL_KEY.NUMPAD6;
pub const VK_NUMPAD7 = VIRTUAL_KEY.NUMPAD7;
pub const VK_NUMPAD8 = VIRTUAL_KEY.NUMPAD8;
pub const VK_NUMPAD9 = VIRTUAL_KEY.NUMPAD9;
pub const VK_MULTIPLY = VIRTUAL_KEY.MULTIPLY;
pub const VK_ADD = VIRTUAL_KEY.ADD;
pub const VK_SEPARATOR = VIRTUAL_KEY.SEPARATOR;
pub const VK_SUBTRACT = VIRTUAL_KEY.SUBTRACT;
pub const VK_DECIMAL = VIRTUAL_KEY.DECIMAL;
pub const VK_DIVIDE = VIRTUAL_KEY.DIVIDE;
pub const VK_F1 = VIRTUAL_KEY.F1;
pub const VK_F2 = VIRTUAL_KEY.F2;
pub const VK_F3 = VIRTUAL_KEY.F3;
pub const VK_F4 = VIRTUAL_KEY.F4;
pub const VK_F5 = VIRTUAL_KEY.F5;
pub const VK_F6 = VIRTUAL_KEY.F6;
pub const VK_F7 = VIRTUAL_KEY.F7;
pub const VK_F8 = VIRTUAL_KEY.F8;
pub const VK_F9 = VIRTUAL_KEY.F9;
pub const VK_F10 = VIRTUAL_KEY.F10;
pub const VK_F11 = VIRTUAL_KEY.F11;
pub const VK_F12 = VIRTUAL_KEY.F12;
pub const VK_F13 = VIRTUAL_KEY.F13;
pub const VK_F14 = VIRTUAL_KEY.F14;
pub const VK_F15 = VIRTUAL_KEY.F15;
pub const VK_F16 = VIRTUAL_KEY.F16;
pub const VK_F17 = VIRTUAL_KEY.F17;
pub const VK_F18 = VIRTUAL_KEY.F18;
pub const VK_F19 = VIRTUAL_KEY.F19;
pub const VK_F20 = VIRTUAL_KEY.F20;
pub const VK_F21 = VIRTUAL_KEY.F21;
pub const VK_F22 = VIRTUAL_KEY.F22;
pub const VK_F23 = VIRTUAL_KEY.F23;
pub const VK_F24 = VIRTUAL_KEY.F24;
pub const VK_NAVIGATION_VIEW = VIRTUAL_KEY.NAVIGATION_VIEW;
pub const VK_NAVIGATION_MENU = VIRTUAL_KEY.NAVIGATION_MENU;
pub const VK_NAVIGATION_UP = VIRTUAL_KEY.NAVIGATION_UP;
pub const VK_NAVIGATION_DOWN = VIRTUAL_KEY.NAVIGATION_DOWN;
pub const VK_NAVIGATION_LEFT = VIRTUAL_KEY.NAVIGATION_LEFT;
pub const VK_NAVIGATION_RIGHT = VIRTUAL_KEY.NAVIGATION_RIGHT;
pub const VK_NAVIGATION_ACCEPT = VIRTUAL_KEY.NAVIGATION_ACCEPT;
pub const VK_NAVIGATION_CANCEL = VIRTUAL_KEY.NAVIGATION_CANCEL;
pub const VK_NUMLOCK = VIRTUAL_KEY.NUMLOCK;
pub const VK_SCROLL = VIRTUAL_KEY.SCROLL;
pub const VK_OEM_NEC_EQUAL = VIRTUAL_KEY.OEM_NEC_EQUAL;
pub const VK_OEM_FJ_JISHO = VIRTUAL_KEY.OEM_NEC_EQUAL;
pub const VK_OEM_FJ_MASSHOU = VIRTUAL_KEY.OEM_FJ_MASSHOU;
pub const VK_OEM_FJ_TOUROKU = VIRTUAL_KEY.OEM_FJ_TOUROKU;
pub const VK_OEM_FJ_LOYA = VIRTUAL_KEY.OEM_FJ_LOYA;
pub const VK_OEM_FJ_ROYA = VIRTUAL_KEY.OEM_FJ_ROYA;
pub const VK_LSHIFT = VIRTUAL_KEY.LSHIFT;
pub const VK_RSHIFT = VIRTUAL_KEY.RSHIFT;
pub const VK_LCONTROL = VIRTUAL_KEY.LCONTROL;
pub const VK_RCONTROL = VIRTUAL_KEY.RCONTROL;
pub const VK_LMENU = VIRTUAL_KEY.LMENU;
pub const VK_RMENU = VIRTUAL_KEY.RMENU;
pub const VK_BROWSER_BACK = VIRTUAL_KEY.BROWSER_BACK;
pub const VK_BROWSER_FORWARD = VIRTUAL_KEY.BROWSER_FORWARD;
pub const VK_BROWSER_REFRESH = VIRTUAL_KEY.BROWSER_REFRESH;
pub const VK_BROWSER_STOP = VIRTUAL_KEY.BROWSER_STOP;
pub const VK_BROWSER_SEARCH = VIRTUAL_KEY.BROWSER_SEARCH;
pub const VK_BROWSER_FAVORITES = VIRTUAL_KEY.BROWSER_FAVORITES;
pub const VK_BROWSER_HOME = VIRTUAL_KEY.BROWSER_HOME;
pub const VK_VOLUME_MUTE = VIRTUAL_KEY.VOLUME_MUTE;
pub const VK_VOLUME_DOWN = VIRTUAL_KEY.VOLUME_DOWN;
pub const VK_VOLUME_UP = VIRTUAL_KEY.VOLUME_UP;
pub const VK_MEDIA_NEXT_TRACK = VIRTUAL_KEY.MEDIA_NEXT_TRACK;
pub const VK_MEDIA_PREV_TRACK = VIRTUAL_KEY.MEDIA_PREV_TRACK;
pub const VK_MEDIA_STOP = VIRTUAL_KEY.MEDIA_STOP;
pub const VK_MEDIA_PLAY_PAUSE = VIRTUAL_KEY.MEDIA_PLAY_PAUSE;
pub const VK_LAUNCH_MAIL = VIRTUAL_KEY.LAUNCH_MAIL;
pub const VK_LAUNCH_MEDIA_SELECT = VIRTUAL_KEY.LAUNCH_MEDIA_SELECT;
pub const VK_LAUNCH_APP1 = VIRTUAL_KEY.LAUNCH_APP1;
pub const VK_LAUNCH_APP2 = VIRTUAL_KEY.LAUNCH_APP2;
pub const VK_OEM_1 = VIRTUAL_KEY.OEM_1;
pub const VK_OEM_PLUS = VIRTUAL_KEY.OEM_PLUS;
pub const VK_OEM_COMMA = VIRTUAL_KEY.OEM_COMMA;
pub const VK_OEM_MINUS = VIRTUAL_KEY.OEM_MINUS;
pub const VK_OEM_PERIOD = VIRTUAL_KEY.OEM_PERIOD;
pub const VK_OEM_2 = VIRTUAL_KEY.OEM_2;
pub const VK_OEM_3 = VIRTUAL_KEY.OEM_3;
pub const VK_GAMEPAD_A = VIRTUAL_KEY.GAMEPAD_A;
pub const VK_GAMEPAD_B = VIRTUAL_KEY.GAMEPAD_B;
pub const VK_GAMEPAD_X = VIRTUAL_KEY.GAMEPAD_X;
pub const VK_GAMEPAD_Y = VIRTUAL_KEY.GAMEPAD_Y;
pub const VK_GAMEPAD_RIGHT_SHOULDER = VIRTUAL_KEY.GAMEPAD_RIGHT_SHOULDER;
pub const VK_GAMEPAD_LEFT_SHOULDER = VIRTUAL_KEY.GAMEPAD_LEFT_SHOULDER;
pub const VK_GAMEPAD_LEFT_TRIGGER = VIRTUAL_KEY.GAMEPAD_LEFT_TRIGGER;
pub const VK_GAMEPAD_RIGHT_TRIGGER = VIRTUAL_KEY.GAMEPAD_RIGHT_TRIGGER;
pub const VK_GAMEPAD_DPAD_UP = VIRTUAL_KEY.GAMEPAD_DPAD_UP;
pub const VK_GAMEPAD_DPAD_DOWN = VIRTUAL_KEY.GAMEPAD_DPAD_DOWN;
pub const VK_GAMEPAD_DPAD_LEFT = VIRTUAL_KEY.GAMEPAD_DPAD_LEFT;
pub const VK_GAMEPAD_DPAD_RIGHT = VIRTUAL_KEY.GAMEPAD_DPAD_RIGHT;
pub const VK_GAMEPAD_MENU = VIRTUAL_KEY.GAMEPAD_MENU;
pub const VK_GAMEPAD_VIEW = VIRTUAL_KEY.GAMEPAD_VIEW;
pub const VK_GAMEPAD_LEFT_THUMBSTICK_BUTTON = VIRTUAL_KEY.GAMEPAD_LEFT_THUMBSTICK_BUTTON;
pub const VK_GAMEPAD_RIGHT_THUMBSTICK_BUTTON = VIRTUAL_KEY.GAMEPAD_RIGHT_THUMBSTICK_BUTTON;
pub const VK_GAMEPAD_LEFT_THUMBSTICK_UP = VIRTUAL_KEY.GAMEPAD_LEFT_THUMBSTICK_UP;
pub const VK_GAMEPAD_LEFT_THUMBSTICK_DOWN = VIRTUAL_KEY.GAMEPAD_LEFT_THUMBSTICK_DOWN;
pub const VK_GAMEPAD_LEFT_THUMBSTICK_RIGHT = VIRTUAL_KEY.GAMEPAD_LEFT_THUMBSTICK_RIGHT;
pub const VK_GAMEPAD_LEFT_THUMBSTICK_LEFT = VIRTUAL_KEY.GAMEPAD_LEFT_THUMBSTICK_LEFT;
pub const VK_GAMEPAD_RIGHT_THUMBSTICK_UP = VIRTUAL_KEY.GAMEPAD_RIGHT_THUMBSTICK_UP;
pub const VK_GAMEPAD_RIGHT_THUMBSTICK_DOWN = VIRTUAL_KEY.GAMEPAD_RIGHT_THUMBSTICK_DOWN;
pub const VK_GAMEPAD_RIGHT_THUMBSTICK_RIGHT = VIRTUAL_KEY.GAMEPAD_RIGHT_THUMBSTICK_RIGHT;
pub const VK_GAMEPAD_RIGHT_THUMBSTICK_LEFT = VIRTUAL_KEY.GAMEPAD_RIGHT_THUMBSTICK_LEFT;
pub const VK_OEM_4 = VIRTUAL_KEY.OEM_4;
pub const VK_OEM_5 = VIRTUAL_KEY.OEM_5;
pub const VK_OEM_6 = VIRTUAL_KEY.OEM_6;
pub const VK_OEM_7 = VIRTUAL_KEY.OEM_7;
pub const VK_OEM_8 = VIRTUAL_KEY.OEM_8;
pub const VK_OEM_AX = VIRTUAL_KEY.OEM_AX;
pub const VK_OEM_102 = VIRTUAL_KEY.OEM_102;
pub const VK_ICO_HELP = VIRTUAL_KEY.ICO_HELP;
pub const VK_ICO_00 = VIRTUAL_KEY.ICO_00;
pub const VK_PROCESSKEY = VIRTUAL_KEY.PROCESSKEY;
pub const VK_ICO_CLEAR = VIRTUAL_KEY.ICO_CLEAR;
pub const VK_PACKET = VIRTUAL_KEY.PACKET;
pub const VK_OEM_RESET = VIRTUAL_KEY.OEM_RESET;
pub const VK_OEM_JUMP = VIRTUAL_KEY.OEM_JUMP;
pub const VK_OEM_PA1 = VIRTUAL_KEY.OEM_PA1;
pub const VK_OEM_PA2 = VIRTUAL_KEY.OEM_PA2;
pub const VK_OEM_PA3 = VIRTUAL_KEY.OEM_PA3;
pub const VK_OEM_WSCTRL = VIRTUAL_KEY.OEM_WSCTRL;
pub const VK_OEM_CUSEL = VIRTUAL_KEY.OEM_CUSEL;
pub const VK_OEM_ATTN = VIRTUAL_KEY.OEM_ATTN;
pub const VK_OEM_FINISH = VIRTUAL_KEY.OEM_FINISH;
pub const VK_OEM_COPY = VIRTUAL_KEY.OEM_COPY;
pub const VK_OEM_AUTO = VIRTUAL_KEY.OEM_AUTO;
pub const VK_OEM_ENLW = VIRTUAL_KEY.OEM_ENLW;
pub const VK_OEM_BACKTAB = VIRTUAL_KEY.OEM_BACKTAB;
pub const VK_ATTN = VIRTUAL_KEY.ATTN;
pub const VK_CRSEL = VIRTUAL_KEY.CRSEL;
pub const VK_EXSEL = VIRTUAL_KEY.EXSEL;
pub const VK_EREOF = VIRTUAL_KEY.EREOF;
pub const VK_PLAY = VIRTUAL_KEY.PLAY;
pub const VK_ZOOM = VIRTUAL_KEY.ZOOM;
pub const VK_NONAME = VIRTUAL_KEY.NONAME;
pub const VK_PA1 = VIRTUAL_KEY.PA1;
pub const VK_OEM_CLEAR = VIRTUAL_KEY.OEM_CLEAR;

pub const WIN32_ERROR = enum(u32) {
    NO_ERROR = 0,
    WAIT_TIMEOUT = 258,
    WAIT_FAILED = 4294967295,
    // ERROR_SUCCESS = 0, this enum value conflicts with NO_ERROR
    ERROR_INVALID_FUNCTION = 1,
    ERROR_FILE_NOT_FOUND = 2,
    ERROR_PATH_NOT_FOUND = 3,
    ERROR_TOO_MANY_OPEN_FILES = 4,
    ERROR_ACCESS_DENIED = 5,
    ERROR_INVALID_HANDLE = 6,
    ERROR_ARENA_TRASHED = 7,
    ERROR_NOT_ENOUGH_MEMORY = 8,
    ERROR_INVALID_BLOCK = 9,
    ERROR_BAD_ENVIRONMENT = 10,
    ERROR_BAD_FORMAT = 11,
    ERROR_INVALID_ACCESS = 12,
    ERROR_INVALID_DATA = 13,
    ERROR_OUTOFMEMORY = 14,
    ERROR_INVALID_DRIVE = 15,
    ERROR_CURRENT_DIRECTORY = 16,
    ERROR_NOT_SAME_DEVICE = 17,
    ERROR_NO_MORE_FILES = 18,
    ERROR_WRITE_PROTECT = 19,
    ERROR_BAD_UNIT = 20,
    ERROR_NOT_READY = 21,
    ERROR_BAD_COMMAND = 22,
    ERROR_CRC = 23,
    ERROR_BAD_LENGTH = 24,
    ERROR_SEEK = 25,
    ERROR_NOT_DOS_DISK = 26,
    ERROR_SECTOR_NOT_FOUND = 27,
    ERROR_OUT_OF_PAPER = 28,
    ERROR_WRITE_FAULT = 29,
    ERROR_READ_FAULT = 30,
    ERROR_GEN_FAILURE = 31,
    ERROR_SHARING_VIOLATION = 32,
    ERROR_LOCK_VIOLATION = 33,
    ERROR_WRONG_DISK = 34,
    ERROR_SHARING_BUFFER_EXCEEDED = 36,
    ERROR_HANDLE_EOF = 38,
    ERROR_HANDLE_DISK_FULL = 39,
    ERROR_NOT_SUPPORTED = 50,
    ERROR_REM_NOT_LIST = 51,
    ERROR_DUP_NAME = 52,
    ERROR_BAD_NETPATH = 53,
    ERROR_NETWORK_BUSY = 54,
    ERROR_DEV_NOT_EXIST = 55,
    ERROR_TOO_MANY_CMDS = 56,
    ERROR_ADAP_HDW_ERR = 57,
    ERROR_BAD_NET_RESP = 58,
    ERROR_UNEXP_NET_ERR = 59,
    ERROR_BAD_REM_ADAP = 60,
    ERROR_PRINTQ_FULL = 61,
    ERROR_NO_SPOOL_SPACE = 62,
    ERROR_PRINT_CANCELLED = 63,
    ERROR_NETNAME_DELETED = 64,
    ERROR_NETWORK_ACCESS_DENIED = 65,
    ERROR_BAD_DEV_TYPE = 66,
    ERROR_BAD_NET_NAME = 67,
    ERROR_TOO_MANY_NAMES = 68,
    ERROR_TOO_MANY_SESS = 69,
    ERROR_SHARING_PAUSED = 70,
    ERROR_REQ_NOT_ACCEP = 71,
    ERROR_REDIR_PAUSED = 72,
    ERROR_FILE_EXISTS = 80,
    ERROR_CANNOT_MAKE = 82,
    ERROR_FAIL_I24 = 83,
    ERROR_OUT_OF_STRUCTURES = 84,
    ERROR_ALREADY_ASSIGNED = 85,
    ERROR_INVALID_PASSWORD = 86,
    ERROR_INVALID_PARAMETER = 87,
    ERROR_NET_WRITE_FAULT = 88,
    ERROR_NO_PROC_SLOTS = 89,
    ERROR_TOO_MANY_SEMAPHORES = 100,
    ERROR_EXCL_SEM_ALREADY_OWNED = 101,
    ERROR_SEM_IS_SET = 102,
    ERROR_TOO_MANY_SEM_REQUESTS = 103,
    ERROR_INVALID_AT_INTERRUPT_TIME = 104,
    ERROR_SEM_OWNER_DIED = 105,
    ERROR_SEM_USER_LIMIT = 106,
    ERROR_DISK_CHANGE = 107,
    ERROR_DRIVE_LOCKED = 108,
    ERROR_BROKEN_PIPE = 109,
    ERROR_OPEN_FAILED = 110,
    ERROR_BUFFER_OVERFLOW = 111,
    ERROR_DISK_FULL = 112,
    ERROR_NO_MORE_SEARCH_HANDLES = 113,
    ERROR_INVALID_TARGET_HANDLE = 114,
    ERROR_INVALID_CATEGORY = 117,
    ERROR_INVALID_VERIFY_SWITCH = 118,
    ERROR_BAD_DRIVER_LEVEL = 119,
    ERROR_CALL_NOT_IMPLEMENTED = 120,
    ERROR_SEM_TIMEOUT = 121,
    ERROR_INSUFFICIENT_BUFFER = 122,
    ERROR_INVALID_NAME = 123,
    ERROR_INVALID_LEVEL = 124,
    ERROR_NO_VOLUME_LABEL = 125,
    ERROR_MOD_NOT_FOUND = 126,
    ERROR_PROC_NOT_FOUND = 127,
    ERROR_WAIT_NO_CHILDREN = 128,
    ERROR_CHILD_NOT_COMPLETE = 129,
    ERROR_DIRECT_ACCESS_HANDLE = 130,
    ERROR_NEGATIVE_SEEK = 131,
    ERROR_SEEK_ON_DEVICE = 132,
    ERROR_IS_JOIN_TARGET = 133,
    ERROR_IS_JOINED = 134,
    ERROR_IS_SUBSTED = 135,
    ERROR_NOT_JOINED = 136,
    ERROR_NOT_SUBSTED = 137,
    ERROR_JOIN_TO_JOIN = 138,
    ERROR_SUBST_TO_SUBST = 139,
    ERROR_JOIN_TO_SUBST = 140,
    ERROR_SUBST_TO_JOIN = 141,
    ERROR_BUSY_DRIVE = 142,
    ERROR_SAME_DRIVE = 143,
    ERROR_DIR_NOT_ROOT = 144,
    ERROR_DIR_NOT_EMPTY = 145,
    ERROR_IS_SUBST_PATH = 146,
    ERROR_IS_JOIN_PATH = 147,
    ERROR_PATH_BUSY = 148,
    ERROR_IS_SUBST_TARGET = 149,
    ERROR_SYSTEM_TRACE = 150,
    ERROR_INVALID_EVENT_COUNT = 151,
    ERROR_TOO_MANY_MUXWAITERS = 152,
    ERROR_INVALID_LIST_FORMAT = 153,
    ERROR_LABEL_TOO_LONG = 154,
    ERROR_TOO_MANY_TCBS = 155,
    ERROR_SIGNAL_REFUSED = 156,
    ERROR_DISCARDED = 157,
    ERROR_NOT_LOCKED = 158,
    ERROR_BAD_THREADID_ADDR = 159,
    ERROR_BAD_ARGUMENTS = 160,
    ERROR_BAD_PATHNAME = 161,
    ERROR_SIGNAL_PENDING = 162,
    ERROR_MAX_THRDS_REACHED = 164,
    ERROR_LOCK_FAILED = 167,
    ERROR_BUSY = 170,
    ERROR_DEVICE_SUPPORT_IN_PROGRESS = 171,
    ERROR_CANCEL_VIOLATION = 173,
    ERROR_ATOMIC_LOCKS_NOT_SUPPORTED = 174,
    ERROR_INVALID_SEGMENT_NUMBER = 180,
    ERROR_INVALID_ORDINAL = 182,
    ERROR_ALREADY_EXISTS = 183,
    ERROR_INVALID_FLAG_NUMBER = 186,
    ERROR_SEM_NOT_FOUND = 187,
    ERROR_INVALID_STARTING_CODESEG = 188,
    ERROR_INVALID_STACKSEG = 189,
    ERROR_INVALID_MODULETYPE = 190,
    ERROR_INVALID_EXE_SIGNATURE = 191,
    ERROR_EXE_MARKED_INVALID = 192,
    ERROR_BAD_EXE_FORMAT = 193,
    ERROR_ITERATED_DATA_EXCEEDS_64k = 194,
    ERROR_INVALID_MINALLOCSIZE = 195,
    ERROR_DYNLINK_FROM_INVALID_RING = 196,
    ERROR_IOPL_NOT_ENABLED = 197,
    ERROR_INVALID_SEGDPL = 198,
    ERROR_AUTODATASEG_EXCEEDS_64k = 199,
    ERROR_RING2SEG_MUST_BE_MOVABLE = 200,
    ERROR_RELOC_CHAIN_XEEDS_SEGLIM = 201,
    ERROR_INFLOOP_IN_RELOC_CHAIN = 202,
    ERROR_ENVVAR_NOT_FOUND = 203,
    ERROR_NO_SIGNAL_SENT = 205,
    ERROR_FILENAME_EXCED_RANGE = 206,
    ERROR_RING2_STACK_IN_USE = 207,
    ERROR_META_EXPANSION_TOO_LONG = 208,
    ERROR_INVALID_SIGNAL_NUMBER = 209,
    ERROR_THREAD_1_INACTIVE = 210,
    ERROR_LOCKED = 212,
    ERROR_TOO_MANY_MODULES = 214,
    ERROR_NESTING_NOT_ALLOWED = 215,
    ERROR_EXE_MACHINE_TYPE_MISMATCH = 216,
    ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY = 217,
    ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY = 218,
    ERROR_FILE_CHECKED_OUT = 220,
    ERROR_CHECKOUT_REQUIRED = 221,
    ERROR_BAD_FILE_TYPE = 222,
    ERROR_FILE_TOO_LARGE = 223,
    ERROR_FORMS_AUTH_REQUIRED = 224,
    ERROR_VIRUS_INFECTED = 225,
    ERROR_VIRUS_DELETED = 226,
    ERROR_PIPE_LOCAL = 229,
    ERROR_BAD_PIPE = 230,
    ERROR_PIPE_BUSY = 231,
    ERROR_NO_DATA = 232,
    ERROR_PIPE_NOT_CONNECTED = 233,
    ERROR_MORE_DATA = 234,
    ERROR_NO_WORK_DONE = 235,
    ERROR_VC_DISCONNECTED = 240,
    ERROR_INVALID_EA_NAME = 254,
    ERROR_EA_LIST_INCONSISTENT = 255,
    ERROR_NO_MORE_ITEMS = 259,
    ERROR_CANNOT_COPY = 266,
    ERROR_DIRECTORY = 267,
    ERROR_EAS_DIDNT_FIT = 275,
    ERROR_EA_FILE_CORRUPT = 276,
    ERROR_EA_TABLE_FULL = 277,
    ERROR_INVALID_EA_HANDLE = 278,
    ERROR_EAS_NOT_SUPPORTED = 282,
    ERROR_NOT_OWNER = 288,
    ERROR_TOO_MANY_POSTS = 298,
    ERROR_PARTIAL_COPY = 299,
    ERROR_OPLOCK_NOT_GRANTED = 300,
    ERROR_INVALID_OPLOCK_PROTOCOL = 301,
    ERROR_DISK_TOO_FRAGMENTED = 302,
    ERROR_DELETE_PENDING = 303,
    ERROR_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING = 304,
    ERROR_SHORT_NAMES_NOT_ENABLED_ON_VOLUME = 305,
    ERROR_SECURITY_STREAM_IS_INCONSISTENT = 306,
    ERROR_INVALID_LOCK_RANGE = 307,
    ERROR_IMAGE_SUBSYSTEM_NOT_PRESENT = 308,
    ERROR_NOTIFICATION_GUID_ALREADY_DEFINED = 309,
    ERROR_INVALID_EXCEPTION_HANDLER = 310,
    ERROR_DUPLICATE_PRIVILEGES = 311,
    ERROR_NO_RANGES_PROCESSED = 312,
    ERROR_NOT_ALLOWED_ON_SYSTEM_FILE = 313,
    ERROR_DISK_RESOURCES_EXHAUSTED = 314,
    ERROR_INVALID_TOKEN = 315,
    ERROR_DEVICE_FEATURE_NOT_SUPPORTED = 316,
    ERROR_MR_MID_NOT_FOUND = 317,
    ERROR_SCOPE_NOT_FOUND = 318,
    ERROR_UNDEFINED_SCOPE = 319,
    ERROR_INVALID_CAP = 320,
    ERROR_DEVICE_UNREACHABLE = 321,
    ERROR_DEVICE_NO_RESOURCES = 322,
    ERROR_DATA_CHECKSUM_ERROR = 323,
    ERROR_INTERMIXED_KERNEL_EA_OPERATION = 324,
    ERROR_FILE_LEVEL_TRIM_NOT_SUPPORTED = 326,
    ERROR_OFFSET_ALIGNMENT_VIOLATION = 327,
    ERROR_INVALID_FIELD_IN_PARAMETER_LIST = 328,
    ERROR_OPERATION_IN_PROGRESS = 329,
    ERROR_BAD_DEVICE_PATH = 330,
    ERROR_TOO_MANY_DESCRIPTORS = 331,
    ERROR_SCRUB_DATA_DISABLED = 332,
    ERROR_NOT_REDUNDANT_STORAGE = 333,
    ERROR_RESIDENT_FILE_NOT_SUPPORTED = 334,
    ERROR_COMPRESSED_FILE_NOT_SUPPORTED = 335,
    ERROR_DIRECTORY_NOT_SUPPORTED = 336,
    ERROR_NOT_READ_FROM_COPY = 337,
    ERROR_FT_WRITE_FAILURE = 338,
    ERROR_FT_DI_SCAN_REQUIRED = 339,
    ERROR_INVALID_KERNEL_INFO_VERSION = 340,
    ERROR_INVALID_PEP_INFO_VERSION = 341,
    ERROR_OBJECT_NOT_EXTERNALLY_BACKED = 342,
    ERROR_EXTERNAL_BACKING_PROVIDER_UNKNOWN = 343,
    ERROR_COMPRESSION_NOT_BENEFICIAL = 344,
    ERROR_STORAGE_TOPOLOGY_ID_MISMATCH = 345,
    ERROR_BLOCKED_BY_PARENTAL_CONTROLS = 346,
    ERROR_BLOCK_TOO_MANY_REFERENCES = 347,
    ERROR_MARKED_TO_DISALLOW_WRITES = 348,
    ERROR_ENCLAVE_FAILURE = 349,
    ERROR_FAIL_NOACTION_REBOOT = 350,
    ERROR_FAIL_SHUTDOWN = 351,
    ERROR_FAIL_RESTART = 352,
    ERROR_MAX_SESSIONS_REACHED = 353,
    ERROR_NETWORK_ACCESS_DENIED_EDP = 354,
    ERROR_DEVICE_HINT_NAME_BUFFER_TOO_SMALL = 355,
    ERROR_EDP_POLICY_DENIES_OPERATION = 356,
    ERROR_EDP_DPL_POLICY_CANT_BE_SATISFIED = 357,
    ERROR_CLOUD_FILE_SYNC_ROOT_METADATA_CORRUPT = 358,
    ERROR_DEVICE_IN_MAINTENANCE = 359,
    ERROR_NOT_SUPPORTED_ON_DAX = 360,
    ERROR_DAX_MAPPING_EXISTS = 361,
    ERROR_CLOUD_FILE_PROVIDER_NOT_RUNNING = 362,
    ERROR_CLOUD_FILE_METADATA_CORRUPT = 363,
    ERROR_CLOUD_FILE_METADATA_TOO_LARGE = 364,
    ERROR_CLOUD_FILE_PROPERTY_BLOB_TOO_LARGE = 365,
    ERROR_CLOUD_FILE_PROPERTY_BLOB_CHECKSUM_MISMATCH = 366,
    ERROR_CHILD_PROCESS_BLOCKED = 367,
    ERROR_STORAGE_LOST_DATA_PERSISTENCE = 368,
    ERROR_FILE_SYSTEM_VIRTUALIZATION_UNAVAILABLE = 369,
    ERROR_FILE_SYSTEM_VIRTUALIZATION_METADATA_CORRUPT = 370,
    ERROR_FILE_SYSTEM_VIRTUALIZATION_BUSY = 371,
    ERROR_FILE_SYSTEM_VIRTUALIZATION_PROVIDER_UNKNOWN = 372,
    ERROR_GDI_HANDLE_LEAK = 373,
    ERROR_CLOUD_FILE_TOO_MANY_PROPERTY_BLOBS = 374,
    ERROR_CLOUD_FILE_PROPERTY_VERSION_NOT_SUPPORTED = 375,
    ERROR_NOT_A_CLOUD_FILE = 376,
    ERROR_CLOUD_FILE_NOT_IN_SYNC = 377,
    ERROR_CLOUD_FILE_ALREADY_CONNECTED = 378,
    ERROR_CLOUD_FILE_NOT_SUPPORTED = 379,
    ERROR_CLOUD_FILE_INVALID_REQUEST = 380,
    ERROR_CLOUD_FILE_READ_ONLY_VOLUME = 381,
    ERROR_CLOUD_FILE_CONNECTED_PROVIDER_ONLY = 382,
    ERROR_CLOUD_FILE_VALIDATION_FAILED = 383,
    ERROR_SMB1_NOT_AVAILABLE = 384,
    ERROR_FILE_SYSTEM_VIRTUALIZATION_INVALID_OPERATION = 385,
    ERROR_CLOUD_FILE_AUTHENTICATION_FAILED = 386,
    ERROR_CLOUD_FILE_INSUFFICIENT_RESOURCES = 387,
    ERROR_CLOUD_FILE_NETWORK_UNAVAILABLE = 388,
    ERROR_CLOUD_FILE_UNSUCCESSFUL = 389,
    ERROR_CLOUD_FILE_NOT_UNDER_SYNC_ROOT = 390,
    ERROR_CLOUD_FILE_IN_USE = 391,
    ERROR_CLOUD_FILE_PINNED = 392,
    ERROR_CLOUD_FILE_REQUEST_ABORTED = 393,
    ERROR_CLOUD_FILE_PROPERTY_CORRUPT = 394,
    ERROR_CLOUD_FILE_ACCESS_DENIED = 395,
    ERROR_CLOUD_FILE_INCOMPATIBLE_HARDLINKS = 396,
    ERROR_CLOUD_FILE_PROPERTY_LOCK_CONFLICT = 397,
    ERROR_CLOUD_FILE_REQUEST_CANCELED = 398,
    ERROR_EXTERNAL_SYSKEY_NOT_SUPPORTED = 399,
    ERROR_THREAD_MODE_ALREADY_BACKGROUND = 400,
    ERROR_THREAD_MODE_NOT_BACKGROUND = 401,
    ERROR_PROCESS_MODE_ALREADY_BACKGROUND = 402,
    ERROR_PROCESS_MODE_NOT_BACKGROUND = 403,
    ERROR_CLOUD_FILE_PROVIDER_TERMINATED = 404,
    ERROR_NOT_A_CLOUD_SYNC_ROOT = 405,
    ERROR_FILE_PROTECTED_UNDER_DPL = 406,
    ERROR_VOLUME_NOT_CLUSTER_ALIGNED = 407,
    ERROR_NO_PHYSICALLY_ALIGNED_FREE_SPACE_FOUND = 408,
    ERROR_APPX_FILE_NOT_ENCRYPTED = 409,
    ERROR_RWRAW_ENCRYPTED_FILE_NOT_ENCRYPTED = 410,
    ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILEOFFSET = 411,
    ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILERANGE = 412,
    ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_PARAMETER = 413,
    ERROR_LINUX_SUBSYSTEM_NOT_PRESENT = 414,
    ERROR_FT_READ_FAILURE = 415,
    ERROR_STORAGE_RESERVE_ID_INVALID = 416,
    ERROR_STORAGE_RESERVE_DOES_NOT_EXIST = 417,
    ERROR_STORAGE_RESERVE_ALREADY_EXISTS = 418,
    ERROR_STORAGE_RESERVE_NOT_EMPTY = 419,
    ERROR_NOT_A_DAX_VOLUME = 420,
    ERROR_NOT_DAX_MAPPABLE = 421,
    ERROR_TIME_SENSITIVE_THREAD = 422,
    ERROR_DPL_NOT_SUPPORTED_FOR_USER = 423,
    ERROR_CASE_DIFFERING_NAMES_IN_DIR = 424,
    ERROR_FILE_NOT_SUPPORTED = 425,
    ERROR_CLOUD_FILE_REQUEST_TIMEOUT = 426,
    ERROR_NO_TASK_QUEUE = 427,
    ERROR_SRC_SRV_DLL_LOAD_FAILED = 428,
    ERROR_NOT_SUPPORTED_WITH_BTT = 429,
    ERROR_ENCRYPTION_DISABLED = 430,
    ERROR_ENCRYPTING_METADATA_DISALLOWED = 431,
    ERROR_CANT_CLEAR_ENCRYPTION_FLAG = 432,
    ERROR_NO_SUCH_DEVICE = 433,
    ERROR_CLOUD_FILE_DEHYDRATION_DISALLOWED = 434,
    ERROR_FILE_SNAP_IN_PROGRESS = 435,
    ERROR_FILE_SNAP_USER_SECTION_NOT_SUPPORTED = 436,
    ERROR_FILE_SNAP_MODIFY_NOT_SUPPORTED = 437,
    ERROR_FILE_SNAP_IO_NOT_COORDINATED = 438,
    ERROR_FILE_SNAP_UNEXPECTED_ERROR = 439,
    ERROR_FILE_SNAP_INVALID_PARAMETER = 440,
    ERROR_UNSATISFIED_DEPENDENCIES = 441,
    ERROR_CASE_SENSITIVE_PATH = 442,
    ERROR_UNEXPECTED_NTCACHEMANAGER_ERROR = 443,
    ERROR_LINUX_SUBSYSTEM_UPDATE_REQUIRED = 444,
    ERROR_DLP_POLICY_WARNS_AGAINST_OPERATION = 445,
    ERROR_DLP_POLICY_DENIES_OPERATION = 446,
    ERROR_SECURITY_DENIES_OPERATION = 447,
    ERROR_UNTRUSTED_MOUNT_POINT = 448,
    ERROR_DLP_POLICY_SILENTLY_FAIL = 449,
    ERROR_CAPAUTHZ_NOT_DEVUNLOCKED = 450,
    ERROR_CAPAUTHZ_CHANGE_TYPE = 451,
    ERROR_CAPAUTHZ_NOT_PROVISIONED = 452,
    ERROR_CAPAUTHZ_NOT_AUTHORIZED = 453,
    ERROR_CAPAUTHZ_NO_POLICY = 454,
    ERROR_CAPAUTHZ_DB_CORRUPTED = 455,
    ERROR_CAPAUTHZ_SCCD_INVALID_CATALOG = 456,
    ERROR_CAPAUTHZ_SCCD_NO_AUTH_ENTITY = 457,
    ERROR_CAPAUTHZ_SCCD_PARSE_ERROR = 458,
    ERROR_CAPAUTHZ_SCCD_DEV_MODE_REQUIRED = 459,
    ERROR_CAPAUTHZ_SCCD_NO_CAPABILITY_MATCH = 460,
    ERROR_CIMFS_IMAGE_CORRUPT = 470,
    ERROR_CIMFS_IMAGE_VERSION_NOT_SUPPORTED = 471,
    ERROR_STORAGE_STACK_ACCESS_DENIED = 472,
    ERROR_INSUFFICIENT_VIRTUAL_ADDR_RESOURCES = 473,
    ERROR_INDEX_OUT_OF_BOUNDS = 474,
    ERROR_PNP_QUERY_REMOVE_DEVICE_TIMEOUT = 480,
    ERROR_PNP_QUERY_REMOVE_RELATED_DEVICE_TIMEOUT = 481,
    ERROR_PNP_QUERY_REMOVE_UNRELATED_DEVICE_TIMEOUT = 482,
    ERROR_DEVICE_HARDWARE_ERROR = 483,
    ERROR_INVALID_ADDRESS = 487,
    ERROR_HAS_SYSTEM_CRITICAL_FILES = 488,
    ERROR_ENCRYPTED_FILE_NOT_SUPPORTED = 489,
    ERROR_SPARSE_FILE_NOT_SUPPORTED = 490,
    ERROR_PAGEFILE_NOT_SUPPORTED = 491,
    ERROR_VOLUME_NOT_SUPPORTED = 492,
    ERROR_NOT_SUPPORTED_WITH_BYPASSIO = 493,
    ERROR_NO_BYPASSIO_DRIVER_SUPPORT = 494,
    ERROR_NOT_SUPPORTED_WITH_ENCRYPTION = 495,
    ERROR_NOT_SUPPORTED_WITH_COMPRESSION = 496,
    ERROR_NOT_SUPPORTED_WITH_REPLICATION = 497,
    ERROR_NOT_SUPPORTED_WITH_DEDUPLICATION = 498,
    ERROR_NOT_SUPPORTED_WITH_AUDITING = 499,
    ERROR_USER_PROFILE_LOAD = 500,
    ERROR_SESSION_KEY_TOO_SHORT = 501,
    ERROR_ACCESS_DENIED_APPDATA = 502,
    ERROR_NOT_SUPPORTED_WITH_MONITORING = 503,
    ERROR_NOT_SUPPORTED_WITH_SNAPSHOT = 504,
    ERROR_NOT_SUPPORTED_WITH_VIRTUALIZATION = 505,
    ERROR_BYPASSIO_FLT_NOT_SUPPORTED = 506,
    ERROR_DEVICE_RESET_REQUIRED = 507,
    ERROR_VOLUME_WRITE_ACCESS_DENIED = 508,
    ERROR_ARITHMETIC_OVERFLOW = 534,
    ERROR_PIPE_CONNECTED = 535,
    ERROR_PIPE_LISTENING = 536,
    ERROR_VERIFIER_STOP = 537,
    ERROR_ABIOS_ERROR = 538,
    ERROR_WX86_WARNING = 539,
    ERROR_WX86_ERROR = 540,
    ERROR_TIMER_NOT_CANCELED = 541,
    ERROR_UNWIND = 542,
    ERROR_BAD_STACK = 543,
    ERROR_INVALID_UNWIND_TARGET = 544,
    ERROR_INVALID_PORT_ATTRIBUTES = 545,
    ERROR_PORT_MESSAGE_TOO_LONG = 546,
    ERROR_INVALID_QUOTA_LOWER = 547,
    ERROR_DEVICE_ALREADY_ATTACHED = 548,
    ERROR_INSTRUCTION_MISALIGNMENT = 549,
    ERROR_PROFILING_NOT_STARTED = 550,
    ERROR_PROFILING_NOT_STOPPED = 551,
    ERROR_COULD_NOT_INTERPRET = 552,
    ERROR_PROFILING_AT_LIMIT = 553,
    ERROR_CANT_WAIT = 554,
    ERROR_CANT_TERMINATE_SELF = 555,
    ERROR_UNEXPECTED_MM_CREATE_ERR = 556,
    ERROR_UNEXPECTED_MM_MAP_ERROR = 557,
    ERROR_UNEXPECTED_MM_EXTEND_ERR = 558,
    ERROR_BAD_FUNCTION_TABLE = 559,
    ERROR_NO_GUID_TRANSLATION = 560,
    ERROR_INVALID_LDT_SIZE = 561,
    ERROR_INVALID_LDT_OFFSET = 563,
    ERROR_INVALID_LDT_DESCRIPTOR = 564,
    ERROR_TOO_MANY_THREADS = 565,
    ERROR_THREAD_NOT_IN_PROCESS = 566,
    ERROR_PAGEFILE_QUOTA_EXCEEDED = 567,
    ERROR_LOGON_SERVER_CONFLICT = 568,
    ERROR_SYNCHRONIZATION_REQUIRED = 569,
    ERROR_NET_OPEN_FAILED = 570,
    ERROR_IO_PRIVILEGE_FAILED = 571,
    ERROR_CONTROL_C_EXIT = 572,
    ERROR_MISSING_SYSTEMFILE = 573,
    ERROR_UNHANDLED_EXCEPTION = 574,
    ERROR_APP_INIT_FAILURE = 575,
    ERROR_PAGEFILE_CREATE_FAILED = 576,
    ERROR_INVALID_IMAGE_HASH = 577,
    ERROR_NO_PAGEFILE = 578,
    ERROR_ILLEGAL_FLOAT_CONTEXT = 579,
    ERROR_NO_EVENT_PAIR = 580,
    ERROR_DOMAIN_CTRLR_CONFIG_ERROR = 581,
    ERROR_ILLEGAL_CHARACTER = 582,
    ERROR_UNDEFINED_CHARACTER = 583,
    ERROR_FLOPPY_VOLUME = 584,
    ERROR_BIOS_FAILED_TO_CONNECT_INTERRUPT = 585,
    ERROR_BACKUP_CONTROLLER = 586,
    ERROR_MUTANT_LIMIT_EXCEEDED = 587,
    ERROR_FS_DRIVER_REQUIRED = 588,
    ERROR_CANNOT_LOAD_REGISTRY_FILE = 589,
    ERROR_DEBUG_ATTACH_FAILED = 590,
    ERROR_SYSTEM_PROCESS_TERMINATED = 591,
    ERROR_DATA_NOT_ACCEPTED = 592,
    ERROR_VDM_HARD_ERROR = 593,
    ERROR_DRIVER_CANCEL_TIMEOUT = 594,
    ERROR_REPLY_MESSAGE_MISMATCH = 595,
    ERROR_LOST_WRITEBEHIND_DATA = 596,
    ERROR_CLIENT_SERVER_PARAMETERS_INVALID = 597,
    ERROR_NOT_TINY_STREAM = 598,
    ERROR_STACK_OVERFLOW_READ = 599,
    ERROR_CONVERT_TO_LARGE = 600,
    ERROR_FOUND_OUT_OF_SCOPE = 601,
    ERROR_ALLOCATE_BUCKET = 602,
    ERROR_MARSHALL_OVERFLOW = 603,
    ERROR_INVALID_VARIANT = 604,
    ERROR_BAD_COMPRESSION_BUFFER = 605,
    ERROR_AUDIT_FAILED = 606,
    ERROR_TIMER_RESOLUTION_NOT_SET = 607,
    ERROR_INSUFFICIENT_LOGON_INFO = 608,
    ERROR_BAD_DLL_ENTRYPOINT = 609,
    ERROR_BAD_SERVICE_ENTRYPOINT = 610,
    ERROR_IP_ADDRESS_CONFLICT1 = 611,
    ERROR_IP_ADDRESS_CONFLICT2 = 612,
    ERROR_REGISTRY_QUOTA_LIMIT = 613,
    ERROR_NO_CALLBACK_ACTIVE = 614,
    ERROR_PWD_TOO_SHORT = 615,
    ERROR_PWD_TOO_RECENT = 616,
    ERROR_PWD_HISTORY_CONFLICT = 617,
    ERROR_UNSUPPORTED_COMPRESSION = 618,
    ERROR_INVALID_HW_PROFILE = 619,
    ERROR_INVALID_PLUGPLAY_DEVICE_PATH = 620,
    ERROR_QUOTA_LIST_INCONSISTENT = 621,
    ERROR_EVALUATION_EXPIRATION = 622,
    ERROR_ILLEGAL_DLL_RELOCATION = 623,
    ERROR_DLL_INIT_FAILED_LOGOFF = 624,
    ERROR_VALIDATE_CONTINUE = 625,
    ERROR_NO_MORE_MATCHES = 626,
    ERROR_RANGE_LIST_CONFLICT = 627,
    ERROR_SERVER_SID_MISMATCH = 628,
    ERROR_CANT_ENABLE_DENY_ONLY = 629,
    ERROR_FLOAT_MULTIPLE_FAULTS = 630,
    ERROR_FLOAT_MULTIPLE_TRAPS = 631,
    ERROR_NOINTERFACE = 632,
    ERROR_DRIVER_FAILED_SLEEP = 633,
    ERROR_CORRUPT_SYSTEM_FILE = 634,
    ERROR_COMMITMENT_MINIMUM = 635,
    ERROR_PNP_RESTART_ENUMERATION = 636,
    ERROR_SYSTEM_IMAGE_BAD_SIGNATURE = 637,
    ERROR_PNP_REBOOT_REQUIRED = 638,
    ERROR_INSUFFICIENT_POWER = 639,
    ERROR_MULTIPLE_FAULT_VIOLATION = 640,
    ERROR_SYSTEM_SHUTDOWN = 641,
    ERROR_PORT_NOT_SET = 642,
    ERROR_DS_VERSION_CHECK_FAILURE = 643,
    ERROR_RANGE_NOT_FOUND = 644,
    ERROR_NOT_SAFE_MODE_DRIVER = 646,
    ERROR_FAILED_DRIVER_ENTRY = 647,
    ERROR_DEVICE_ENUMERATION_ERROR = 648,
    ERROR_MOUNT_POINT_NOT_RESOLVED = 649,
    ERROR_INVALID_DEVICE_OBJECT_PARAMETER = 650,
    ERROR_MCA_OCCURED = 651,
    ERROR_DRIVER_DATABASE_ERROR = 652,
    ERROR_SYSTEM_HIVE_TOO_LARGE = 653,
    ERROR_DRIVER_FAILED_PRIOR_UNLOAD = 654,
    ERROR_VOLSNAP_PREPARE_HIBERNATE = 655,
    ERROR_HIBERNATION_FAILURE = 656,
    ERROR_PWD_TOO_LONG = 657,
    ERROR_FILE_SYSTEM_LIMITATION = 665,
    ERROR_ASSERTION_FAILURE = 668,
    ERROR_ACPI_ERROR = 669,
    ERROR_WOW_ASSERTION = 670,
    ERROR_PNP_BAD_MPS_TABLE = 671,
    ERROR_PNP_TRANSLATION_FAILED = 672,
    ERROR_PNP_IRQ_TRANSLATION_FAILED = 673,
    ERROR_PNP_INVALID_ID = 674,
    ERROR_WAKE_SYSTEM_DEBUGGER = 675,
    ERROR_HANDLES_CLOSED = 676,
    ERROR_EXTRANEOUS_INFORMATION = 677,
    ERROR_RXACT_COMMIT_NECESSARY = 678,
    ERROR_MEDIA_CHECK = 679,
    ERROR_GUID_SUBSTITUTION_MADE = 680,
    ERROR_STOPPED_ON_SYMLINK = 681,
    ERROR_LONGJUMP = 682,
    ERROR_PLUGPLAY_QUERY_VETOED = 683,
    ERROR_UNWIND_CONSOLIDATE = 684,
    ERROR_REGISTRY_HIVE_RECOVERED = 685,
    ERROR_DLL_MIGHT_BE_INSECURE = 686,
    ERROR_DLL_MIGHT_BE_INCOMPATIBLE = 687,
    ERROR_DBG_EXCEPTION_NOT_HANDLED = 688,
    ERROR_DBG_REPLY_LATER = 689,
    ERROR_DBG_UNABLE_TO_PROVIDE_HANDLE = 690,
    ERROR_DBG_TERMINATE_THREAD = 691,
    ERROR_DBG_TERMINATE_PROCESS = 692,
    ERROR_DBG_CONTROL_C = 693,
    ERROR_DBG_PRINTEXCEPTION_C = 694,
    ERROR_DBG_RIPEXCEPTION = 695,
    ERROR_DBG_CONTROL_BREAK = 696,
    ERROR_DBG_COMMAND_EXCEPTION = 697,
    ERROR_OBJECT_NAME_EXISTS = 698,
    ERROR_THREAD_WAS_SUSPENDED = 699,
    ERROR_IMAGE_NOT_AT_BASE = 700,
    ERROR_RXACT_STATE_CREATED = 701,
    ERROR_SEGMENT_NOTIFICATION = 702,
    ERROR_BAD_CURRENT_DIRECTORY = 703,
    ERROR_FT_READ_RECOVERY_FROM_BACKUP = 704,
    ERROR_FT_WRITE_RECOVERY = 705,
    ERROR_IMAGE_MACHINE_TYPE_MISMATCH = 706,
    ERROR_RECEIVE_PARTIAL = 707,
    ERROR_RECEIVE_EXPEDITED = 708,
    ERROR_RECEIVE_PARTIAL_EXPEDITED = 709,
    ERROR_EVENT_DONE = 710,
    ERROR_EVENT_PENDING = 711,
    ERROR_CHECKING_FILE_SYSTEM = 712,
    ERROR_FATAL_APP_EXIT = 713,
    ERROR_PREDEFINED_HANDLE = 714,
    ERROR_WAS_UNLOCKED = 715,
    ERROR_SERVICE_NOTIFICATION = 716,
    ERROR_WAS_LOCKED = 717,
    ERROR_LOG_HARD_ERROR = 718,
    ERROR_ALREADY_WIN32 = 719,
    ERROR_IMAGE_MACHINE_TYPE_MISMATCH_EXE = 720,
    ERROR_NO_YIELD_PERFORMED = 721,
    ERROR_TIMER_RESUME_IGNORED = 722,
    ERROR_ARBITRATION_UNHANDLED = 723,
    ERROR_CARDBUS_NOT_SUPPORTED = 724,
    ERROR_MP_PROCESSOR_MISMATCH = 725,
    ERROR_HIBERNATED = 726,
    ERROR_RESUME_HIBERNATION = 727,
    ERROR_FIRMWARE_UPDATED = 728,
    ERROR_DRIVERS_LEAKING_LOCKED_PAGES = 729,
    ERROR_WAKE_SYSTEM = 730,
    ERROR_WAIT_1 = 731,
    ERROR_WAIT_2 = 732,
    ERROR_WAIT_3 = 733,
    ERROR_WAIT_63 = 734,
    ERROR_ABANDONED_WAIT_0 = 735,
    ERROR_ABANDONED_WAIT_63 = 736,
    ERROR_USER_APC = 737,
    ERROR_KERNEL_APC = 738,
    ERROR_ALERTED = 739,
    ERROR_ELEVATION_REQUIRED = 740,
    ERROR_REPARSE = 741,
    ERROR_OPLOCK_BREAK_IN_PROGRESS = 742,
    ERROR_VOLUME_MOUNTED = 743,
    ERROR_RXACT_COMMITTED = 744,
    ERROR_NOTIFY_CLEANUP = 745,
    ERROR_PRIMARY_TRANSPORT_CONNECT_FAILED = 746,
    ERROR_PAGE_FAULT_TRANSITION = 747,
    ERROR_PAGE_FAULT_DEMAND_ZERO = 748,
    ERROR_PAGE_FAULT_COPY_ON_WRITE = 749,
    ERROR_PAGE_FAULT_GUARD_PAGE = 750,
    ERROR_PAGE_FAULT_PAGING_FILE = 751,
    ERROR_CACHE_PAGE_LOCKED = 752,
    ERROR_CRASH_DUMP = 753,
    ERROR_BUFFER_ALL_ZEROS = 754,
    ERROR_REPARSE_OBJECT = 755,
    ERROR_RESOURCE_REQUIREMENTS_CHANGED = 756,
    ERROR_TRANSLATION_COMPLETE = 757,
    ERROR_NOTHING_TO_TERMINATE = 758,
    ERROR_PROCESS_NOT_IN_JOB = 759,
    ERROR_PROCESS_IN_JOB = 760,
    ERROR_VOLSNAP_HIBERNATE_READY = 761,
    ERROR_FSFILTER_OP_COMPLETED_SUCCESSFULLY = 762,
    ERROR_INTERRUPT_VECTOR_ALREADY_CONNECTED = 763,
    ERROR_INTERRUPT_STILL_CONNECTED = 764,
    ERROR_WAIT_FOR_OPLOCK = 765,
    ERROR_DBG_EXCEPTION_HANDLED = 766,
    ERROR_DBG_CONTINUE = 767,
    ERROR_CALLBACK_POP_STACK = 768,
    ERROR_COMPRESSION_DISABLED = 769,
    ERROR_CANTFETCHBACKWARDS = 770,
    ERROR_CANTSCROLLBACKWARDS = 771,
    ERROR_ROWSNOTRELEASED = 772,
    ERROR_BAD_ACCESSOR_FLAGS = 773,
    ERROR_ERRORS_ENCOUNTERED = 774,
    ERROR_NOT_CAPABLE = 775,
    ERROR_REQUEST_OUT_OF_SEQUENCE = 776,
    ERROR_VERSION_PARSE_ERROR = 777,
    ERROR_BADSTARTPOSITION = 778,
    ERROR_MEMORY_HARDWARE = 779,
    ERROR_DISK_REPAIR_DISABLED = 780,
    ERROR_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE = 781,
    ERROR_SYSTEM_POWERSTATE_TRANSITION = 782,
    ERROR_SYSTEM_POWERSTATE_COMPLEX_TRANSITION = 783,
    ERROR_MCA_EXCEPTION = 784,
    ERROR_ACCESS_AUDIT_BY_POLICY = 785,
    ERROR_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY = 786,
    ERROR_ABANDON_HIBERFILE = 787,
    ERROR_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED = 788,
    ERROR_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR = 789,
    ERROR_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR = 790,
    ERROR_BAD_MCFG_TABLE = 791,
    ERROR_DISK_REPAIR_REDIRECTED = 792,
    ERROR_DISK_REPAIR_UNSUCCESSFUL = 793,
    ERROR_CORRUPT_LOG_OVERFULL = 794,
    ERROR_CORRUPT_LOG_CORRUPTED = 795,
    ERROR_CORRUPT_LOG_UNAVAILABLE = 796,
    ERROR_CORRUPT_LOG_DELETED_FULL = 797,
    ERROR_CORRUPT_LOG_CLEARED = 798,
    ERROR_ORPHAN_NAME_EXHAUSTED = 799,
    ERROR_OPLOCK_SWITCHED_TO_NEW_HANDLE = 800,
    ERROR_CANNOT_GRANT_REQUESTED_OPLOCK = 801,
    ERROR_CANNOT_BREAK_OPLOCK = 802,
    ERROR_OPLOCK_HANDLE_CLOSED = 803,
    ERROR_NO_ACE_CONDITION = 804,
    ERROR_INVALID_ACE_CONDITION = 805,
    ERROR_FILE_HANDLE_REVOKED = 806,
    ERROR_IMAGE_AT_DIFFERENT_BASE = 807,
    ERROR_ENCRYPTED_IO_NOT_POSSIBLE = 808,
    ERROR_FILE_METADATA_OPTIMIZATION_IN_PROGRESS = 809,
    ERROR_QUOTA_ACTIVITY = 810,
    ERROR_HANDLE_REVOKED = 811,
    ERROR_CALLBACK_INVOKE_INLINE = 812,
    ERROR_CPU_SET_INVALID = 813,
    ERROR_ENCLAVE_NOT_TERMINATED = 814,
    ERROR_ENCLAVE_VIOLATION = 815,
    ERROR_SERVER_TRANSPORT_CONFLICT = 816,
    ERROR_CERTIFICATE_VALIDATION_PREFERENCE_CONFLICT = 817,
    ERROR_FT_READ_FROM_COPY_FAILURE = 818,
    ERROR_SECTION_DIRECT_MAP_ONLY = 819,
    ERROR_EA_ACCESS_DENIED = 994,
    ERROR_OPERATION_ABORTED = 995,
    ERROR_IO_INCOMPLETE = 996,
    ERROR_IO_PENDING = 997,
    ERROR_NOACCESS = 998,
    ERROR_SWAPERROR = 999,
    ERROR_STACK_OVERFLOW = 1001,
    ERROR_INVALID_MESSAGE = 1002,
    ERROR_CAN_NOT_COMPLETE = 1003,
    ERROR_INVALID_FLAGS = 1004,
    ERROR_UNRECOGNIZED_VOLUME = 1005,
    ERROR_FILE_INVALID = 1006,
    ERROR_FULLSCREEN_MODE = 1007,
    ERROR_NO_TOKEN = 1008,
    ERROR_BADDB = 1009,
    ERROR_BADKEY = 1010,
    ERROR_CANTOPEN = 1011,
    ERROR_CANTREAD = 1012,
    ERROR_CANTWRITE = 1013,
    ERROR_REGISTRY_RECOVERED = 1014,
    ERROR_REGISTRY_CORRUPT = 1015,
    ERROR_REGISTRY_IO_FAILED = 1016,
    ERROR_NOT_REGISTRY_FILE = 1017,
    ERROR_KEY_DELETED = 1018,
    ERROR_NO_LOG_SPACE = 1019,
    ERROR_KEY_HAS_CHILDREN = 1020,
    ERROR_CHILD_MUST_BE_VOLATILE = 1021,
    ERROR_NOTIFY_ENUM_DIR = 1022,
    ERROR_DEPENDENT_SERVICES_RUNNING = 1051,
    ERROR_INVALID_SERVICE_CONTROL = 1052,
    ERROR_SERVICE_REQUEST_TIMEOUT = 1053,
    ERROR_SERVICE_NO_THREAD = 1054,
    ERROR_SERVICE_DATABASE_LOCKED = 1055,
    ERROR_SERVICE_ALREADY_RUNNING = 1056,
    ERROR_INVALID_SERVICE_ACCOUNT = 1057,
    ERROR_SERVICE_DISABLED = 1058,
    ERROR_CIRCULAR_DEPENDENCY = 1059,
    ERROR_SERVICE_DOES_NOT_EXIST = 1060,
    ERROR_SERVICE_CANNOT_ACCEPT_CTRL = 1061,
    ERROR_SERVICE_NOT_ACTIVE = 1062,
    ERROR_FAILED_SERVICE_CONTROLLER_CONNECT = 1063,
    ERROR_EXCEPTION_IN_SERVICE = 1064,
    ERROR_DATABASE_DOES_NOT_EXIST = 1065,
    ERROR_SERVICE_SPECIFIC_ERROR = 1066,
    ERROR_PROCESS_ABORTED = 1067,
    ERROR_SERVICE_DEPENDENCY_FAIL = 1068,
    ERROR_SERVICE_LOGON_FAILED = 1069,
    ERROR_SERVICE_START_HANG = 1070,
    ERROR_INVALID_SERVICE_LOCK = 1071,
    ERROR_SERVICE_MARKED_FOR_DELETE = 1072,
    ERROR_SERVICE_EXISTS = 1073,
    ERROR_ALREADY_RUNNING_LKG = 1074,
    ERROR_SERVICE_DEPENDENCY_DELETED = 1075,
    ERROR_BOOT_ALREADY_ACCEPTED = 1076,
    ERROR_SERVICE_NEVER_STARTED = 1077,
    ERROR_DUPLICATE_SERVICE_NAME = 1078,
    ERROR_DIFFERENT_SERVICE_ACCOUNT = 1079,
    ERROR_CANNOT_DETECT_DRIVER_FAILURE = 1080,
    ERROR_CANNOT_DETECT_PROCESS_ABORT = 1081,
    ERROR_NO_RECOVERY_PROGRAM = 1082,
    ERROR_SERVICE_NOT_IN_EXE = 1083,
    ERROR_NOT_SAFEBOOT_SERVICE = 1084,
    ERROR_END_OF_MEDIA = 1100,
    ERROR_FILEMARK_DETECTED = 1101,
    ERROR_BEGINNING_OF_MEDIA = 1102,
    ERROR_SETMARK_DETECTED = 1103,
    ERROR_NO_DATA_DETECTED = 1104,
    ERROR_PARTITION_FAILURE = 1105,
    ERROR_INVALID_BLOCK_LENGTH = 1106,
    ERROR_DEVICE_NOT_PARTITIONED = 1107,
    ERROR_UNABLE_TO_LOCK_MEDIA = 1108,
    ERROR_UNABLE_TO_UNLOAD_MEDIA = 1109,
    ERROR_MEDIA_CHANGED = 1110,
    ERROR_BUS_RESET = 1111,
    ERROR_NO_MEDIA_IN_DRIVE = 1112,
    ERROR_NO_UNICODE_TRANSLATION = 1113,
    ERROR_DLL_INIT_FAILED = 1114,
    ERROR_SHUTDOWN_IN_PROGRESS = 1115,
    ERROR_NO_SHUTDOWN_IN_PROGRESS = 1116,
    ERROR_IO_DEVICE = 1117,
    ERROR_SERIAL_NO_DEVICE = 1118,
    ERROR_IRQ_BUSY = 1119,
    ERROR_MORE_WRITES = 1120,
    ERROR_COUNTER_TIMEOUT = 1121,
    ERROR_FLOPPY_ID_MARK_NOT_FOUND = 1122,
    ERROR_FLOPPY_WRONG_CYLINDER = 1123,
    ERROR_FLOPPY_UNKNOWN_ERROR = 1124,
    ERROR_FLOPPY_BAD_REGISTERS = 1125,
    ERROR_DISK_RECALIBRATE_FAILED = 1126,
    ERROR_DISK_OPERATION_FAILED = 1127,
    ERROR_DISK_RESET_FAILED = 1128,
    ERROR_EOM_OVERFLOW = 1129,
    ERROR_NOT_ENOUGH_SERVER_MEMORY = 1130,
    ERROR_POSSIBLE_DEADLOCK = 1131,
    ERROR_MAPPED_ALIGNMENT = 1132,
    ERROR_SET_POWER_STATE_VETOED = 1140,
    ERROR_SET_POWER_STATE_FAILED = 1141,
    ERROR_TOO_MANY_LINKS = 1142,
    ERROR_OLD_WIN_VERSION = 1150,
    ERROR_APP_WRONG_OS = 1151,
    ERROR_SINGLE_INSTANCE_APP = 1152,
    ERROR_RMODE_APP = 1153,
    ERROR_INVALID_DLL = 1154,
    ERROR_NO_ASSOCIATION = 1155,
    ERROR_DDE_FAIL = 1156,
    ERROR_DLL_NOT_FOUND = 1157,
    ERROR_NO_MORE_USER_HANDLES = 1158,
    ERROR_MESSAGE_SYNC_ONLY = 1159,
    ERROR_SOURCE_ELEMENT_EMPTY = 1160,
    ERROR_DESTINATION_ELEMENT_FULL = 1161,
    ERROR_ILLEGAL_ELEMENT_ADDRESS = 1162,
    ERROR_MAGAZINE_NOT_PRESENT = 1163,
    ERROR_DEVICE_REINITIALIZATION_NEEDED = 1164,
    ERROR_DEVICE_REQUIRES_CLEANING = 1165,
    ERROR_DEVICE_DOOR_OPEN = 1166,
    ERROR_DEVICE_NOT_CONNECTED = 1167,
    ERROR_NOT_FOUND = 1168,
    ERROR_NO_MATCH = 1169,
    ERROR_SET_NOT_FOUND = 1170,
    ERROR_POINT_NOT_FOUND = 1171,
    ERROR_NO_TRACKING_SERVICE = 1172,
    ERROR_NO_VOLUME_ID = 1173,
    ERROR_UNABLE_TO_REMOVE_REPLACED = 1175,
    ERROR_UNABLE_TO_MOVE_REPLACEMENT = 1176,
    ERROR_UNABLE_TO_MOVE_REPLACEMENT_2 = 1177,
    ERROR_JOURNAL_DELETE_IN_PROGRESS = 1178,
    ERROR_JOURNAL_NOT_ACTIVE = 1179,
    ERROR_POTENTIAL_FILE_FOUND = 1180,
    ERROR_JOURNAL_ENTRY_DELETED = 1181,
    ERROR_PARTITION_TERMINATING = 1184,
    ERROR_SHUTDOWN_IS_SCHEDULED = 1190,
    ERROR_SHUTDOWN_USERS_LOGGED_ON = 1191,
    ERROR_SHUTDOWN_DISKS_NOT_IN_MAINTENANCE_MODE = 1192,
    ERROR_BAD_DEVICE = 1200,
    ERROR_CONNECTION_UNAVAIL = 1201,
    ERROR_DEVICE_ALREADY_REMEMBERED = 1202,
    ERROR_NO_NET_OR_BAD_PATH = 1203,
    ERROR_BAD_PROVIDER = 1204,
    ERROR_CANNOT_OPEN_PROFILE = 1205,
    ERROR_BAD_PROFILE = 1206,
    ERROR_NOT_CONTAINER = 1207,
    ERROR_EXTENDED_ERROR = 1208,
    ERROR_INVALID_GROUPNAME = 1209,
    ERROR_INVALID_COMPUTERNAME = 1210,
    ERROR_INVALID_EVENTNAME = 1211,
    ERROR_INVALID_DOMAINNAME = 1212,
    ERROR_INVALID_SERVICENAME = 1213,
    ERROR_INVALID_NETNAME = 1214,
    ERROR_INVALID_SHARENAME = 1215,
    ERROR_INVALID_PASSWORDNAME = 1216,
    ERROR_INVALID_MESSAGENAME = 1217,
    ERROR_INVALID_MESSAGEDEST = 1218,
    ERROR_SESSION_CREDENTIAL_CONFLICT = 1219,
    ERROR_REMOTE_SESSION_LIMIT_EXCEEDED = 1220,
    ERROR_DUP_DOMAINNAME = 1221,
    ERROR_NO_NETWORK = 1222,
    ERROR_CANCELLED = 1223,
    ERROR_USER_MAPPED_FILE = 1224,
    ERROR_CONNECTION_REFUSED = 1225,
    ERROR_GRACEFUL_DISCONNECT = 1226,
    ERROR_ADDRESS_ALREADY_ASSOCIATED = 1227,
    ERROR_ADDRESS_NOT_ASSOCIATED = 1228,
    ERROR_CONNECTION_INVALID = 1229,
    ERROR_CONNECTION_ACTIVE = 1230,
    ERROR_NETWORK_UNREACHABLE = 1231,
    ERROR_HOST_UNREACHABLE = 1232,
    ERROR_PROTOCOL_UNREACHABLE = 1233,
    ERROR_PORT_UNREACHABLE = 1234,
    ERROR_REQUEST_ABORTED = 1235,
    ERROR_CONNECTION_ABORTED = 1236,
    ERROR_RETRY = 1237,
    ERROR_CONNECTION_COUNT_LIMIT = 1238,
    ERROR_LOGIN_TIME_RESTRICTION = 1239,
    ERROR_LOGIN_WKSTA_RESTRICTION = 1240,
    ERROR_INCORRECT_ADDRESS = 1241,
    ERROR_ALREADY_REGISTERED = 1242,
    ERROR_SERVICE_NOT_FOUND = 1243,
    ERROR_NOT_AUTHENTICATED = 1244,
    ERROR_NOT_LOGGED_ON = 1245,
    ERROR_CONTINUE = 1246,
    ERROR_ALREADY_INITIALIZED = 1247,
    ERROR_NO_MORE_DEVICES = 1248,
    ERROR_NO_SUCH_SITE = 1249,
    ERROR_DOMAIN_CONTROLLER_EXISTS = 1250,
    ERROR_ONLY_IF_CONNECTED = 1251,
    ERROR_OVERRIDE_NOCHANGES = 1252,
    ERROR_BAD_USER_PROFILE = 1253,
    ERROR_NOT_SUPPORTED_ON_SBS = 1254,
    ERROR_SERVER_SHUTDOWN_IN_PROGRESS = 1255,
    ERROR_HOST_DOWN = 1256,
    ERROR_NON_ACCOUNT_SID = 1257,
    ERROR_NON_DOMAIN_SID = 1258,
    ERROR_APPHELP_BLOCK = 1259,
    ERROR_ACCESS_DISABLED_BY_POLICY = 1260,
    ERROR_REG_NAT_CONSUMPTION = 1261,
    ERROR_CSCSHARE_OFFLINE = 1262,
    ERROR_PKINIT_FAILURE = 1263,
    ERROR_SMARTCARD_SUBSYSTEM_FAILURE = 1264,
    ERROR_DOWNGRADE_DETECTED = 1265,
    ERROR_MACHINE_LOCKED = 1271,
    ERROR_SMB_GUEST_LOGON_BLOCKED = 1272,
    ERROR_CALLBACK_SUPPLIED_INVALID_DATA = 1273,
    ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED = 1274,
    ERROR_DRIVER_BLOCKED = 1275,
    ERROR_INVALID_IMPORT_OF_NON_DLL = 1276,
    ERROR_ACCESS_DISABLED_WEBBLADE = 1277,
    ERROR_ACCESS_DISABLED_WEBBLADE_TAMPER = 1278,
    ERROR_RECOVERY_FAILURE = 1279,
    ERROR_ALREADY_FIBER = 1280,
    ERROR_ALREADY_THREAD = 1281,
    ERROR_STACK_BUFFER_OVERRUN = 1282,
    ERROR_PARAMETER_QUOTA_EXCEEDED = 1283,
    ERROR_DEBUGGER_INACTIVE = 1284,
    ERROR_DELAY_LOAD_FAILED = 1285,
    ERROR_VDM_DISALLOWED = 1286,
    ERROR_UNIDENTIFIED_ERROR = 1287,
    ERROR_INVALID_CRUNTIME_PARAMETER = 1288,
    ERROR_BEYOND_VDL = 1289,
    ERROR_INCOMPATIBLE_SERVICE_SID_TYPE = 1290,
    ERROR_DRIVER_PROCESS_TERMINATED = 1291,
    ERROR_IMPLEMENTATION_LIMIT = 1292,
    ERROR_PROCESS_IS_PROTECTED = 1293,
    ERROR_SERVICE_NOTIFY_CLIENT_LAGGING = 1294,
    ERROR_DISK_QUOTA_EXCEEDED = 1295,
    ERROR_CONTENT_BLOCKED = 1296,
    ERROR_INCOMPATIBLE_SERVICE_PRIVILEGE = 1297,
    ERROR_APP_HANG = 1298,
    ERROR_INVALID_LABEL = 1299,
    ERROR_NOT_ALL_ASSIGNED = 1300,
    ERROR_SOME_NOT_MAPPED = 1301,
    ERROR_NO_QUOTAS_FOR_ACCOUNT = 1302,
    ERROR_LOCAL_USER_SESSION_KEY = 1303,
    ERROR_NULL_LM_PASSWORD = 1304,
    ERROR_UNKNOWN_REVISION = 1305,
    ERROR_REVISION_MISMATCH = 1306,
    ERROR_INVALID_OWNER = 1307,
    ERROR_INVALID_PRIMARY_GROUP = 1308,
    ERROR_NO_IMPERSONATION_TOKEN = 1309,
    ERROR_CANT_DISABLE_MANDATORY = 1310,
    ERROR_NO_LOGON_SERVERS = 1311,
    ERROR_NO_SUCH_LOGON_SESSION = 1312,
    ERROR_NO_SUCH_PRIVILEGE = 1313,
    ERROR_PRIVILEGE_NOT_HELD = 1314,
    ERROR_INVALID_ACCOUNT_NAME = 1315,
    ERROR_USER_EXISTS = 1316,
    ERROR_NO_SUCH_USER = 1317,
    ERROR_GROUP_EXISTS = 1318,
    ERROR_NO_SUCH_GROUP = 1319,
    ERROR_MEMBER_IN_GROUP = 1320,
    ERROR_MEMBER_NOT_IN_GROUP = 1321,
    ERROR_LAST_ADMIN = 1322,
    ERROR_WRONG_PASSWORD = 1323,
    ERROR_ILL_FORMED_PASSWORD = 1324,
    ERROR_PASSWORD_RESTRICTION = 1325,
    ERROR_LOGON_FAILURE = 1326,
    ERROR_ACCOUNT_RESTRICTION = 1327,
    ERROR_INVALID_LOGON_HOURS = 1328,
    ERROR_INVALID_WORKSTATION = 1329,
    ERROR_PASSWORD_EXPIRED = 1330,
    ERROR_ACCOUNT_DISABLED = 1331,
    ERROR_NONE_MAPPED = 1332,
    ERROR_TOO_MANY_LUIDS_REQUESTED = 1333,
    ERROR_LUIDS_EXHAUSTED = 1334,
    ERROR_INVALID_SUB_AUTHORITY = 1335,
    ERROR_INVALID_ACL = 1336,
    ERROR_INVALID_SID = 1337,
    ERROR_INVALID_SECURITY_DESCR = 1338,
    ERROR_BAD_INHERITANCE_ACL = 1340,
    ERROR_SERVER_DISABLED = 1341,
    ERROR_SERVER_NOT_DISABLED = 1342,
    ERROR_INVALID_ID_AUTHORITY = 1343,
    ERROR_ALLOTTED_SPACE_EXCEEDED = 1344,
    ERROR_INVALID_GROUP_ATTRIBUTES = 1345,
    ERROR_BAD_IMPERSONATION_LEVEL = 1346,
    ERROR_CANT_OPEN_ANONYMOUS = 1347,
    ERROR_BAD_VALIDATION_CLASS = 1348,
    ERROR_BAD_TOKEN_TYPE = 1349,
    ERROR_NO_SECURITY_ON_OBJECT = 1350,
    ERROR_CANT_ACCESS_DOMAIN_INFO = 1351,
    ERROR_INVALID_SERVER_STATE = 1352,
    ERROR_INVALID_DOMAIN_STATE = 1353,
    ERROR_INVALID_DOMAIN_ROLE = 1354,
    ERROR_NO_SUCH_DOMAIN = 1355,
    ERROR_DOMAIN_EXISTS = 1356,
    ERROR_DOMAIN_LIMIT_EXCEEDED = 1357,
    ERROR_INTERNAL_DB_CORRUPTION = 1358,
    ERROR_INTERNAL_ERROR = 1359,
    ERROR_GENERIC_NOT_MAPPED = 1360,
    ERROR_BAD_DESCRIPTOR_FORMAT = 1361,
    ERROR_NOT_LOGON_PROCESS = 1362,
    ERROR_LOGON_SESSION_EXISTS = 1363,
    ERROR_NO_SUCH_PACKAGE = 1364,
    ERROR_BAD_LOGON_SESSION_STATE = 1365,
    ERROR_LOGON_SESSION_COLLISION = 1366,
    ERROR_INVALID_LOGON_TYPE = 1367,
    ERROR_CANNOT_IMPERSONATE = 1368,
    ERROR_RXACT_INVALID_STATE = 1369,
    ERROR_RXACT_COMMIT_FAILURE = 1370,
    ERROR_SPECIAL_ACCOUNT = 1371,
    ERROR_SPECIAL_GROUP = 1372,
    ERROR_SPECIAL_USER = 1373,
    ERROR_MEMBERS_PRIMARY_GROUP = 1374,
    ERROR_TOKEN_ALREADY_IN_USE = 1375,
    ERROR_NO_SUCH_ALIAS = 1376,
    ERROR_MEMBER_NOT_IN_ALIAS = 1377,
    ERROR_MEMBER_IN_ALIAS = 1378,
    ERROR_ALIAS_EXISTS = 1379,
    ERROR_LOGON_NOT_GRANTED = 1380,
    ERROR_TOO_MANY_SECRETS = 1381,
    ERROR_SECRET_TOO_LONG = 1382,
    ERROR_INTERNAL_DB_ERROR = 1383,
    ERROR_TOO_MANY_CONTEXT_IDS = 1384,
    ERROR_LOGON_TYPE_NOT_GRANTED = 1385,
    ERROR_NT_CROSS_ENCRYPTION_REQUIRED = 1386,
    ERROR_NO_SUCH_MEMBER = 1387,
    ERROR_INVALID_MEMBER = 1388,
    ERROR_TOO_MANY_SIDS = 1389,
    ERROR_LM_CROSS_ENCRYPTION_REQUIRED = 1390,
    ERROR_NO_INHERITANCE = 1391,
    ERROR_FILE_CORRUPT = 1392,
    ERROR_DISK_CORRUPT = 1393,
    ERROR_NO_USER_SESSION_KEY = 1394,
    ERROR_LICENSE_QUOTA_EXCEEDED = 1395,
    ERROR_WRONG_TARGET_NAME = 1396,
    ERROR_MUTUAL_AUTH_FAILED = 1397,
    ERROR_TIME_SKEW = 1398,
    ERROR_CURRENT_DOMAIN_NOT_ALLOWED = 1399,
    ERROR_INVALID_WINDOW_HANDLE = 1400,
    ERROR_INVALID_MENU_HANDLE = 1401,
    ERROR_INVALID_CURSOR_HANDLE = 1402,
    ERROR_INVALID_ACCEL_HANDLE = 1403,
    ERROR_INVALID_HOOK_HANDLE = 1404,
    ERROR_INVALID_DWP_HANDLE = 1405,
    ERROR_TLW_WITH_WSCHILD = 1406,
    ERROR_CANNOT_FIND_WND_CLASS = 1407,
    ERROR_WINDOW_OF_OTHER_THREAD = 1408,
    ERROR_HOTKEY_ALREADY_REGISTERED = 1409,
    ERROR_CLASS_ALREADY_EXISTS = 1410,
    ERROR_CLASS_DOES_NOT_EXIST = 1411,
    ERROR_CLASS_HAS_WINDOWS = 1412,
    ERROR_INVALID_INDEX = 1413,
    ERROR_INVALID_ICON_HANDLE = 1414,
    ERROR_PRIVATE_DIALOG_INDEX = 1415,
    ERROR_LISTBOX_ID_NOT_FOUND = 1416,
    ERROR_NO_WILDCARD_CHARACTERS = 1417,
    ERROR_CLIPBOARD_NOT_OPEN = 1418,
    ERROR_HOTKEY_NOT_REGISTERED = 1419,
    ERROR_WINDOW_NOT_DIALOG = 1420,
    ERROR_CONTROL_ID_NOT_FOUND = 1421,
    ERROR_INVALID_COMBOBOX_MESSAGE = 1422,
    ERROR_WINDOW_NOT_COMBOBOX = 1423,
    ERROR_INVALID_EDIT_HEIGHT = 1424,
    ERROR_DC_NOT_FOUND = 1425,
    ERROR_INVALID_HOOK_FILTER = 1426,
    ERROR_INVALID_FILTER_PROC = 1427,
    ERROR_HOOK_NEEDS_HMOD = 1428,
    ERROR_GLOBAL_ONLY_HOOK = 1429,
    ERROR_JOURNAL_HOOK_SET = 1430,
    ERROR_HOOK_NOT_INSTALLED = 1431,
    ERROR_INVALID_LB_MESSAGE = 1432,
    ERROR_SETCOUNT_ON_BAD_LB = 1433,
    ERROR_LB_WITHOUT_TABSTOPS = 1434,
    ERROR_DESTROY_OBJECT_OF_OTHER_THREAD = 1435,
    ERROR_CHILD_WINDOW_MENU = 1436,
    ERROR_NO_SYSTEM_MENU = 1437,
    ERROR_INVALID_MSGBOX_STYLE = 1438,
    ERROR_INVALID_SPI_VALUE = 1439,
    ERROR_SCREEN_ALREADY_LOCKED = 1440,
    ERROR_HWNDS_HAVE_DIFF_PARENT = 1441,
    ERROR_NOT_CHILD_WINDOW = 1442,
    ERROR_INVALID_GW_COMMAND = 1443,
    ERROR_INVALID_THREAD_ID = 1444,
    ERROR_NON_MDICHILD_WINDOW = 1445,
    ERROR_POPUP_ALREADY_ACTIVE = 1446,
    ERROR_NO_SCROLLBARS = 1447,
    ERROR_INVALID_SCROLLBAR_RANGE = 1448,
    ERROR_INVALID_SHOWWIN_COMMAND = 1449,
    ERROR_NO_SYSTEM_RESOURCES = 1450,
    ERROR_NONPAGED_SYSTEM_RESOURCES = 1451,
    ERROR_PAGED_SYSTEM_RESOURCES = 1452,
    ERROR_WORKING_SET_QUOTA = 1453,
    ERROR_PAGEFILE_QUOTA = 1454,
    ERROR_COMMITMENT_LIMIT = 1455,
    ERROR_MENU_ITEM_NOT_FOUND = 1456,
    ERROR_INVALID_KEYBOARD_HANDLE = 1457,
    ERROR_HOOK_TYPE_NOT_ALLOWED = 1458,
    ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION = 1459,
    ERROR_TIMEOUT = 1460,
    ERROR_INVALID_MONITOR_HANDLE = 1461,
    ERROR_INCORRECT_SIZE = 1462,
    ERROR_SYMLINK_CLASS_DISABLED = 1463,
    ERROR_SYMLINK_NOT_SUPPORTED = 1464,
    ERROR_XML_PARSE_ERROR = 1465,
    ERROR_XMLDSIG_ERROR = 1466,
    ERROR_RESTART_APPLICATION = 1467,
    ERROR_WRONG_COMPARTMENT = 1468,
    ERROR_AUTHIP_FAILURE = 1469,
    ERROR_NO_NVRAM_RESOURCES = 1470,
    ERROR_NOT_GUI_PROCESS = 1471,
    ERROR_EVENTLOG_FILE_CORRUPT = 1500,
    ERROR_EVENTLOG_CANT_START = 1501,
    ERROR_LOG_FILE_FULL = 1502,
    ERROR_EVENTLOG_FILE_CHANGED = 1503,
    ERROR_CONTAINER_ASSIGNED = 1504,
    ERROR_JOB_NO_CONTAINER = 1505,
    ERROR_INVALID_TASK_NAME = 1550,
    ERROR_INVALID_TASK_INDEX = 1551,
    ERROR_THREAD_ALREADY_IN_TASK = 1552,
    ERROR_INSTALL_SERVICE_FAILURE = 1601,
    ERROR_INSTALL_USEREXIT = 1602,
    ERROR_INSTALL_FAILURE = 1603,
    ERROR_INSTALL_SUSPEND = 1604,
    ERROR_UNKNOWN_PRODUCT = 1605,
    ERROR_UNKNOWN_FEATURE = 1606,
    ERROR_UNKNOWN_COMPONENT = 1607,
    ERROR_UNKNOWN_PROPERTY = 1608,
    ERROR_INVALID_HANDLE_STATE = 1609,
    ERROR_BAD_CONFIGURATION = 1610,
    ERROR_INDEX_ABSENT = 1611,
    ERROR_INSTALL_SOURCE_ABSENT = 1612,
    ERROR_INSTALL_PACKAGE_VERSION = 1613,
    ERROR_PRODUCT_UNINSTALLED = 1614,
    ERROR_BAD_QUERY_SYNTAX = 1615,
    ERROR_INVALID_FIELD = 1616,
    ERROR_DEVICE_REMOVED = 1617,
    ERROR_INSTALL_ALREADY_RUNNING = 1618,
    ERROR_INSTALL_PACKAGE_OPEN_FAILED = 1619,
    ERROR_INSTALL_PACKAGE_INVALID = 1620,
    ERROR_INSTALL_UI_FAILURE = 1621,
    ERROR_INSTALL_LOG_FAILURE = 1622,
    ERROR_INSTALL_LANGUAGE_UNSUPPORTED = 1623,
    ERROR_INSTALL_TRANSFORM_FAILURE = 1624,
    ERROR_INSTALL_PACKAGE_REJECTED = 1625,
    ERROR_FUNCTION_NOT_CALLED = 1626,
    ERROR_FUNCTION_FAILED = 1627,
    ERROR_INVALID_TABLE = 1628,
    ERROR_DATATYPE_MISMATCH = 1629,
    ERROR_UNSUPPORTED_TYPE = 1630,
    ERROR_CREATE_FAILED = 1631,
    ERROR_INSTALL_TEMP_UNWRITABLE = 1632,
    ERROR_INSTALL_PLATFORM_UNSUPPORTED = 1633,
    ERROR_INSTALL_NOTUSED = 1634,
    ERROR_PATCH_PACKAGE_OPEN_FAILED = 1635,
    ERROR_PATCH_PACKAGE_INVALID = 1636,
    ERROR_PATCH_PACKAGE_UNSUPPORTED = 1637,
    ERROR_PRODUCT_VERSION = 1638,
    ERROR_INVALID_COMMAND_LINE = 1639,
    ERROR_INSTALL_REMOTE_DISALLOWED = 1640,
    ERROR_SUCCESS_REBOOT_INITIATED = 1641,
    ERROR_PATCH_TARGET_NOT_FOUND = 1642,
    ERROR_PATCH_PACKAGE_REJECTED = 1643,
    ERROR_INSTALL_TRANSFORM_REJECTED = 1644,
    ERROR_INSTALL_REMOTE_PROHIBITED = 1645,
    ERROR_PATCH_REMOVAL_UNSUPPORTED = 1646,
    ERROR_UNKNOWN_PATCH = 1647,
    ERROR_PATCH_NO_SEQUENCE = 1648,
    ERROR_PATCH_REMOVAL_DISALLOWED = 1649,
    ERROR_INVALID_PATCH_XML = 1650,
    ERROR_PATCH_MANAGED_ADVERTISED_PRODUCT = 1651,
    ERROR_INSTALL_SERVICE_SAFEBOOT = 1652,
    ERROR_FAIL_FAST_EXCEPTION = 1653,
    ERROR_INSTALL_REJECTED = 1654,
    ERROR_DYNAMIC_CODE_BLOCKED = 1655,
    ERROR_NOT_SAME_OBJECT = 1656,
    ERROR_STRICT_CFG_VIOLATION = 1657,
    ERROR_SET_CONTEXT_DENIED = 1660,
    ERROR_CROSS_PARTITION_VIOLATION = 1661,
    ERROR_RETURN_ADDRESS_HIJACK_ATTEMPT = 1662,
    ERROR_INVALID_USER_BUFFER = 1784,
    ERROR_UNRECOGNIZED_MEDIA = 1785,
    ERROR_NO_TRUST_LSA_SECRET = 1786,
    ERROR_NO_TRUST_SAM_ACCOUNT = 1787,
    ERROR_TRUSTED_DOMAIN_FAILURE = 1788,
    ERROR_TRUSTED_RELATIONSHIP_FAILURE = 1789,
    ERROR_TRUST_FAILURE = 1790,
    ERROR_NETLOGON_NOT_STARTED = 1792,
    ERROR_ACCOUNT_EXPIRED = 1793,
    ERROR_REDIRECTOR_HAS_OPEN_HANDLES = 1794,
    ERROR_PRINTER_DRIVER_ALREADY_INSTALLED = 1795,
    ERROR_UNKNOWN_PORT = 1796,
    ERROR_UNKNOWN_PRINTER_DRIVER = 1797,
    ERROR_UNKNOWN_PRINTPROCESSOR = 1798,
    ERROR_INVALID_SEPARATOR_FILE = 1799,
    ERROR_INVALID_PRIORITY = 1800,
    ERROR_INVALID_PRINTER_NAME = 1801,
    ERROR_PRINTER_ALREADY_EXISTS = 1802,
    ERROR_INVALID_PRINTER_COMMAND = 1803,
    ERROR_INVALID_DATATYPE = 1804,
    ERROR_INVALID_ENVIRONMENT = 1805,
    ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT = 1807,
    ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT = 1808,
    ERROR_NOLOGON_SERVER_TRUST_ACCOUNT = 1809,
    ERROR_DOMAIN_TRUST_INCONSISTENT = 1810,
    ERROR_SERVER_HAS_OPEN_HANDLES = 1811,
    ERROR_RESOURCE_DATA_NOT_FOUND = 1812,
    ERROR_RESOURCE_TYPE_NOT_FOUND = 1813,
    ERROR_RESOURCE_NAME_NOT_FOUND = 1814,
    ERROR_RESOURCE_LANG_NOT_FOUND = 1815,
    ERROR_NOT_ENOUGH_QUOTA = 1816,
    ERROR_INVALID_TIME = 1901,
    ERROR_INVALID_FORM_NAME = 1902,
    ERROR_INVALID_FORM_SIZE = 1903,
    ERROR_ALREADY_WAITING = 1904,
    ERROR_PRINTER_DELETED = 1905,
    ERROR_INVALID_PRINTER_STATE = 1906,
    ERROR_PASSWORD_MUST_CHANGE = 1907,
    ERROR_DOMAIN_CONTROLLER_NOT_FOUND = 1908,
    ERROR_ACCOUNT_LOCKED_OUT = 1909,
    ERROR_NO_SITENAME = 1919,
    ERROR_CANT_ACCESS_FILE = 1920,
    ERROR_CANT_RESOLVE_FILENAME = 1921,
    ERROR_KM_DRIVER_BLOCKED = 1930,
    ERROR_CONTEXT_EXPIRED = 1931,
    ERROR_PER_USER_TRUST_QUOTA_EXCEEDED = 1932,
    ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED = 1933,
    ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED = 1934,
    ERROR_AUTHENTICATION_FIREWALL_FAILED = 1935,
    ERROR_REMOTE_PRINT_CONNECTIONS_BLOCKED = 1936,
    ERROR_NTLM_BLOCKED = 1937,
    ERROR_PASSWORD_CHANGE_REQUIRED = 1938,
    ERROR_LOST_MODE_LOGON_RESTRICTION = 1939,
    ERROR_INVALID_PIXEL_FORMAT = 2000,
    ERROR_BAD_DRIVER = 2001,
    ERROR_INVALID_WINDOW_STYLE = 2002,
    ERROR_METAFILE_NOT_SUPPORTED = 2003,
    ERROR_TRANSFORM_NOT_SUPPORTED = 2004,
    ERROR_CLIPPING_NOT_SUPPORTED = 2005,
    ERROR_INVALID_CMM = 2010,
    ERROR_INVALID_PROFILE = 2011,
    ERROR_TAG_NOT_FOUND = 2012,
    ERROR_TAG_NOT_PRESENT = 2013,
    ERROR_DUPLICATE_TAG = 2014,
    ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE = 2015,
    ERROR_PROFILE_NOT_FOUND = 2016,
    ERROR_INVALID_COLORSPACE = 2017,
    ERROR_ICM_NOT_ENABLED = 2018,
    ERROR_DELETING_ICM_XFORM = 2019,
    ERROR_INVALID_TRANSFORM = 2020,
    ERROR_COLORSPACE_MISMATCH = 2021,
    ERROR_INVALID_COLORINDEX = 2022,
    ERROR_PROFILE_DOES_NOT_MATCH_DEVICE = 2023,
    ERROR_CONNECTED_OTHER_PASSWORD = 2108,
    ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT = 2109,
    ERROR_BAD_USERNAME = 2202,
    ERROR_NOT_CONNECTED = 2250,
    ERROR_OPEN_FILES = 2401,
    ERROR_ACTIVE_CONNECTIONS = 2402,
    ERROR_DEVICE_IN_USE = 2404,
    ERROR_UNKNOWN_PRINT_MONITOR = 3000,
    ERROR_PRINTER_DRIVER_IN_USE = 3001,
    ERROR_SPOOL_FILE_NOT_FOUND = 3002,
    ERROR_SPL_NO_STARTDOC = 3003,
    ERROR_SPL_NO_ADDJOB = 3004,
    ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED = 3005,
    ERROR_PRINT_MONITOR_ALREADY_INSTALLED = 3006,
    ERROR_INVALID_PRINT_MONITOR = 3007,
    ERROR_PRINT_MONITOR_IN_USE = 3008,
    ERROR_PRINTER_HAS_JOBS_QUEUED = 3009,
    ERROR_SUCCESS_REBOOT_REQUIRED = 3010,
    ERROR_SUCCESS_RESTART_REQUIRED = 3011,
    ERROR_PRINTER_NOT_FOUND = 3012,
    ERROR_PRINTER_DRIVER_WARNED = 3013,
    ERROR_PRINTER_DRIVER_BLOCKED = 3014,
    ERROR_PRINTER_DRIVER_PACKAGE_IN_USE = 3015,
    ERROR_CORE_DRIVER_PACKAGE_NOT_FOUND = 3016,
    ERROR_FAIL_REBOOT_REQUIRED = 3017,
    ERROR_FAIL_REBOOT_INITIATED = 3018,
    ERROR_PRINTER_DRIVER_DOWNLOAD_NEEDED = 3019,
    ERROR_PRINT_JOB_RESTART_REQUIRED = 3020,
    ERROR_INVALID_PRINTER_DRIVER_MANIFEST = 3021,
    ERROR_PRINTER_NOT_SHAREABLE = 3022,
    ERROR_REQUEST_PAUSED = 3050,
    ERROR_APPEXEC_CONDITION_NOT_SATISFIED = 3060,
    ERROR_APPEXEC_HANDLE_INVALIDATED = 3061,
    ERROR_APPEXEC_INVALID_HOST_GENERATION = 3062,
    ERROR_APPEXEC_UNEXPECTED_PROCESS_REGISTRATION = 3063,
    ERROR_APPEXEC_INVALID_HOST_STATE = 3064,
    ERROR_APPEXEC_NO_DONOR = 3065,
    ERROR_APPEXEC_HOST_ID_MISMATCH = 3066,
    ERROR_APPEXEC_UNKNOWN_USER = 3067,
    ERROR_APPEXEC_APP_COMPAT_BLOCK = 3068,
    ERROR_APPEXEC_CALLER_WAIT_TIMEOUT = 3069,
    ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_TERMINATION = 3070,
    ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_LICENSING = 3071,
    ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_RESOURCES = 3072,
    ERROR_VRF_VOLATILE_CFG_AND_IO_ENABLED = 3080,
    ERROR_VRF_VOLATILE_NOT_STOPPABLE = 3081,
    ERROR_VRF_VOLATILE_SAFE_MODE = 3082,
    ERROR_VRF_VOLATILE_NOT_RUNNABLE_SYSTEM = 3083,
    ERROR_VRF_VOLATILE_NOT_SUPPORTED_RULECLASS = 3084,
    ERROR_VRF_VOLATILE_PROTECTED_DRIVER = 3085,
    ERROR_VRF_VOLATILE_NMI_REGISTERED = 3086,
    ERROR_VRF_VOLATILE_SETTINGS_CONFLICT = 3087,
    ERROR_DIF_IOCALLBACK_NOT_REPLACED = 3190,
    ERROR_DIF_LIVEDUMP_LIMIT_EXCEEDED = 3191,
    ERROR_DIF_VOLATILE_SECTION_NOT_LOCKED = 3192,
    ERROR_DIF_VOLATILE_DRIVER_HOTPATCHED = 3193,
    ERROR_DIF_VOLATILE_INVALID_INFO = 3194,
    ERROR_DIF_VOLATILE_DRIVER_IS_NOT_RUNNING = 3195,
    ERROR_DIF_VOLATILE_PLUGIN_IS_NOT_RUNNING = 3196,
    ERROR_DIF_VOLATILE_PLUGIN_CHANGE_NOT_ALLOWED = 3197,
    ERROR_DIF_VOLATILE_NOT_ALLOWED = 3198,
    ERROR_DIF_BINDING_API_NOT_FOUND = 3199,
    ERROR_IO_REISSUE_AS_CACHED = 3950,
    ERROR_WINS_INTERNAL = 4000,
    ERROR_CAN_NOT_DEL_LOCAL_WINS = 4001,
    ERROR_STATIC_INIT = 4002,
    ERROR_INC_BACKUP = 4003,
    ERROR_FULL_BACKUP = 4004,
    ERROR_REC_NON_EXISTENT = 4005,
    ERROR_RPL_NOT_ALLOWED = 4006,
    ERROR_DHCP_ADDRESS_CONFLICT = 4100,
    ERROR_WMI_GUID_NOT_FOUND = 4200,
    ERROR_WMI_INSTANCE_NOT_FOUND = 4201,
    ERROR_WMI_ITEMID_NOT_FOUND = 4202,
    ERROR_WMI_TRY_AGAIN = 4203,
    ERROR_WMI_DP_NOT_FOUND = 4204,
    ERROR_WMI_UNRESOLVED_INSTANCE_REF = 4205,
    ERROR_WMI_ALREADY_ENABLED = 4206,
    ERROR_WMI_GUID_DISCONNECTED = 4207,
    ERROR_WMI_SERVER_UNAVAILABLE = 4208,
    ERROR_WMI_DP_FAILED = 4209,
    ERROR_WMI_INVALID_MOF = 4210,
    ERROR_WMI_INVALID_REGINFO = 4211,
    ERROR_WMI_ALREADY_DISABLED = 4212,
    ERROR_WMI_READ_ONLY = 4213,
    ERROR_WMI_SET_FAILURE = 4214,
    ERROR_NOT_APPCONTAINER = 4250,
    ERROR_APPCONTAINER_REQUIRED = 4251,
    ERROR_NOT_SUPPORTED_IN_APPCONTAINER = 4252,
    ERROR_INVALID_PACKAGE_SID_LENGTH = 4253,
    ERROR_INVALID_MEDIA = 4300,
    ERROR_INVALID_LIBRARY = 4301,
    ERROR_INVALID_MEDIA_POOL = 4302,
    ERROR_DRIVE_MEDIA_MISMATCH = 4303,
    ERROR_MEDIA_OFFLINE = 4304,
    ERROR_LIBRARY_OFFLINE = 4305,
    ERROR_EMPTY = 4306,
    ERROR_NOT_EMPTY = 4307,
    ERROR_MEDIA_UNAVAILABLE = 4308,
    ERROR_RESOURCE_DISABLED = 4309,
    ERROR_INVALID_CLEANER = 4310,
    ERROR_UNABLE_TO_CLEAN = 4311,
    ERROR_OBJECT_NOT_FOUND = 4312,
    ERROR_DATABASE_FAILURE = 4313,
    ERROR_DATABASE_FULL = 4314,
    ERROR_MEDIA_INCOMPATIBLE = 4315,
    ERROR_RESOURCE_NOT_PRESENT = 4316,
    ERROR_INVALID_OPERATION = 4317,
    ERROR_MEDIA_NOT_AVAILABLE = 4318,
    ERROR_DEVICE_NOT_AVAILABLE = 4319,
    ERROR_REQUEST_REFUSED = 4320,
    ERROR_INVALID_DRIVE_OBJECT = 4321,
    ERROR_LIBRARY_FULL = 4322,
    ERROR_MEDIUM_NOT_ACCESSIBLE = 4323,
    ERROR_UNABLE_TO_LOAD_MEDIUM = 4324,
    ERROR_UNABLE_TO_INVENTORY_DRIVE = 4325,
    ERROR_UNABLE_TO_INVENTORY_SLOT = 4326,
    ERROR_UNABLE_TO_INVENTORY_TRANSPORT = 4327,
    ERROR_TRANSPORT_FULL = 4328,
    ERROR_CONTROLLING_IEPORT = 4329,
    ERROR_UNABLE_TO_EJECT_MOUNTED_MEDIA = 4330,
    ERROR_CLEANER_SLOT_SET = 4331,
    ERROR_CLEANER_SLOT_NOT_SET = 4332,
    ERROR_CLEANER_CARTRIDGE_SPENT = 4333,
    ERROR_UNEXPECTED_OMID = 4334,
    ERROR_CANT_DELETE_LAST_ITEM = 4335,
    ERROR_MESSAGE_EXCEEDS_MAX_SIZE = 4336,
    ERROR_VOLUME_CONTAINS_SYS_FILES = 4337,
    ERROR_INDIGENOUS_TYPE = 4338,
    ERROR_NO_SUPPORTING_DRIVES = 4339,
    ERROR_CLEANER_CARTRIDGE_INSTALLED = 4340,
    ERROR_IEPORT_FULL = 4341,
    ERROR_FILE_OFFLINE = 4350,
    ERROR_REMOTE_STORAGE_NOT_ACTIVE = 4351,
    ERROR_REMOTE_STORAGE_MEDIA_ERROR = 4352,
    ERROR_NOT_A_REPARSE_POINT = 4390,
    ERROR_REPARSE_ATTRIBUTE_CONFLICT = 4391,
    ERROR_INVALID_REPARSE_DATA = 4392,
    ERROR_REPARSE_TAG_INVALID = 4393,
    ERROR_REPARSE_TAG_MISMATCH = 4394,
    ERROR_REPARSE_POINT_ENCOUNTERED = 4395,
    ERROR_APP_DATA_NOT_FOUND = 4400,
    ERROR_APP_DATA_EXPIRED = 4401,
    ERROR_APP_DATA_CORRUPT = 4402,
    ERROR_APP_DATA_LIMIT_EXCEEDED = 4403,
    ERROR_APP_DATA_REBOOT_REQUIRED = 4404,
    ERROR_SECUREBOOT_ROLLBACK_DETECTED = 4420,
    ERROR_SECUREBOOT_POLICY_VIOLATION = 4421,
    ERROR_SECUREBOOT_INVALID_POLICY = 4422,
    ERROR_SECUREBOOT_POLICY_PUBLISHER_NOT_FOUND = 4423,
    ERROR_SECUREBOOT_POLICY_NOT_SIGNED = 4424,
    ERROR_SECUREBOOT_NOT_ENABLED = 4425,
    ERROR_SECUREBOOT_FILE_REPLACED = 4426,
    ERROR_SECUREBOOT_POLICY_NOT_AUTHORIZED = 4427,
    ERROR_SECUREBOOT_POLICY_UNKNOWN = 4428,
    ERROR_SECUREBOOT_POLICY_MISSING_ANTIROLLBACKVERSION = 4429,
    ERROR_SECUREBOOT_PLATFORM_ID_MISMATCH = 4430,
    ERROR_SECUREBOOT_POLICY_ROLLBACK_DETECTED = 4431,
    ERROR_SECUREBOOT_POLICY_UPGRADE_MISMATCH = 4432,
    ERROR_SECUREBOOT_REQUIRED_POLICY_FILE_MISSING = 4433,
    ERROR_SECUREBOOT_NOT_BASE_POLICY = 4434,
    ERROR_SECUREBOOT_NOT_SUPPLEMENTAL_POLICY = 4435,
    ERROR_OFFLOAD_READ_FLT_NOT_SUPPORTED = 4440,
    ERROR_OFFLOAD_WRITE_FLT_NOT_SUPPORTED = 4441,
    ERROR_OFFLOAD_READ_FILE_NOT_SUPPORTED = 4442,
    ERROR_OFFLOAD_WRITE_FILE_NOT_SUPPORTED = 4443,
    ERROR_ALREADY_HAS_STREAM_ID = 4444,
    ERROR_SMR_GARBAGE_COLLECTION_REQUIRED = 4445,
    ERROR_WOF_WIM_HEADER_CORRUPT = 4446,
    ERROR_WOF_WIM_RESOURCE_TABLE_CORRUPT = 4447,
    ERROR_WOF_FILE_RESOURCE_TABLE_CORRUPT = 4448,
    ERROR_OBJECT_IS_IMMUTABLE = 4449,
    ERROR_VOLUME_NOT_SIS_ENABLED = 4500,
    ERROR_SYSTEM_INTEGRITY_ROLLBACK_DETECTED = 4550,
    ERROR_SYSTEM_INTEGRITY_POLICY_VIOLATION = 4551,
    ERROR_SYSTEM_INTEGRITY_INVALID_POLICY = 4552,
    ERROR_SYSTEM_INTEGRITY_POLICY_NOT_SIGNED = 4553,
    ERROR_SYSTEM_INTEGRITY_TOO_MANY_POLICIES = 4554,
    ERROR_SYSTEM_INTEGRITY_SUPPLEMENTAL_POLICY_NOT_AUTHORIZED = 4555,
    ERROR_SYSTEM_INTEGRITY_REPUTATION_MALICIOUS = 4556,
    ERROR_SYSTEM_INTEGRITY_REPUTATION_PUA = 4557,
    ERROR_SYSTEM_INTEGRITY_REPUTATION_DANGEROUS_EXT = 4558,
    ERROR_SYSTEM_INTEGRITY_REPUTATION_OFFLINE = 4559,
    ERROR_VSM_NOT_INITIALIZED = 4560,
    ERROR_VSM_DMA_PROTECTION_NOT_IN_USE = 4561,
    ERROR_PLATFORM_MANIFEST_NOT_AUTHORIZED = 4570,
    ERROR_PLATFORM_MANIFEST_INVALID = 4571,
    ERROR_PLATFORM_MANIFEST_FILE_NOT_AUTHORIZED = 4572,
    ERROR_PLATFORM_MANIFEST_CATALOG_NOT_AUTHORIZED = 4573,
    ERROR_PLATFORM_MANIFEST_BINARY_ID_NOT_FOUND = 4574,
    ERROR_PLATFORM_MANIFEST_NOT_ACTIVE = 4575,
    ERROR_PLATFORM_MANIFEST_NOT_SIGNED = 4576,
    ERROR_DEPENDENT_RESOURCE_EXISTS = 5001,
    ERROR_DEPENDENCY_NOT_FOUND = 5002,
    ERROR_DEPENDENCY_ALREADY_EXISTS = 5003,
    ERROR_RESOURCE_NOT_ONLINE = 5004,
    ERROR_HOST_NODE_NOT_AVAILABLE = 5005,
    ERROR_RESOURCE_NOT_AVAILABLE = 5006,
    ERROR_RESOURCE_NOT_FOUND = 5007,
    ERROR_SHUTDOWN_CLUSTER = 5008,
    ERROR_CANT_EVICT_ACTIVE_NODE = 5009,
    ERROR_OBJECT_ALREADY_EXISTS = 5010,
    ERROR_OBJECT_IN_LIST = 5011,
    ERROR_GROUP_NOT_AVAILABLE = 5012,
    ERROR_GROUP_NOT_FOUND = 5013,
    ERROR_GROUP_NOT_ONLINE = 5014,
    ERROR_HOST_NODE_NOT_RESOURCE_OWNER = 5015,
    ERROR_HOST_NODE_NOT_GROUP_OWNER = 5016,
    ERROR_RESMON_CREATE_FAILED = 5017,
    ERROR_RESMON_ONLINE_FAILED = 5018,
    ERROR_RESOURCE_ONLINE = 5019,
    ERROR_QUORUM_RESOURCE = 5020,
    ERROR_NOT_QUORUM_CAPABLE = 5021,
    ERROR_CLUSTER_SHUTTING_DOWN = 5022,
    ERROR_INVALID_STATE = 5023,
    ERROR_RESOURCE_PROPERTIES_STORED = 5024,
    ERROR_NOT_QUORUM_CLASS = 5025,
    ERROR_CORE_RESOURCE = 5026,
    ERROR_QUORUM_RESOURCE_ONLINE_FAILED = 5027,
    ERROR_QUORUMLOG_OPEN_FAILED = 5028,
    ERROR_CLUSTERLOG_CORRUPT = 5029,
    ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE = 5030,
    ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE = 5031,
    ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND = 5032,
    ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE = 5033,
    ERROR_QUORUM_OWNER_ALIVE = 5034,
    ERROR_NETWORK_NOT_AVAILABLE = 5035,
    ERROR_NODE_NOT_AVAILABLE = 5036,
    ERROR_ALL_NODES_NOT_AVAILABLE = 5037,
    ERROR_RESOURCE_FAILED = 5038,
    ERROR_CLUSTER_INVALID_NODE = 5039,
    ERROR_CLUSTER_NODE_EXISTS = 5040,
    ERROR_CLUSTER_JOIN_IN_PROGRESS = 5041,
    ERROR_CLUSTER_NODE_NOT_FOUND = 5042,
    ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND = 5043,
    ERROR_CLUSTER_NETWORK_EXISTS = 5044,
    ERROR_CLUSTER_NETWORK_NOT_FOUND = 5045,
    ERROR_CLUSTER_NETINTERFACE_EXISTS = 5046,
    ERROR_CLUSTER_NETINTERFACE_NOT_FOUND = 5047,
    ERROR_CLUSTER_INVALID_REQUEST = 5048,
    ERROR_CLUSTER_INVALID_NETWORK_PROVIDER = 5049,
    ERROR_CLUSTER_NODE_DOWN = 5050,
    ERROR_CLUSTER_NODE_UNREACHABLE = 5051,
    ERROR_CLUSTER_NODE_NOT_MEMBER = 5052,
    ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS = 5053,
    ERROR_CLUSTER_INVALID_NETWORK = 5054,
    ERROR_CLUSTER_NODE_UP = 5056,
    ERROR_CLUSTER_IPADDR_IN_USE = 5057,
    ERROR_CLUSTER_NODE_NOT_PAUSED = 5058,
    ERROR_CLUSTER_NO_SECURITY_CONTEXT = 5059,
    ERROR_CLUSTER_NETWORK_NOT_INTERNAL = 5060,
    ERROR_CLUSTER_NODE_ALREADY_UP = 5061,
    ERROR_CLUSTER_NODE_ALREADY_DOWN = 5062,
    ERROR_CLUSTER_NETWORK_ALREADY_ONLINE = 5063,
    ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE = 5064,
    ERROR_CLUSTER_NODE_ALREADY_MEMBER = 5065,
    ERROR_CLUSTER_LAST_INTERNAL_NETWORK = 5066,
    ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS = 5067,
    ERROR_INVALID_OPERATION_ON_QUORUM = 5068,
    ERROR_DEPENDENCY_NOT_ALLOWED = 5069,
    ERROR_CLUSTER_NODE_PAUSED = 5070,
    ERROR_NODE_CANT_HOST_RESOURCE = 5071,
    ERROR_CLUSTER_NODE_NOT_READY = 5072,
    ERROR_CLUSTER_NODE_SHUTTING_DOWN = 5073,
    ERROR_CLUSTER_JOIN_ABORTED = 5074,
    ERROR_CLUSTER_INCOMPATIBLE_VERSIONS = 5075,
    ERROR_CLUSTER_MAXNUM_OF_RESOURCES_EXCEEDED = 5076,
    ERROR_CLUSTER_SYSTEM_CONFIG_CHANGED = 5077,
    ERROR_CLUSTER_RESOURCE_TYPE_NOT_FOUND = 5078,
    ERROR_CLUSTER_RESTYPE_NOT_SUPPORTED = 5079,
    ERROR_CLUSTER_RESNAME_NOT_FOUND = 5080,
    ERROR_CLUSTER_NO_RPC_PACKAGES_REGISTERED = 5081,
    ERROR_CLUSTER_OWNER_NOT_IN_PREFLIST = 5082,
    ERROR_CLUSTER_DATABASE_SEQMISMATCH = 5083,
    ERROR_RESMON_INVALID_STATE = 5084,
    ERROR_CLUSTER_GUM_NOT_LOCKER = 5085,
    ERROR_QUORUM_DISK_NOT_FOUND = 5086,
    ERROR_DATABASE_BACKUP_CORRUPT = 5087,
    ERROR_CLUSTER_NODE_ALREADY_HAS_DFS_ROOT = 5088,
    ERROR_RESOURCE_PROPERTY_UNCHANGEABLE = 5089,
    ERROR_NO_ADMIN_ACCESS_POINT = 5090,
    ERROR_CLUSTER_MEMBERSHIP_INVALID_STATE = 5890,
    ERROR_CLUSTER_QUORUMLOG_NOT_FOUND = 5891,
    ERROR_CLUSTER_MEMBERSHIP_HALT = 5892,
    ERROR_CLUSTER_INSTANCE_ID_MISMATCH = 5893,
    ERROR_CLUSTER_NETWORK_NOT_FOUND_FOR_IP = 5894,
    ERROR_CLUSTER_PROPERTY_DATA_TYPE_MISMATCH = 5895,
    ERROR_CLUSTER_EVICT_WITHOUT_CLEANUP = 5896,
    ERROR_CLUSTER_PARAMETER_MISMATCH = 5897,
    ERROR_NODE_CANNOT_BE_CLUSTERED = 5898,
    ERROR_CLUSTER_WRONG_OS_VERSION = 5899,
    ERROR_CLUSTER_CANT_CREATE_DUP_CLUSTER_NAME = 5900,
    ERROR_CLUSCFG_ALREADY_COMMITTED = 5901,
    ERROR_CLUSCFG_ROLLBACK_FAILED = 5902,
    ERROR_CLUSCFG_SYSTEM_DISK_DRIVE_LETTER_CONFLICT = 5903,
    ERROR_CLUSTER_OLD_VERSION = 5904,
    ERROR_CLUSTER_MISMATCHED_COMPUTER_ACCT_NAME = 5905,
    ERROR_CLUSTER_NO_NET_ADAPTERS = 5906,
    ERROR_CLUSTER_POISONED = 5907,
    ERROR_CLUSTER_GROUP_MOVING = 5908,
    ERROR_CLUSTER_RESOURCE_TYPE_BUSY = 5909,
    ERROR_RESOURCE_CALL_TIMED_OUT = 5910,
    ERROR_INVALID_CLUSTER_IPV6_ADDRESS = 5911,
    ERROR_CLUSTER_INTERNAL_INVALID_FUNCTION = 5912,
    ERROR_CLUSTER_PARAMETER_OUT_OF_BOUNDS = 5913,
    ERROR_CLUSTER_PARTIAL_SEND = 5914,
    ERROR_CLUSTER_REGISTRY_INVALID_FUNCTION = 5915,
    ERROR_CLUSTER_INVALID_STRING_TERMINATION = 5916,
    ERROR_CLUSTER_INVALID_STRING_FORMAT = 5917,
    ERROR_CLUSTER_DATABASE_TRANSACTION_IN_PROGRESS = 5918,
    ERROR_CLUSTER_DATABASE_TRANSACTION_NOT_IN_PROGRESS = 5919,
    ERROR_CLUSTER_NULL_DATA = 5920,
    ERROR_CLUSTER_PARTIAL_READ = 5921,
    ERROR_CLUSTER_PARTIAL_WRITE = 5922,
    ERROR_CLUSTER_CANT_DESERIALIZE_DATA = 5923,
    ERROR_DEPENDENT_RESOURCE_PROPERTY_CONFLICT = 5924,
    ERROR_CLUSTER_NO_QUORUM = 5925,
    ERROR_CLUSTER_INVALID_IPV6_NETWORK = 5926,
    ERROR_CLUSTER_INVALID_IPV6_TUNNEL_NETWORK = 5927,
    ERROR_QUORUM_NOT_ALLOWED_IN_THIS_GROUP = 5928,
    ERROR_DEPENDENCY_TREE_TOO_COMPLEX = 5929,
    ERROR_EXCEPTION_IN_RESOURCE_CALL = 5930,
    ERROR_CLUSTER_RHS_FAILED_INITIALIZATION = 5931,
    ERROR_CLUSTER_NOT_INSTALLED = 5932,
    ERROR_CLUSTER_RESOURCES_MUST_BE_ONLINE_ON_THE_SAME_NODE = 5933,
    ERROR_CLUSTER_MAX_NODES_IN_CLUSTER = 5934,
    ERROR_CLUSTER_TOO_MANY_NODES = 5935,
    ERROR_CLUSTER_OBJECT_ALREADY_USED = 5936,
    ERROR_NONCORE_GROUPS_FOUND = 5937,
    ERROR_FILE_SHARE_RESOURCE_CONFLICT = 5938,
    ERROR_CLUSTER_EVICT_INVALID_REQUEST = 5939,
    ERROR_CLUSTER_SINGLETON_RESOURCE = 5940,
    ERROR_CLUSTER_GROUP_SINGLETON_RESOURCE = 5941,
    ERROR_CLUSTER_RESOURCE_PROVIDER_FAILED = 5942,
    ERROR_CLUSTER_RESOURCE_CONFIGURATION_ERROR = 5943,
    ERROR_CLUSTER_GROUP_BUSY = 5944,
    ERROR_CLUSTER_NOT_SHARED_VOLUME = 5945,
    ERROR_CLUSTER_INVALID_SECURITY_DESCRIPTOR = 5946,
    ERROR_CLUSTER_SHARED_VOLUMES_IN_USE = 5947,
    ERROR_CLUSTER_USE_SHARED_VOLUMES_API = 5948,
    ERROR_CLUSTER_BACKUP_IN_PROGRESS = 5949,
    ERROR_NON_CSV_PATH = 5950,
    ERROR_CSV_VOLUME_NOT_LOCAL = 5951,
    ERROR_CLUSTER_WATCHDOG_TERMINATING = 5952,
    ERROR_CLUSTER_RESOURCE_VETOED_MOVE_INCOMPATIBLE_NODES = 5953,
    ERROR_CLUSTER_INVALID_NODE_WEIGHT = 5954,
    ERROR_CLUSTER_RESOURCE_VETOED_CALL = 5955,
    ERROR_RESMON_SYSTEM_RESOURCES_LACKING = 5956,
    ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_DESTINATION = 5957,
    ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_SOURCE = 5958,
    ERROR_CLUSTER_GROUP_QUEUED = 5959,
    ERROR_CLUSTER_RESOURCE_LOCKED_STATUS = 5960,
    ERROR_CLUSTER_SHARED_VOLUME_FAILOVER_NOT_ALLOWED = 5961,
    ERROR_CLUSTER_NODE_DRAIN_IN_PROGRESS = 5962,
    ERROR_CLUSTER_DISK_NOT_CONNECTED = 5963,
    ERROR_DISK_NOT_CSV_CAPABLE = 5964,
    ERROR_RESOURCE_NOT_IN_AVAILABLE_STORAGE = 5965,
    ERROR_CLUSTER_SHARED_VOLUME_REDIRECTED = 5966,
    ERROR_CLUSTER_SHARED_VOLUME_NOT_REDIRECTED = 5967,
    ERROR_CLUSTER_CANNOT_RETURN_PROPERTIES = 5968,
    ERROR_CLUSTER_RESOURCE_CONTAINS_UNSUPPORTED_DIFF_AREA_FOR_SHARED_VOLUMES = 5969,
    ERROR_CLUSTER_RESOURCE_IS_IN_MAINTENANCE_MODE = 5970,
    ERROR_CLUSTER_AFFINITY_CONFLICT = 5971,
    ERROR_CLUSTER_RESOURCE_IS_REPLICA_VIRTUAL_MACHINE = 5972,
    ERROR_CLUSTER_UPGRADE_INCOMPATIBLE_VERSIONS = 5973,
    ERROR_CLUSTER_UPGRADE_FIX_QUORUM_NOT_SUPPORTED = 5974,
    ERROR_CLUSTER_UPGRADE_RESTART_REQUIRED = 5975,
    ERROR_CLUSTER_UPGRADE_IN_PROGRESS = 5976,
    ERROR_CLUSTER_UPGRADE_INCOMPLETE = 5977,
    ERROR_CLUSTER_NODE_IN_GRACE_PERIOD = 5978,
    ERROR_CLUSTER_CSV_IO_PAUSE_TIMEOUT = 5979,
    ERROR_NODE_NOT_ACTIVE_CLUSTER_MEMBER = 5980,
    ERROR_CLUSTER_RESOURCE_NOT_MONITORED = 5981,
    ERROR_CLUSTER_RESOURCE_DOES_NOT_SUPPORT_UNMONITORED = 5982,
    ERROR_CLUSTER_RESOURCE_IS_REPLICATED = 5983,
    ERROR_CLUSTER_NODE_ISOLATED = 5984,
    ERROR_CLUSTER_NODE_QUARANTINED = 5985,
    ERROR_CLUSTER_DATABASE_UPDATE_CONDITION_FAILED = 5986,
    ERROR_CLUSTER_SPACE_DEGRADED = 5987,
    ERROR_CLUSTER_TOKEN_DELEGATION_NOT_SUPPORTED = 5988,
    ERROR_CLUSTER_CSV_INVALID_HANDLE = 5989,
    ERROR_CLUSTER_CSV_SUPPORTED_ONLY_ON_COORDINATOR = 5990,
    ERROR_GROUPSET_NOT_AVAILABLE = 5991,
    ERROR_GROUPSET_NOT_FOUND = 5992,
    ERROR_GROUPSET_CANT_PROVIDE = 5993,
    ERROR_CLUSTER_FAULT_DOMAIN_PARENT_NOT_FOUND = 5994,
    ERROR_CLUSTER_FAULT_DOMAIN_INVALID_HIERARCHY = 5995,
    ERROR_CLUSTER_FAULT_DOMAIN_FAILED_S2D_VALIDATION = 5996,
    ERROR_CLUSTER_FAULT_DOMAIN_S2D_CONNECTIVITY_LOSS = 5997,
    ERROR_CLUSTER_INVALID_INFRASTRUCTURE_FILESERVER_NAME = 5998,
    ERROR_CLUSTERSET_MANAGEMENT_CLUSTER_UNREACHABLE = 5999,
    ERROR_ENCRYPTION_FAILED = 6000,
    ERROR_DECRYPTION_FAILED = 6001,
    ERROR_FILE_ENCRYPTED = 6002,
    ERROR_NO_RECOVERY_POLICY = 6003,
    ERROR_NO_EFS = 6004,
    ERROR_WRONG_EFS = 6005,
    ERROR_NO_USER_KEYS = 6006,
    ERROR_FILE_NOT_ENCRYPTED = 6007,
    ERROR_NOT_EXPORT_FORMAT = 6008,
    ERROR_FILE_READ_ONLY = 6009,
    ERROR_DIR_EFS_DISALLOWED = 6010,
    ERROR_EFS_SERVER_NOT_TRUSTED = 6011,
    ERROR_BAD_RECOVERY_POLICY = 6012,
    ERROR_EFS_ALG_BLOB_TOO_BIG = 6013,
    ERROR_VOLUME_NOT_SUPPORT_EFS = 6014,
    ERROR_EFS_DISABLED = 6015,
    ERROR_EFS_VERSION_NOT_SUPPORT = 6016,
    ERROR_CS_ENCRYPTION_INVALID_SERVER_RESPONSE = 6017,
    ERROR_CS_ENCRYPTION_UNSUPPORTED_SERVER = 6018,
    ERROR_CS_ENCRYPTION_EXISTING_ENCRYPTED_FILE = 6019,
    ERROR_CS_ENCRYPTION_NEW_ENCRYPTED_FILE = 6020,
    ERROR_CS_ENCRYPTION_FILE_NOT_CSE = 6021,
    ERROR_ENCRYPTION_POLICY_DENIES_OPERATION = 6022,
    ERROR_WIP_ENCRYPTION_FAILED = 6023,
    ERROR_NO_BROWSER_SERVERS_FOUND = 6118,
    ERROR_CLUSTER_OBJECT_IS_CLUSTER_SET_VM = 6250,
    ERROR_LOG_SECTOR_INVALID = 6600,
    ERROR_LOG_SECTOR_PARITY_INVALID = 6601,
    ERROR_LOG_SECTOR_REMAPPED = 6602,
    ERROR_LOG_BLOCK_INCOMPLETE = 6603,
    ERROR_LOG_INVALID_RANGE = 6604,
    ERROR_LOG_BLOCKS_EXHAUSTED = 6605,
    ERROR_LOG_READ_CONTEXT_INVALID = 6606,
    ERROR_LOG_RESTART_INVALID = 6607,
    ERROR_LOG_BLOCK_VERSION = 6608,
    ERROR_LOG_BLOCK_INVALID = 6609,
    ERROR_LOG_READ_MODE_INVALID = 6610,
    ERROR_LOG_NO_RESTART = 6611,
    ERROR_LOG_METADATA_CORRUPT = 6612,
    ERROR_LOG_METADATA_INVALID = 6613,
    ERROR_LOG_METADATA_INCONSISTENT = 6614,
    ERROR_LOG_RESERVATION_INVALID = 6615,
    ERROR_LOG_CANT_DELETE = 6616,
    ERROR_LOG_CONTAINER_LIMIT_EXCEEDED = 6617,
    ERROR_LOG_START_OF_LOG = 6618,
    ERROR_LOG_POLICY_ALREADY_INSTALLED = 6619,
    ERROR_LOG_POLICY_NOT_INSTALLED = 6620,
    ERROR_LOG_POLICY_INVALID = 6621,
    ERROR_LOG_POLICY_CONFLICT = 6622,
    ERROR_LOG_PINNED_ARCHIVE_TAIL = 6623,
    ERROR_LOG_RECORD_NONEXISTENT = 6624,
    ERROR_LOG_RECORDS_RESERVED_INVALID = 6625,
    ERROR_LOG_SPACE_RESERVED_INVALID = 6626,
    ERROR_LOG_TAIL_INVALID = 6627,
    ERROR_LOG_FULL = 6628,
    ERROR_COULD_NOT_RESIZE_LOG = 6629,
    ERROR_LOG_MULTIPLEXED = 6630,
    ERROR_LOG_DEDICATED = 6631,
    ERROR_LOG_ARCHIVE_NOT_IN_PROGRESS = 6632,
    ERROR_LOG_ARCHIVE_IN_PROGRESS = 6633,
    ERROR_LOG_EPHEMERAL = 6634,
    ERROR_LOG_NOT_ENOUGH_CONTAINERS = 6635,
    ERROR_LOG_CLIENT_ALREADY_REGISTERED = 6636,
    ERROR_LOG_CLIENT_NOT_REGISTERED = 6637,
    ERROR_LOG_FULL_HANDLER_IN_PROGRESS = 6638,
    ERROR_LOG_CONTAINER_READ_FAILED = 6639,
    ERROR_LOG_CONTAINER_WRITE_FAILED = 6640,
    ERROR_LOG_CONTAINER_OPEN_FAILED = 6641,
    ERROR_LOG_CONTAINER_STATE_INVALID = 6642,
    ERROR_LOG_STATE_INVALID = 6643,
    ERROR_LOG_PINNED = 6644,
    ERROR_LOG_METADATA_FLUSH_FAILED = 6645,
    ERROR_LOG_INCONSISTENT_SECURITY = 6646,
    ERROR_LOG_APPENDED_FLUSH_FAILED = 6647,
    ERROR_LOG_PINNED_RESERVATION = 6648,
    ERROR_INVALID_TRANSACTION = 6700,
    ERROR_TRANSACTION_NOT_ACTIVE = 6701,
    ERROR_TRANSACTION_REQUEST_NOT_VALID = 6702,
    ERROR_TRANSACTION_NOT_REQUESTED = 6703,
    ERROR_TRANSACTION_ALREADY_ABORTED = 6704,
    ERROR_TRANSACTION_ALREADY_COMMITTED = 6705,
    ERROR_TM_INITIALIZATION_FAILED = 6706,
    ERROR_RESOURCEMANAGER_READ_ONLY = 6707,
    ERROR_TRANSACTION_NOT_JOINED = 6708,
    ERROR_TRANSACTION_SUPERIOR_EXISTS = 6709,
    ERROR_CRM_PROTOCOL_ALREADY_EXISTS = 6710,
    ERROR_TRANSACTION_PROPAGATION_FAILED = 6711,
    ERROR_CRM_PROTOCOL_NOT_FOUND = 6712,
    ERROR_TRANSACTION_INVALID_MARSHALL_BUFFER = 6713,
    ERROR_CURRENT_TRANSACTION_NOT_VALID = 6714,
    ERROR_TRANSACTION_NOT_FOUND = 6715,
    ERROR_RESOURCEMANAGER_NOT_FOUND = 6716,
    ERROR_ENLISTMENT_NOT_FOUND = 6717,
    ERROR_TRANSACTIONMANAGER_NOT_FOUND = 6718,
    ERROR_TRANSACTIONMANAGER_NOT_ONLINE = 6719,
    ERROR_TRANSACTIONMANAGER_RECOVERY_NAME_COLLISION = 6720,
    ERROR_TRANSACTION_NOT_ROOT = 6721,
    ERROR_TRANSACTION_OBJECT_EXPIRED = 6722,
    ERROR_TRANSACTION_RESPONSE_NOT_ENLISTED = 6723,
    ERROR_TRANSACTION_RECORD_TOO_LONG = 6724,
    ERROR_IMPLICIT_TRANSACTION_NOT_SUPPORTED = 6725,
    ERROR_TRANSACTION_INTEGRITY_VIOLATED = 6726,
    ERROR_TRANSACTIONMANAGER_IDENTITY_MISMATCH = 6727,
    ERROR_RM_CANNOT_BE_FROZEN_FOR_SNAPSHOT = 6728,
    ERROR_TRANSACTION_MUST_WRITETHROUGH = 6729,
    ERROR_TRANSACTION_NO_SUPERIOR = 6730,
    ERROR_HEURISTIC_DAMAGE_POSSIBLE = 6731,
    ERROR_TRANSACTIONAL_CONFLICT = 6800,
    ERROR_RM_NOT_ACTIVE = 6801,
    ERROR_RM_METADATA_CORRUPT = 6802,
    ERROR_DIRECTORY_NOT_RM = 6803,
    ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE = 6805,
    ERROR_LOG_RESIZE_INVALID_SIZE = 6806,
    ERROR_OBJECT_NO_LONGER_EXISTS = 6807,
    ERROR_STREAM_MINIVERSION_NOT_FOUND = 6808,
    ERROR_STREAM_MINIVERSION_NOT_VALID = 6809,
    ERROR_MINIVERSION_INACCESSIBLE_FROM_SPECIFIED_TRANSACTION = 6810,
    ERROR_CANT_OPEN_MINIVERSION_WITH_MODIFY_INTENT = 6811,
    ERROR_CANT_CREATE_MORE_STREAM_MINIVERSIONS = 6812,
    ERROR_REMOTE_FILE_VERSION_MISMATCH = 6814,
    ERROR_HANDLE_NO_LONGER_VALID = 6815,
    ERROR_NO_TXF_METADATA = 6816,
    ERROR_LOG_CORRUPTION_DETECTED = 6817,
    ERROR_CANT_RECOVER_WITH_HANDLE_OPEN = 6818,
    ERROR_RM_DISCONNECTED = 6819,
    ERROR_ENLISTMENT_NOT_SUPERIOR = 6820,
    ERROR_RECOVERY_NOT_NEEDED = 6821,
    ERROR_RM_ALREADY_STARTED = 6822,
    ERROR_FILE_IDENTITY_NOT_PERSISTENT = 6823,
    ERROR_CANT_BREAK_TRANSACTIONAL_DEPENDENCY = 6824,
    ERROR_CANT_CROSS_RM_BOUNDARY = 6825,
    ERROR_TXF_DIR_NOT_EMPTY = 6826,
    ERROR_INDOUBT_TRANSACTIONS_EXIST = 6827,
    ERROR_TM_VOLATILE = 6828,
    ERROR_ROLLBACK_TIMER_EXPIRED = 6829,
    ERROR_TXF_ATTRIBUTE_CORRUPT = 6830,
    ERROR_EFS_NOT_ALLOWED_IN_TRANSACTION = 6831,
    ERROR_TRANSACTIONAL_OPEN_NOT_ALLOWED = 6832,
    ERROR_LOG_GROWTH_FAILED = 6833,
    ERROR_TRANSACTED_MAPPING_UNSUPPORTED_REMOTE = 6834,
    ERROR_TXF_METADATA_ALREADY_PRESENT = 6835,
    ERROR_TRANSACTION_SCOPE_CALLBACKS_NOT_SET = 6836,
    ERROR_TRANSACTION_REQUIRED_PROMOTION = 6837,
    ERROR_CANNOT_EXECUTE_FILE_IN_TRANSACTION = 6838,
    ERROR_TRANSACTIONS_NOT_FROZEN = 6839,
    ERROR_TRANSACTION_FREEZE_IN_PROGRESS = 6840,
    ERROR_NOT_SNAPSHOT_VOLUME = 6841,
    ERROR_NO_SAVEPOINT_WITH_OPEN_FILES = 6842,
    ERROR_DATA_LOST_REPAIR = 6843,
    ERROR_SPARSE_NOT_ALLOWED_IN_TRANSACTION = 6844,
    ERROR_TM_IDENTITY_MISMATCH = 6845,
    ERROR_FLOATED_SECTION = 6846,
    ERROR_CANNOT_ACCEPT_TRANSACTED_WORK = 6847,
    ERROR_CANNOT_ABORT_TRANSACTIONS = 6848,
    ERROR_BAD_CLUSTERS = 6849,
    ERROR_COMPRESSION_NOT_ALLOWED_IN_TRANSACTION = 6850,
    ERROR_VOLUME_DIRTY = 6851,
    ERROR_NO_LINK_TRACKING_IN_TRANSACTION = 6852,
    ERROR_OPERATION_NOT_SUPPORTED_IN_TRANSACTION = 6853,
    ERROR_EXPIRED_HANDLE = 6854,
    ERROR_TRANSACTION_NOT_ENLISTED = 6855,
    ERROR_CTX_WINSTATION_NAME_INVALID = 7001,
    ERROR_CTX_INVALID_PD = 7002,
    ERROR_CTX_PD_NOT_FOUND = 7003,
    ERROR_CTX_WD_NOT_FOUND = 7004,
    ERROR_CTX_CANNOT_MAKE_EVENTLOG_ENTRY = 7005,
    ERROR_CTX_SERVICE_NAME_COLLISION = 7006,
    ERROR_CTX_CLOSE_PENDING = 7007,
    ERROR_CTX_NO_OUTBUF = 7008,
    ERROR_CTX_MODEM_INF_NOT_FOUND = 7009,
    ERROR_CTX_INVALID_MODEMNAME = 7010,
    ERROR_CTX_MODEM_RESPONSE_ERROR = 7011,
    ERROR_CTX_MODEM_RESPONSE_TIMEOUT = 7012,
    ERROR_CTX_MODEM_RESPONSE_NO_CARRIER = 7013,
    ERROR_CTX_MODEM_RESPONSE_NO_DIALTONE = 7014,
    ERROR_CTX_MODEM_RESPONSE_BUSY = 7015,
    ERROR_CTX_MODEM_RESPONSE_VOICE = 7016,
    ERROR_CTX_TD_ERROR = 7017,
    ERROR_CTX_WINSTATION_NOT_FOUND = 7022,
    ERROR_CTX_WINSTATION_ALREADY_EXISTS = 7023,
    ERROR_CTX_WINSTATION_BUSY = 7024,
    ERROR_CTX_BAD_VIDEO_MODE = 7025,
    ERROR_CTX_GRAPHICS_INVALID = 7035,
    ERROR_CTX_LOGON_DISABLED = 7037,
    ERROR_CTX_NOT_CONSOLE = 7038,
    ERROR_CTX_CLIENT_QUERY_TIMEOUT = 7040,
    ERROR_CTX_CONSOLE_DISCONNECT = 7041,
    ERROR_CTX_CONSOLE_CONNECT = 7042,
    ERROR_CTX_SHADOW_DENIED = 7044,
    ERROR_CTX_WINSTATION_ACCESS_DENIED = 7045,
    ERROR_CTX_INVALID_WD = 7049,
    ERROR_CTX_SHADOW_INVALID = 7050,
    ERROR_CTX_SHADOW_DISABLED = 7051,
    ERROR_CTX_CLIENT_LICENSE_IN_USE = 7052,
    ERROR_CTX_CLIENT_LICENSE_NOT_SET = 7053,
    ERROR_CTX_LICENSE_NOT_AVAILABLE = 7054,
    ERROR_CTX_LICENSE_CLIENT_INVALID = 7055,
    ERROR_CTX_LICENSE_EXPIRED = 7056,
    ERROR_CTX_SHADOW_NOT_RUNNING = 7057,
    ERROR_CTX_SHADOW_ENDED_BY_MODE_CHANGE = 7058,
    ERROR_ACTIVATION_COUNT_EXCEEDED = 7059,
    ERROR_CTX_WINSTATIONS_DISABLED = 7060,
    ERROR_CTX_ENCRYPTION_LEVEL_REQUIRED = 7061,
    ERROR_CTX_SESSION_IN_USE = 7062,
    ERROR_CTX_NO_FORCE_LOGOFF = 7063,
    ERROR_CTX_ACCOUNT_RESTRICTION = 7064,
    ERROR_RDP_PROTOCOL_ERROR = 7065,
    ERROR_CTX_CDM_CONNECT = 7066,
    ERROR_CTX_CDM_DISCONNECT = 7067,
    ERROR_CTX_SECURITY_LAYER_ERROR = 7068,
    ERROR_TS_INCOMPATIBLE_SESSIONS = 7069,
    ERROR_TS_VIDEO_SUBSYSTEM_ERROR = 7070,
    ERROR_DS_NOT_INSTALLED = 8200,
    ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY = 8201,
    ERROR_DS_NO_ATTRIBUTE_OR_VALUE = 8202,
    ERROR_DS_INVALID_ATTRIBUTE_SYNTAX = 8203,
    ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED = 8204,
    ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS = 8205,
    ERROR_DS_BUSY = 8206,
    ERROR_DS_UNAVAILABLE = 8207,
    ERROR_DS_NO_RIDS_ALLOCATED = 8208,
    ERROR_DS_NO_MORE_RIDS = 8209,
    ERROR_DS_INCORRECT_ROLE_OWNER = 8210,
    ERROR_DS_RIDMGR_INIT_ERROR = 8211,
    ERROR_DS_OBJ_CLASS_VIOLATION = 8212,
    ERROR_DS_CANT_ON_NON_LEAF = 8213,
    ERROR_DS_CANT_ON_RDN = 8214,
    ERROR_DS_CANT_MOD_OBJ_CLASS = 8215,
    ERROR_DS_CROSS_DOM_MOVE_ERROR = 8216,
    ERROR_DS_GC_NOT_AVAILABLE = 8217,
    ERROR_SHARED_POLICY = 8218,
    ERROR_POLICY_OBJECT_NOT_FOUND = 8219,
    ERROR_POLICY_ONLY_IN_DS = 8220,
    ERROR_PROMOTION_ACTIVE = 8221,
    ERROR_NO_PROMOTION_ACTIVE = 8222,
    ERROR_DS_OPERATIONS_ERROR = 8224,
    ERROR_DS_PROTOCOL_ERROR = 8225,
    ERROR_DS_TIMELIMIT_EXCEEDED = 8226,
    ERROR_DS_SIZELIMIT_EXCEEDED = 8227,
    ERROR_DS_ADMIN_LIMIT_EXCEEDED = 8228,
    ERROR_DS_COMPARE_FALSE = 8229,
    ERROR_DS_COMPARE_TRUE = 8230,
    ERROR_DS_AUTH_METHOD_NOT_SUPPORTED = 8231,
    ERROR_DS_STRONG_AUTH_REQUIRED = 8232,
    ERROR_DS_INAPPROPRIATE_AUTH = 8233,
    ERROR_DS_AUTH_UNKNOWN = 8234,
    ERROR_DS_REFERRAL = 8235,
    ERROR_DS_UNAVAILABLE_CRIT_EXTENSION = 8236,
    ERROR_DS_CONFIDENTIALITY_REQUIRED = 8237,
    ERROR_DS_INAPPROPRIATE_MATCHING = 8238,
    ERROR_DS_CONSTRAINT_VIOLATION = 8239,
    ERROR_DS_NO_SUCH_OBJECT = 8240,
    ERROR_DS_ALIAS_PROBLEM = 8241,
    ERROR_DS_INVALID_DN_SYNTAX = 8242,
    ERROR_DS_IS_LEAF = 8243,
    ERROR_DS_ALIAS_DEREF_PROBLEM = 8244,
    ERROR_DS_UNWILLING_TO_PERFORM = 8245,
    ERROR_DS_LOOP_DETECT = 8246,
    ERROR_DS_NAMING_VIOLATION = 8247,
    ERROR_DS_OBJECT_RESULTS_TOO_LARGE = 8248,
    ERROR_DS_AFFECTS_MULTIPLE_DSAS = 8249,
    ERROR_DS_SERVER_DOWN = 8250,
    ERROR_DS_LOCAL_ERROR = 8251,
    ERROR_DS_ENCODING_ERROR = 8252,
    ERROR_DS_DECODING_ERROR = 8253,
    ERROR_DS_FILTER_UNKNOWN = 8254,
    ERROR_DS_PARAM_ERROR = 8255,
    ERROR_DS_NOT_SUPPORTED = 8256,
    ERROR_DS_NO_RESULTS_RETURNED = 8257,
    ERROR_DS_CONTROL_NOT_FOUND = 8258,
    ERROR_DS_CLIENT_LOOP = 8259,
    ERROR_DS_REFERRAL_LIMIT_EXCEEDED = 8260,
    ERROR_DS_SORT_CONTROL_MISSING = 8261,
    ERROR_DS_OFFSET_RANGE_ERROR = 8262,
    ERROR_DS_RIDMGR_DISABLED = 8263,
    ERROR_DS_ROOT_MUST_BE_NC = 8301,
    ERROR_DS_ADD_REPLICA_INHIBITED = 8302,
    ERROR_DS_ATT_NOT_DEF_IN_SCHEMA = 8303,
    ERROR_DS_MAX_OBJ_SIZE_EXCEEDED = 8304,
    ERROR_DS_OBJ_STRING_NAME_EXISTS = 8305,
    ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA = 8306,
    ERROR_DS_RDN_DOESNT_MATCH_SCHEMA = 8307,
    ERROR_DS_NO_REQUESTED_ATTS_FOUND = 8308,
    ERROR_DS_USER_BUFFER_TO_SMALL = 8309,
    ERROR_DS_ATT_IS_NOT_ON_OBJ = 8310,
    ERROR_DS_ILLEGAL_MOD_OPERATION = 8311,
    ERROR_DS_OBJ_TOO_LARGE = 8312,
    ERROR_DS_BAD_INSTANCE_TYPE = 8313,
    ERROR_DS_MASTERDSA_REQUIRED = 8314,
    ERROR_DS_OBJECT_CLASS_REQUIRED = 8315,
    ERROR_DS_MISSING_REQUIRED_ATT = 8316,
    ERROR_DS_ATT_NOT_DEF_FOR_CLASS = 8317,
    ERROR_DS_ATT_ALREADY_EXISTS = 8318,
    ERROR_DS_CANT_ADD_ATT_VALUES = 8320,
    ERROR_DS_SINGLE_VALUE_CONSTRAINT = 8321,
    ERROR_DS_RANGE_CONSTRAINT = 8322,
    ERROR_DS_ATT_VAL_ALREADY_EXISTS = 8323,
    ERROR_DS_CANT_REM_MISSING_ATT = 8324,
    ERROR_DS_CANT_REM_MISSING_ATT_VAL = 8325,
    ERROR_DS_ROOT_CANT_BE_SUBREF = 8326,
    ERROR_DS_NO_CHAINING = 8327,
    ERROR_DS_NO_CHAINED_EVAL = 8328,
    ERROR_DS_NO_PARENT_OBJECT = 8329,
    ERROR_DS_PARENT_IS_AN_ALIAS = 8330,
    ERROR_DS_CANT_MIX_MASTER_AND_REPS = 8331,
    ERROR_DS_CHILDREN_EXIST = 8332,
    ERROR_DS_OBJ_NOT_FOUND = 8333,
    ERROR_DS_ALIASED_OBJ_MISSING = 8334,
    ERROR_DS_BAD_NAME_SYNTAX = 8335,
    ERROR_DS_ALIAS_POINTS_TO_ALIAS = 8336,
    ERROR_DS_CANT_DEREF_ALIAS = 8337,
    ERROR_DS_OUT_OF_SCOPE = 8338,
    ERROR_DS_OBJECT_BEING_REMOVED = 8339,
    ERROR_DS_CANT_DELETE_DSA_OBJ = 8340,
    ERROR_DS_GENERIC_ERROR = 8341,
    ERROR_DS_DSA_MUST_BE_INT_MASTER = 8342,
    ERROR_DS_CLASS_NOT_DSA = 8343,
    ERROR_DS_INSUFF_ACCESS_RIGHTS = 8344,
    ERROR_DS_ILLEGAL_SUPERIOR = 8345,
    ERROR_DS_ATTRIBUTE_OWNED_BY_SAM = 8346,
    ERROR_DS_NAME_TOO_MANY_PARTS = 8347,
    ERROR_DS_NAME_TOO_LONG = 8348,
    ERROR_DS_NAME_VALUE_TOO_LONG = 8349,
    ERROR_DS_NAME_UNPARSEABLE = 8350,
    ERROR_DS_NAME_TYPE_UNKNOWN = 8351,
    ERROR_DS_NOT_AN_OBJECT = 8352,
    ERROR_DS_SEC_DESC_TOO_SHORT = 8353,
    ERROR_DS_SEC_DESC_INVALID = 8354,
    ERROR_DS_NO_DELETED_NAME = 8355,
    ERROR_DS_SUBREF_MUST_HAVE_PARENT = 8356,
    ERROR_DS_NCNAME_MUST_BE_NC = 8357,
    ERROR_DS_CANT_ADD_SYSTEM_ONLY = 8358,
    ERROR_DS_CLASS_MUST_BE_CONCRETE = 8359,
    ERROR_DS_INVALID_DMD = 8360,
    ERROR_DS_OBJ_GUID_EXISTS = 8361,
    ERROR_DS_NOT_ON_BACKLINK = 8362,
    ERROR_DS_NO_CROSSREF_FOR_NC = 8363,
    ERROR_DS_SHUTTING_DOWN = 8364,
    ERROR_DS_UNKNOWN_OPERATION = 8365,
    ERROR_DS_INVALID_ROLE_OWNER = 8366,
    ERROR_DS_COULDNT_CONTACT_FSMO = 8367,
    ERROR_DS_CROSS_NC_DN_RENAME = 8368,
    ERROR_DS_CANT_MOD_SYSTEM_ONLY = 8369,
    ERROR_DS_REPLICATOR_ONLY = 8370,
    ERROR_DS_OBJ_CLASS_NOT_DEFINED = 8371,
    ERROR_DS_OBJ_CLASS_NOT_SUBCLASS = 8372,
    ERROR_DS_NAME_REFERENCE_INVALID = 8373,
    ERROR_DS_CROSS_REF_EXISTS = 8374,
    ERROR_DS_CANT_DEL_MASTER_CROSSREF = 8375,
    ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD = 8376,
    ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX = 8377,
    ERROR_DS_DUP_RDN = 8378,
    ERROR_DS_DUP_OID = 8379,
    ERROR_DS_DUP_MAPI_ID = 8380,
    ERROR_DS_DUP_SCHEMA_ID_GUID = 8381,
    ERROR_DS_DUP_LDAP_DISPLAY_NAME = 8382,
    ERROR_DS_SEMANTIC_ATT_TEST = 8383,
    ERROR_DS_SYNTAX_MISMATCH = 8384,
    ERROR_DS_EXISTS_IN_MUST_HAVE = 8385,
    ERROR_DS_EXISTS_IN_MAY_HAVE = 8386,
    ERROR_DS_NONEXISTENT_MAY_HAVE = 8387,
    ERROR_DS_NONEXISTENT_MUST_HAVE = 8388,
    ERROR_DS_AUX_CLS_TEST_FAIL = 8389,
    ERROR_DS_NONEXISTENT_POSS_SUP = 8390,
    ERROR_DS_SUB_CLS_TEST_FAIL = 8391,
    ERROR_DS_BAD_RDN_ATT_ID_SYNTAX = 8392,
    ERROR_DS_EXISTS_IN_AUX_CLS = 8393,
    ERROR_DS_EXISTS_IN_SUB_CLS = 8394,
    ERROR_DS_EXISTS_IN_POSS_SUP = 8395,
    ERROR_DS_RECALCSCHEMA_FAILED = 8396,
    ERROR_DS_TREE_DELETE_NOT_FINISHED = 8397,
    ERROR_DS_CANT_DELETE = 8398,
    ERROR_DS_ATT_SCHEMA_REQ_ID = 8399,
    ERROR_DS_BAD_ATT_SCHEMA_SYNTAX = 8400,
    ERROR_DS_CANT_CACHE_ATT = 8401,
    ERROR_DS_CANT_CACHE_CLASS = 8402,
    ERROR_DS_CANT_REMOVE_ATT_CACHE = 8403,
    ERROR_DS_CANT_REMOVE_CLASS_CACHE = 8404,
    ERROR_DS_CANT_RETRIEVE_DN = 8405,
    ERROR_DS_MISSING_SUPREF = 8406,
    ERROR_DS_CANT_RETRIEVE_INSTANCE = 8407,
    ERROR_DS_CODE_INCONSISTENCY = 8408,
    ERROR_DS_DATABASE_ERROR = 8409,
    ERROR_DS_GOVERNSID_MISSING = 8410,
    ERROR_DS_MISSING_EXPECTED_ATT = 8411,
    ERROR_DS_NCNAME_MISSING_CR_REF = 8412,
    ERROR_DS_SECURITY_CHECKING_ERROR = 8413,
    ERROR_DS_SCHEMA_NOT_LOADED = 8414,
    ERROR_DS_SCHEMA_ALLOC_FAILED = 8415,
    ERROR_DS_ATT_SCHEMA_REQ_SYNTAX = 8416,
    ERROR_DS_GCVERIFY_ERROR = 8417,
    ERROR_DS_DRA_SCHEMA_MISMATCH = 8418,
    ERROR_DS_CANT_FIND_DSA_OBJ = 8419,
    ERROR_DS_CANT_FIND_EXPECTED_NC = 8420,
    ERROR_DS_CANT_FIND_NC_IN_CACHE = 8421,
    ERROR_DS_CANT_RETRIEVE_CHILD = 8422,
    ERROR_DS_SECURITY_ILLEGAL_MODIFY = 8423,
    ERROR_DS_CANT_REPLACE_HIDDEN_REC = 8424,
    ERROR_DS_BAD_HIERARCHY_FILE = 8425,
    ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED = 8426,
    ERROR_DS_CONFIG_PARAM_MISSING = 8427,
    ERROR_DS_COUNTING_AB_INDICES_FAILED = 8428,
    ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED = 8429,
    ERROR_DS_INTERNAL_FAILURE = 8430,
    ERROR_DS_UNKNOWN_ERROR = 8431,
    ERROR_DS_ROOT_REQUIRES_CLASS_TOP = 8432,
    ERROR_DS_REFUSING_FSMO_ROLES = 8433,
    ERROR_DS_MISSING_FSMO_SETTINGS = 8434,
    ERROR_DS_UNABLE_TO_SURRENDER_ROLES = 8435,
    ERROR_DS_DRA_GENERIC = 8436,
    ERROR_DS_DRA_INVALID_PARAMETER = 8437,
    ERROR_DS_DRA_BUSY = 8438,
    ERROR_DS_DRA_BAD_DN = 8439,
    ERROR_DS_DRA_BAD_NC = 8440,
    ERROR_DS_DRA_DN_EXISTS = 8441,
    ERROR_DS_DRA_INTERNAL_ERROR = 8442,
    ERROR_DS_DRA_INCONSISTENT_DIT = 8443,
    ERROR_DS_DRA_CONNECTION_FAILED = 8444,
    ERROR_DS_DRA_BAD_INSTANCE_TYPE = 8445,
    ERROR_DS_DRA_OUT_OF_MEM = 8446,
    ERROR_DS_DRA_MAIL_PROBLEM = 8447,
    ERROR_DS_DRA_REF_ALREADY_EXISTS = 8448,
    ERROR_DS_DRA_REF_NOT_FOUND = 8449,
    ERROR_DS_DRA_OBJ_IS_REP_SOURCE = 8450,
    ERROR_DS_DRA_DB_ERROR = 8451,
    ERROR_DS_DRA_NO_REPLICA = 8452,
    ERROR_DS_DRA_ACCESS_DENIED = 8453,
    ERROR_DS_DRA_NOT_SUPPORTED = 8454,
    ERROR_DS_DRA_RPC_CANCELLED = 8455,
    ERROR_DS_DRA_SOURCE_DISABLED = 8456,
    ERROR_DS_DRA_SINK_DISABLED = 8457,
    ERROR_DS_DRA_NAME_COLLISION = 8458,
    ERROR_DS_DRA_SOURCE_REINSTALLED = 8459,
    ERROR_DS_DRA_MISSING_PARENT = 8460,
    ERROR_DS_DRA_PREEMPTED = 8461,
    ERROR_DS_DRA_ABANDON_SYNC = 8462,
    ERROR_DS_DRA_SHUTDOWN = 8463,
    ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET = 8464,
    ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA = 8465,
    ERROR_DS_DRA_EXTN_CONNECTION_FAILED = 8466,
    ERROR_DS_INSTALL_SCHEMA_MISMATCH = 8467,
    ERROR_DS_DUP_LINK_ID = 8468,
    ERROR_DS_NAME_ERROR_RESOLVING = 8469,
    ERROR_DS_NAME_ERROR_NOT_FOUND = 8470,
    ERROR_DS_NAME_ERROR_NOT_UNIQUE = 8471,
    ERROR_DS_NAME_ERROR_NO_MAPPING = 8472,
    ERROR_DS_NAME_ERROR_DOMAIN_ONLY = 8473,
    ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING = 8474,
    ERROR_DS_CONSTRUCTED_ATT_MOD = 8475,
    ERROR_DS_WRONG_OM_OBJ_CLASS = 8476,
    ERROR_DS_DRA_REPL_PENDING = 8477,
    ERROR_DS_DS_REQUIRED = 8478,
    ERROR_DS_INVALID_LDAP_DISPLAY_NAME = 8479,
    ERROR_DS_NON_BASE_SEARCH = 8480,
    ERROR_DS_CANT_RETRIEVE_ATTS = 8481,
    ERROR_DS_BACKLINK_WITHOUT_LINK = 8482,
    ERROR_DS_EPOCH_MISMATCH = 8483,
    ERROR_DS_SRC_NAME_MISMATCH = 8484,
    ERROR_DS_SRC_AND_DST_NC_IDENTICAL = 8485,
    ERROR_DS_DST_NC_MISMATCH = 8486,
    ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC = 8487,
    ERROR_DS_SRC_GUID_MISMATCH = 8488,
    ERROR_DS_CANT_MOVE_DELETED_OBJECT = 8489,
    ERROR_DS_PDC_OPERATION_IN_PROGRESS = 8490,
    ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD = 8491,
    ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION = 8492,
    ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS = 8493,
    ERROR_DS_NC_MUST_HAVE_NC_PARENT = 8494,
    ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE = 8495,
    ERROR_DS_DST_DOMAIN_NOT_NATIVE = 8496,
    ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER = 8497,
    ERROR_DS_CANT_MOVE_ACCOUNT_GROUP = 8498,
    ERROR_DS_CANT_MOVE_RESOURCE_GROUP = 8499,
    ERROR_DS_INVALID_SEARCH_FLAG = 8500,
    ERROR_DS_NO_TREE_DELETE_ABOVE_NC = 8501,
    ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE = 8502,
    ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE = 8503,
    ERROR_DS_SAM_INIT_FAILURE = 8504,
    ERROR_DS_SENSITIVE_GROUP_VIOLATION = 8505,
    ERROR_DS_CANT_MOD_PRIMARYGROUPID = 8506,
    ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD = 8507,
    ERROR_DS_NONSAFE_SCHEMA_CHANGE = 8508,
    ERROR_DS_SCHEMA_UPDATE_DISALLOWED = 8509,
    ERROR_DS_CANT_CREATE_UNDER_SCHEMA = 8510,
    ERROR_DS_INSTALL_NO_SRC_SCH_VERSION = 8511,
    ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE = 8512,
    ERROR_DS_INVALID_GROUP_TYPE = 8513,
    ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN = 8514,
    ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN = 8515,
    ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER = 8516,
    ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER = 8517,
    ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER = 8518,
    ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER = 8519,
    ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER = 8520,
    ERROR_DS_HAVE_PRIMARY_MEMBERS = 8521,
    ERROR_DS_STRING_SD_CONVERSION_FAILED = 8522,
    ERROR_DS_NAMING_MASTER_GC = 8523,
    ERROR_DS_DNS_LOOKUP_FAILURE = 8524,
    ERROR_DS_COULDNT_UPDATE_SPNS = 8525,
    ERROR_DS_CANT_RETRIEVE_SD = 8526,
    ERROR_DS_KEY_NOT_UNIQUE = 8527,
    ERROR_DS_WRONG_LINKED_ATT_SYNTAX = 8528,
    ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD = 8529,
    ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY = 8530,
    ERROR_DS_CANT_START = 8531,
    ERROR_DS_INIT_FAILURE = 8532,
    ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION = 8533,
    ERROR_DS_SOURCE_DOMAIN_IN_FOREST = 8534,
    ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST = 8535,
    ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED = 8536,
    ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN = 8537,
    ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER = 8538,
    ERROR_DS_SRC_SID_EXISTS_IN_FOREST = 8539,
    ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH = 8540,
    ERROR_SAM_INIT_FAILURE = 8541,
    ERROR_DS_DRA_SCHEMA_INFO_SHIP = 8542,
    ERROR_DS_DRA_SCHEMA_CONFLICT = 8543,
    ERROR_DS_DRA_EARLIER_SCHEMA_CONFLICT = 8544,
    ERROR_DS_DRA_OBJ_NC_MISMATCH = 8545,
    ERROR_DS_NC_STILL_HAS_DSAS = 8546,
    ERROR_DS_GC_REQUIRED = 8547,
    ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY = 8548,
    ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS = 8549,
    ERROR_DS_CANT_ADD_TO_GC = 8550,
    ERROR_DS_NO_CHECKPOINT_WITH_PDC = 8551,
    ERROR_DS_SOURCE_AUDITING_NOT_ENABLED = 8552,
    ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC = 8553,
    ERROR_DS_INVALID_NAME_FOR_SPN = 8554,
    ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS = 8555,
    ERROR_DS_UNICODEPWD_NOT_IN_QUOTES = 8556,
    ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED = 8557,
    ERROR_DS_MUST_BE_RUN_ON_DST_DC = 8558,
    ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER = 8559,
    ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ = 8560,
    ERROR_DS_INIT_FAILURE_CONSOLE = 8561,
    ERROR_DS_SAM_INIT_FAILURE_CONSOLE = 8562,
    ERROR_DS_FOREST_VERSION_TOO_HIGH = 8563,
    ERROR_DS_DOMAIN_VERSION_TOO_HIGH = 8564,
    ERROR_DS_FOREST_VERSION_TOO_LOW = 8565,
    ERROR_DS_DOMAIN_VERSION_TOO_LOW = 8566,
    ERROR_DS_INCOMPATIBLE_VERSION = 8567,
    ERROR_DS_LOW_DSA_VERSION = 8568,
    ERROR_DS_NO_BEHAVIOR_VERSION_IN_MIXEDDOMAIN = 8569,
    ERROR_DS_NOT_SUPPORTED_SORT_ORDER = 8570,
    ERROR_DS_NAME_NOT_UNIQUE = 8571,
    ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4 = 8572,
    ERROR_DS_OUT_OF_VERSION_STORE = 8573,
    ERROR_DS_INCOMPATIBLE_CONTROLS_USED = 8574,
    ERROR_DS_NO_REF_DOMAIN = 8575,
    ERROR_DS_RESERVED_LINK_ID = 8576,
    ERROR_DS_LINK_ID_NOT_AVAILABLE = 8577,
    ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER = 8578,
    ERROR_DS_MODIFYDN_DISALLOWED_BY_INSTANCE_TYPE = 8579,
    ERROR_DS_NO_OBJECT_MOVE_IN_SCHEMA_NC = 8580,
    ERROR_DS_MODIFYDN_DISALLOWED_BY_FLAG = 8581,
    ERROR_DS_MODIFYDN_WRONG_GRANDPARENT = 8582,
    ERROR_DS_NAME_ERROR_TRUST_REFERRAL = 8583,
    ERROR_NOT_SUPPORTED_ON_STANDARD_SERVER = 8584,
    ERROR_DS_CANT_ACCESS_REMOTE_PART_OF_AD = 8585,
    ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE_V2 = 8586,
    ERROR_DS_THREAD_LIMIT_EXCEEDED = 8587,
    ERROR_DS_NOT_CLOSEST = 8588,
    ERROR_DS_CANT_DERIVE_SPN_WITHOUT_SERVER_REF = 8589,
    ERROR_DS_SINGLE_USER_MODE_FAILED = 8590,
    ERROR_DS_NTDSCRIPT_SYNTAX_ERROR = 8591,
    ERROR_DS_NTDSCRIPT_PROCESS_ERROR = 8592,
    ERROR_DS_DIFFERENT_REPL_EPOCHS = 8593,
    ERROR_DS_DRS_EXTENSIONS_CHANGED = 8594,
    ERROR_DS_REPLICA_SET_CHANGE_NOT_ALLOWED_ON_DISABLED_CR = 8595,
    ERROR_DS_NO_MSDS_INTID = 8596,
    ERROR_DS_DUP_MSDS_INTID = 8597,
    ERROR_DS_EXISTS_IN_RDNATTID = 8598,
    ERROR_DS_AUTHORIZATION_FAILED = 8599,
    ERROR_DS_INVALID_SCRIPT = 8600,
    ERROR_DS_REMOTE_CROSSREF_OP_FAILED = 8601,
    ERROR_DS_CROSS_REF_BUSY = 8602,
    ERROR_DS_CANT_DERIVE_SPN_FOR_DELETED_DOMAIN = 8603,
    ERROR_DS_CANT_DEMOTE_WITH_WRITEABLE_NC = 8604,
    ERROR_DS_DUPLICATE_ID_FOUND = 8605,
    ERROR_DS_INSUFFICIENT_ATTR_TO_CREATE_OBJECT = 8606,
    ERROR_DS_GROUP_CONVERSION_ERROR = 8607,
    ERROR_DS_CANT_MOVE_APP_BASIC_GROUP = 8608,
    ERROR_DS_CANT_MOVE_APP_QUERY_GROUP = 8609,
    ERROR_DS_ROLE_NOT_VERIFIED = 8610,
    ERROR_DS_WKO_CONTAINER_CANNOT_BE_SPECIAL = 8611,
    ERROR_DS_DOMAIN_RENAME_IN_PROGRESS = 8612,
    ERROR_DS_EXISTING_AD_CHILD_NC = 8613,
    ERROR_DS_REPL_LIFETIME_EXCEEDED = 8614,
    ERROR_DS_DISALLOWED_IN_SYSTEM_CONTAINER = 8615,
    ERROR_DS_LDAP_SEND_QUEUE_FULL = 8616,
    ERROR_DS_DRA_OUT_SCHEDULE_WINDOW = 8617,
    ERROR_DS_POLICY_NOT_KNOWN = 8618,
    ERROR_NO_SITE_SETTINGS_OBJECT = 8619,
    ERROR_NO_SECRETS = 8620,
    ERROR_NO_WRITABLE_DC_FOUND = 8621,
    ERROR_DS_NO_SERVER_OBJECT = 8622,
    ERROR_DS_NO_NTDSA_OBJECT = 8623,
    ERROR_DS_NON_ASQ_SEARCH = 8624,
    ERROR_DS_AUDIT_FAILURE = 8625,
    ERROR_DS_INVALID_SEARCH_FLAG_SUBTREE = 8626,
    ERROR_DS_INVALID_SEARCH_FLAG_TUPLE = 8627,
    ERROR_DS_HIERARCHY_TABLE_TOO_DEEP = 8628,
    ERROR_DS_DRA_CORRUPT_UTD_VECTOR = 8629,
    ERROR_DS_DRA_SECRETS_DENIED = 8630,
    ERROR_DS_RESERVED_MAPI_ID = 8631,
    ERROR_DS_MAPI_ID_NOT_AVAILABLE = 8632,
    ERROR_DS_DRA_MISSING_KRBTGT_SECRET = 8633,
    ERROR_DS_DOMAIN_NAME_EXISTS_IN_FOREST = 8634,
    ERROR_DS_FLAT_NAME_EXISTS_IN_FOREST = 8635,
    ERROR_INVALID_USER_PRINCIPAL_NAME = 8636,
    ERROR_DS_OID_MAPPED_GROUP_CANT_HAVE_MEMBERS = 8637,
    ERROR_DS_OID_NOT_FOUND = 8638,
    ERROR_DS_DRA_RECYCLED_TARGET = 8639,
    ERROR_DS_DISALLOWED_NC_REDIRECT = 8640,
    ERROR_DS_HIGH_ADLDS_FFL = 8641,
    ERROR_DS_HIGH_DSA_VERSION = 8642,
    ERROR_DS_LOW_ADLDS_FFL = 8643,
    ERROR_DOMAIN_SID_SAME_AS_LOCAL_WORKSTATION = 8644,
    ERROR_DS_UNDELETE_SAM_VALIDATION_FAILED = 8645,
    ERROR_INCORRECT_ACCOUNT_TYPE = 8646,
    ERROR_DS_SPN_VALUE_NOT_UNIQUE_IN_FOREST = 8647,
    ERROR_DS_UPN_VALUE_NOT_UNIQUE_IN_FOREST = 8648,
    ERROR_DS_MISSING_FOREST_TRUST = 8649,
    ERROR_DS_VALUE_KEY_NOT_UNIQUE = 8650,
    ERROR_WEAK_WHFBKEY_BLOCKED = 8651,
    DNS_ERROR_RESPONSE_CODES_BASE = 9000,
    // DNS_ERROR_RCODE_NO_ERROR = 0, this enum value conflicts with NO_ERROR
    // DNS_ERROR_MASK = 9000, this enum value conflicts with DNS_ERROR_RESPONSE_CODES_BASE
    DNS_ERROR_RCODE_FORMAT_ERROR = 9001,
    DNS_ERROR_RCODE_SERVER_FAILURE = 9002,
    DNS_ERROR_RCODE_NAME_ERROR = 9003,
    DNS_ERROR_RCODE_NOT_IMPLEMENTED = 9004,
    DNS_ERROR_RCODE_REFUSED = 9005,
    DNS_ERROR_RCODE_YXDOMAIN = 9006,
    DNS_ERROR_RCODE_YXRRSET = 9007,
    DNS_ERROR_RCODE_NXRRSET = 9008,
    DNS_ERROR_RCODE_NOTAUTH = 9009,
    DNS_ERROR_RCODE_NOTZONE = 9010,
    DNS_ERROR_RCODE_BADSIG = 9016,
    DNS_ERROR_RCODE_BADKEY = 9017,
    DNS_ERROR_RCODE_BADTIME = 9018,
    // DNS_ERROR_RCODE_LAST = 9018, this enum value conflicts with DNS_ERROR_RCODE_BADTIME
    DNS_ERROR_DNSSEC_BASE = 9100,
    DNS_ERROR_KEYMASTER_REQUIRED = 9101,
    DNS_ERROR_NOT_ALLOWED_ON_SIGNED_ZONE = 9102,
    DNS_ERROR_NSEC3_INCOMPATIBLE_WITH_RSA_SHA1 = 9103,
    DNS_ERROR_NOT_ENOUGH_SIGNING_KEY_DESCRIPTORS = 9104,
    DNS_ERROR_UNSUPPORTED_ALGORITHM = 9105,
    DNS_ERROR_INVALID_KEY_SIZE = 9106,
    DNS_ERROR_SIGNING_KEY_NOT_ACCESSIBLE = 9107,
    DNS_ERROR_KSP_DOES_NOT_SUPPORT_PROTECTION = 9108,
    DNS_ERROR_UNEXPECTED_DATA_PROTECTION_ERROR = 9109,
    DNS_ERROR_UNEXPECTED_CNG_ERROR = 9110,
    DNS_ERROR_UNKNOWN_SIGNING_PARAMETER_VERSION = 9111,
    DNS_ERROR_KSP_NOT_ACCESSIBLE = 9112,
    DNS_ERROR_TOO_MANY_SKDS = 9113,
    DNS_ERROR_INVALID_ROLLOVER_PERIOD = 9114,
    DNS_ERROR_INVALID_INITIAL_ROLLOVER_OFFSET = 9115,
    DNS_ERROR_ROLLOVER_IN_PROGRESS = 9116,
    DNS_ERROR_STANDBY_KEY_NOT_PRESENT = 9117,
    DNS_ERROR_NOT_ALLOWED_ON_ZSK = 9118,
    DNS_ERROR_NOT_ALLOWED_ON_ACTIVE_SKD = 9119,
    DNS_ERROR_ROLLOVER_ALREADY_QUEUED = 9120,
    DNS_ERROR_NOT_ALLOWED_ON_UNSIGNED_ZONE = 9121,
    DNS_ERROR_BAD_KEYMASTER = 9122,
    DNS_ERROR_INVALID_SIGNATURE_VALIDITY_PERIOD = 9123,
    DNS_ERROR_INVALID_NSEC3_ITERATION_COUNT = 9124,
    DNS_ERROR_DNSSEC_IS_DISABLED = 9125,
    DNS_ERROR_INVALID_XML = 9126,
    DNS_ERROR_NO_VALID_TRUST_ANCHORS = 9127,
    DNS_ERROR_ROLLOVER_NOT_POKEABLE = 9128,
    DNS_ERROR_NSEC3_NAME_COLLISION = 9129,
    DNS_ERROR_NSEC_INCOMPATIBLE_WITH_NSEC3_RSA_SHA1 = 9130,
    DNS_ERROR_PACKET_FMT_BASE = 9500,
    DNS_ERROR_BAD_PACKET = 9502,
    DNS_ERROR_NO_PACKET = 9503,
    DNS_ERROR_RCODE = 9504,
    DNS_ERROR_UNSECURE_PACKET = 9505,
    // DNS_ERROR_NO_MEMORY = 14, this enum value conflicts with ERROR_OUTOFMEMORY
    // DNS_ERROR_INVALID_NAME = 123, this enum value conflicts with ERROR_INVALID_NAME
    // DNS_ERROR_INVALID_DATA = 13, this enum value conflicts with ERROR_INVALID_DATA
    DNS_ERROR_GENERAL_API_BASE = 9550,
    DNS_ERROR_INVALID_TYPE = 9551,
    DNS_ERROR_INVALID_IP_ADDRESS = 9552,
    DNS_ERROR_INVALID_PROPERTY = 9553,
    DNS_ERROR_TRY_AGAIN_LATER = 9554,
    DNS_ERROR_NOT_UNIQUE = 9555,
    DNS_ERROR_NON_RFC_NAME = 9556,
    DNS_ERROR_INVALID_NAME_CHAR = 9560,
    DNS_ERROR_NUMERIC_NAME = 9561,
    DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER = 9562,
    DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION = 9563,
    DNS_ERROR_CANNOT_FIND_ROOT_HINTS = 9564,
    DNS_ERROR_INCONSISTENT_ROOT_HINTS = 9565,
    DNS_ERROR_DWORD_VALUE_TOO_SMALL = 9566,
    DNS_ERROR_DWORD_VALUE_TOO_LARGE = 9567,
    DNS_ERROR_BACKGROUND_LOADING = 9568,
    DNS_ERROR_NOT_ALLOWED_ON_RODC = 9569,
    DNS_ERROR_NOT_ALLOWED_UNDER_DNAME = 9570,
    DNS_ERROR_DELEGATION_REQUIRED = 9571,
    DNS_ERROR_INVALID_POLICY_TABLE = 9572,
    DNS_ERROR_ADDRESS_REQUIRED = 9573,
    DNS_ERROR_ZONE_BASE = 9600,
    DNS_ERROR_ZONE_DOES_NOT_EXIST = 9601,
    DNS_ERROR_NO_ZONE_INFO = 9602,
    DNS_ERROR_INVALID_ZONE_OPERATION = 9603,
    DNS_ERROR_ZONE_CONFIGURATION_ERROR = 9604,
    DNS_ERROR_ZONE_HAS_NO_SOA_RECORD = 9605,
    DNS_ERROR_ZONE_HAS_NO_NS_RECORDS = 9606,
    DNS_ERROR_ZONE_LOCKED = 9607,
    DNS_ERROR_ZONE_CREATION_FAILED = 9608,
    DNS_ERROR_ZONE_ALREADY_EXISTS = 9609,
    DNS_ERROR_AUTOZONE_ALREADY_EXISTS = 9610,
    DNS_ERROR_INVALID_ZONE_TYPE = 9611,
    DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP = 9612,
    DNS_ERROR_ZONE_NOT_SECONDARY = 9613,
    DNS_ERROR_NEED_SECONDARY_ADDRESSES = 9614,
    DNS_ERROR_WINS_INIT_FAILED = 9615,
    DNS_ERROR_NEED_WINS_SERVERS = 9616,
    DNS_ERROR_NBSTAT_INIT_FAILED = 9617,
    DNS_ERROR_SOA_DELETE_INVALID = 9618,
    DNS_ERROR_FORWARDER_ALREADY_EXISTS = 9619,
    DNS_ERROR_ZONE_REQUIRES_MASTER_IP = 9620,
    DNS_ERROR_ZONE_IS_SHUTDOWN = 9621,
    DNS_ERROR_ZONE_LOCKED_FOR_SIGNING = 9622,
    DNS_ERROR_DATAFILE_BASE = 9650,
    DNS_ERROR_PRIMARY_REQUIRES_DATAFILE = 9651,
    DNS_ERROR_INVALID_DATAFILE_NAME = 9652,
    DNS_ERROR_DATAFILE_OPEN_FAILURE = 9653,
    DNS_ERROR_FILE_WRITEBACK_FAILED = 9654,
    DNS_ERROR_DATAFILE_PARSING = 9655,
    DNS_ERROR_DATABASE_BASE = 9700,
    DNS_ERROR_RECORD_DOES_NOT_EXIST = 9701,
    DNS_ERROR_RECORD_FORMAT = 9702,
    DNS_ERROR_NODE_CREATION_FAILED = 9703,
    DNS_ERROR_UNKNOWN_RECORD_TYPE = 9704,
    DNS_ERROR_RECORD_TIMED_OUT = 9705,
    DNS_ERROR_NAME_NOT_IN_ZONE = 9706,
    DNS_ERROR_CNAME_LOOP = 9707,
    DNS_ERROR_NODE_IS_CNAME = 9708,
    DNS_ERROR_CNAME_COLLISION = 9709,
    DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT = 9710,
    DNS_ERROR_RECORD_ALREADY_EXISTS = 9711,
    DNS_ERROR_SECONDARY_DATA = 9712,
    DNS_ERROR_NO_CREATE_CACHE_DATA = 9713,
    DNS_ERROR_NAME_DOES_NOT_EXIST = 9714,
    DNS_ERROR_DS_UNAVAILABLE = 9717,
    DNS_ERROR_DS_ZONE_ALREADY_EXISTS = 9718,
    DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE = 9719,
    DNS_ERROR_NODE_IS_DNAME = 9720,
    DNS_ERROR_DNAME_COLLISION = 9721,
    DNS_ERROR_ALIAS_LOOP = 9722,
    DNS_ERROR_OPERATION_BASE = 9750,
    DNS_ERROR_AXFR = 9752,
    DNS_ERROR_SECURE_BASE = 9800,
    DNS_ERROR_SETUP_BASE = 9850,
    DNS_ERROR_NO_TCPIP = 9851,
    DNS_ERROR_NO_DNS_SERVERS = 9852,
    DNS_ERROR_DP_BASE = 9900,
    DNS_ERROR_DP_DOES_NOT_EXIST = 9901,
    DNS_ERROR_DP_ALREADY_EXISTS = 9902,
    DNS_ERROR_DP_NOT_ENLISTED = 9903,
    DNS_ERROR_DP_ALREADY_ENLISTED = 9904,
    DNS_ERROR_DP_NOT_AVAILABLE = 9905,
    DNS_ERROR_DP_FSMO_ERROR = 9906,
    DNS_ERROR_RRL_NOT_ENABLED = 9911,
    DNS_ERROR_RRL_INVALID_WINDOW_SIZE = 9912,
    DNS_ERROR_RRL_INVALID_IPV4_PREFIX = 9913,
    DNS_ERROR_RRL_INVALID_IPV6_PREFIX = 9914,
    DNS_ERROR_RRL_INVALID_TC_RATE = 9915,
    DNS_ERROR_RRL_INVALID_LEAK_RATE = 9916,
    DNS_ERROR_RRL_LEAK_RATE_LESSTHAN_TC_RATE = 9917,
    DNS_ERROR_VIRTUALIZATION_INSTANCE_ALREADY_EXISTS = 9921,
    DNS_ERROR_VIRTUALIZATION_INSTANCE_DOES_NOT_EXIST = 9922,
    DNS_ERROR_VIRTUALIZATION_TREE_LOCKED = 9923,
    DNS_ERROR_INVAILD_VIRTUALIZATION_INSTANCE_NAME = 9924,
    DNS_ERROR_DEFAULT_VIRTUALIZATION_INSTANCE = 9925,
    DNS_ERROR_ZONESCOPE_ALREADY_EXISTS = 9951,
    DNS_ERROR_ZONESCOPE_DOES_NOT_EXIST = 9952,
    DNS_ERROR_DEFAULT_ZONESCOPE = 9953,
    DNS_ERROR_INVALID_ZONESCOPE_NAME = 9954,
    DNS_ERROR_NOT_ALLOWED_WITH_ZONESCOPES = 9955,
    DNS_ERROR_LOAD_ZONESCOPE_FAILED = 9956,
    DNS_ERROR_ZONESCOPE_FILE_WRITEBACK_FAILED = 9957,
    DNS_ERROR_INVALID_SCOPE_NAME = 9958,
    DNS_ERROR_SCOPE_DOES_NOT_EXIST = 9959,
    DNS_ERROR_DEFAULT_SCOPE = 9960,
    DNS_ERROR_INVALID_SCOPE_OPERATION = 9961,
    DNS_ERROR_SCOPE_LOCKED = 9962,
    DNS_ERROR_SCOPE_ALREADY_EXISTS = 9963,
    DNS_ERROR_POLICY_ALREADY_EXISTS = 9971,
    DNS_ERROR_POLICY_DOES_NOT_EXIST = 9972,
    DNS_ERROR_POLICY_INVALID_CRITERIA = 9973,
    DNS_ERROR_POLICY_INVALID_SETTINGS = 9974,
    DNS_ERROR_CLIENT_SUBNET_IS_ACCESSED = 9975,
    DNS_ERROR_CLIENT_SUBNET_DOES_NOT_EXIST = 9976,
    DNS_ERROR_CLIENT_SUBNET_ALREADY_EXISTS = 9977,
    DNS_ERROR_SUBNET_DOES_NOT_EXIST = 9978,
    DNS_ERROR_SUBNET_ALREADY_EXISTS = 9979,
    DNS_ERROR_POLICY_LOCKED = 9980,
    DNS_ERROR_POLICY_INVALID_WEIGHT = 9981,
    DNS_ERROR_POLICY_INVALID_NAME = 9982,
    DNS_ERROR_POLICY_MISSING_CRITERIA = 9983,
    DNS_ERROR_INVALID_CLIENT_SUBNET_NAME = 9984,
    DNS_ERROR_POLICY_PROCESSING_ORDER_INVALID = 9985,
    DNS_ERROR_POLICY_SCOPE_MISSING = 9986,
    DNS_ERROR_POLICY_SCOPE_NOT_ALLOWED = 9987,
    DNS_ERROR_SERVERSCOPE_IS_REFERENCED = 9988,
    DNS_ERROR_ZONESCOPE_IS_REFERENCED = 9989,
    DNS_ERROR_POLICY_INVALID_CRITERIA_CLIENT_SUBNET = 9990,
    DNS_ERROR_POLICY_INVALID_CRITERIA_TRANSPORT_PROTOCOL = 9991,
    DNS_ERROR_POLICY_INVALID_CRITERIA_NETWORK_PROTOCOL = 9992,
    DNS_ERROR_POLICY_INVALID_CRITERIA_INTERFACE = 9993,
    DNS_ERROR_POLICY_INVALID_CRITERIA_FQDN = 9994,
    DNS_ERROR_POLICY_INVALID_CRITERIA_QUERY_TYPE = 9995,
    DNS_ERROR_POLICY_INVALID_CRITERIA_TIME_OF_DAY = 9996,
    ERROR_IPSEC_QM_POLICY_EXISTS = 13000,
    ERROR_IPSEC_QM_POLICY_NOT_FOUND = 13001,
    ERROR_IPSEC_QM_POLICY_IN_USE = 13002,
    ERROR_IPSEC_MM_POLICY_EXISTS = 13003,
    ERROR_IPSEC_MM_POLICY_NOT_FOUND = 13004,
    ERROR_IPSEC_MM_POLICY_IN_USE = 13005,
    ERROR_IPSEC_MM_FILTER_EXISTS = 13006,
    ERROR_IPSEC_MM_FILTER_NOT_FOUND = 13007,
    ERROR_IPSEC_TRANSPORT_FILTER_EXISTS = 13008,
    ERROR_IPSEC_TRANSPORT_FILTER_NOT_FOUND = 13009,
    ERROR_IPSEC_MM_AUTH_EXISTS = 13010,
    ERROR_IPSEC_MM_AUTH_NOT_FOUND = 13011,
    ERROR_IPSEC_MM_AUTH_IN_USE = 13012,
    ERROR_IPSEC_DEFAULT_MM_POLICY_NOT_FOUND = 13013,
    ERROR_IPSEC_DEFAULT_MM_AUTH_NOT_FOUND = 13014,
    ERROR_IPSEC_DEFAULT_QM_POLICY_NOT_FOUND = 13015,
    ERROR_IPSEC_TUNNEL_FILTER_EXISTS = 13016,
    ERROR_IPSEC_TUNNEL_FILTER_NOT_FOUND = 13017,
    ERROR_IPSEC_MM_FILTER_PENDING_DELETION = 13018,
    ERROR_IPSEC_TRANSPORT_FILTER_PENDING_DELETION = 13019,
    ERROR_IPSEC_TUNNEL_FILTER_PENDING_DELETION = 13020,
    ERROR_IPSEC_MM_POLICY_PENDING_DELETION = 13021,
    ERROR_IPSEC_MM_AUTH_PENDING_DELETION = 13022,
    ERROR_IPSEC_QM_POLICY_PENDING_DELETION = 13023,
    ERROR_IPSEC_IKE_NEG_STATUS_BEGIN = 13800,
    ERROR_IPSEC_IKE_AUTH_FAIL = 13801,
    ERROR_IPSEC_IKE_ATTRIB_FAIL = 13802,
    ERROR_IPSEC_IKE_NEGOTIATION_PENDING = 13803,
    ERROR_IPSEC_IKE_GENERAL_PROCESSING_ERROR = 13804,
    ERROR_IPSEC_IKE_TIMED_OUT = 13805,
    ERROR_IPSEC_IKE_NO_CERT = 13806,
    ERROR_IPSEC_IKE_SA_DELETED = 13807,
    ERROR_IPSEC_IKE_SA_REAPED = 13808,
    ERROR_IPSEC_IKE_MM_ACQUIRE_DROP = 13809,
    ERROR_IPSEC_IKE_QM_ACQUIRE_DROP = 13810,
    ERROR_IPSEC_IKE_QUEUE_DROP_MM = 13811,
    ERROR_IPSEC_IKE_QUEUE_DROP_NO_MM = 13812,
    ERROR_IPSEC_IKE_DROP_NO_RESPONSE = 13813,
    ERROR_IPSEC_IKE_MM_DELAY_DROP = 13814,
    ERROR_IPSEC_IKE_QM_DELAY_DROP = 13815,
    ERROR_IPSEC_IKE_ERROR = 13816,
    ERROR_IPSEC_IKE_CRL_FAILED = 13817,
    ERROR_IPSEC_IKE_INVALID_KEY_USAGE = 13818,
    ERROR_IPSEC_IKE_INVALID_CERT_TYPE = 13819,
    ERROR_IPSEC_IKE_NO_PRIVATE_KEY = 13820,
    ERROR_IPSEC_IKE_SIMULTANEOUS_REKEY = 13821,
    ERROR_IPSEC_IKE_DH_FAIL = 13822,
    ERROR_IPSEC_IKE_CRITICAL_PAYLOAD_NOT_RECOGNIZED = 13823,
    ERROR_IPSEC_IKE_INVALID_HEADER = 13824,
    ERROR_IPSEC_IKE_NO_POLICY = 13825,
    ERROR_IPSEC_IKE_INVALID_SIGNATURE = 13826,
    ERROR_IPSEC_IKE_KERBEROS_ERROR = 13827,
    ERROR_IPSEC_IKE_NO_PUBLIC_KEY = 13828,
    ERROR_IPSEC_IKE_PROCESS_ERR = 13829,
    ERROR_IPSEC_IKE_PROCESS_ERR_SA = 13830,
    ERROR_IPSEC_IKE_PROCESS_ERR_PROP = 13831,
    ERROR_IPSEC_IKE_PROCESS_ERR_TRANS = 13832,
    ERROR_IPSEC_IKE_PROCESS_ERR_KE = 13833,
    ERROR_IPSEC_IKE_PROCESS_ERR_ID = 13834,
    ERROR_IPSEC_IKE_PROCESS_ERR_CERT = 13835,
    ERROR_IPSEC_IKE_PROCESS_ERR_CERT_REQ = 13836,
    ERROR_IPSEC_IKE_PROCESS_ERR_HASH = 13837,
    ERROR_IPSEC_IKE_PROCESS_ERR_SIG = 13838,
    ERROR_IPSEC_IKE_PROCESS_ERR_NONCE = 13839,
    ERROR_IPSEC_IKE_PROCESS_ERR_NOTIFY = 13840,
    ERROR_IPSEC_IKE_PROCESS_ERR_DELETE = 13841,
    ERROR_IPSEC_IKE_PROCESS_ERR_VENDOR = 13842,
    ERROR_IPSEC_IKE_INVALID_PAYLOAD = 13843,
    ERROR_IPSEC_IKE_LOAD_SOFT_SA = 13844,
    ERROR_IPSEC_IKE_SOFT_SA_TORN_DOWN = 13845,
    ERROR_IPSEC_IKE_INVALID_COOKIE = 13846,
    ERROR_IPSEC_IKE_NO_PEER_CERT = 13847,
    ERROR_IPSEC_IKE_PEER_CRL_FAILED = 13848,
    ERROR_IPSEC_IKE_POLICY_CHANGE = 13849,
    ERROR_IPSEC_IKE_NO_MM_POLICY = 13850,
    ERROR_IPSEC_IKE_NOTCBPRIV = 13851,
    ERROR_IPSEC_IKE_SECLOADFAIL = 13852,
    ERROR_IPSEC_IKE_FAILSSPINIT = 13853,
    ERROR_IPSEC_IKE_FAILQUERYSSP = 13854,
    ERROR_IPSEC_IKE_SRVACQFAIL = 13855,
    ERROR_IPSEC_IKE_SRVQUERYCRED = 13856,
    ERROR_IPSEC_IKE_GETSPIFAIL = 13857,
    ERROR_IPSEC_IKE_INVALID_FILTER = 13858,
    ERROR_IPSEC_IKE_OUT_OF_MEMORY = 13859,
    ERROR_IPSEC_IKE_ADD_UPDATE_KEY_FAILED = 13860,
    ERROR_IPSEC_IKE_INVALID_POLICY = 13861,
    ERROR_IPSEC_IKE_UNKNOWN_DOI = 13862,
    ERROR_IPSEC_IKE_INVALID_SITUATION = 13863,
    ERROR_IPSEC_IKE_DH_FAILURE = 13864,
    ERROR_IPSEC_IKE_INVALID_GROUP = 13865,
    ERROR_IPSEC_IKE_ENCRYPT = 13866,
    ERROR_IPSEC_IKE_DECRYPT = 13867,
    ERROR_IPSEC_IKE_POLICY_MATCH = 13868,
    ERROR_IPSEC_IKE_UNSUPPORTED_ID = 13869,
    ERROR_IPSEC_IKE_INVALID_HASH = 13870,
    ERROR_IPSEC_IKE_INVALID_HASH_ALG = 13871,
    ERROR_IPSEC_IKE_INVALID_HASH_SIZE = 13872,
    ERROR_IPSEC_IKE_INVALID_ENCRYPT_ALG = 13873,
    ERROR_IPSEC_IKE_INVALID_AUTH_ALG = 13874,
    ERROR_IPSEC_IKE_INVALID_SIG = 13875,
    ERROR_IPSEC_IKE_LOAD_FAILED = 13876,
    ERROR_IPSEC_IKE_RPC_DELETE = 13877,
    ERROR_IPSEC_IKE_BENIGN_REINIT = 13878,
    ERROR_IPSEC_IKE_INVALID_RESPONDER_LIFETIME_NOTIFY = 13879,
    ERROR_IPSEC_IKE_INVALID_MAJOR_VERSION = 13880,
    ERROR_IPSEC_IKE_INVALID_CERT_KEYLEN = 13881,
    ERROR_IPSEC_IKE_MM_LIMIT = 13882,
    ERROR_IPSEC_IKE_NEGOTIATION_DISABLED = 13883,
    ERROR_IPSEC_IKE_QM_LIMIT = 13884,
    ERROR_IPSEC_IKE_MM_EXPIRED = 13885,
    ERROR_IPSEC_IKE_PEER_MM_ASSUMED_INVALID = 13886,
    ERROR_IPSEC_IKE_CERT_CHAIN_POLICY_MISMATCH = 13887,
    ERROR_IPSEC_IKE_UNEXPECTED_MESSAGE_ID = 13888,
    ERROR_IPSEC_IKE_INVALID_AUTH_PAYLOAD = 13889,
    ERROR_IPSEC_IKE_DOS_COOKIE_SENT = 13890,
    ERROR_IPSEC_IKE_SHUTTING_DOWN = 13891,
    ERROR_IPSEC_IKE_CGA_AUTH_FAILED = 13892,
    ERROR_IPSEC_IKE_PROCESS_ERR_NATOA = 13893,
    ERROR_IPSEC_IKE_INVALID_MM_FOR_QM = 13894,
    ERROR_IPSEC_IKE_QM_EXPIRED = 13895,
    ERROR_IPSEC_IKE_TOO_MANY_FILTERS = 13896,
    ERROR_IPSEC_IKE_NEG_STATUS_END = 13897,
    ERROR_IPSEC_IKE_KILL_DUMMY_NAP_TUNNEL = 13898,
    ERROR_IPSEC_IKE_INNER_IP_ASSIGNMENT_FAILURE = 13899,
    ERROR_IPSEC_IKE_REQUIRE_CP_PAYLOAD_MISSING = 13900,
    ERROR_IPSEC_KEY_MODULE_IMPERSONATION_NEGOTIATION_PENDING = 13901,
    ERROR_IPSEC_IKE_COEXISTENCE_SUPPRESS = 13902,
    ERROR_IPSEC_IKE_RATELIMIT_DROP = 13903,
    ERROR_IPSEC_IKE_PEER_DOESNT_SUPPORT_MOBIKE = 13904,
    ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE = 13905,
    ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_FAILURE = 13906,
    ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE_WITH_OPTIONAL_RETRY = 13907,
    ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_AND_CERTMAP_FAILURE = 13908,
    ERROR_IPSEC_IKE_NEG_STATUS_EXTENDED_END = 13909,
    ERROR_IPSEC_BAD_SPI = 13910,
    ERROR_IPSEC_SA_LIFETIME_EXPIRED = 13911,
    ERROR_IPSEC_WRONG_SA = 13912,
    ERROR_IPSEC_REPLAY_CHECK_FAILED = 13913,
    ERROR_IPSEC_INVALID_PACKET = 13914,
    ERROR_IPSEC_INTEGRITY_CHECK_FAILED = 13915,
    ERROR_IPSEC_CLEAR_TEXT_DROP = 13916,
    ERROR_IPSEC_AUTH_FIREWALL_DROP = 13917,
    ERROR_IPSEC_THROTTLE_DROP = 13918,
    ERROR_IPSEC_DOSP_BLOCK = 13925,
    ERROR_IPSEC_DOSP_RECEIVED_MULTICAST = 13926,
    ERROR_IPSEC_DOSP_INVALID_PACKET = 13927,
    ERROR_IPSEC_DOSP_STATE_LOOKUP_FAILED = 13928,
    ERROR_IPSEC_DOSP_MAX_ENTRIES = 13929,
    ERROR_IPSEC_DOSP_KEYMOD_NOT_ALLOWED = 13930,
    ERROR_IPSEC_DOSP_NOT_INSTALLED = 13931,
    ERROR_IPSEC_DOSP_MAX_PER_IP_RATELIMIT_QUEUES = 13932,
    ERROR_SXS_SECTION_NOT_FOUND = 14000,
    ERROR_SXS_CANT_GEN_ACTCTX = 14001,
    ERROR_SXS_INVALID_ACTCTXDATA_FORMAT = 14002,
    ERROR_SXS_ASSEMBLY_NOT_FOUND = 14003,
    ERROR_SXS_MANIFEST_FORMAT_ERROR = 14004,
    ERROR_SXS_MANIFEST_PARSE_ERROR = 14005,
    ERROR_SXS_ACTIVATION_CONTEXT_DISABLED = 14006,
    ERROR_SXS_KEY_NOT_FOUND = 14007,
    ERROR_SXS_VERSION_CONFLICT = 14008,
    ERROR_SXS_WRONG_SECTION_TYPE = 14009,
    ERROR_SXS_THREAD_QUERIES_DISABLED = 14010,
    ERROR_SXS_PROCESS_DEFAULT_ALREADY_SET = 14011,
    ERROR_SXS_UNKNOWN_ENCODING_GROUP = 14012,
    ERROR_SXS_UNKNOWN_ENCODING = 14013,
    ERROR_SXS_INVALID_XML_NAMESPACE_URI = 14014,
    ERROR_SXS_ROOT_MANIFEST_DEPENDENCY_NOT_INSTALLED = 14015,
    ERROR_SXS_LEAF_MANIFEST_DEPENDENCY_NOT_INSTALLED = 14016,
    ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE = 14017,
    ERROR_SXS_MANIFEST_MISSING_REQUIRED_DEFAULT_NAMESPACE = 14018,
    ERROR_SXS_MANIFEST_INVALID_REQUIRED_DEFAULT_NAMESPACE = 14019,
    ERROR_SXS_PRIVATE_MANIFEST_CROSS_PATH_WITH_REPARSE_POINT = 14020,
    ERROR_SXS_DUPLICATE_DLL_NAME = 14021,
    ERROR_SXS_DUPLICATE_WINDOWCLASS_NAME = 14022,
    ERROR_SXS_DUPLICATE_CLSID = 14023,
    ERROR_SXS_DUPLICATE_IID = 14024,
    ERROR_SXS_DUPLICATE_TLBID = 14025,
    ERROR_SXS_DUPLICATE_PROGID = 14026,
    ERROR_SXS_DUPLICATE_ASSEMBLY_NAME = 14027,
    ERROR_SXS_FILE_HASH_MISMATCH = 14028,
    ERROR_SXS_POLICY_PARSE_ERROR = 14029,
    ERROR_SXS_XML_E_MISSINGQUOTE = 14030,
    ERROR_SXS_XML_E_COMMENTSYNTAX = 14031,
    ERROR_SXS_XML_E_BADSTARTNAMECHAR = 14032,
    ERROR_SXS_XML_E_BADNAMECHAR = 14033,
    ERROR_SXS_XML_E_BADCHARINSTRING = 14034,
    ERROR_SXS_XML_E_XMLDECLSYNTAX = 14035,
    ERROR_SXS_XML_E_BADCHARDATA = 14036,
    ERROR_SXS_XML_E_MISSINGWHITESPACE = 14037,
    ERROR_SXS_XML_E_EXPECTINGTAGEND = 14038,
    ERROR_SXS_XML_E_MISSINGSEMICOLON = 14039,
    ERROR_SXS_XML_E_UNBALANCEDPAREN = 14040,
    ERROR_SXS_XML_E_INTERNALERROR = 14041,
    ERROR_SXS_XML_E_UNEXPECTED_WHITESPACE = 14042,
    ERROR_SXS_XML_E_INCOMPLETE_ENCODING = 14043,
    ERROR_SXS_XML_E_MISSING_PAREN = 14044,
    ERROR_SXS_XML_E_EXPECTINGCLOSEQUOTE = 14045,
    ERROR_SXS_XML_E_MULTIPLE_COLONS = 14046,
    ERROR_SXS_XML_E_INVALID_DECIMAL = 14047,
    ERROR_SXS_XML_E_INVALID_HEXIDECIMAL = 14048,
    ERROR_SXS_XML_E_INVALID_UNICODE = 14049,
    ERROR_SXS_XML_E_WHITESPACEORQUESTIONMARK = 14050,
    ERROR_SXS_XML_E_UNEXPECTEDENDTAG = 14051,
    ERROR_SXS_XML_E_UNCLOSEDTAG = 14052,
    ERROR_SXS_XML_E_DUPLICATEATTRIBUTE = 14053,
    ERROR_SXS_XML_E_MULTIPLEROOTS = 14054,
    ERROR_SXS_XML_E_INVALIDATROOTLEVEL = 14055,
    ERROR_SXS_XML_E_BADXMLDECL = 14056,
    ERROR_SXS_XML_E_MISSINGROOT = 14057,
    ERROR_SXS_XML_E_UNEXPECTEDEOF = 14058,
    ERROR_SXS_XML_E_BADPEREFINSUBSET = 14059,
    ERROR_SXS_XML_E_UNCLOSEDSTARTTAG = 14060,
    ERROR_SXS_XML_E_UNCLOSEDENDTAG = 14061,
    ERROR_SXS_XML_E_UNCLOSEDSTRING = 14062,
    ERROR_SXS_XML_E_UNCLOSEDCOMMENT = 14063,
    ERROR_SXS_XML_E_UNCLOSEDDECL = 14064,
    ERROR_SXS_XML_E_UNCLOSEDCDATA = 14065,
    ERROR_SXS_XML_E_RESERVEDNAMESPACE = 14066,
    ERROR_SXS_XML_E_INVALIDENCODING = 14067,
    ERROR_SXS_XML_E_INVALIDSWITCH = 14068,
    ERROR_SXS_XML_E_BADXMLCASE = 14069,
    ERROR_SXS_XML_E_INVALID_STANDALONE = 14070,
    ERROR_SXS_XML_E_UNEXPECTED_STANDALONE = 14071,
    ERROR_SXS_XML_E_INVALID_VERSION = 14072,
    ERROR_SXS_XML_E_MISSINGEQUALS = 14073,
    ERROR_SXS_PROTECTION_RECOVERY_FAILED = 14074,
    ERROR_SXS_PROTECTION_PUBLIC_KEY_TOO_SHORT = 14075,
    ERROR_SXS_PROTECTION_CATALOG_NOT_VALID = 14076,
    ERROR_SXS_UNTRANSLATABLE_HRESULT = 14077,
    ERROR_SXS_PROTECTION_CATALOG_FILE_MISSING = 14078,
    ERROR_SXS_MISSING_ASSEMBLY_IDENTITY_ATTRIBUTE = 14079,
    ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE_NAME = 14080,
    ERROR_SXS_ASSEMBLY_MISSING = 14081,
    ERROR_SXS_CORRUPT_ACTIVATION_STACK = 14082,
    ERROR_SXS_CORRUPTION = 14083,
    ERROR_SXS_EARLY_DEACTIVATION = 14084,
    ERROR_SXS_INVALID_DEACTIVATION = 14085,
    ERROR_SXS_MULTIPLE_DEACTIVATION = 14086,
    ERROR_SXS_PROCESS_TERMINATION_REQUESTED = 14087,
    ERROR_SXS_RELEASE_ACTIVATION_CONTEXT = 14088,
    ERROR_SXS_SYSTEM_DEFAULT_ACTIVATION_CONTEXT_EMPTY = 14089,
    ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_VALUE = 14090,
    ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_NAME = 14091,
    ERROR_SXS_IDENTITY_DUPLICATE_ATTRIBUTE = 14092,
    ERROR_SXS_IDENTITY_PARSE_ERROR = 14093,
    ERROR_MALFORMED_SUBSTITUTION_STRING = 14094,
    ERROR_SXS_INCORRECT_PUBLIC_KEY_TOKEN = 14095,
    ERROR_UNMAPPED_SUBSTITUTION_STRING = 14096,
    ERROR_SXS_ASSEMBLY_NOT_LOCKED = 14097,
    ERROR_SXS_COMPONENT_STORE_CORRUPT = 14098,
    ERROR_ADVANCED_INSTALLER_FAILED = 14099,
    ERROR_XML_ENCODING_MISMATCH = 14100,
    ERROR_SXS_MANIFEST_IDENTITY_SAME_BUT_CONTENTS_DIFFERENT = 14101,
    ERROR_SXS_IDENTITIES_DIFFERENT = 14102,
    ERROR_SXS_ASSEMBLY_IS_NOT_A_DEPLOYMENT = 14103,
    ERROR_SXS_FILE_NOT_PART_OF_ASSEMBLY = 14104,
    ERROR_SXS_MANIFEST_TOO_BIG = 14105,
    ERROR_SXS_SETTING_NOT_REGISTERED = 14106,
    ERROR_SXS_TRANSACTION_CLOSURE_INCOMPLETE = 14107,
    ERROR_SMI_PRIMITIVE_INSTALLER_FAILED = 14108,
    ERROR_GENERIC_COMMAND_FAILED = 14109,
    ERROR_SXS_FILE_HASH_MISSING = 14110,
    ERROR_SXS_DUPLICATE_ACTIVATABLE_CLASS = 14111,
    ERROR_EVT_INVALID_CHANNEL_PATH = 15000,
    ERROR_EVT_INVALID_QUERY = 15001,
    ERROR_EVT_PUBLISHER_METADATA_NOT_FOUND = 15002,
    ERROR_EVT_EVENT_TEMPLATE_NOT_FOUND = 15003,
    ERROR_EVT_INVALID_PUBLISHER_NAME = 15004,
    ERROR_EVT_INVALID_EVENT_DATA = 15005,
    ERROR_EVT_CHANNEL_NOT_FOUND = 15007,
    ERROR_EVT_MALFORMED_XML_TEXT = 15008,
    ERROR_EVT_SUBSCRIPTION_TO_DIRECT_CHANNEL = 15009,
    ERROR_EVT_CONFIGURATION_ERROR = 15010,
    ERROR_EVT_QUERY_RESULT_STALE = 15011,
    ERROR_EVT_QUERY_RESULT_INVALID_POSITION = 15012,
    ERROR_EVT_NON_VALIDATING_MSXML = 15013,
    ERROR_EVT_FILTER_ALREADYSCOPED = 15014,
    ERROR_EVT_FILTER_NOTELTSET = 15015,
    ERROR_EVT_FILTER_INVARG = 15016,
    ERROR_EVT_FILTER_INVTEST = 15017,
    ERROR_EVT_FILTER_INVTYPE = 15018,
    ERROR_EVT_FILTER_PARSEERR = 15019,
    ERROR_EVT_FILTER_UNSUPPORTEDOP = 15020,
    ERROR_EVT_FILTER_UNEXPECTEDTOKEN = 15021,
    ERROR_EVT_INVALID_OPERATION_OVER_ENABLED_DIRECT_CHANNEL = 15022,
    ERROR_EVT_INVALID_CHANNEL_PROPERTY_VALUE = 15023,
    ERROR_EVT_INVALID_PUBLISHER_PROPERTY_VALUE = 15024,
    ERROR_EVT_CHANNEL_CANNOT_ACTIVATE = 15025,
    ERROR_EVT_FILTER_TOO_COMPLEX = 15026,
    ERROR_EVT_MESSAGE_NOT_FOUND = 15027,
    ERROR_EVT_MESSAGE_ID_NOT_FOUND = 15028,
    ERROR_EVT_UNRESOLVED_VALUE_INSERT = 15029,
    ERROR_EVT_UNRESOLVED_PARAMETER_INSERT = 15030,
    ERROR_EVT_MAX_INSERTS_REACHED = 15031,
    ERROR_EVT_EVENT_DEFINITION_NOT_FOUND = 15032,
    ERROR_EVT_MESSAGE_LOCALE_NOT_FOUND = 15033,
    ERROR_EVT_VERSION_TOO_OLD = 15034,
    ERROR_EVT_VERSION_TOO_NEW = 15035,
    ERROR_EVT_CANNOT_OPEN_CHANNEL_OF_QUERY = 15036,
    ERROR_EVT_PUBLISHER_DISABLED = 15037,
    ERROR_EVT_FILTER_OUT_OF_RANGE = 15038,
    ERROR_EC_SUBSCRIPTION_CANNOT_ACTIVATE = 15080,
    ERROR_EC_LOG_DISABLED = 15081,
    ERROR_EC_CIRCULAR_FORWARDING = 15082,
    ERROR_EC_CREDSTORE_FULL = 15083,
    ERROR_EC_CRED_NOT_FOUND = 15084,
    ERROR_EC_NO_ACTIVE_CHANNEL = 15085,
    ERROR_MUI_FILE_NOT_FOUND = 15100,
    ERROR_MUI_INVALID_FILE = 15101,
    ERROR_MUI_INVALID_RC_CONFIG = 15102,
    ERROR_MUI_INVALID_LOCALE_NAME = 15103,
    ERROR_MUI_INVALID_ULTIMATEFALLBACK_NAME = 15104,
    ERROR_MUI_FILE_NOT_LOADED = 15105,
    ERROR_RESOURCE_ENUM_USER_STOP = 15106,
    ERROR_MUI_INTLSETTINGS_UILANG_NOT_INSTALLED = 15107,
    ERROR_MUI_INTLSETTINGS_INVALID_LOCALE_NAME = 15108,
    ERROR_MRM_RUNTIME_NO_DEFAULT_OR_NEUTRAL_RESOURCE = 15110,
    ERROR_MRM_INVALID_PRICONFIG = 15111,
    ERROR_MRM_INVALID_FILE_TYPE = 15112,
    ERROR_MRM_UNKNOWN_QUALIFIER = 15113,
    ERROR_MRM_INVALID_QUALIFIER_VALUE = 15114,
    ERROR_MRM_NO_CANDIDATE = 15115,
    ERROR_MRM_NO_MATCH_OR_DEFAULT_CANDIDATE = 15116,
    ERROR_MRM_RESOURCE_TYPE_MISMATCH = 15117,
    ERROR_MRM_DUPLICATE_MAP_NAME = 15118,
    ERROR_MRM_DUPLICATE_ENTRY = 15119,
    ERROR_MRM_INVALID_RESOURCE_IDENTIFIER = 15120,
    ERROR_MRM_FILEPATH_TOO_LONG = 15121,
    ERROR_MRM_UNSUPPORTED_DIRECTORY_TYPE = 15122,
    ERROR_MRM_INVALID_PRI_FILE = 15126,
    ERROR_MRM_NAMED_RESOURCE_NOT_FOUND = 15127,
    ERROR_MRM_MAP_NOT_FOUND = 15135,
    ERROR_MRM_UNSUPPORTED_PROFILE_TYPE = 15136,
    ERROR_MRM_INVALID_QUALIFIER_OPERATOR = 15137,
    ERROR_MRM_INDETERMINATE_QUALIFIER_VALUE = 15138,
    ERROR_MRM_AUTOMERGE_ENABLED = 15139,
    ERROR_MRM_TOO_MANY_RESOURCES = 15140,
    ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_MERGE = 15141,
    ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_LOAD_UNLOAD_PRI_FILE = 15142,
    ERROR_MRM_NO_CURRENT_VIEW_ON_THREAD = 15143,
    ERROR_DIFFERENT_PROFILE_RESOURCE_MANAGER_EXIST = 15144,
    ERROR_OPERATION_NOT_ALLOWED_FROM_SYSTEM_COMPONENT = 15145,
    ERROR_MRM_DIRECT_REF_TO_NON_DEFAULT_RESOURCE = 15146,
    ERROR_MRM_GENERATION_COUNT_MISMATCH = 15147,
    ERROR_PRI_MERGE_VERSION_MISMATCH = 15148,
    ERROR_PRI_MERGE_MISSING_SCHEMA = 15149,
    ERROR_PRI_MERGE_LOAD_FILE_FAILED = 15150,
    ERROR_PRI_MERGE_ADD_FILE_FAILED = 15151,
    ERROR_PRI_MERGE_WRITE_FILE_FAILED = 15152,
    ERROR_PRI_MERGE_MULTIPLE_PACKAGE_FAMILIES_NOT_ALLOWED = 15153,
    ERROR_PRI_MERGE_MULTIPLE_MAIN_PACKAGES_NOT_ALLOWED = 15154,
    ERROR_PRI_MERGE_BUNDLE_PACKAGES_NOT_ALLOWED = 15155,
    ERROR_PRI_MERGE_MAIN_PACKAGE_REQUIRED = 15156,
    ERROR_PRI_MERGE_RESOURCE_PACKAGE_REQUIRED = 15157,
    ERROR_PRI_MERGE_INVALID_FILE_NAME = 15158,
    ERROR_MRM_PACKAGE_NOT_FOUND = 15159,
    ERROR_MRM_MISSING_DEFAULT_LANGUAGE = 15160,
    ERROR_MCA_INVALID_CAPABILITIES_STRING = 15200,
    ERROR_MCA_INVALID_VCP_VERSION = 15201,
    ERROR_MCA_MONITOR_VIOLATES_MCCS_SPECIFICATION = 15202,
    ERROR_MCA_MCCS_VERSION_MISMATCH = 15203,
    ERROR_MCA_UNSUPPORTED_MCCS_VERSION = 15204,
    ERROR_MCA_INTERNAL_ERROR = 15205,
    ERROR_MCA_INVALID_TECHNOLOGY_TYPE_RETURNED = 15206,
    ERROR_MCA_UNSUPPORTED_COLOR_TEMPERATURE = 15207,
    ERROR_AMBIGUOUS_SYSTEM_DEVICE = 15250,
    ERROR_SYSTEM_DEVICE_NOT_FOUND = 15299,
    ERROR_HASH_NOT_SUPPORTED = 15300,
    ERROR_HASH_NOT_PRESENT = 15301,
    ERROR_SECONDARY_IC_PROVIDER_NOT_REGISTERED = 15321,
    ERROR_GPIO_CLIENT_INFORMATION_INVALID = 15322,
    ERROR_GPIO_VERSION_NOT_SUPPORTED = 15323,
    ERROR_GPIO_INVALID_REGISTRATION_PACKET = 15324,
    ERROR_GPIO_OPERATION_DENIED = 15325,
    ERROR_GPIO_INCOMPATIBLE_CONNECT_MODE = 15326,
    ERROR_GPIO_INTERRUPT_ALREADY_UNMASKED = 15327,
    ERROR_CANNOT_SWITCH_RUNLEVEL = 15400,
    ERROR_INVALID_RUNLEVEL_SETTING = 15401,
    ERROR_RUNLEVEL_SWITCH_TIMEOUT = 15402,
    ERROR_RUNLEVEL_SWITCH_AGENT_TIMEOUT = 15403,
    ERROR_RUNLEVEL_SWITCH_IN_PROGRESS = 15404,
    ERROR_SERVICES_FAILED_AUTOSTART = 15405,
    ERROR_COM_TASK_STOP_PENDING = 15501,
    ERROR_INSTALL_OPEN_PACKAGE_FAILED = 15600,
    ERROR_INSTALL_PACKAGE_NOT_FOUND = 15601,
    ERROR_INSTALL_INVALID_PACKAGE = 15602,
    ERROR_INSTALL_RESOLVE_DEPENDENCY_FAILED = 15603,
    ERROR_INSTALL_OUT_OF_DISK_SPACE = 15604,
    ERROR_INSTALL_NETWORK_FAILURE = 15605,
    ERROR_INSTALL_REGISTRATION_FAILURE = 15606,
    ERROR_INSTALL_DEREGISTRATION_FAILURE = 15607,
    ERROR_INSTALL_CANCEL = 15608,
    ERROR_INSTALL_FAILED = 15609,
    ERROR_REMOVE_FAILED = 15610,
    ERROR_PACKAGE_ALREADY_EXISTS = 15611,
    ERROR_NEEDS_REMEDIATION = 15612,
    ERROR_INSTALL_PREREQUISITE_FAILED = 15613,
    ERROR_PACKAGE_REPOSITORY_CORRUPTED = 15614,
    ERROR_INSTALL_POLICY_FAILURE = 15615,
    ERROR_PACKAGE_UPDATING = 15616,
    ERROR_DEPLOYMENT_BLOCKED_BY_POLICY = 15617,
    ERROR_PACKAGES_IN_USE = 15618,
    ERROR_RECOVERY_FILE_CORRUPT = 15619,
    ERROR_INVALID_STAGED_SIGNATURE = 15620,
    ERROR_DELETING_EXISTING_APPLICATIONDATA_STORE_FAILED = 15621,
    ERROR_INSTALL_PACKAGE_DOWNGRADE = 15622,
    ERROR_SYSTEM_NEEDS_REMEDIATION = 15623,
    ERROR_APPX_INTEGRITY_FAILURE_CLR_NGEN = 15624,
    ERROR_RESILIENCY_FILE_CORRUPT = 15625,
    ERROR_INSTALL_FIREWALL_SERVICE_NOT_RUNNING = 15626,
    ERROR_PACKAGE_MOVE_FAILED = 15627,
    ERROR_INSTALL_VOLUME_NOT_EMPTY = 15628,
    ERROR_INSTALL_VOLUME_OFFLINE = 15629,
    ERROR_INSTALL_VOLUME_CORRUPT = 15630,
    ERROR_NEEDS_REGISTRATION = 15631,
    ERROR_INSTALL_WRONG_PROCESSOR_ARCHITECTURE = 15632,
    ERROR_DEV_SIDELOAD_LIMIT_EXCEEDED = 15633,
    ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE = 15634,
    ERROR_PACKAGE_NOT_SUPPORTED_ON_FILESYSTEM = 15635,
    ERROR_PACKAGE_MOVE_BLOCKED_BY_STREAMING = 15636,
    ERROR_INSTALL_OPTIONAL_PACKAGE_APPLICATIONID_NOT_UNIQUE = 15637,
    ERROR_PACKAGE_STAGING_ONHOLD = 15638,
    ERROR_INSTALL_INVALID_RELATED_SET_UPDATE = 15639,
    ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_FULLTRUST_CAPABILITY = 15640,
    ERROR_DEPLOYMENT_BLOCKED_BY_USER_LOG_OFF = 15641,
    ERROR_PROVISION_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_PROVISIONED = 15642,
    ERROR_PACKAGES_REPUTATION_CHECK_FAILED = 15643,
    ERROR_PACKAGES_REPUTATION_CHECK_TIMEDOUT = 15644,
    ERROR_DEPLOYMENT_OPTION_NOT_SUPPORTED = 15645,
    ERROR_APPINSTALLER_ACTIVATION_BLOCKED = 15646,
    ERROR_REGISTRATION_FROM_REMOTE_DRIVE_NOT_SUPPORTED = 15647,
    ERROR_APPX_RAW_DATA_WRITE_FAILED = 15648,
    ERROR_DEPLOYMENT_BLOCKED_BY_VOLUME_POLICY_PACKAGE = 15649,
    ERROR_DEPLOYMENT_BLOCKED_BY_VOLUME_POLICY_MACHINE = 15650,
    ERROR_DEPLOYMENT_BLOCKED_BY_PROFILE_POLICY = 15651,
    ERROR_DEPLOYMENT_FAILED_CONFLICTING_MUTABLE_PACKAGE_DIRECTORY = 15652,
    ERROR_SINGLETON_RESOURCE_INSTALLED_IN_ACTIVE_USER = 15653,
    ERROR_DIFFERENT_VERSION_OF_PACKAGED_SERVICE_INSTALLED = 15654,
    ERROR_SERVICE_EXISTS_AS_NON_PACKAGED_SERVICE = 15655,
    ERROR_PACKAGED_SERVICE_REQUIRES_ADMIN_PRIVILEGES = 15656,
    ERROR_REDIRECTION_TO_DEFAULT_ACCOUNT_NOT_ALLOWED = 15657,
    ERROR_PACKAGE_LACKS_CAPABILITY_TO_DEPLOY_ON_HOST = 15658,
    ERROR_UNSIGNED_PACKAGE_INVALID_CONTENT = 15659,
    ERROR_UNSIGNED_PACKAGE_INVALID_PUBLISHER_NAMESPACE = 15660,
    ERROR_SIGNED_PACKAGE_INVALID_PUBLISHER_NAMESPACE = 15661,
    ERROR_PACKAGE_EXTERNAL_LOCATION_NOT_ALLOWED = 15662,
    ERROR_INSTALL_FULLTRUST_HOSTRUNTIME_REQUIRES_MAIN_PACKAGE_FULLTRUST_CAPABILITY = 15663,
    ERROR_PACKAGE_LACKS_CAPABILITY_FOR_MANDATORY_STARTUPTASKS = 15664,
    ERROR_INSTALL_RESOLVE_HOSTRUNTIME_DEPENDENCY_FAILED = 15665,
    ERROR_MACHINE_SCOPE_NOT_ALLOWED = 15666,
    ERROR_CLASSIC_COMPAT_MODE_NOT_ALLOWED = 15667,
    ERROR_STAGEFROMUPDATEAGENT_PACKAGE_NOT_APPLICABLE = 15668,
    ERROR_PACKAGE_NOT_REGISTERED_FOR_USER = 15669,
    ERROR_STATE_LOAD_STORE_FAILED = 15800,
    ERROR_STATE_GET_VERSION_FAILED = 15801,
    ERROR_STATE_SET_VERSION_FAILED = 15802,
    ERROR_STATE_STRUCTURED_RESET_FAILED = 15803,
    ERROR_STATE_OPEN_CONTAINER_FAILED = 15804,
    ERROR_STATE_CREATE_CONTAINER_FAILED = 15805,
    ERROR_STATE_DELETE_CONTAINER_FAILED = 15806,
    ERROR_STATE_READ_SETTING_FAILED = 15807,
    ERROR_STATE_WRITE_SETTING_FAILED = 15808,
    ERROR_STATE_DELETE_SETTING_FAILED = 15809,
    ERROR_STATE_QUERY_SETTING_FAILED = 15810,
    ERROR_STATE_READ_COMPOSITE_SETTING_FAILED = 15811,
    ERROR_STATE_WRITE_COMPOSITE_SETTING_FAILED = 15812,
    ERROR_STATE_ENUMERATE_CONTAINER_FAILED = 15813,
    ERROR_STATE_ENUMERATE_SETTINGS_FAILED = 15814,
    ERROR_STATE_COMPOSITE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED = 15815,
    ERROR_STATE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED = 15816,
    ERROR_STATE_SETTING_NAME_SIZE_LIMIT_EXCEEDED = 15817,
    ERROR_STATE_CONTAINER_NAME_SIZE_LIMIT_EXCEEDED = 15818,
    ERROR_API_UNAVAILABLE = 15841,
    ERROR_NDIS_INTERFACE_CLOSING = 2150891522,
    ERROR_NDIS_BAD_VERSION = 2150891524,
    ERROR_NDIS_BAD_CHARACTERISTICS = 2150891525,
    ERROR_NDIS_ADAPTER_NOT_FOUND = 2150891526,
    ERROR_NDIS_OPEN_FAILED = 2150891527,
    ERROR_NDIS_DEVICE_FAILED = 2150891528,
    ERROR_NDIS_MULTICAST_FULL = 2150891529,
    ERROR_NDIS_MULTICAST_EXISTS = 2150891530,
    ERROR_NDIS_MULTICAST_NOT_FOUND = 2150891531,
    ERROR_NDIS_REQUEST_ABORTED = 2150891532,
    ERROR_NDIS_RESET_IN_PROGRESS = 2150891533,
    ERROR_NDIS_NOT_SUPPORTED = 2150891707,
    ERROR_NDIS_INVALID_PACKET = 2150891535,
    ERROR_NDIS_ADAPTER_NOT_READY = 2150891537,
    ERROR_NDIS_INVALID_LENGTH = 2150891540,
    ERROR_NDIS_INVALID_DATA = 2150891541,
    ERROR_NDIS_BUFFER_TOO_SHORT = 2150891542,
    ERROR_NDIS_INVALID_OID = 2150891543,
    ERROR_NDIS_ADAPTER_REMOVED = 2150891544,
    ERROR_NDIS_UNSUPPORTED_MEDIA = 2150891545,
    ERROR_NDIS_GROUP_ADDRESS_IN_USE = 2150891546,
    ERROR_NDIS_FILE_NOT_FOUND = 2150891547,
    ERROR_NDIS_ERROR_READING_FILE = 2150891548,
    ERROR_NDIS_ALREADY_MAPPED = 2150891549,
    ERROR_NDIS_RESOURCE_CONFLICT = 2150891550,
    ERROR_NDIS_MEDIA_DISCONNECTED = 2150891551,
    ERROR_NDIS_INVALID_ADDRESS = 2150891554,
    ERROR_NDIS_INVALID_DEVICE_REQUEST = 2150891536,
    ERROR_NDIS_PAUSED = 2150891562,
    ERROR_NDIS_INTERFACE_NOT_FOUND = 2150891563,
    ERROR_NDIS_UNSUPPORTED_REVISION = 2150891564,
    ERROR_NDIS_INVALID_PORT = 2150891565,
    ERROR_NDIS_INVALID_PORT_STATE = 2150891566,
    ERROR_NDIS_LOW_POWER_STATE = 2150891567,
    ERROR_NDIS_REINIT_REQUIRED = 2150891568,
    ERROR_NDIS_NO_QUEUES = 2150891569,
    ERROR_NDIS_DOT11_AUTO_CONFIG_ENABLED = 2150899712,
    ERROR_NDIS_DOT11_MEDIA_IN_USE = 2150899713,
    ERROR_NDIS_DOT11_POWER_STATE_INVALID = 2150899714,
    ERROR_NDIS_PM_WOL_PATTERN_LIST_FULL = 2150899715,
    ERROR_NDIS_PM_PROTOCOL_OFFLOAD_LIST_FULL = 2150899716,
    ERROR_NDIS_DOT11_AP_CHANNEL_CURRENTLY_NOT_AVAILABLE = 2150899717,
    ERROR_NDIS_DOT11_AP_BAND_CURRENTLY_NOT_AVAILABLE = 2150899718,
    ERROR_NDIS_DOT11_AP_CHANNEL_NOT_ALLOWED = 2150899719,
    ERROR_NDIS_DOT11_AP_BAND_NOT_ALLOWED = 2150899720,
    ERROR_NDIS_INDICATION_REQUIRED = 3407873,
    ERROR_NDIS_OFFLOAD_POLICY = 3224637455,
    ERROR_NDIS_OFFLOAD_CONNECTION_REJECTED = 3224637458,
    ERROR_NDIS_OFFLOAD_PATH_REJECTED = 3224637459,
    ERROR_HV_INVALID_HYPERCALL_CODE = 3224698882,
    ERROR_HV_INVALID_HYPERCALL_INPUT = 3224698883,
    ERROR_HV_INVALID_ALIGNMENT = 3224698884,
    ERROR_HV_INVALID_PARAMETER = 3224698885,
    ERROR_HV_ACCESS_DENIED = 3224698886,
    ERROR_HV_INVALID_PARTITION_STATE = 3224698887,
    ERROR_HV_OPERATION_DENIED = 3224698888,
    ERROR_HV_UNKNOWN_PROPERTY = 3224698889,
    ERROR_HV_PROPERTY_VALUE_OUT_OF_RANGE = 3224698890,
    ERROR_HV_INSUFFICIENT_MEMORY = 3224698891,
    ERROR_HV_PARTITION_TOO_DEEP = 3224698892,
    ERROR_HV_INVALID_PARTITION_ID = 3224698893,
    ERROR_HV_INVALID_VP_INDEX = 3224698894,
    ERROR_HV_INVALID_PORT_ID = 3224698897,
    ERROR_HV_INVALID_CONNECTION_ID = 3224698898,
    ERROR_HV_INSUFFICIENT_BUFFERS = 3224698899,
    ERROR_HV_NOT_ACKNOWLEDGED = 3224698900,
    ERROR_HV_INVALID_VP_STATE = 3224698901,
    ERROR_HV_ACKNOWLEDGED = 3224698902,
    ERROR_HV_INVALID_SAVE_RESTORE_STATE = 3224698903,
    ERROR_HV_INVALID_SYNIC_STATE = 3224698904,
    ERROR_HV_OBJECT_IN_USE = 3224698905,
    ERROR_HV_INVALID_PROXIMITY_DOMAIN_INFO = 3224698906,
    ERROR_HV_NO_DATA = 3224698907,
    ERROR_HV_INACTIVE = 3224698908,
    ERROR_HV_NO_RESOURCES = 3224698909,
    ERROR_HV_FEATURE_UNAVAILABLE = 3224698910,
    ERROR_HV_INSUFFICIENT_BUFFER = 3224698931,
    ERROR_HV_INSUFFICIENT_DEVICE_DOMAINS = 3224698936,
    ERROR_HV_CPUID_FEATURE_VALIDATION = 3224698940,
    ERROR_HV_CPUID_XSAVE_FEATURE_VALIDATION = 3224698941,
    ERROR_HV_PROCESSOR_STARTUP_TIMEOUT = 3224698942,
    ERROR_HV_SMX_ENABLED = 3224698943,
    ERROR_HV_INVALID_LP_INDEX = 3224698945,
    ERROR_HV_INVALID_REGISTER_VALUE = 3224698960,
    ERROR_HV_INVALID_VTL_STATE = 3224698961,
    ERROR_HV_NX_NOT_DETECTED = 3224698965,
    ERROR_HV_INVALID_DEVICE_ID = 3224698967,
    ERROR_HV_INVALID_DEVICE_STATE = 3224698968,
    ERROR_HV_PENDING_PAGE_REQUESTS = 3473497,
    ERROR_HV_PAGE_REQUEST_INVALID = 3224698976,
    ERROR_HV_INVALID_CPU_GROUP_ID = 3224698991,
    ERROR_HV_INVALID_CPU_GROUP_STATE = 3224698992,
    ERROR_HV_OPERATION_FAILED = 3224698993,
    ERROR_HV_NOT_ALLOWED_WITH_NESTED_VIRT_ACTIVE = 3224698994,
    ERROR_HV_INSUFFICIENT_ROOT_MEMORY = 3224698995,
    ERROR_HV_EVENT_BUFFER_ALREADY_FREED = 3224698996,
    ERROR_HV_INSUFFICIENT_CONTIGUOUS_MEMORY = 3224698997,
    ERROR_HV_DEVICE_NOT_IN_DOMAIN = 3224698998,
    ERROR_HV_NESTED_VM_EXIT = 3224698999,
    ERROR_HV_MSR_ACCESS_FAILED = 3224699008,
    ERROR_HV_NOT_PRESENT = 3224702976,
    ERROR_VID_DUPLICATE_HANDLER = 3224829953,
    ERROR_VID_TOO_MANY_HANDLERS = 3224829954,
    ERROR_VID_QUEUE_FULL = 3224829955,
    ERROR_VID_HANDLER_NOT_PRESENT = 3224829956,
    ERROR_VID_INVALID_OBJECT_NAME = 3224829957,
    ERROR_VID_PARTITION_NAME_TOO_LONG = 3224829958,
    ERROR_VID_MESSAGE_QUEUE_NAME_TOO_LONG = 3224829959,
    ERROR_VID_PARTITION_ALREADY_EXISTS = 3224829960,
    ERROR_VID_PARTITION_DOES_NOT_EXIST = 3224829961,
    ERROR_VID_PARTITION_NAME_NOT_FOUND = 3224829962,
    ERROR_VID_MESSAGE_QUEUE_ALREADY_EXISTS = 3224829963,
    ERROR_VID_EXCEEDED_MBP_ENTRY_MAP_LIMIT = 3224829964,
    ERROR_VID_MB_STILL_REFERENCED = 3224829965,
    ERROR_VID_CHILD_GPA_PAGE_SET_CORRUPTED = 3224829966,
    ERROR_VID_INVALID_NUMA_SETTINGS = 3224829967,
    ERROR_VID_INVALID_NUMA_NODE_INDEX = 3224829968,
    ERROR_VID_NOTIFICATION_QUEUE_ALREADY_ASSOCIATED = 3224829969,
    ERROR_VID_INVALID_MEMORY_BLOCK_HANDLE = 3224829970,
    ERROR_VID_PAGE_RANGE_OVERFLOW = 3224829971,
    ERROR_VID_INVALID_MESSAGE_QUEUE_HANDLE = 3224829972,
    ERROR_VID_INVALID_GPA_RANGE_HANDLE = 3224829973,
    ERROR_VID_NO_MEMORY_BLOCK_NOTIFICATION_QUEUE = 3224829974,
    ERROR_VID_MEMORY_BLOCK_LOCK_COUNT_EXCEEDED = 3224829975,
    ERROR_VID_INVALID_PPM_HANDLE = 3224829976,
    ERROR_VID_MBPS_ARE_LOCKED = 3224829977,
    ERROR_VID_MESSAGE_QUEUE_CLOSED = 3224829978,
    ERROR_VID_VIRTUAL_PROCESSOR_LIMIT_EXCEEDED = 3224829979,
    ERROR_VID_STOP_PENDING = 3224829980,
    ERROR_VID_INVALID_PROCESSOR_STATE = 3224829981,
    ERROR_VID_EXCEEDED_KM_CONTEXT_COUNT_LIMIT = 3224829982,
    ERROR_VID_KM_INTERFACE_ALREADY_INITIALIZED = 3224829983,
    ERROR_VID_MB_PROPERTY_ALREADY_SET_RESET = 3224829984,
    ERROR_VID_MMIO_RANGE_DESTROYED = 3224829985,
    ERROR_VID_INVALID_CHILD_GPA_PAGE_SET = 3224829986,
    ERROR_VID_RESERVE_PAGE_SET_IS_BEING_USED = 3224829987,
    ERROR_VID_RESERVE_PAGE_SET_TOO_SMALL = 3224829988,
    ERROR_VID_MBP_ALREADY_LOCKED_USING_RESERVED_PAGE = 3224829989,
    ERROR_VID_MBP_COUNT_EXCEEDED_LIMIT = 3224829990,
    ERROR_VID_SAVED_STATE_CORRUPT = 3224829991,
    ERROR_VID_SAVED_STATE_UNRECOGNIZED_ITEM = 3224829992,
    ERROR_VID_SAVED_STATE_INCOMPATIBLE = 3224829993,
    ERROR_VID_VTL_ACCESS_DENIED = 3224829994,
    ERROR_VMCOMPUTE_TERMINATED_DURING_START = 3224830208,
    ERROR_VMCOMPUTE_IMAGE_MISMATCH = 3224830209,
    ERROR_VMCOMPUTE_HYPERV_NOT_INSTALLED = 3224830210,
    ERROR_VMCOMPUTE_OPERATION_PENDING = 3224830211,
    ERROR_VMCOMPUTE_TOO_MANY_NOTIFICATIONS = 3224830212,
    ERROR_VMCOMPUTE_INVALID_STATE = 3224830213,
    ERROR_VMCOMPUTE_UNEXPECTED_EXIT = 3224830214,
    ERROR_VMCOMPUTE_TERMINATED = 3224830215,
    ERROR_VMCOMPUTE_CONNECT_FAILED = 3224830216,
    ERROR_VMCOMPUTE_TIMEOUT = 3224830217,
    ERROR_VMCOMPUTE_CONNECTION_CLOSED = 3224830218,
    ERROR_VMCOMPUTE_UNKNOWN_MESSAGE = 3224830219,
    ERROR_VMCOMPUTE_UNSUPPORTED_PROTOCOL_VERSION = 3224830220,
    ERROR_VMCOMPUTE_INVALID_JSON = 3224830221,
    ERROR_VMCOMPUTE_SYSTEM_NOT_FOUND = 3224830222,
    ERROR_VMCOMPUTE_SYSTEM_ALREADY_EXISTS = 3224830223,
    ERROR_VMCOMPUTE_SYSTEM_ALREADY_STOPPED = 3224830224,
    ERROR_VMCOMPUTE_PROTOCOL_ERROR = 3224830225,
    ERROR_VMCOMPUTE_INVALID_LAYER = 3224830226,
    ERROR_VMCOMPUTE_WINDOWS_INSIDER_REQUIRED = 3224830227,
    ERROR_VNET_VIRTUAL_SWITCH_NAME_NOT_FOUND = 3224830464,
    ERROR_VID_REMOTE_NODE_PARENT_GPA_PAGES_USED = 2151088129,
    ERROR_VSMB_SAVED_STATE_FILE_NOT_FOUND = 3224830976,
    ERROR_VSMB_SAVED_STATE_CORRUPT = 3224830977,
    ERROR_VOLMGR_INCOMPLETE_REGENERATION = 2151153665,
    ERROR_VOLMGR_INCOMPLETE_DISK_MIGRATION = 2151153666,
    ERROR_VOLMGR_DATABASE_FULL = 3224895489,
    ERROR_VOLMGR_DISK_CONFIGURATION_CORRUPTED = 3224895490,
    ERROR_VOLMGR_DISK_CONFIGURATION_NOT_IN_SYNC = 3224895491,
    ERROR_VOLMGR_PACK_CONFIG_UPDATE_FAILED = 3224895492,
    ERROR_VOLMGR_DISK_CONTAINS_NON_SIMPLE_VOLUME = 3224895493,
    ERROR_VOLMGR_DISK_DUPLICATE = 3224895494,
    ERROR_VOLMGR_DISK_DYNAMIC = 3224895495,
    ERROR_VOLMGR_DISK_ID_INVALID = 3224895496,
    ERROR_VOLMGR_DISK_INVALID = 3224895497,
    ERROR_VOLMGR_DISK_LAST_VOTER = 3224895498,
    ERROR_VOLMGR_DISK_LAYOUT_INVALID = 3224895499,
    ERROR_VOLMGR_DISK_LAYOUT_NON_BASIC_BETWEEN_BASIC_PARTITIONS = 3224895500,
    ERROR_VOLMGR_DISK_LAYOUT_NOT_CYLINDER_ALIGNED = 3224895501,
    ERROR_VOLMGR_DISK_LAYOUT_PARTITIONS_TOO_SMALL = 3224895502,
    ERROR_VOLMGR_DISK_LAYOUT_PRIMARY_BETWEEN_LOGICAL_PARTITIONS = 3224895503,
    ERROR_VOLMGR_DISK_LAYOUT_TOO_MANY_PARTITIONS = 3224895504,
    ERROR_VOLMGR_DISK_MISSING = 3224895505,
    ERROR_VOLMGR_DISK_NOT_EMPTY = 3224895506,
    ERROR_VOLMGR_DISK_NOT_ENOUGH_SPACE = 3224895507,
    ERROR_VOLMGR_DISK_REVECTORING_FAILED = 3224895508,
    ERROR_VOLMGR_DISK_SECTOR_SIZE_INVALID = 3224895509,
    ERROR_VOLMGR_DISK_SET_NOT_CONTAINED = 3224895510,
    ERROR_VOLMGR_DISK_USED_BY_MULTIPLE_MEMBERS = 3224895511,
    ERROR_VOLMGR_DISK_USED_BY_MULTIPLE_PLEXES = 3224895512,
    ERROR_VOLMGR_DYNAMIC_DISK_NOT_SUPPORTED = 3224895513,
    ERROR_VOLMGR_EXTENT_ALREADY_USED = 3224895514,
    ERROR_VOLMGR_EXTENT_NOT_CONTIGUOUS = 3224895515,
    ERROR_VOLMGR_EXTENT_NOT_IN_PUBLIC_REGION = 3224895516,
    ERROR_VOLMGR_EXTENT_NOT_SECTOR_ALIGNED = 3224895517,
    ERROR_VOLMGR_EXTENT_OVERLAPS_EBR_PARTITION = 3224895518,
    ERROR_VOLMGR_EXTENT_VOLUME_LENGTHS_DO_NOT_MATCH = 3224895519,
    ERROR_VOLMGR_FAULT_TOLERANT_NOT_SUPPORTED = 3224895520,
    ERROR_VOLMGR_INTERLEAVE_LENGTH_INVALID = 3224895521,
    ERROR_VOLMGR_MAXIMUM_REGISTERED_USERS = 3224895522,
    ERROR_VOLMGR_MEMBER_IN_SYNC = 3224895523,
    ERROR_VOLMGR_MEMBER_INDEX_DUPLICATE = 3224895524,
    ERROR_VOLMGR_MEMBER_INDEX_INVALID = 3224895525,
    ERROR_VOLMGR_MEMBER_MISSING = 3224895526,
    ERROR_VOLMGR_MEMBER_NOT_DETACHED = 3224895527,
    ERROR_VOLMGR_MEMBER_REGENERATING = 3224895528,
    ERROR_VOLMGR_ALL_DISKS_FAILED = 3224895529,
    ERROR_VOLMGR_NO_REGISTERED_USERS = 3224895530,
    ERROR_VOLMGR_NO_SUCH_USER = 3224895531,
    ERROR_VOLMGR_NOTIFICATION_RESET = 3224895532,
    ERROR_VOLMGR_NUMBER_OF_MEMBERS_INVALID = 3224895533,
    ERROR_VOLMGR_NUMBER_OF_PLEXES_INVALID = 3224895534,
    ERROR_VOLMGR_PACK_DUPLICATE = 3224895535,
    ERROR_VOLMGR_PACK_ID_INVALID = 3224895536,
    ERROR_VOLMGR_PACK_INVALID = 3224895537,
    ERROR_VOLMGR_PACK_NAME_INVALID = 3224895538,
    ERROR_VOLMGR_PACK_OFFLINE = 3224895539,
    ERROR_VOLMGR_PACK_HAS_QUORUM = 3224895540,
    ERROR_VOLMGR_PACK_WITHOUT_QUORUM = 3224895541,
    ERROR_VOLMGR_PARTITION_STYLE_INVALID = 3224895542,
    ERROR_VOLMGR_PARTITION_UPDATE_FAILED = 3224895543,
    ERROR_VOLMGR_PLEX_IN_SYNC = 3224895544,
    ERROR_VOLMGR_PLEX_INDEX_DUPLICATE = 3224895545,
    ERROR_VOLMGR_PLEX_INDEX_INVALID = 3224895546,
    ERROR_VOLMGR_PLEX_LAST_ACTIVE = 3224895547,
    ERROR_VOLMGR_PLEX_MISSING = 3224895548,
    ERROR_VOLMGR_PLEX_REGENERATING = 3224895549,
    ERROR_VOLMGR_PLEX_TYPE_INVALID = 3224895550,
    ERROR_VOLMGR_PLEX_NOT_RAID5 = 3224895551,
    ERROR_VOLMGR_PLEX_NOT_SIMPLE = 3224895552,
    ERROR_VOLMGR_STRUCTURE_SIZE_INVALID = 3224895553,
    ERROR_VOLMGR_TOO_MANY_NOTIFICATION_REQUESTS = 3224895554,
    ERROR_VOLMGR_TRANSACTION_IN_PROGRESS = 3224895555,
    ERROR_VOLMGR_UNEXPECTED_DISK_LAYOUT_CHANGE = 3224895556,
    ERROR_VOLMGR_VOLUME_CONTAINS_MISSING_DISK = 3224895557,
    ERROR_VOLMGR_VOLUME_ID_INVALID = 3224895558,
    ERROR_VOLMGR_VOLUME_LENGTH_INVALID = 3224895559,
    ERROR_VOLMGR_VOLUME_LENGTH_NOT_SECTOR_SIZE_MULTIPLE = 3224895560,
    ERROR_VOLMGR_VOLUME_NOT_MIRRORED = 3224895561,
    ERROR_VOLMGR_VOLUME_NOT_RETAINED = 3224895562,
    ERROR_VOLMGR_VOLUME_OFFLINE = 3224895563,
    ERROR_VOLMGR_VOLUME_RETAINED = 3224895564,
    ERROR_VOLMGR_NUMBER_OF_EXTENTS_INVALID = 3224895565,
    ERROR_VOLMGR_DIFFERENT_SECTOR_SIZE = 3224895566,
    ERROR_VOLMGR_BAD_BOOT_DISK = 3224895567,
    ERROR_VOLMGR_PACK_CONFIG_OFFLINE = 3224895568,
    ERROR_VOLMGR_PACK_CONFIG_ONLINE = 3224895569,
    ERROR_VOLMGR_NOT_PRIMARY_PACK = 3224895570,
    ERROR_VOLMGR_PACK_LOG_UPDATE_FAILED = 3224895571,
    ERROR_VOLMGR_NUMBER_OF_DISKS_IN_PLEX_INVALID = 3224895572,
    ERROR_VOLMGR_NUMBER_OF_DISKS_IN_MEMBER_INVALID = 3224895573,
    ERROR_VOLMGR_VOLUME_MIRRORED = 3224895574,
    ERROR_VOLMGR_PLEX_NOT_SIMPLE_SPANNED = 3224895575,
    ERROR_VOLMGR_NO_VALID_LOG_COPIES = 3224895576,
    ERROR_VOLMGR_PRIMARY_PACK_PRESENT = 3224895577,
    ERROR_VOLMGR_NUMBER_OF_DISKS_INVALID = 3224895578,
    ERROR_VOLMGR_MIRROR_NOT_SUPPORTED = 3224895579,
    ERROR_VOLMGR_RAID5_NOT_SUPPORTED = 3224895580,
    ERROR_BCD_NOT_ALL_ENTRIES_IMPORTED = 2151219201,
    ERROR_BCD_TOO_MANY_ELEMENTS = 3224961026,
    ERROR_BCD_NOT_ALL_ENTRIES_SYNCHRONIZED = 2151219203,
    ERROR_VHD_DRIVE_FOOTER_MISSING = 3225026561,
    ERROR_VHD_DRIVE_FOOTER_CHECKSUM_MISMATCH = 3225026562,
    ERROR_VHD_DRIVE_FOOTER_CORRUPT = 3225026563,
    ERROR_VHD_FORMAT_UNKNOWN = 3225026564,
    ERROR_VHD_FORMAT_UNSUPPORTED_VERSION = 3225026565,
    ERROR_VHD_SPARSE_HEADER_CHECKSUM_MISMATCH = 3225026566,
    ERROR_VHD_SPARSE_HEADER_UNSUPPORTED_VERSION = 3225026567,
    ERROR_VHD_SPARSE_HEADER_CORRUPT = 3225026568,
    ERROR_VHD_BLOCK_ALLOCATION_FAILURE = 3225026569,
    ERROR_VHD_BLOCK_ALLOCATION_TABLE_CORRUPT = 3225026570,
    ERROR_VHD_INVALID_BLOCK_SIZE = 3225026571,
    ERROR_VHD_BITMAP_MISMATCH = 3225026572,
    ERROR_VHD_PARENT_VHD_NOT_FOUND = 3225026573,
    ERROR_VHD_CHILD_PARENT_ID_MISMATCH = 3225026574,
    ERROR_VHD_CHILD_PARENT_TIMESTAMP_MISMATCH = 3225026575,
    ERROR_VHD_METADATA_READ_FAILURE = 3225026576,
    ERROR_VHD_METADATA_WRITE_FAILURE = 3225026577,
    ERROR_VHD_INVALID_SIZE = 3225026578,
    ERROR_VHD_INVALID_FILE_SIZE = 3225026579,
    ERROR_VIRTDISK_PROVIDER_NOT_FOUND = 3225026580,
    ERROR_VIRTDISK_NOT_VIRTUAL_DISK = 3225026581,
    ERROR_VHD_PARENT_VHD_ACCESS_DENIED = 3225026582,
    ERROR_VHD_CHILD_PARENT_SIZE_MISMATCH = 3225026583,
    ERROR_VHD_DIFFERENCING_CHAIN_CYCLE_DETECTED = 3225026584,
    ERROR_VHD_DIFFERENCING_CHAIN_ERROR_IN_PARENT = 3225026585,
    ERROR_VIRTUAL_DISK_LIMITATION = 3225026586,
    ERROR_VHD_INVALID_TYPE = 3225026587,
    ERROR_VHD_INVALID_STATE = 3225026588,
    ERROR_VIRTDISK_UNSUPPORTED_DISK_SECTOR_SIZE = 3225026589,
    ERROR_VIRTDISK_DISK_ALREADY_OWNED = 3225026590,
    ERROR_VIRTDISK_DISK_ONLINE_AND_WRITABLE = 3225026591,
    ERROR_CTLOG_TRACKING_NOT_INITIALIZED = 3225026592,
    ERROR_CTLOG_LOGFILE_SIZE_EXCEEDED_MAXSIZE = 3225026593,
    ERROR_CTLOG_VHD_CHANGED_OFFLINE = 3225026594,
    ERROR_CTLOG_INVALID_TRACKING_STATE = 3225026595,
    ERROR_CTLOG_INCONSISTENT_TRACKING_FILE = 3225026596,
    ERROR_VHD_RESIZE_WOULD_TRUNCATE_DATA = 3225026597,
    ERROR_VHD_COULD_NOT_COMPUTE_MINIMUM_VIRTUAL_SIZE = 3225026598,
    ERROR_VHD_ALREADY_AT_OR_BELOW_MINIMUM_VIRTUAL_SIZE = 3225026599,
    ERROR_VHD_METADATA_FULL = 3225026600,
    ERROR_VHD_INVALID_CHANGE_TRACKING_ID = 3225026601,
    ERROR_VHD_CHANGE_TRACKING_DISABLED = 3225026602,
    ERROR_VHD_MISSING_CHANGE_TRACKING_INFORMATION = 3225026608,
    ERROR_QUERY_STORAGE_ERROR = 2151284737,
};
pub const NO_ERROR = WIN32_ERROR.NO_ERROR;
pub const WAIT_TIMEOUT = WIN32_ERROR.WAIT_TIMEOUT;
pub const WAIT_FAILED = WIN32_ERROR.WAIT_FAILED;
pub const ERROR_SUCCESS = WIN32_ERROR.NO_ERROR;
pub const ERROR_INVALID_FUNCTION = WIN32_ERROR.ERROR_INVALID_FUNCTION;
pub const ERROR_FILE_NOT_FOUND = WIN32_ERROR.ERROR_FILE_NOT_FOUND;
pub const ERROR_PATH_NOT_FOUND = WIN32_ERROR.ERROR_PATH_NOT_FOUND;
pub const ERROR_TOO_MANY_OPEN_FILES = WIN32_ERROR.ERROR_TOO_MANY_OPEN_FILES;
pub const ERROR_ACCESS_DENIED = WIN32_ERROR.ERROR_ACCESS_DENIED;
pub const ERROR_INVALID_HANDLE = WIN32_ERROR.ERROR_INVALID_HANDLE;
pub const ERROR_ARENA_TRASHED = WIN32_ERROR.ERROR_ARENA_TRASHED;
pub const ERROR_NOT_ENOUGH_MEMORY = WIN32_ERROR.ERROR_NOT_ENOUGH_MEMORY;
pub const ERROR_INVALID_BLOCK = WIN32_ERROR.ERROR_INVALID_BLOCK;
pub const ERROR_BAD_ENVIRONMENT = WIN32_ERROR.ERROR_BAD_ENVIRONMENT;
pub const ERROR_BAD_FORMAT = WIN32_ERROR.ERROR_BAD_FORMAT;
pub const ERROR_INVALID_ACCESS = WIN32_ERROR.ERROR_INVALID_ACCESS;
pub const ERROR_INVALID_DATA = WIN32_ERROR.ERROR_INVALID_DATA;
pub const ERROR_OUTOFMEMORY = WIN32_ERROR.ERROR_OUTOFMEMORY;
pub const ERROR_INVALID_DRIVE = WIN32_ERROR.ERROR_INVALID_DRIVE;
pub const ERROR_CURRENT_DIRECTORY = WIN32_ERROR.ERROR_CURRENT_DIRECTORY;
pub const ERROR_NOT_SAME_DEVICE = WIN32_ERROR.ERROR_NOT_SAME_DEVICE;
pub const ERROR_NO_MORE_FILES = WIN32_ERROR.ERROR_NO_MORE_FILES;
pub const ERROR_WRITE_PROTECT = WIN32_ERROR.ERROR_WRITE_PROTECT;
pub const ERROR_BAD_UNIT = WIN32_ERROR.ERROR_BAD_UNIT;
pub const ERROR_NOT_READY = WIN32_ERROR.ERROR_NOT_READY;
pub const ERROR_BAD_COMMAND = WIN32_ERROR.ERROR_BAD_COMMAND;
pub const ERROR_CRC = WIN32_ERROR.ERROR_CRC;
pub const ERROR_BAD_LENGTH = WIN32_ERROR.ERROR_BAD_LENGTH;
pub const ERROR_SEEK = WIN32_ERROR.ERROR_SEEK;
pub const ERROR_NOT_DOS_DISK = WIN32_ERROR.ERROR_NOT_DOS_DISK;
pub const ERROR_SECTOR_NOT_FOUND = WIN32_ERROR.ERROR_SECTOR_NOT_FOUND;
pub const ERROR_OUT_OF_PAPER = WIN32_ERROR.ERROR_OUT_OF_PAPER;
pub const ERROR_WRITE_FAULT = WIN32_ERROR.ERROR_WRITE_FAULT;
pub const ERROR_READ_FAULT = WIN32_ERROR.ERROR_READ_FAULT;
pub const ERROR_GEN_FAILURE = WIN32_ERROR.ERROR_GEN_FAILURE;
pub const ERROR_SHARING_VIOLATION = WIN32_ERROR.ERROR_SHARING_VIOLATION;
pub const ERROR_LOCK_VIOLATION = WIN32_ERROR.ERROR_LOCK_VIOLATION;
pub const ERROR_WRONG_DISK = WIN32_ERROR.ERROR_WRONG_DISK;
pub const ERROR_SHARING_BUFFER_EXCEEDED = WIN32_ERROR.ERROR_SHARING_BUFFER_EXCEEDED;
pub const ERROR_HANDLE_EOF = WIN32_ERROR.ERROR_HANDLE_EOF;
pub const ERROR_HANDLE_DISK_FULL = WIN32_ERROR.ERROR_HANDLE_DISK_FULL;
pub const ERROR_NOT_SUPPORTED = WIN32_ERROR.ERROR_NOT_SUPPORTED;
pub const ERROR_REM_NOT_LIST = WIN32_ERROR.ERROR_REM_NOT_LIST;
pub const ERROR_DUP_NAME = WIN32_ERROR.ERROR_DUP_NAME;
pub const ERROR_BAD_NETPATH = WIN32_ERROR.ERROR_BAD_NETPATH;
pub const ERROR_NETWORK_BUSY = WIN32_ERROR.ERROR_NETWORK_BUSY;
pub const ERROR_DEV_NOT_EXIST = WIN32_ERROR.ERROR_DEV_NOT_EXIST;
pub const ERROR_TOO_MANY_CMDS = WIN32_ERROR.ERROR_TOO_MANY_CMDS;
pub const ERROR_ADAP_HDW_ERR = WIN32_ERROR.ERROR_ADAP_HDW_ERR;
pub const ERROR_BAD_NET_RESP = WIN32_ERROR.ERROR_BAD_NET_RESP;
pub const ERROR_UNEXP_NET_ERR = WIN32_ERROR.ERROR_UNEXP_NET_ERR;
pub const ERROR_BAD_REM_ADAP = WIN32_ERROR.ERROR_BAD_REM_ADAP;
pub const ERROR_PRINTQ_FULL = WIN32_ERROR.ERROR_PRINTQ_FULL;
pub const ERROR_NO_SPOOL_SPACE = WIN32_ERROR.ERROR_NO_SPOOL_SPACE;
pub const ERROR_PRINT_CANCELLED = WIN32_ERROR.ERROR_PRINT_CANCELLED;
pub const ERROR_NETNAME_DELETED = WIN32_ERROR.ERROR_NETNAME_DELETED;
pub const ERROR_NETWORK_ACCESS_DENIED = WIN32_ERROR.ERROR_NETWORK_ACCESS_DENIED;
pub const ERROR_BAD_DEV_TYPE = WIN32_ERROR.ERROR_BAD_DEV_TYPE;
pub const ERROR_BAD_NET_NAME = WIN32_ERROR.ERROR_BAD_NET_NAME;
pub const ERROR_TOO_MANY_NAMES = WIN32_ERROR.ERROR_TOO_MANY_NAMES;
pub const ERROR_TOO_MANY_SESS = WIN32_ERROR.ERROR_TOO_MANY_SESS;
pub const ERROR_SHARING_PAUSED = WIN32_ERROR.ERROR_SHARING_PAUSED;
pub const ERROR_REQ_NOT_ACCEP = WIN32_ERROR.ERROR_REQ_NOT_ACCEP;
pub const ERROR_REDIR_PAUSED = WIN32_ERROR.ERROR_REDIR_PAUSED;
pub const ERROR_FILE_EXISTS = WIN32_ERROR.ERROR_FILE_EXISTS;
pub const ERROR_CANNOT_MAKE = WIN32_ERROR.ERROR_CANNOT_MAKE;
pub const ERROR_FAIL_I24 = WIN32_ERROR.ERROR_FAIL_I24;
pub const ERROR_OUT_OF_STRUCTURES = WIN32_ERROR.ERROR_OUT_OF_STRUCTURES;
pub const ERROR_ALREADY_ASSIGNED = WIN32_ERROR.ERROR_ALREADY_ASSIGNED;
pub const ERROR_INVALID_PASSWORD = WIN32_ERROR.ERROR_INVALID_PASSWORD;
pub const ERROR_INVALID_PARAMETER = WIN32_ERROR.ERROR_INVALID_PARAMETER;
pub const ERROR_NET_WRITE_FAULT = WIN32_ERROR.ERROR_NET_WRITE_FAULT;
pub const ERROR_NO_PROC_SLOTS = WIN32_ERROR.ERROR_NO_PROC_SLOTS;
pub const ERROR_TOO_MANY_SEMAPHORES = WIN32_ERROR.ERROR_TOO_MANY_SEMAPHORES;
pub const ERROR_EXCL_SEM_ALREADY_OWNED = WIN32_ERROR.ERROR_EXCL_SEM_ALREADY_OWNED;
pub const ERROR_SEM_IS_SET = WIN32_ERROR.ERROR_SEM_IS_SET;
pub const ERROR_TOO_MANY_SEM_REQUESTS = WIN32_ERROR.ERROR_TOO_MANY_SEM_REQUESTS;
pub const ERROR_INVALID_AT_INTERRUPT_TIME = WIN32_ERROR.ERROR_INVALID_AT_INTERRUPT_TIME;
pub const ERROR_SEM_OWNER_DIED = WIN32_ERROR.ERROR_SEM_OWNER_DIED;
pub const ERROR_SEM_USER_LIMIT = WIN32_ERROR.ERROR_SEM_USER_LIMIT;
pub const ERROR_DISK_CHANGE = WIN32_ERROR.ERROR_DISK_CHANGE;
pub const ERROR_DRIVE_LOCKED = WIN32_ERROR.ERROR_DRIVE_LOCKED;
pub const ERROR_BROKEN_PIPE = WIN32_ERROR.ERROR_BROKEN_PIPE;
pub const ERROR_OPEN_FAILED = WIN32_ERROR.ERROR_OPEN_FAILED;
pub const ERROR_BUFFER_OVERFLOW = WIN32_ERROR.ERROR_BUFFER_OVERFLOW;
pub const ERROR_DISK_FULL = WIN32_ERROR.ERROR_DISK_FULL;
pub const ERROR_NO_MORE_SEARCH_HANDLES = WIN32_ERROR.ERROR_NO_MORE_SEARCH_HANDLES;
pub const ERROR_INVALID_TARGET_HANDLE = WIN32_ERROR.ERROR_INVALID_TARGET_HANDLE;
pub const ERROR_INVALID_CATEGORY = WIN32_ERROR.ERROR_INVALID_CATEGORY;
pub const ERROR_INVALID_VERIFY_SWITCH = WIN32_ERROR.ERROR_INVALID_VERIFY_SWITCH;
pub const ERROR_BAD_DRIVER_LEVEL = WIN32_ERROR.ERROR_BAD_DRIVER_LEVEL;
pub const ERROR_CALL_NOT_IMPLEMENTED = WIN32_ERROR.ERROR_CALL_NOT_IMPLEMENTED;
pub const ERROR_SEM_TIMEOUT = WIN32_ERROR.ERROR_SEM_TIMEOUT;
pub const ERROR_INSUFFICIENT_BUFFER = WIN32_ERROR.ERROR_INSUFFICIENT_BUFFER;
pub const ERROR_INVALID_NAME = WIN32_ERROR.ERROR_INVALID_NAME;
pub const ERROR_INVALID_LEVEL = WIN32_ERROR.ERROR_INVALID_LEVEL;
pub const ERROR_NO_VOLUME_LABEL = WIN32_ERROR.ERROR_NO_VOLUME_LABEL;
pub const ERROR_MOD_NOT_FOUND = WIN32_ERROR.ERROR_MOD_NOT_FOUND;
pub const ERROR_PROC_NOT_FOUND = WIN32_ERROR.ERROR_PROC_NOT_FOUND;
pub const ERROR_WAIT_NO_CHILDREN = WIN32_ERROR.ERROR_WAIT_NO_CHILDREN;
pub const ERROR_CHILD_NOT_COMPLETE = WIN32_ERROR.ERROR_CHILD_NOT_COMPLETE;
pub const ERROR_DIRECT_ACCESS_HANDLE = WIN32_ERROR.ERROR_DIRECT_ACCESS_HANDLE;
pub const ERROR_NEGATIVE_SEEK = WIN32_ERROR.ERROR_NEGATIVE_SEEK;
pub const ERROR_SEEK_ON_DEVICE = WIN32_ERROR.ERROR_SEEK_ON_DEVICE;
pub const ERROR_IS_JOIN_TARGET = WIN32_ERROR.ERROR_IS_JOIN_TARGET;
pub const ERROR_IS_JOINED = WIN32_ERROR.ERROR_IS_JOINED;
pub const ERROR_IS_SUBSTED = WIN32_ERROR.ERROR_IS_SUBSTED;
pub const ERROR_NOT_JOINED = WIN32_ERROR.ERROR_NOT_JOINED;
pub const ERROR_NOT_SUBSTED = WIN32_ERROR.ERROR_NOT_SUBSTED;
pub const ERROR_JOIN_TO_JOIN = WIN32_ERROR.ERROR_JOIN_TO_JOIN;
pub const ERROR_SUBST_TO_SUBST = WIN32_ERROR.ERROR_SUBST_TO_SUBST;
pub const ERROR_JOIN_TO_SUBST = WIN32_ERROR.ERROR_JOIN_TO_SUBST;
pub const ERROR_SUBST_TO_JOIN = WIN32_ERROR.ERROR_SUBST_TO_JOIN;
pub const ERROR_BUSY_DRIVE = WIN32_ERROR.ERROR_BUSY_DRIVE;
pub const ERROR_SAME_DRIVE = WIN32_ERROR.ERROR_SAME_DRIVE;
pub const ERROR_DIR_NOT_ROOT = WIN32_ERROR.ERROR_DIR_NOT_ROOT;
pub const ERROR_DIR_NOT_EMPTY = WIN32_ERROR.ERROR_DIR_NOT_EMPTY;
pub const ERROR_IS_SUBST_PATH = WIN32_ERROR.ERROR_IS_SUBST_PATH;
pub const ERROR_IS_JOIN_PATH = WIN32_ERROR.ERROR_IS_JOIN_PATH;
pub const ERROR_PATH_BUSY = WIN32_ERROR.ERROR_PATH_BUSY;
pub const ERROR_IS_SUBST_TARGET = WIN32_ERROR.ERROR_IS_SUBST_TARGET;
pub const ERROR_SYSTEM_TRACE = WIN32_ERROR.ERROR_SYSTEM_TRACE;
pub const ERROR_INVALID_EVENT_COUNT = WIN32_ERROR.ERROR_INVALID_EVENT_COUNT;
pub const ERROR_TOO_MANY_MUXWAITERS = WIN32_ERROR.ERROR_TOO_MANY_MUXWAITERS;
pub const ERROR_INVALID_LIST_FORMAT = WIN32_ERROR.ERROR_INVALID_LIST_FORMAT;
pub const ERROR_LABEL_TOO_LONG = WIN32_ERROR.ERROR_LABEL_TOO_LONG;
pub const ERROR_TOO_MANY_TCBS = WIN32_ERROR.ERROR_TOO_MANY_TCBS;
pub const ERROR_SIGNAL_REFUSED = WIN32_ERROR.ERROR_SIGNAL_REFUSED;
pub const ERROR_DISCARDED = WIN32_ERROR.ERROR_DISCARDED;
pub const ERROR_NOT_LOCKED = WIN32_ERROR.ERROR_NOT_LOCKED;
pub const ERROR_BAD_THREADID_ADDR = WIN32_ERROR.ERROR_BAD_THREADID_ADDR;
pub const ERROR_BAD_ARGUMENTS = WIN32_ERROR.ERROR_BAD_ARGUMENTS;
pub const ERROR_BAD_PATHNAME = WIN32_ERROR.ERROR_BAD_PATHNAME;
pub const ERROR_SIGNAL_PENDING = WIN32_ERROR.ERROR_SIGNAL_PENDING;
pub const ERROR_MAX_THRDS_REACHED = WIN32_ERROR.ERROR_MAX_THRDS_REACHED;
pub const ERROR_LOCK_FAILED = WIN32_ERROR.ERROR_LOCK_FAILED;
pub const ERROR_BUSY = WIN32_ERROR.ERROR_BUSY;
pub const ERROR_DEVICE_SUPPORT_IN_PROGRESS = WIN32_ERROR.ERROR_DEVICE_SUPPORT_IN_PROGRESS;
pub const ERROR_CANCEL_VIOLATION = WIN32_ERROR.ERROR_CANCEL_VIOLATION;
pub const ERROR_ATOMIC_LOCKS_NOT_SUPPORTED = WIN32_ERROR.ERROR_ATOMIC_LOCKS_NOT_SUPPORTED;
pub const ERROR_INVALID_SEGMENT_NUMBER = WIN32_ERROR.ERROR_INVALID_SEGMENT_NUMBER;
pub const ERROR_INVALID_ORDINAL = WIN32_ERROR.ERROR_INVALID_ORDINAL;
pub const ERROR_ALREADY_EXISTS = WIN32_ERROR.ERROR_ALREADY_EXISTS;
pub const ERROR_INVALID_FLAG_NUMBER = WIN32_ERROR.ERROR_INVALID_FLAG_NUMBER;
pub const ERROR_SEM_NOT_FOUND = WIN32_ERROR.ERROR_SEM_NOT_FOUND;
pub const ERROR_INVALID_STARTING_CODESEG = WIN32_ERROR.ERROR_INVALID_STARTING_CODESEG;
pub const ERROR_INVALID_STACKSEG = WIN32_ERROR.ERROR_INVALID_STACKSEG;
pub const ERROR_INVALID_MODULETYPE = WIN32_ERROR.ERROR_INVALID_MODULETYPE;
pub const ERROR_INVALID_EXE_SIGNATURE = WIN32_ERROR.ERROR_INVALID_EXE_SIGNATURE;
pub const ERROR_EXE_MARKED_INVALID = WIN32_ERROR.ERROR_EXE_MARKED_INVALID;
pub const ERROR_BAD_EXE_FORMAT = WIN32_ERROR.ERROR_BAD_EXE_FORMAT;
pub const ERROR_ITERATED_DATA_EXCEEDS_64k = WIN32_ERROR.ERROR_ITERATED_DATA_EXCEEDS_64k;
pub const ERROR_INVALID_MINALLOCSIZE = WIN32_ERROR.ERROR_INVALID_MINALLOCSIZE;
pub const ERROR_DYNLINK_FROM_INVALID_RING = WIN32_ERROR.ERROR_DYNLINK_FROM_INVALID_RING;
pub const ERROR_IOPL_NOT_ENABLED = WIN32_ERROR.ERROR_IOPL_NOT_ENABLED;
pub const ERROR_INVALID_SEGDPL = WIN32_ERROR.ERROR_INVALID_SEGDPL;
pub const ERROR_AUTODATASEG_EXCEEDS_64k = WIN32_ERROR.ERROR_AUTODATASEG_EXCEEDS_64k;
pub const ERROR_RING2SEG_MUST_BE_MOVABLE = WIN32_ERROR.ERROR_RING2SEG_MUST_BE_MOVABLE;
pub const ERROR_RELOC_CHAIN_XEEDS_SEGLIM = WIN32_ERROR.ERROR_RELOC_CHAIN_XEEDS_SEGLIM;
pub const ERROR_INFLOOP_IN_RELOC_CHAIN = WIN32_ERROR.ERROR_INFLOOP_IN_RELOC_CHAIN;
pub const ERROR_ENVVAR_NOT_FOUND = WIN32_ERROR.ERROR_ENVVAR_NOT_FOUND;
pub const ERROR_NO_SIGNAL_SENT = WIN32_ERROR.ERROR_NO_SIGNAL_SENT;
pub const ERROR_FILENAME_EXCED_RANGE = WIN32_ERROR.ERROR_FILENAME_EXCED_RANGE;
pub const ERROR_RING2_STACK_IN_USE = WIN32_ERROR.ERROR_RING2_STACK_IN_USE;
pub const ERROR_META_EXPANSION_TOO_LONG = WIN32_ERROR.ERROR_META_EXPANSION_TOO_LONG;
pub const ERROR_INVALID_SIGNAL_NUMBER = WIN32_ERROR.ERROR_INVALID_SIGNAL_NUMBER;
pub const ERROR_THREAD_1_INACTIVE = WIN32_ERROR.ERROR_THREAD_1_INACTIVE;
pub const ERROR_LOCKED = WIN32_ERROR.ERROR_LOCKED;
pub const ERROR_TOO_MANY_MODULES = WIN32_ERROR.ERROR_TOO_MANY_MODULES;
pub const ERROR_NESTING_NOT_ALLOWED = WIN32_ERROR.ERROR_NESTING_NOT_ALLOWED;
pub const ERROR_EXE_MACHINE_TYPE_MISMATCH = WIN32_ERROR.ERROR_EXE_MACHINE_TYPE_MISMATCH;
pub const ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY = WIN32_ERROR.ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY;
pub const ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY = WIN32_ERROR.ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY;
pub const ERROR_FILE_CHECKED_OUT = WIN32_ERROR.ERROR_FILE_CHECKED_OUT;
pub const ERROR_CHECKOUT_REQUIRED = WIN32_ERROR.ERROR_CHECKOUT_REQUIRED;
pub const ERROR_BAD_FILE_TYPE = WIN32_ERROR.ERROR_BAD_FILE_TYPE;
pub const ERROR_FILE_TOO_LARGE = WIN32_ERROR.ERROR_FILE_TOO_LARGE;
pub const ERROR_FORMS_AUTH_REQUIRED = WIN32_ERROR.ERROR_FORMS_AUTH_REQUIRED;
pub const ERROR_VIRUS_INFECTED = WIN32_ERROR.ERROR_VIRUS_INFECTED;
pub const ERROR_VIRUS_DELETED = WIN32_ERROR.ERROR_VIRUS_DELETED;
pub const ERROR_PIPE_LOCAL = WIN32_ERROR.ERROR_PIPE_LOCAL;
pub const ERROR_BAD_PIPE = WIN32_ERROR.ERROR_BAD_PIPE;
pub const ERROR_PIPE_BUSY = WIN32_ERROR.ERROR_PIPE_BUSY;
pub const ERROR_NO_DATA = WIN32_ERROR.ERROR_NO_DATA;
pub const ERROR_PIPE_NOT_CONNECTED = WIN32_ERROR.ERROR_PIPE_NOT_CONNECTED;
pub const ERROR_MORE_DATA = WIN32_ERROR.ERROR_MORE_DATA;
pub const ERROR_NO_WORK_DONE = WIN32_ERROR.ERROR_NO_WORK_DONE;
pub const ERROR_VC_DISCONNECTED = WIN32_ERROR.ERROR_VC_DISCONNECTED;
pub const ERROR_INVALID_EA_NAME = WIN32_ERROR.ERROR_INVALID_EA_NAME;
pub const ERROR_EA_LIST_INCONSISTENT = WIN32_ERROR.ERROR_EA_LIST_INCONSISTENT;
pub const ERROR_NO_MORE_ITEMS = WIN32_ERROR.ERROR_NO_MORE_ITEMS;
pub const ERROR_CANNOT_COPY = WIN32_ERROR.ERROR_CANNOT_COPY;
pub const ERROR_DIRECTORY = WIN32_ERROR.ERROR_DIRECTORY;
pub const ERROR_EAS_DIDNT_FIT = WIN32_ERROR.ERROR_EAS_DIDNT_FIT;
pub const ERROR_EA_FILE_CORRUPT = WIN32_ERROR.ERROR_EA_FILE_CORRUPT;
pub const ERROR_EA_TABLE_FULL = WIN32_ERROR.ERROR_EA_TABLE_FULL;
pub const ERROR_INVALID_EA_HANDLE = WIN32_ERROR.ERROR_INVALID_EA_HANDLE;
pub const ERROR_EAS_NOT_SUPPORTED = WIN32_ERROR.ERROR_EAS_NOT_SUPPORTED;
pub const ERROR_NOT_OWNER = WIN32_ERROR.ERROR_NOT_OWNER;
pub const ERROR_TOO_MANY_POSTS = WIN32_ERROR.ERROR_TOO_MANY_POSTS;
pub const ERROR_PARTIAL_COPY = WIN32_ERROR.ERROR_PARTIAL_COPY;
pub const ERROR_OPLOCK_NOT_GRANTED = WIN32_ERROR.ERROR_OPLOCK_NOT_GRANTED;
pub const ERROR_INVALID_OPLOCK_PROTOCOL = WIN32_ERROR.ERROR_INVALID_OPLOCK_PROTOCOL;
pub const ERROR_DISK_TOO_FRAGMENTED = WIN32_ERROR.ERROR_DISK_TOO_FRAGMENTED;
pub const ERROR_DELETE_PENDING = WIN32_ERROR.ERROR_DELETE_PENDING;
pub const ERROR_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING = WIN32_ERROR.ERROR_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING;
pub const ERROR_SHORT_NAMES_NOT_ENABLED_ON_VOLUME = WIN32_ERROR.ERROR_SHORT_NAMES_NOT_ENABLED_ON_VOLUME;
pub const ERROR_SECURITY_STREAM_IS_INCONSISTENT = WIN32_ERROR.ERROR_SECURITY_STREAM_IS_INCONSISTENT;
pub const ERROR_INVALID_LOCK_RANGE = WIN32_ERROR.ERROR_INVALID_LOCK_RANGE;
pub const ERROR_IMAGE_SUBSYSTEM_NOT_PRESENT = WIN32_ERROR.ERROR_IMAGE_SUBSYSTEM_NOT_PRESENT;
pub const ERROR_NOTIFICATION_GUID_ALREADY_DEFINED = WIN32_ERROR.ERROR_NOTIFICATION_GUID_ALREADY_DEFINED;
pub const ERROR_INVALID_EXCEPTION_HANDLER = WIN32_ERROR.ERROR_INVALID_EXCEPTION_HANDLER;
pub const ERROR_DUPLICATE_PRIVILEGES = WIN32_ERROR.ERROR_DUPLICATE_PRIVILEGES;
pub const ERROR_NO_RANGES_PROCESSED = WIN32_ERROR.ERROR_NO_RANGES_PROCESSED;
pub const ERROR_NOT_ALLOWED_ON_SYSTEM_FILE = WIN32_ERROR.ERROR_NOT_ALLOWED_ON_SYSTEM_FILE;
pub const ERROR_DISK_RESOURCES_EXHAUSTED = WIN32_ERROR.ERROR_DISK_RESOURCES_EXHAUSTED;
pub const ERROR_INVALID_TOKEN = WIN32_ERROR.ERROR_INVALID_TOKEN;
pub const ERROR_DEVICE_FEATURE_NOT_SUPPORTED = WIN32_ERROR.ERROR_DEVICE_FEATURE_NOT_SUPPORTED;
pub const ERROR_MR_MID_NOT_FOUND = WIN32_ERROR.ERROR_MR_MID_NOT_FOUND;
pub const ERROR_SCOPE_NOT_FOUND = WIN32_ERROR.ERROR_SCOPE_NOT_FOUND;
pub const ERROR_UNDEFINED_SCOPE = WIN32_ERROR.ERROR_UNDEFINED_SCOPE;
pub const ERROR_INVALID_CAP = WIN32_ERROR.ERROR_INVALID_CAP;
pub const ERROR_DEVICE_UNREACHABLE = WIN32_ERROR.ERROR_DEVICE_UNREACHABLE;
pub const ERROR_DEVICE_NO_RESOURCES = WIN32_ERROR.ERROR_DEVICE_NO_RESOURCES;
pub const ERROR_DATA_CHECKSUM_ERROR = WIN32_ERROR.ERROR_DATA_CHECKSUM_ERROR;
pub const ERROR_INTERMIXED_KERNEL_EA_OPERATION = WIN32_ERROR.ERROR_INTERMIXED_KERNEL_EA_OPERATION;
pub const ERROR_FILE_LEVEL_TRIM_NOT_SUPPORTED = WIN32_ERROR.ERROR_FILE_LEVEL_TRIM_NOT_SUPPORTED;
pub const ERROR_OFFSET_ALIGNMENT_VIOLATION = WIN32_ERROR.ERROR_OFFSET_ALIGNMENT_VIOLATION;
pub const ERROR_INVALID_FIELD_IN_PARAMETER_LIST = WIN32_ERROR.ERROR_INVALID_FIELD_IN_PARAMETER_LIST;
pub const ERROR_OPERATION_IN_PROGRESS = WIN32_ERROR.ERROR_OPERATION_IN_PROGRESS;
pub const ERROR_BAD_DEVICE_PATH = WIN32_ERROR.ERROR_BAD_DEVICE_PATH;
pub const ERROR_TOO_MANY_DESCRIPTORS = WIN32_ERROR.ERROR_TOO_MANY_DESCRIPTORS;
pub const ERROR_SCRUB_DATA_DISABLED = WIN32_ERROR.ERROR_SCRUB_DATA_DISABLED;
pub const ERROR_NOT_REDUNDANT_STORAGE = WIN32_ERROR.ERROR_NOT_REDUNDANT_STORAGE;
pub const ERROR_RESIDENT_FILE_NOT_SUPPORTED = WIN32_ERROR.ERROR_RESIDENT_FILE_NOT_SUPPORTED;
pub const ERROR_COMPRESSED_FILE_NOT_SUPPORTED = WIN32_ERROR.ERROR_COMPRESSED_FILE_NOT_SUPPORTED;
pub const ERROR_DIRECTORY_NOT_SUPPORTED = WIN32_ERROR.ERROR_DIRECTORY_NOT_SUPPORTED;
pub const ERROR_NOT_READ_FROM_COPY = WIN32_ERROR.ERROR_NOT_READ_FROM_COPY;
pub const ERROR_FT_WRITE_FAILURE = WIN32_ERROR.ERROR_FT_WRITE_FAILURE;
pub const ERROR_FT_DI_SCAN_REQUIRED = WIN32_ERROR.ERROR_FT_DI_SCAN_REQUIRED;
pub const ERROR_INVALID_KERNEL_INFO_VERSION = WIN32_ERROR.ERROR_INVALID_KERNEL_INFO_VERSION;
pub const ERROR_INVALID_PEP_INFO_VERSION = WIN32_ERROR.ERROR_INVALID_PEP_INFO_VERSION;
pub const ERROR_OBJECT_NOT_EXTERNALLY_BACKED = WIN32_ERROR.ERROR_OBJECT_NOT_EXTERNALLY_BACKED;
pub const ERROR_EXTERNAL_BACKING_PROVIDER_UNKNOWN = WIN32_ERROR.ERROR_EXTERNAL_BACKING_PROVIDER_UNKNOWN;
pub const ERROR_COMPRESSION_NOT_BENEFICIAL = WIN32_ERROR.ERROR_COMPRESSION_NOT_BENEFICIAL;
pub const ERROR_STORAGE_TOPOLOGY_ID_MISMATCH = WIN32_ERROR.ERROR_STORAGE_TOPOLOGY_ID_MISMATCH;
pub const ERROR_BLOCKED_BY_PARENTAL_CONTROLS = WIN32_ERROR.ERROR_BLOCKED_BY_PARENTAL_CONTROLS;
pub const ERROR_BLOCK_TOO_MANY_REFERENCES = WIN32_ERROR.ERROR_BLOCK_TOO_MANY_REFERENCES;
pub const ERROR_MARKED_TO_DISALLOW_WRITES = WIN32_ERROR.ERROR_MARKED_TO_DISALLOW_WRITES;
pub const ERROR_ENCLAVE_FAILURE = WIN32_ERROR.ERROR_ENCLAVE_FAILURE;
pub const ERROR_FAIL_NOACTION_REBOOT = WIN32_ERROR.ERROR_FAIL_NOACTION_REBOOT;
pub const ERROR_FAIL_SHUTDOWN = WIN32_ERROR.ERROR_FAIL_SHUTDOWN;
pub const ERROR_FAIL_RESTART = WIN32_ERROR.ERROR_FAIL_RESTART;
pub const ERROR_MAX_SESSIONS_REACHED = WIN32_ERROR.ERROR_MAX_SESSIONS_REACHED;
pub const ERROR_NETWORK_ACCESS_DENIED_EDP = WIN32_ERROR.ERROR_NETWORK_ACCESS_DENIED_EDP;
pub const ERROR_DEVICE_HINT_NAME_BUFFER_TOO_SMALL = WIN32_ERROR.ERROR_DEVICE_HINT_NAME_BUFFER_TOO_SMALL;
pub const ERROR_EDP_POLICY_DENIES_OPERATION = WIN32_ERROR.ERROR_EDP_POLICY_DENIES_OPERATION;
pub const ERROR_EDP_DPL_POLICY_CANT_BE_SATISFIED = WIN32_ERROR.ERROR_EDP_DPL_POLICY_CANT_BE_SATISFIED;
pub const ERROR_CLOUD_FILE_SYNC_ROOT_METADATA_CORRUPT = WIN32_ERROR.ERROR_CLOUD_FILE_SYNC_ROOT_METADATA_CORRUPT;
pub const ERROR_DEVICE_IN_MAINTENANCE = WIN32_ERROR.ERROR_DEVICE_IN_MAINTENANCE;
pub const ERROR_NOT_SUPPORTED_ON_DAX = WIN32_ERROR.ERROR_NOT_SUPPORTED_ON_DAX;
pub const ERROR_DAX_MAPPING_EXISTS = WIN32_ERROR.ERROR_DAX_MAPPING_EXISTS;
pub const ERROR_CLOUD_FILE_PROVIDER_NOT_RUNNING = WIN32_ERROR.ERROR_CLOUD_FILE_PROVIDER_NOT_RUNNING;
pub const ERROR_CLOUD_FILE_METADATA_CORRUPT = WIN32_ERROR.ERROR_CLOUD_FILE_METADATA_CORRUPT;
pub const ERROR_CLOUD_FILE_METADATA_TOO_LARGE = WIN32_ERROR.ERROR_CLOUD_FILE_METADATA_TOO_LARGE;
pub const ERROR_CLOUD_FILE_PROPERTY_BLOB_TOO_LARGE = WIN32_ERROR.ERROR_CLOUD_FILE_PROPERTY_BLOB_TOO_LARGE;
pub const ERROR_CLOUD_FILE_PROPERTY_BLOB_CHECKSUM_MISMATCH = WIN32_ERROR.ERROR_CLOUD_FILE_PROPERTY_BLOB_CHECKSUM_MISMATCH;
pub const ERROR_CHILD_PROCESS_BLOCKED = WIN32_ERROR.ERROR_CHILD_PROCESS_BLOCKED;
pub const ERROR_STORAGE_LOST_DATA_PERSISTENCE = WIN32_ERROR.ERROR_STORAGE_LOST_DATA_PERSISTENCE;
pub const ERROR_FILE_SYSTEM_VIRTUALIZATION_UNAVAILABLE = WIN32_ERROR.ERROR_FILE_SYSTEM_VIRTUALIZATION_UNAVAILABLE;
pub const ERROR_FILE_SYSTEM_VIRTUALIZATION_METADATA_CORRUPT = WIN32_ERROR.ERROR_FILE_SYSTEM_VIRTUALIZATION_METADATA_CORRUPT;
pub const ERROR_FILE_SYSTEM_VIRTUALIZATION_BUSY = WIN32_ERROR.ERROR_FILE_SYSTEM_VIRTUALIZATION_BUSY;
pub const ERROR_FILE_SYSTEM_VIRTUALIZATION_PROVIDER_UNKNOWN = WIN32_ERROR.ERROR_FILE_SYSTEM_VIRTUALIZATION_PROVIDER_UNKNOWN;
pub const ERROR_GDI_HANDLE_LEAK = WIN32_ERROR.ERROR_GDI_HANDLE_LEAK;
pub const ERROR_CLOUD_FILE_TOO_MANY_PROPERTY_BLOBS = WIN32_ERROR.ERROR_CLOUD_FILE_TOO_MANY_PROPERTY_BLOBS;
pub const ERROR_CLOUD_FILE_PROPERTY_VERSION_NOT_SUPPORTED = WIN32_ERROR.ERROR_CLOUD_FILE_PROPERTY_VERSION_NOT_SUPPORTED;
pub const ERROR_NOT_A_CLOUD_FILE = WIN32_ERROR.ERROR_NOT_A_CLOUD_FILE;
pub const ERROR_CLOUD_FILE_NOT_IN_SYNC = WIN32_ERROR.ERROR_CLOUD_FILE_NOT_IN_SYNC;
pub const ERROR_CLOUD_FILE_ALREADY_CONNECTED = WIN32_ERROR.ERROR_CLOUD_FILE_ALREADY_CONNECTED;
pub const ERROR_CLOUD_FILE_NOT_SUPPORTED = WIN32_ERROR.ERROR_CLOUD_FILE_NOT_SUPPORTED;
pub const ERROR_CLOUD_FILE_INVALID_REQUEST = WIN32_ERROR.ERROR_CLOUD_FILE_INVALID_REQUEST;
pub const ERROR_CLOUD_FILE_READ_ONLY_VOLUME = WIN32_ERROR.ERROR_CLOUD_FILE_READ_ONLY_VOLUME;
pub const ERROR_CLOUD_FILE_CONNECTED_PROVIDER_ONLY = WIN32_ERROR.ERROR_CLOUD_FILE_CONNECTED_PROVIDER_ONLY;
pub const ERROR_CLOUD_FILE_VALIDATION_FAILED = WIN32_ERROR.ERROR_CLOUD_FILE_VALIDATION_FAILED;
pub const ERROR_SMB1_NOT_AVAILABLE = WIN32_ERROR.ERROR_SMB1_NOT_AVAILABLE;
pub const ERROR_FILE_SYSTEM_VIRTUALIZATION_INVALID_OPERATION = WIN32_ERROR.ERROR_FILE_SYSTEM_VIRTUALIZATION_INVALID_OPERATION;
pub const ERROR_CLOUD_FILE_AUTHENTICATION_FAILED = WIN32_ERROR.ERROR_CLOUD_FILE_AUTHENTICATION_FAILED;
pub const ERROR_CLOUD_FILE_INSUFFICIENT_RESOURCES = WIN32_ERROR.ERROR_CLOUD_FILE_INSUFFICIENT_RESOURCES;
pub const ERROR_CLOUD_FILE_NETWORK_UNAVAILABLE = WIN32_ERROR.ERROR_CLOUD_FILE_NETWORK_UNAVAILABLE;
pub const ERROR_CLOUD_FILE_UNSUCCESSFUL = WIN32_ERROR.ERROR_CLOUD_FILE_UNSUCCESSFUL;
pub const ERROR_CLOUD_FILE_NOT_UNDER_SYNC_ROOT = WIN32_ERROR.ERROR_CLOUD_FILE_NOT_UNDER_SYNC_ROOT;
pub const ERROR_CLOUD_FILE_IN_USE = WIN32_ERROR.ERROR_CLOUD_FILE_IN_USE;
pub const ERROR_CLOUD_FILE_PINNED = WIN32_ERROR.ERROR_CLOUD_FILE_PINNED;
pub const ERROR_CLOUD_FILE_REQUEST_ABORTED = WIN32_ERROR.ERROR_CLOUD_FILE_REQUEST_ABORTED;
pub const ERROR_CLOUD_FILE_PROPERTY_CORRUPT = WIN32_ERROR.ERROR_CLOUD_FILE_PROPERTY_CORRUPT;
pub const ERROR_CLOUD_FILE_ACCESS_DENIED = WIN32_ERROR.ERROR_CLOUD_FILE_ACCESS_DENIED;
pub const ERROR_CLOUD_FILE_INCOMPATIBLE_HARDLINKS = WIN32_ERROR.ERROR_CLOUD_FILE_INCOMPATIBLE_HARDLINKS;
pub const ERROR_CLOUD_FILE_PROPERTY_LOCK_CONFLICT = WIN32_ERROR.ERROR_CLOUD_FILE_PROPERTY_LOCK_CONFLICT;
pub const ERROR_CLOUD_FILE_REQUEST_CANCELED = WIN32_ERROR.ERROR_CLOUD_FILE_REQUEST_CANCELED;
pub const ERROR_EXTERNAL_SYSKEY_NOT_SUPPORTED = WIN32_ERROR.ERROR_EXTERNAL_SYSKEY_NOT_SUPPORTED;
pub const ERROR_THREAD_MODE_ALREADY_BACKGROUND = WIN32_ERROR.ERROR_THREAD_MODE_ALREADY_BACKGROUND;
pub const ERROR_THREAD_MODE_NOT_BACKGROUND = WIN32_ERROR.ERROR_THREAD_MODE_NOT_BACKGROUND;
pub const ERROR_PROCESS_MODE_ALREADY_BACKGROUND = WIN32_ERROR.ERROR_PROCESS_MODE_ALREADY_BACKGROUND;
pub const ERROR_PROCESS_MODE_NOT_BACKGROUND = WIN32_ERROR.ERROR_PROCESS_MODE_NOT_BACKGROUND;
pub const ERROR_CLOUD_FILE_PROVIDER_TERMINATED = WIN32_ERROR.ERROR_CLOUD_FILE_PROVIDER_TERMINATED;
pub const ERROR_NOT_A_CLOUD_SYNC_ROOT = WIN32_ERROR.ERROR_NOT_A_CLOUD_SYNC_ROOT;
pub const ERROR_FILE_PROTECTED_UNDER_DPL = WIN32_ERROR.ERROR_FILE_PROTECTED_UNDER_DPL;
pub const ERROR_VOLUME_NOT_CLUSTER_ALIGNED = WIN32_ERROR.ERROR_VOLUME_NOT_CLUSTER_ALIGNED;
pub const ERROR_NO_PHYSICALLY_ALIGNED_FREE_SPACE_FOUND = WIN32_ERROR.ERROR_NO_PHYSICALLY_ALIGNED_FREE_SPACE_FOUND;
pub const ERROR_APPX_FILE_NOT_ENCRYPTED = WIN32_ERROR.ERROR_APPX_FILE_NOT_ENCRYPTED;
pub const ERROR_RWRAW_ENCRYPTED_FILE_NOT_ENCRYPTED = WIN32_ERROR.ERROR_RWRAW_ENCRYPTED_FILE_NOT_ENCRYPTED;
pub const ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILEOFFSET = WIN32_ERROR.ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILEOFFSET;
pub const ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILERANGE = WIN32_ERROR.ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILERANGE;
pub const ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_PARAMETER = WIN32_ERROR.ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_PARAMETER;
pub const ERROR_LINUX_SUBSYSTEM_NOT_PRESENT = WIN32_ERROR.ERROR_LINUX_SUBSYSTEM_NOT_PRESENT;
pub const ERROR_FT_READ_FAILURE = WIN32_ERROR.ERROR_FT_READ_FAILURE;
pub const ERROR_STORAGE_RESERVE_ID_INVALID = WIN32_ERROR.ERROR_STORAGE_RESERVE_ID_INVALID;
pub const ERROR_STORAGE_RESERVE_DOES_NOT_EXIST = WIN32_ERROR.ERROR_STORAGE_RESERVE_DOES_NOT_EXIST;
pub const ERROR_STORAGE_RESERVE_ALREADY_EXISTS = WIN32_ERROR.ERROR_STORAGE_RESERVE_ALREADY_EXISTS;
pub const ERROR_STORAGE_RESERVE_NOT_EMPTY = WIN32_ERROR.ERROR_STORAGE_RESERVE_NOT_EMPTY;
pub const ERROR_NOT_A_DAX_VOLUME = WIN32_ERROR.ERROR_NOT_A_DAX_VOLUME;
pub const ERROR_NOT_DAX_MAPPABLE = WIN32_ERROR.ERROR_NOT_DAX_MAPPABLE;
pub const ERROR_TIME_SENSITIVE_THREAD = WIN32_ERROR.ERROR_TIME_SENSITIVE_THREAD;
pub const ERROR_DPL_NOT_SUPPORTED_FOR_USER = WIN32_ERROR.ERROR_DPL_NOT_SUPPORTED_FOR_USER;
pub const ERROR_CASE_DIFFERING_NAMES_IN_DIR = WIN32_ERROR.ERROR_CASE_DIFFERING_NAMES_IN_DIR;
pub const ERROR_FILE_NOT_SUPPORTED = WIN32_ERROR.ERROR_FILE_NOT_SUPPORTED;
pub const ERROR_CLOUD_FILE_REQUEST_TIMEOUT = WIN32_ERROR.ERROR_CLOUD_FILE_REQUEST_TIMEOUT;
pub const ERROR_NO_TASK_QUEUE = WIN32_ERROR.ERROR_NO_TASK_QUEUE;
pub const ERROR_SRC_SRV_DLL_LOAD_FAILED = WIN32_ERROR.ERROR_SRC_SRV_DLL_LOAD_FAILED;
pub const ERROR_NOT_SUPPORTED_WITH_BTT = WIN32_ERROR.ERROR_NOT_SUPPORTED_WITH_BTT;
pub const ERROR_ENCRYPTION_DISABLED = WIN32_ERROR.ERROR_ENCRYPTION_DISABLED;
pub const ERROR_ENCRYPTING_METADATA_DISALLOWED = WIN32_ERROR.ERROR_ENCRYPTING_METADATA_DISALLOWED;
pub const ERROR_CANT_CLEAR_ENCRYPTION_FLAG = WIN32_ERROR.ERROR_CANT_CLEAR_ENCRYPTION_FLAG;
pub const ERROR_NO_SUCH_DEVICE = WIN32_ERROR.ERROR_NO_SUCH_DEVICE;
pub const ERROR_CLOUD_FILE_DEHYDRATION_DISALLOWED = WIN32_ERROR.ERROR_CLOUD_FILE_DEHYDRATION_DISALLOWED;
pub const ERROR_FILE_SNAP_IN_PROGRESS = WIN32_ERROR.ERROR_FILE_SNAP_IN_PROGRESS;
pub const ERROR_FILE_SNAP_USER_SECTION_NOT_SUPPORTED = WIN32_ERROR.ERROR_FILE_SNAP_USER_SECTION_NOT_SUPPORTED;
pub const ERROR_FILE_SNAP_MODIFY_NOT_SUPPORTED = WIN32_ERROR.ERROR_FILE_SNAP_MODIFY_NOT_SUPPORTED;
pub const ERROR_FILE_SNAP_IO_NOT_COORDINATED = WIN32_ERROR.ERROR_FILE_SNAP_IO_NOT_COORDINATED;
pub const ERROR_FILE_SNAP_UNEXPECTED_ERROR = WIN32_ERROR.ERROR_FILE_SNAP_UNEXPECTED_ERROR;
pub const ERROR_FILE_SNAP_INVALID_PARAMETER = WIN32_ERROR.ERROR_FILE_SNAP_INVALID_PARAMETER;
pub const ERROR_UNSATISFIED_DEPENDENCIES = WIN32_ERROR.ERROR_UNSATISFIED_DEPENDENCIES;
pub const ERROR_CASE_SENSITIVE_PATH = WIN32_ERROR.ERROR_CASE_SENSITIVE_PATH;
pub const ERROR_UNEXPECTED_NTCACHEMANAGER_ERROR = WIN32_ERROR.ERROR_UNEXPECTED_NTCACHEMANAGER_ERROR;
pub const ERROR_LINUX_SUBSYSTEM_UPDATE_REQUIRED = WIN32_ERROR.ERROR_LINUX_SUBSYSTEM_UPDATE_REQUIRED;
pub const ERROR_DLP_POLICY_WARNS_AGAINST_OPERATION = WIN32_ERROR.ERROR_DLP_POLICY_WARNS_AGAINST_OPERATION;
pub const ERROR_DLP_POLICY_DENIES_OPERATION = WIN32_ERROR.ERROR_DLP_POLICY_DENIES_OPERATION;
pub const ERROR_SECURITY_DENIES_OPERATION = WIN32_ERROR.ERROR_SECURITY_DENIES_OPERATION;
pub const ERROR_UNTRUSTED_MOUNT_POINT = WIN32_ERROR.ERROR_UNTRUSTED_MOUNT_POINT;
pub const ERROR_DLP_POLICY_SILENTLY_FAIL = WIN32_ERROR.ERROR_DLP_POLICY_SILENTLY_FAIL;
pub const ERROR_CAPAUTHZ_NOT_DEVUNLOCKED = WIN32_ERROR.ERROR_CAPAUTHZ_NOT_DEVUNLOCKED;
pub const ERROR_CAPAUTHZ_CHANGE_TYPE = WIN32_ERROR.ERROR_CAPAUTHZ_CHANGE_TYPE;
pub const ERROR_CAPAUTHZ_NOT_PROVISIONED = WIN32_ERROR.ERROR_CAPAUTHZ_NOT_PROVISIONED;
pub const ERROR_CAPAUTHZ_NOT_AUTHORIZED = WIN32_ERROR.ERROR_CAPAUTHZ_NOT_AUTHORIZED;
pub const ERROR_CAPAUTHZ_NO_POLICY = WIN32_ERROR.ERROR_CAPAUTHZ_NO_POLICY;
pub const ERROR_CAPAUTHZ_DB_CORRUPTED = WIN32_ERROR.ERROR_CAPAUTHZ_DB_CORRUPTED;
pub const ERROR_CAPAUTHZ_SCCD_INVALID_CATALOG = WIN32_ERROR.ERROR_CAPAUTHZ_SCCD_INVALID_CATALOG;
pub const ERROR_CAPAUTHZ_SCCD_NO_AUTH_ENTITY = WIN32_ERROR.ERROR_CAPAUTHZ_SCCD_NO_AUTH_ENTITY;
pub const ERROR_CAPAUTHZ_SCCD_PARSE_ERROR = WIN32_ERROR.ERROR_CAPAUTHZ_SCCD_PARSE_ERROR;
pub const ERROR_CAPAUTHZ_SCCD_DEV_MODE_REQUIRED = WIN32_ERROR.ERROR_CAPAUTHZ_SCCD_DEV_MODE_REQUIRED;
pub const ERROR_CAPAUTHZ_SCCD_NO_CAPABILITY_MATCH = WIN32_ERROR.ERROR_CAPAUTHZ_SCCD_NO_CAPABILITY_MATCH;
pub const ERROR_CIMFS_IMAGE_CORRUPT = WIN32_ERROR.ERROR_CIMFS_IMAGE_CORRUPT;
pub const ERROR_CIMFS_IMAGE_VERSION_NOT_SUPPORTED = WIN32_ERROR.ERROR_CIMFS_IMAGE_VERSION_NOT_SUPPORTED;
pub const ERROR_STORAGE_STACK_ACCESS_DENIED = WIN32_ERROR.ERROR_STORAGE_STACK_ACCESS_DENIED;
pub const ERROR_INSUFFICIENT_VIRTUAL_ADDR_RESOURCES = WIN32_ERROR.ERROR_INSUFFICIENT_VIRTUAL_ADDR_RESOURCES;
pub const ERROR_INDEX_OUT_OF_BOUNDS = WIN32_ERROR.ERROR_INDEX_OUT_OF_BOUNDS;
pub const ERROR_PNP_QUERY_REMOVE_DEVICE_TIMEOUT = WIN32_ERROR.ERROR_PNP_QUERY_REMOVE_DEVICE_TIMEOUT;
pub const ERROR_PNP_QUERY_REMOVE_RELATED_DEVICE_TIMEOUT = WIN32_ERROR.ERROR_PNP_QUERY_REMOVE_RELATED_DEVICE_TIMEOUT;
pub const ERROR_PNP_QUERY_REMOVE_UNRELATED_DEVICE_TIMEOUT = WIN32_ERROR.ERROR_PNP_QUERY_REMOVE_UNRELATED_DEVICE_TIMEOUT;
pub const ERROR_DEVICE_HARDWARE_ERROR = WIN32_ERROR.ERROR_DEVICE_HARDWARE_ERROR;
pub const ERROR_INVALID_ADDRESS = WIN32_ERROR.ERROR_INVALID_ADDRESS;
pub const ERROR_HAS_SYSTEM_CRITICAL_FILES = WIN32_ERROR.ERROR_HAS_SYSTEM_CRITICAL_FILES;
pub const ERROR_ENCRYPTED_FILE_NOT_SUPPORTED = WIN32_ERROR.ERROR_ENCRYPTED_FILE_NOT_SUPPORTED;
pub const ERROR_SPARSE_FILE_NOT_SUPPORTED = WIN32_ERROR.ERROR_SPARSE_FILE_NOT_SUPPORTED;
pub const ERROR_PAGEFILE_NOT_SUPPORTED = WIN32_ERROR.ERROR_PAGEFILE_NOT_SUPPORTED;
pub const ERROR_VOLUME_NOT_SUPPORTED = WIN32_ERROR.ERROR_VOLUME_NOT_SUPPORTED;
pub const ERROR_NOT_SUPPORTED_WITH_BYPASSIO = WIN32_ERROR.ERROR_NOT_SUPPORTED_WITH_BYPASSIO;
pub const ERROR_NO_BYPASSIO_DRIVER_SUPPORT = WIN32_ERROR.ERROR_NO_BYPASSIO_DRIVER_SUPPORT;
pub const ERROR_NOT_SUPPORTED_WITH_ENCRYPTION = WIN32_ERROR.ERROR_NOT_SUPPORTED_WITH_ENCRYPTION;
pub const ERROR_NOT_SUPPORTED_WITH_COMPRESSION = WIN32_ERROR.ERROR_NOT_SUPPORTED_WITH_COMPRESSION;
pub const ERROR_NOT_SUPPORTED_WITH_REPLICATION = WIN32_ERROR.ERROR_NOT_SUPPORTED_WITH_REPLICATION;
pub const ERROR_NOT_SUPPORTED_WITH_DEDUPLICATION = WIN32_ERROR.ERROR_NOT_SUPPORTED_WITH_DEDUPLICATION;
pub const ERROR_NOT_SUPPORTED_WITH_AUDITING = WIN32_ERROR.ERROR_NOT_SUPPORTED_WITH_AUDITING;
pub const ERROR_USER_PROFILE_LOAD = WIN32_ERROR.ERROR_USER_PROFILE_LOAD;
pub const ERROR_SESSION_KEY_TOO_SHORT = WIN32_ERROR.ERROR_SESSION_KEY_TOO_SHORT;
pub const ERROR_ACCESS_DENIED_APPDATA = WIN32_ERROR.ERROR_ACCESS_DENIED_APPDATA;
pub const ERROR_NOT_SUPPORTED_WITH_MONITORING = WIN32_ERROR.ERROR_NOT_SUPPORTED_WITH_MONITORING;
pub const ERROR_NOT_SUPPORTED_WITH_SNAPSHOT = WIN32_ERROR.ERROR_NOT_SUPPORTED_WITH_SNAPSHOT;
pub const ERROR_NOT_SUPPORTED_WITH_VIRTUALIZATION = WIN32_ERROR.ERROR_NOT_SUPPORTED_WITH_VIRTUALIZATION;
pub const ERROR_BYPASSIO_FLT_NOT_SUPPORTED = WIN32_ERROR.ERROR_BYPASSIO_FLT_NOT_SUPPORTED;
pub const ERROR_DEVICE_RESET_REQUIRED = WIN32_ERROR.ERROR_DEVICE_RESET_REQUIRED;
pub const ERROR_VOLUME_WRITE_ACCESS_DENIED = WIN32_ERROR.ERROR_VOLUME_WRITE_ACCESS_DENIED;
pub const ERROR_ARITHMETIC_OVERFLOW = WIN32_ERROR.ERROR_ARITHMETIC_OVERFLOW;
pub const ERROR_PIPE_CONNECTED = WIN32_ERROR.ERROR_PIPE_CONNECTED;
pub const ERROR_PIPE_LISTENING = WIN32_ERROR.ERROR_PIPE_LISTENING;
pub const ERROR_VERIFIER_STOP = WIN32_ERROR.ERROR_VERIFIER_STOP;
pub const ERROR_ABIOS_ERROR = WIN32_ERROR.ERROR_ABIOS_ERROR;
pub const ERROR_WX86_WARNING = WIN32_ERROR.ERROR_WX86_WARNING;
pub const ERROR_WX86_ERROR = WIN32_ERROR.ERROR_WX86_ERROR;
pub const ERROR_TIMER_NOT_CANCELED = WIN32_ERROR.ERROR_TIMER_NOT_CANCELED;
pub const ERROR_UNWIND = WIN32_ERROR.ERROR_UNWIND;
pub const ERROR_BAD_STACK = WIN32_ERROR.ERROR_BAD_STACK;
pub const ERROR_INVALID_UNWIND_TARGET = WIN32_ERROR.ERROR_INVALID_UNWIND_TARGET;
pub const ERROR_INVALID_PORT_ATTRIBUTES = WIN32_ERROR.ERROR_INVALID_PORT_ATTRIBUTES;
pub const ERROR_PORT_MESSAGE_TOO_LONG = WIN32_ERROR.ERROR_PORT_MESSAGE_TOO_LONG;
pub const ERROR_INVALID_QUOTA_LOWER = WIN32_ERROR.ERROR_INVALID_QUOTA_LOWER;
pub const ERROR_DEVICE_ALREADY_ATTACHED = WIN32_ERROR.ERROR_DEVICE_ALREADY_ATTACHED;
pub const ERROR_INSTRUCTION_MISALIGNMENT = WIN32_ERROR.ERROR_INSTRUCTION_MISALIGNMENT;
pub const ERROR_PROFILING_NOT_STARTED = WIN32_ERROR.ERROR_PROFILING_NOT_STARTED;
pub const ERROR_PROFILING_NOT_STOPPED = WIN32_ERROR.ERROR_PROFILING_NOT_STOPPED;
pub const ERROR_COULD_NOT_INTERPRET = WIN32_ERROR.ERROR_COULD_NOT_INTERPRET;
pub const ERROR_PROFILING_AT_LIMIT = WIN32_ERROR.ERROR_PROFILING_AT_LIMIT;
pub const ERROR_CANT_WAIT = WIN32_ERROR.ERROR_CANT_WAIT;
pub const ERROR_CANT_TERMINATE_SELF = WIN32_ERROR.ERROR_CANT_TERMINATE_SELF;
pub const ERROR_UNEXPECTED_MM_CREATE_ERR = WIN32_ERROR.ERROR_UNEXPECTED_MM_CREATE_ERR;
pub const ERROR_UNEXPECTED_MM_MAP_ERROR = WIN32_ERROR.ERROR_UNEXPECTED_MM_MAP_ERROR;
pub const ERROR_UNEXPECTED_MM_EXTEND_ERR = WIN32_ERROR.ERROR_UNEXPECTED_MM_EXTEND_ERR;
pub const ERROR_BAD_FUNCTION_TABLE = WIN32_ERROR.ERROR_BAD_FUNCTION_TABLE;
pub const ERROR_NO_GUID_TRANSLATION = WIN32_ERROR.ERROR_NO_GUID_TRANSLATION;
pub const ERROR_INVALID_LDT_SIZE = WIN32_ERROR.ERROR_INVALID_LDT_SIZE;
pub const ERROR_INVALID_LDT_OFFSET = WIN32_ERROR.ERROR_INVALID_LDT_OFFSET;
pub const ERROR_INVALID_LDT_DESCRIPTOR = WIN32_ERROR.ERROR_INVALID_LDT_DESCRIPTOR;
pub const ERROR_TOO_MANY_THREADS = WIN32_ERROR.ERROR_TOO_MANY_THREADS;
pub const ERROR_THREAD_NOT_IN_PROCESS = WIN32_ERROR.ERROR_THREAD_NOT_IN_PROCESS;
pub const ERROR_PAGEFILE_QUOTA_EXCEEDED = WIN32_ERROR.ERROR_PAGEFILE_QUOTA_EXCEEDED;
pub const ERROR_LOGON_SERVER_CONFLICT = WIN32_ERROR.ERROR_LOGON_SERVER_CONFLICT;
pub const ERROR_SYNCHRONIZATION_REQUIRED = WIN32_ERROR.ERROR_SYNCHRONIZATION_REQUIRED;
pub const ERROR_NET_OPEN_FAILED = WIN32_ERROR.ERROR_NET_OPEN_FAILED;
pub const ERROR_IO_PRIVILEGE_FAILED = WIN32_ERROR.ERROR_IO_PRIVILEGE_FAILED;
pub const ERROR_CONTROL_C_EXIT = WIN32_ERROR.ERROR_CONTROL_C_EXIT;
pub const ERROR_MISSING_SYSTEMFILE = WIN32_ERROR.ERROR_MISSING_SYSTEMFILE;
pub const ERROR_UNHANDLED_EXCEPTION = WIN32_ERROR.ERROR_UNHANDLED_EXCEPTION;
pub const ERROR_APP_INIT_FAILURE = WIN32_ERROR.ERROR_APP_INIT_FAILURE;
pub const ERROR_PAGEFILE_CREATE_FAILED = WIN32_ERROR.ERROR_PAGEFILE_CREATE_FAILED;
pub const ERROR_INVALID_IMAGE_HASH = WIN32_ERROR.ERROR_INVALID_IMAGE_HASH;
pub const ERROR_NO_PAGEFILE = WIN32_ERROR.ERROR_NO_PAGEFILE;
pub const ERROR_ILLEGAL_FLOAT_CONTEXT = WIN32_ERROR.ERROR_ILLEGAL_FLOAT_CONTEXT;
pub const ERROR_NO_EVENT_PAIR = WIN32_ERROR.ERROR_NO_EVENT_PAIR;
pub const ERROR_DOMAIN_CTRLR_CONFIG_ERROR = WIN32_ERROR.ERROR_DOMAIN_CTRLR_CONFIG_ERROR;
pub const ERROR_ILLEGAL_CHARACTER = WIN32_ERROR.ERROR_ILLEGAL_CHARACTER;
pub const ERROR_UNDEFINED_CHARACTER = WIN32_ERROR.ERROR_UNDEFINED_CHARACTER;
pub const ERROR_FLOPPY_VOLUME = WIN32_ERROR.ERROR_FLOPPY_VOLUME;
pub const ERROR_BIOS_FAILED_TO_CONNECT_INTERRUPT = WIN32_ERROR.ERROR_BIOS_FAILED_TO_CONNECT_INTERRUPT;
pub const ERROR_BACKUP_CONTROLLER = WIN32_ERROR.ERROR_BACKUP_CONTROLLER;
pub const ERROR_MUTANT_LIMIT_EXCEEDED = WIN32_ERROR.ERROR_MUTANT_LIMIT_EXCEEDED;
pub const ERROR_FS_DRIVER_REQUIRED = WIN32_ERROR.ERROR_FS_DRIVER_REQUIRED;
pub const ERROR_CANNOT_LOAD_REGISTRY_FILE = WIN32_ERROR.ERROR_CANNOT_LOAD_REGISTRY_FILE;
pub const ERROR_DEBUG_ATTACH_FAILED = WIN32_ERROR.ERROR_DEBUG_ATTACH_FAILED;
pub const ERROR_SYSTEM_PROCESS_TERMINATED = WIN32_ERROR.ERROR_SYSTEM_PROCESS_TERMINATED;
pub const ERROR_DATA_NOT_ACCEPTED = WIN32_ERROR.ERROR_DATA_NOT_ACCEPTED;
pub const ERROR_VDM_HARD_ERROR = WIN32_ERROR.ERROR_VDM_HARD_ERROR;
pub const ERROR_DRIVER_CANCEL_TIMEOUT = WIN32_ERROR.ERROR_DRIVER_CANCEL_TIMEOUT;
pub const ERROR_REPLY_MESSAGE_MISMATCH = WIN32_ERROR.ERROR_REPLY_MESSAGE_MISMATCH;
pub const ERROR_LOST_WRITEBEHIND_DATA = WIN32_ERROR.ERROR_LOST_WRITEBEHIND_DATA;
pub const ERROR_CLIENT_SERVER_PARAMETERS_INVALID = WIN32_ERROR.ERROR_CLIENT_SERVER_PARAMETERS_INVALID;
pub const ERROR_NOT_TINY_STREAM = WIN32_ERROR.ERROR_NOT_TINY_STREAM;
pub const ERROR_STACK_OVERFLOW_READ = WIN32_ERROR.ERROR_STACK_OVERFLOW_READ;
pub const ERROR_CONVERT_TO_LARGE = WIN32_ERROR.ERROR_CONVERT_TO_LARGE;
pub const ERROR_FOUND_OUT_OF_SCOPE = WIN32_ERROR.ERROR_FOUND_OUT_OF_SCOPE;
pub const ERROR_ALLOCATE_BUCKET = WIN32_ERROR.ERROR_ALLOCATE_BUCKET;
pub const ERROR_MARSHALL_OVERFLOW = WIN32_ERROR.ERROR_MARSHALL_OVERFLOW;
pub const ERROR_INVALID_VARIANT = WIN32_ERROR.ERROR_INVALID_VARIANT;
pub const ERROR_BAD_COMPRESSION_BUFFER = WIN32_ERROR.ERROR_BAD_COMPRESSION_BUFFER;
pub const ERROR_AUDIT_FAILED = WIN32_ERROR.ERROR_AUDIT_FAILED;
pub const ERROR_TIMER_RESOLUTION_NOT_SET = WIN32_ERROR.ERROR_TIMER_RESOLUTION_NOT_SET;
pub const ERROR_INSUFFICIENT_LOGON_INFO = WIN32_ERROR.ERROR_INSUFFICIENT_LOGON_INFO;
pub const ERROR_BAD_DLL_ENTRYPOINT = WIN32_ERROR.ERROR_BAD_DLL_ENTRYPOINT;
pub const ERROR_BAD_SERVICE_ENTRYPOINT = WIN32_ERROR.ERROR_BAD_SERVICE_ENTRYPOINT;
pub const ERROR_IP_ADDRESS_CONFLICT1 = WIN32_ERROR.ERROR_IP_ADDRESS_CONFLICT1;
pub const ERROR_IP_ADDRESS_CONFLICT2 = WIN32_ERROR.ERROR_IP_ADDRESS_CONFLICT2;
pub const ERROR_REGISTRY_QUOTA_LIMIT = WIN32_ERROR.ERROR_REGISTRY_QUOTA_LIMIT;
pub const ERROR_NO_CALLBACK_ACTIVE = WIN32_ERROR.ERROR_NO_CALLBACK_ACTIVE;
pub const ERROR_PWD_TOO_SHORT = WIN32_ERROR.ERROR_PWD_TOO_SHORT;
pub const ERROR_PWD_TOO_RECENT = WIN32_ERROR.ERROR_PWD_TOO_RECENT;
pub const ERROR_PWD_HISTORY_CONFLICT = WIN32_ERROR.ERROR_PWD_HISTORY_CONFLICT;
pub const ERROR_UNSUPPORTED_COMPRESSION = WIN32_ERROR.ERROR_UNSUPPORTED_COMPRESSION;
pub const ERROR_INVALID_HW_PROFILE = WIN32_ERROR.ERROR_INVALID_HW_PROFILE;
pub const ERROR_INVALID_PLUGPLAY_DEVICE_PATH = WIN32_ERROR.ERROR_INVALID_PLUGPLAY_DEVICE_PATH;
pub const ERROR_QUOTA_LIST_INCONSISTENT = WIN32_ERROR.ERROR_QUOTA_LIST_INCONSISTENT;
pub const ERROR_EVALUATION_EXPIRATION = WIN32_ERROR.ERROR_EVALUATION_EXPIRATION;
pub const ERROR_ILLEGAL_DLL_RELOCATION = WIN32_ERROR.ERROR_ILLEGAL_DLL_RELOCATION;
pub const ERROR_DLL_INIT_FAILED_LOGOFF = WIN32_ERROR.ERROR_DLL_INIT_FAILED_LOGOFF;
pub const ERROR_VALIDATE_CONTINUE = WIN32_ERROR.ERROR_VALIDATE_CONTINUE;
pub const ERROR_NO_MORE_MATCHES = WIN32_ERROR.ERROR_NO_MORE_MATCHES;
pub const ERROR_RANGE_LIST_CONFLICT = WIN32_ERROR.ERROR_RANGE_LIST_CONFLICT;
pub const ERROR_SERVER_SID_MISMATCH = WIN32_ERROR.ERROR_SERVER_SID_MISMATCH;
pub const ERROR_CANT_ENABLE_DENY_ONLY = WIN32_ERROR.ERROR_CANT_ENABLE_DENY_ONLY;
pub const ERROR_FLOAT_MULTIPLE_FAULTS = WIN32_ERROR.ERROR_FLOAT_MULTIPLE_FAULTS;
pub const ERROR_FLOAT_MULTIPLE_TRAPS = WIN32_ERROR.ERROR_FLOAT_MULTIPLE_TRAPS;
pub const ERROR_NOINTERFACE = WIN32_ERROR.ERROR_NOINTERFACE;
pub const ERROR_DRIVER_FAILED_SLEEP = WIN32_ERROR.ERROR_DRIVER_FAILED_SLEEP;
pub const ERROR_CORRUPT_SYSTEM_FILE = WIN32_ERROR.ERROR_CORRUPT_SYSTEM_FILE;
pub const ERROR_COMMITMENT_MINIMUM = WIN32_ERROR.ERROR_COMMITMENT_MINIMUM;
pub const ERROR_PNP_RESTART_ENUMERATION = WIN32_ERROR.ERROR_PNP_RESTART_ENUMERATION;
pub const ERROR_SYSTEM_IMAGE_BAD_SIGNATURE = WIN32_ERROR.ERROR_SYSTEM_IMAGE_BAD_SIGNATURE;
pub const ERROR_PNP_REBOOT_REQUIRED = WIN32_ERROR.ERROR_PNP_REBOOT_REQUIRED;
pub const ERROR_INSUFFICIENT_POWER = WIN32_ERROR.ERROR_INSUFFICIENT_POWER;
pub const ERROR_MULTIPLE_FAULT_VIOLATION = WIN32_ERROR.ERROR_MULTIPLE_FAULT_VIOLATION;
pub const ERROR_SYSTEM_SHUTDOWN = WIN32_ERROR.ERROR_SYSTEM_SHUTDOWN;
pub const ERROR_PORT_NOT_SET = WIN32_ERROR.ERROR_PORT_NOT_SET;
pub const ERROR_DS_VERSION_CHECK_FAILURE = WIN32_ERROR.ERROR_DS_VERSION_CHECK_FAILURE;
pub const ERROR_RANGE_NOT_FOUND = WIN32_ERROR.ERROR_RANGE_NOT_FOUND;
pub const ERROR_NOT_SAFE_MODE_DRIVER = WIN32_ERROR.ERROR_NOT_SAFE_MODE_DRIVER;
pub const ERROR_FAILED_DRIVER_ENTRY = WIN32_ERROR.ERROR_FAILED_DRIVER_ENTRY;
pub const ERROR_DEVICE_ENUMERATION_ERROR = WIN32_ERROR.ERROR_DEVICE_ENUMERATION_ERROR;
pub const ERROR_MOUNT_POINT_NOT_RESOLVED = WIN32_ERROR.ERROR_MOUNT_POINT_NOT_RESOLVED;
pub const ERROR_INVALID_DEVICE_OBJECT_PARAMETER = WIN32_ERROR.ERROR_INVALID_DEVICE_OBJECT_PARAMETER;
pub const ERROR_MCA_OCCURED = WIN32_ERROR.ERROR_MCA_OCCURED;
pub const ERROR_DRIVER_DATABASE_ERROR = WIN32_ERROR.ERROR_DRIVER_DATABASE_ERROR;
pub const ERROR_SYSTEM_HIVE_TOO_LARGE = WIN32_ERROR.ERROR_SYSTEM_HIVE_TOO_LARGE;
pub const ERROR_DRIVER_FAILED_PRIOR_UNLOAD = WIN32_ERROR.ERROR_DRIVER_FAILED_PRIOR_UNLOAD;
pub const ERROR_VOLSNAP_PREPARE_HIBERNATE = WIN32_ERROR.ERROR_VOLSNAP_PREPARE_HIBERNATE;
pub const ERROR_HIBERNATION_FAILURE = WIN32_ERROR.ERROR_HIBERNATION_FAILURE;
pub const ERROR_PWD_TOO_LONG = WIN32_ERROR.ERROR_PWD_TOO_LONG;
pub const ERROR_FILE_SYSTEM_LIMITATION = WIN32_ERROR.ERROR_FILE_SYSTEM_LIMITATION;
pub const ERROR_ASSERTION_FAILURE = WIN32_ERROR.ERROR_ASSERTION_FAILURE;
pub const ERROR_ACPI_ERROR = WIN32_ERROR.ERROR_ACPI_ERROR;
pub const ERROR_WOW_ASSERTION = WIN32_ERROR.ERROR_WOW_ASSERTION;
pub const ERROR_PNP_BAD_MPS_TABLE = WIN32_ERROR.ERROR_PNP_BAD_MPS_TABLE;
pub const ERROR_PNP_TRANSLATION_FAILED = WIN32_ERROR.ERROR_PNP_TRANSLATION_FAILED;
pub const ERROR_PNP_IRQ_TRANSLATION_FAILED = WIN32_ERROR.ERROR_PNP_IRQ_TRANSLATION_FAILED;
pub const ERROR_PNP_INVALID_ID = WIN32_ERROR.ERROR_PNP_INVALID_ID;
pub const ERROR_WAKE_SYSTEM_DEBUGGER = WIN32_ERROR.ERROR_WAKE_SYSTEM_DEBUGGER;
pub const ERROR_HANDLES_CLOSED = WIN32_ERROR.ERROR_HANDLES_CLOSED;
pub const ERROR_EXTRANEOUS_INFORMATION = WIN32_ERROR.ERROR_EXTRANEOUS_INFORMATION;
pub const ERROR_RXACT_COMMIT_NECESSARY = WIN32_ERROR.ERROR_RXACT_COMMIT_NECESSARY;
pub const ERROR_MEDIA_CHECK = WIN32_ERROR.ERROR_MEDIA_CHECK;
pub const ERROR_GUID_SUBSTITUTION_MADE = WIN32_ERROR.ERROR_GUID_SUBSTITUTION_MADE;
pub const ERROR_STOPPED_ON_SYMLINK = WIN32_ERROR.ERROR_STOPPED_ON_SYMLINK;
pub const ERROR_LONGJUMP = WIN32_ERROR.ERROR_LONGJUMP;
pub const ERROR_PLUGPLAY_QUERY_VETOED = WIN32_ERROR.ERROR_PLUGPLAY_QUERY_VETOED;
pub const ERROR_UNWIND_CONSOLIDATE = WIN32_ERROR.ERROR_UNWIND_CONSOLIDATE;
pub const ERROR_REGISTRY_HIVE_RECOVERED = WIN32_ERROR.ERROR_REGISTRY_HIVE_RECOVERED;
pub const ERROR_DLL_MIGHT_BE_INSECURE = WIN32_ERROR.ERROR_DLL_MIGHT_BE_INSECURE;
pub const ERROR_DLL_MIGHT_BE_INCOMPATIBLE = WIN32_ERROR.ERROR_DLL_MIGHT_BE_INCOMPATIBLE;
pub const ERROR_DBG_EXCEPTION_NOT_HANDLED = WIN32_ERROR.ERROR_DBG_EXCEPTION_NOT_HANDLED;
pub const ERROR_DBG_REPLY_LATER = WIN32_ERROR.ERROR_DBG_REPLY_LATER;
pub const ERROR_DBG_UNABLE_TO_PROVIDE_HANDLE = WIN32_ERROR.ERROR_DBG_UNABLE_TO_PROVIDE_HANDLE;
pub const ERROR_DBG_TERMINATE_THREAD = WIN32_ERROR.ERROR_DBG_TERMINATE_THREAD;
pub const ERROR_DBG_TERMINATE_PROCESS = WIN32_ERROR.ERROR_DBG_TERMINATE_PROCESS;
pub const ERROR_DBG_CONTROL_C = WIN32_ERROR.ERROR_DBG_CONTROL_C;
pub const ERROR_DBG_PRINTEXCEPTION_C = WIN32_ERROR.ERROR_DBG_PRINTEXCEPTION_C;
pub const ERROR_DBG_RIPEXCEPTION = WIN32_ERROR.ERROR_DBG_RIPEXCEPTION;
pub const ERROR_DBG_CONTROL_BREAK = WIN32_ERROR.ERROR_DBG_CONTROL_BREAK;
pub const ERROR_DBG_COMMAND_EXCEPTION = WIN32_ERROR.ERROR_DBG_COMMAND_EXCEPTION;
pub const ERROR_OBJECT_NAME_EXISTS = WIN32_ERROR.ERROR_OBJECT_NAME_EXISTS;
pub const ERROR_THREAD_WAS_SUSPENDED = WIN32_ERROR.ERROR_THREAD_WAS_SUSPENDED;
pub const ERROR_IMAGE_NOT_AT_BASE = WIN32_ERROR.ERROR_IMAGE_NOT_AT_BASE;
pub const ERROR_RXACT_STATE_CREATED = WIN32_ERROR.ERROR_RXACT_STATE_CREATED;
pub const ERROR_SEGMENT_NOTIFICATION = WIN32_ERROR.ERROR_SEGMENT_NOTIFICATION;
pub const ERROR_BAD_CURRENT_DIRECTORY = WIN32_ERROR.ERROR_BAD_CURRENT_DIRECTORY;
pub const ERROR_FT_READ_RECOVERY_FROM_BACKUP = WIN32_ERROR.ERROR_FT_READ_RECOVERY_FROM_BACKUP;
pub const ERROR_FT_WRITE_RECOVERY = WIN32_ERROR.ERROR_FT_WRITE_RECOVERY;
pub const ERROR_IMAGE_MACHINE_TYPE_MISMATCH = WIN32_ERROR.ERROR_IMAGE_MACHINE_TYPE_MISMATCH;
pub const ERROR_RECEIVE_PARTIAL = WIN32_ERROR.ERROR_RECEIVE_PARTIAL;
pub const ERROR_RECEIVE_EXPEDITED = WIN32_ERROR.ERROR_RECEIVE_EXPEDITED;
pub const ERROR_RECEIVE_PARTIAL_EXPEDITED = WIN32_ERROR.ERROR_RECEIVE_PARTIAL_EXPEDITED;
pub const ERROR_EVENT_DONE = WIN32_ERROR.ERROR_EVENT_DONE;
pub const ERROR_EVENT_PENDING = WIN32_ERROR.ERROR_EVENT_PENDING;
pub const ERROR_CHECKING_FILE_SYSTEM = WIN32_ERROR.ERROR_CHECKING_FILE_SYSTEM;
pub const ERROR_FATAL_APP_EXIT = WIN32_ERROR.ERROR_FATAL_APP_EXIT;
pub const ERROR_PREDEFINED_HANDLE = WIN32_ERROR.ERROR_PREDEFINED_HANDLE;
pub const ERROR_WAS_UNLOCKED = WIN32_ERROR.ERROR_WAS_UNLOCKED;
pub const ERROR_SERVICE_NOTIFICATION = WIN32_ERROR.ERROR_SERVICE_NOTIFICATION;
pub const ERROR_WAS_LOCKED = WIN32_ERROR.ERROR_WAS_LOCKED;
pub const ERROR_LOG_HARD_ERROR = WIN32_ERROR.ERROR_LOG_HARD_ERROR;
pub const ERROR_ALREADY_WIN32 = WIN32_ERROR.ERROR_ALREADY_WIN32;
pub const ERROR_IMAGE_MACHINE_TYPE_MISMATCH_EXE = WIN32_ERROR.ERROR_IMAGE_MACHINE_TYPE_MISMATCH_EXE;
pub const ERROR_NO_YIELD_PERFORMED = WIN32_ERROR.ERROR_NO_YIELD_PERFORMED;
pub const ERROR_TIMER_RESUME_IGNORED = WIN32_ERROR.ERROR_TIMER_RESUME_IGNORED;
pub const ERROR_ARBITRATION_UNHANDLED = WIN32_ERROR.ERROR_ARBITRATION_UNHANDLED;
pub const ERROR_CARDBUS_NOT_SUPPORTED = WIN32_ERROR.ERROR_CARDBUS_NOT_SUPPORTED;
pub const ERROR_MP_PROCESSOR_MISMATCH = WIN32_ERROR.ERROR_MP_PROCESSOR_MISMATCH;
pub const ERROR_HIBERNATED = WIN32_ERROR.ERROR_HIBERNATED;
pub const ERROR_RESUME_HIBERNATION = WIN32_ERROR.ERROR_RESUME_HIBERNATION;
pub const ERROR_FIRMWARE_UPDATED = WIN32_ERROR.ERROR_FIRMWARE_UPDATED;
pub const ERROR_DRIVERS_LEAKING_LOCKED_PAGES = WIN32_ERROR.ERROR_DRIVERS_LEAKING_LOCKED_PAGES;
pub const ERROR_WAKE_SYSTEM = WIN32_ERROR.ERROR_WAKE_SYSTEM;
pub const ERROR_WAIT_1 = WIN32_ERROR.ERROR_WAIT_1;
pub const ERROR_WAIT_2 = WIN32_ERROR.ERROR_WAIT_2;
pub const ERROR_WAIT_3 = WIN32_ERROR.ERROR_WAIT_3;
pub const ERROR_WAIT_63 = WIN32_ERROR.ERROR_WAIT_63;
pub const ERROR_ABANDONED_WAIT_0 = WIN32_ERROR.ERROR_ABANDONED_WAIT_0;
pub const ERROR_ABANDONED_WAIT_63 = WIN32_ERROR.ERROR_ABANDONED_WAIT_63;
pub const ERROR_USER_APC = WIN32_ERROR.ERROR_USER_APC;
pub const ERROR_KERNEL_APC = WIN32_ERROR.ERROR_KERNEL_APC;
pub const ERROR_ALERTED = WIN32_ERROR.ERROR_ALERTED;
pub const ERROR_ELEVATION_REQUIRED = WIN32_ERROR.ERROR_ELEVATION_REQUIRED;
pub const ERROR_REPARSE = WIN32_ERROR.ERROR_REPARSE;
pub const ERROR_OPLOCK_BREAK_IN_PROGRESS = WIN32_ERROR.ERROR_OPLOCK_BREAK_IN_PROGRESS;
pub const ERROR_VOLUME_MOUNTED = WIN32_ERROR.ERROR_VOLUME_MOUNTED;
pub const ERROR_RXACT_COMMITTED = WIN32_ERROR.ERROR_RXACT_COMMITTED;
pub const ERROR_NOTIFY_CLEANUP = WIN32_ERROR.ERROR_NOTIFY_CLEANUP;
pub const ERROR_PRIMARY_TRANSPORT_CONNECT_FAILED = WIN32_ERROR.ERROR_PRIMARY_TRANSPORT_CONNECT_FAILED;
pub const ERROR_PAGE_FAULT_TRANSITION = WIN32_ERROR.ERROR_PAGE_FAULT_TRANSITION;
pub const ERROR_PAGE_FAULT_DEMAND_ZERO = WIN32_ERROR.ERROR_PAGE_FAULT_DEMAND_ZERO;
pub const ERROR_PAGE_FAULT_COPY_ON_WRITE = WIN32_ERROR.ERROR_PAGE_FAULT_COPY_ON_WRITE;
pub const ERROR_PAGE_FAULT_GUARD_PAGE = WIN32_ERROR.ERROR_PAGE_FAULT_GUARD_PAGE;
pub const ERROR_PAGE_FAULT_PAGING_FILE = WIN32_ERROR.ERROR_PAGE_FAULT_PAGING_FILE;
pub const ERROR_CACHE_PAGE_LOCKED = WIN32_ERROR.ERROR_CACHE_PAGE_LOCKED;
pub const ERROR_CRASH_DUMP = WIN32_ERROR.ERROR_CRASH_DUMP;
pub const ERROR_BUFFER_ALL_ZEROS = WIN32_ERROR.ERROR_BUFFER_ALL_ZEROS;
pub const ERROR_REPARSE_OBJECT = WIN32_ERROR.ERROR_REPARSE_OBJECT;
pub const ERROR_RESOURCE_REQUIREMENTS_CHANGED = WIN32_ERROR.ERROR_RESOURCE_REQUIREMENTS_CHANGED;
pub const ERROR_TRANSLATION_COMPLETE = WIN32_ERROR.ERROR_TRANSLATION_COMPLETE;
pub const ERROR_NOTHING_TO_TERMINATE = WIN32_ERROR.ERROR_NOTHING_TO_TERMINATE;
pub const ERROR_PROCESS_NOT_IN_JOB = WIN32_ERROR.ERROR_PROCESS_NOT_IN_JOB;
pub const ERROR_PROCESS_IN_JOB = WIN32_ERROR.ERROR_PROCESS_IN_JOB;
pub const ERROR_VOLSNAP_HIBERNATE_READY = WIN32_ERROR.ERROR_VOLSNAP_HIBERNATE_READY;
pub const ERROR_FSFILTER_OP_COMPLETED_SUCCESSFULLY = WIN32_ERROR.ERROR_FSFILTER_OP_COMPLETED_SUCCESSFULLY;
pub const ERROR_INTERRUPT_VECTOR_ALREADY_CONNECTED = WIN32_ERROR.ERROR_INTERRUPT_VECTOR_ALREADY_CONNECTED;
pub const ERROR_INTERRUPT_STILL_CONNECTED = WIN32_ERROR.ERROR_INTERRUPT_STILL_CONNECTED;
pub const ERROR_WAIT_FOR_OPLOCK = WIN32_ERROR.ERROR_WAIT_FOR_OPLOCK;
pub const ERROR_DBG_EXCEPTION_HANDLED = WIN32_ERROR.ERROR_DBG_EXCEPTION_HANDLED;
pub const ERROR_DBG_CONTINUE = WIN32_ERROR.ERROR_DBG_CONTINUE;
pub const ERROR_CALLBACK_POP_STACK = WIN32_ERROR.ERROR_CALLBACK_POP_STACK;
pub const ERROR_COMPRESSION_DISABLED = WIN32_ERROR.ERROR_COMPRESSION_DISABLED;
pub const ERROR_CANTFETCHBACKWARDS = WIN32_ERROR.ERROR_CANTFETCHBACKWARDS;
pub const ERROR_CANTSCROLLBACKWARDS = WIN32_ERROR.ERROR_CANTSCROLLBACKWARDS;
pub const ERROR_ROWSNOTRELEASED = WIN32_ERROR.ERROR_ROWSNOTRELEASED;
pub const ERROR_BAD_ACCESSOR_FLAGS = WIN32_ERROR.ERROR_BAD_ACCESSOR_FLAGS;
pub const ERROR_ERRORS_ENCOUNTERED = WIN32_ERROR.ERROR_ERRORS_ENCOUNTERED;
pub const ERROR_NOT_CAPABLE = WIN32_ERROR.ERROR_NOT_CAPABLE;
pub const ERROR_REQUEST_OUT_OF_SEQUENCE = WIN32_ERROR.ERROR_REQUEST_OUT_OF_SEQUENCE;
pub const ERROR_VERSION_PARSE_ERROR = WIN32_ERROR.ERROR_VERSION_PARSE_ERROR;
pub const ERROR_BADSTARTPOSITION = WIN32_ERROR.ERROR_BADSTARTPOSITION;
pub const ERROR_MEMORY_HARDWARE = WIN32_ERROR.ERROR_MEMORY_HARDWARE;
pub const ERROR_DISK_REPAIR_DISABLED = WIN32_ERROR.ERROR_DISK_REPAIR_DISABLED;
pub const ERROR_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE = WIN32_ERROR.ERROR_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE;
pub const ERROR_SYSTEM_POWERSTATE_TRANSITION = WIN32_ERROR.ERROR_SYSTEM_POWERSTATE_TRANSITION;
pub const ERROR_SYSTEM_POWERSTATE_COMPLEX_TRANSITION = WIN32_ERROR.ERROR_SYSTEM_POWERSTATE_COMPLEX_TRANSITION;
pub const ERROR_MCA_EXCEPTION = WIN32_ERROR.ERROR_MCA_EXCEPTION;
pub const ERROR_ACCESS_AUDIT_BY_POLICY = WIN32_ERROR.ERROR_ACCESS_AUDIT_BY_POLICY;
pub const ERROR_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY = WIN32_ERROR.ERROR_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY;
pub const ERROR_ABANDON_HIBERFILE = WIN32_ERROR.ERROR_ABANDON_HIBERFILE;
pub const ERROR_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED = WIN32_ERROR.ERROR_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED;
pub const ERROR_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR = WIN32_ERROR.ERROR_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR;
pub const ERROR_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR = WIN32_ERROR.ERROR_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR;
pub const ERROR_BAD_MCFG_TABLE = WIN32_ERROR.ERROR_BAD_MCFG_TABLE;
pub const ERROR_DISK_REPAIR_REDIRECTED = WIN32_ERROR.ERROR_DISK_REPAIR_REDIRECTED;
pub const ERROR_DISK_REPAIR_UNSUCCESSFUL = WIN32_ERROR.ERROR_DISK_REPAIR_UNSUCCESSFUL;
pub const ERROR_CORRUPT_LOG_OVERFULL = WIN32_ERROR.ERROR_CORRUPT_LOG_OVERFULL;
pub const ERROR_CORRUPT_LOG_CORRUPTED = WIN32_ERROR.ERROR_CORRUPT_LOG_CORRUPTED;
pub const ERROR_CORRUPT_LOG_UNAVAILABLE = WIN32_ERROR.ERROR_CORRUPT_LOG_UNAVAILABLE;
pub const ERROR_CORRUPT_LOG_DELETED_FULL = WIN32_ERROR.ERROR_CORRUPT_LOG_DELETED_FULL;
pub const ERROR_CORRUPT_LOG_CLEARED = WIN32_ERROR.ERROR_CORRUPT_LOG_CLEARED;
pub const ERROR_ORPHAN_NAME_EXHAUSTED = WIN32_ERROR.ERROR_ORPHAN_NAME_EXHAUSTED;
pub const ERROR_OPLOCK_SWITCHED_TO_NEW_HANDLE = WIN32_ERROR.ERROR_OPLOCK_SWITCHED_TO_NEW_HANDLE;
pub const ERROR_CANNOT_GRANT_REQUESTED_OPLOCK = WIN32_ERROR.ERROR_CANNOT_GRANT_REQUESTED_OPLOCK;
pub const ERROR_CANNOT_BREAK_OPLOCK = WIN32_ERROR.ERROR_CANNOT_BREAK_OPLOCK;
pub const ERROR_OPLOCK_HANDLE_CLOSED = WIN32_ERROR.ERROR_OPLOCK_HANDLE_CLOSED;
pub const ERROR_NO_ACE_CONDITION = WIN32_ERROR.ERROR_NO_ACE_CONDITION;
pub const ERROR_INVALID_ACE_CONDITION = WIN32_ERROR.ERROR_INVALID_ACE_CONDITION;
pub const ERROR_FILE_HANDLE_REVOKED = WIN32_ERROR.ERROR_FILE_HANDLE_REVOKED;
pub const ERROR_IMAGE_AT_DIFFERENT_BASE = WIN32_ERROR.ERROR_IMAGE_AT_DIFFERENT_BASE;
pub const ERROR_ENCRYPTED_IO_NOT_POSSIBLE = WIN32_ERROR.ERROR_ENCRYPTED_IO_NOT_POSSIBLE;
pub const ERROR_FILE_METADATA_OPTIMIZATION_IN_PROGRESS = WIN32_ERROR.ERROR_FILE_METADATA_OPTIMIZATION_IN_PROGRESS;
pub const ERROR_QUOTA_ACTIVITY = WIN32_ERROR.ERROR_QUOTA_ACTIVITY;
pub const ERROR_HANDLE_REVOKED = WIN32_ERROR.ERROR_HANDLE_REVOKED;
pub const ERROR_CALLBACK_INVOKE_INLINE = WIN32_ERROR.ERROR_CALLBACK_INVOKE_INLINE;
pub const ERROR_CPU_SET_INVALID = WIN32_ERROR.ERROR_CPU_SET_INVALID;
pub const ERROR_ENCLAVE_NOT_TERMINATED = WIN32_ERROR.ERROR_ENCLAVE_NOT_TERMINATED;
pub const ERROR_ENCLAVE_VIOLATION = WIN32_ERROR.ERROR_ENCLAVE_VIOLATION;
pub const ERROR_SERVER_TRANSPORT_CONFLICT = WIN32_ERROR.ERROR_SERVER_TRANSPORT_CONFLICT;
pub const ERROR_CERTIFICATE_VALIDATION_PREFERENCE_CONFLICT = WIN32_ERROR.ERROR_CERTIFICATE_VALIDATION_PREFERENCE_CONFLICT;
pub const ERROR_FT_READ_FROM_COPY_FAILURE = WIN32_ERROR.ERROR_FT_READ_FROM_COPY_FAILURE;
pub const ERROR_SECTION_DIRECT_MAP_ONLY = WIN32_ERROR.ERROR_SECTION_DIRECT_MAP_ONLY;
pub const ERROR_EA_ACCESS_DENIED = WIN32_ERROR.ERROR_EA_ACCESS_DENIED;
pub const ERROR_OPERATION_ABORTED = WIN32_ERROR.ERROR_OPERATION_ABORTED;
pub const ERROR_IO_INCOMPLETE = WIN32_ERROR.ERROR_IO_INCOMPLETE;
pub const ERROR_IO_PENDING = WIN32_ERROR.ERROR_IO_PENDING;
pub const ERROR_NOACCESS = WIN32_ERROR.ERROR_NOACCESS;
pub const ERROR_SWAPERROR = WIN32_ERROR.ERROR_SWAPERROR;
pub const ERROR_STACK_OVERFLOW = WIN32_ERROR.ERROR_STACK_OVERFLOW;
pub const ERROR_INVALID_MESSAGE = WIN32_ERROR.ERROR_INVALID_MESSAGE;
pub const ERROR_CAN_NOT_COMPLETE = WIN32_ERROR.ERROR_CAN_NOT_COMPLETE;
pub const ERROR_INVALID_FLAGS = WIN32_ERROR.ERROR_INVALID_FLAGS;
pub const ERROR_UNRECOGNIZED_VOLUME = WIN32_ERROR.ERROR_UNRECOGNIZED_VOLUME;
pub const ERROR_FILE_INVALID = WIN32_ERROR.ERROR_FILE_INVALID;
pub const ERROR_FULLSCREEN_MODE = WIN32_ERROR.ERROR_FULLSCREEN_MODE;
pub const ERROR_NO_TOKEN = WIN32_ERROR.ERROR_NO_TOKEN;
pub const ERROR_BADDB = WIN32_ERROR.ERROR_BADDB;
pub const ERROR_BADKEY = WIN32_ERROR.ERROR_BADKEY;
pub const ERROR_CANTOPEN = WIN32_ERROR.ERROR_CANTOPEN;
pub const ERROR_CANTREAD = WIN32_ERROR.ERROR_CANTREAD;
pub const ERROR_CANTWRITE = WIN32_ERROR.ERROR_CANTWRITE;
pub const ERROR_REGISTRY_RECOVERED = WIN32_ERROR.ERROR_REGISTRY_RECOVERED;
pub const ERROR_REGISTRY_CORRUPT = WIN32_ERROR.ERROR_REGISTRY_CORRUPT;
pub const ERROR_REGISTRY_IO_FAILED = WIN32_ERROR.ERROR_REGISTRY_IO_FAILED;
pub const ERROR_NOT_REGISTRY_FILE = WIN32_ERROR.ERROR_NOT_REGISTRY_FILE;
pub const ERROR_KEY_DELETED = WIN32_ERROR.ERROR_KEY_DELETED;
pub const ERROR_NO_LOG_SPACE = WIN32_ERROR.ERROR_NO_LOG_SPACE;
pub const ERROR_KEY_HAS_CHILDREN = WIN32_ERROR.ERROR_KEY_HAS_CHILDREN;
pub const ERROR_CHILD_MUST_BE_VOLATILE = WIN32_ERROR.ERROR_CHILD_MUST_BE_VOLATILE;
pub const ERROR_NOTIFY_ENUM_DIR = WIN32_ERROR.ERROR_NOTIFY_ENUM_DIR;
pub const ERROR_DEPENDENT_SERVICES_RUNNING = WIN32_ERROR.ERROR_DEPENDENT_SERVICES_RUNNING;
pub const ERROR_INVALID_SERVICE_CONTROL = WIN32_ERROR.ERROR_INVALID_SERVICE_CONTROL;
pub const ERROR_SERVICE_REQUEST_TIMEOUT = WIN32_ERROR.ERROR_SERVICE_REQUEST_TIMEOUT;
pub const ERROR_SERVICE_NO_THREAD = WIN32_ERROR.ERROR_SERVICE_NO_THREAD;
pub const ERROR_SERVICE_DATABASE_LOCKED = WIN32_ERROR.ERROR_SERVICE_DATABASE_LOCKED;
pub const ERROR_SERVICE_ALREADY_RUNNING = WIN32_ERROR.ERROR_SERVICE_ALREADY_RUNNING;
pub const ERROR_INVALID_SERVICE_ACCOUNT = WIN32_ERROR.ERROR_INVALID_SERVICE_ACCOUNT;
pub const ERROR_SERVICE_DISABLED = WIN32_ERROR.ERROR_SERVICE_DISABLED;
pub const ERROR_CIRCULAR_DEPENDENCY = WIN32_ERROR.ERROR_CIRCULAR_DEPENDENCY;
pub const ERROR_SERVICE_DOES_NOT_EXIST = WIN32_ERROR.ERROR_SERVICE_DOES_NOT_EXIST;
pub const ERROR_SERVICE_CANNOT_ACCEPT_CTRL = WIN32_ERROR.ERROR_SERVICE_CANNOT_ACCEPT_CTRL;
pub const ERROR_SERVICE_NOT_ACTIVE = WIN32_ERROR.ERROR_SERVICE_NOT_ACTIVE;
pub const ERROR_FAILED_SERVICE_CONTROLLER_CONNECT = WIN32_ERROR.ERROR_FAILED_SERVICE_CONTROLLER_CONNECT;
pub const ERROR_EXCEPTION_IN_SERVICE = WIN32_ERROR.ERROR_EXCEPTION_IN_SERVICE;
pub const ERROR_DATABASE_DOES_NOT_EXIST = WIN32_ERROR.ERROR_DATABASE_DOES_NOT_EXIST;
pub const ERROR_SERVICE_SPECIFIC_ERROR = WIN32_ERROR.ERROR_SERVICE_SPECIFIC_ERROR;
pub const ERROR_PROCESS_ABORTED = WIN32_ERROR.ERROR_PROCESS_ABORTED;
pub const ERROR_SERVICE_DEPENDENCY_FAIL = WIN32_ERROR.ERROR_SERVICE_DEPENDENCY_FAIL;
pub const ERROR_SERVICE_LOGON_FAILED = WIN32_ERROR.ERROR_SERVICE_LOGON_FAILED;
pub const ERROR_SERVICE_START_HANG = WIN32_ERROR.ERROR_SERVICE_START_HANG;
pub const ERROR_INVALID_SERVICE_LOCK = WIN32_ERROR.ERROR_INVALID_SERVICE_LOCK;
pub const ERROR_SERVICE_MARKED_FOR_DELETE = WIN32_ERROR.ERROR_SERVICE_MARKED_FOR_DELETE;
pub const ERROR_SERVICE_EXISTS = WIN32_ERROR.ERROR_SERVICE_EXISTS;
pub const ERROR_ALREADY_RUNNING_LKG = WIN32_ERROR.ERROR_ALREADY_RUNNING_LKG;
pub const ERROR_SERVICE_DEPENDENCY_DELETED = WIN32_ERROR.ERROR_SERVICE_DEPENDENCY_DELETED;
pub const ERROR_BOOT_ALREADY_ACCEPTED = WIN32_ERROR.ERROR_BOOT_ALREADY_ACCEPTED;
pub const ERROR_SERVICE_NEVER_STARTED = WIN32_ERROR.ERROR_SERVICE_NEVER_STARTED;
pub const ERROR_DUPLICATE_SERVICE_NAME = WIN32_ERROR.ERROR_DUPLICATE_SERVICE_NAME;
pub const ERROR_DIFFERENT_SERVICE_ACCOUNT = WIN32_ERROR.ERROR_DIFFERENT_SERVICE_ACCOUNT;
pub const ERROR_CANNOT_DETECT_DRIVER_FAILURE = WIN32_ERROR.ERROR_CANNOT_DETECT_DRIVER_FAILURE;
pub const ERROR_CANNOT_DETECT_PROCESS_ABORT = WIN32_ERROR.ERROR_CANNOT_DETECT_PROCESS_ABORT;
pub const ERROR_NO_RECOVERY_PROGRAM = WIN32_ERROR.ERROR_NO_RECOVERY_PROGRAM;
pub const ERROR_SERVICE_NOT_IN_EXE = WIN32_ERROR.ERROR_SERVICE_NOT_IN_EXE;
pub const ERROR_NOT_SAFEBOOT_SERVICE = WIN32_ERROR.ERROR_NOT_SAFEBOOT_SERVICE;
pub const ERROR_END_OF_MEDIA = WIN32_ERROR.ERROR_END_OF_MEDIA;
pub const ERROR_FILEMARK_DETECTED = WIN32_ERROR.ERROR_FILEMARK_DETECTED;
pub const ERROR_BEGINNING_OF_MEDIA = WIN32_ERROR.ERROR_BEGINNING_OF_MEDIA;
pub const ERROR_SETMARK_DETECTED = WIN32_ERROR.ERROR_SETMARK_DETECTED;
pub const ERROR_NO_DATA_DETECTED = WIN32_ERROR.ERROR_NO_DATA_DETECTED;
pub const ERROR_PARTITION_FAILURE = WIN32_ERROR.ERROR_PARTITION_FAILURE;
pub const ERROR_INVALID_BLOCK_LENGTH = WIN32_ERROR.ERROR_INVALID_BLOCK_LENGTH;
pub const ERROR_DEVICE_NOT_PARTITIONED = WIN32_ERROR.ERROR_DEVICE_NOT_PARTITIONED;
pub const ERROR_UNABLE_TO_LOCK_MEDIA = WIN32_ERROR.ERROR_UNABLE_TO_LOCK_MEDIA;
pub const ERROR_UNABLE_TO_UNLOAD_MEDIA = WIN32_ERROR.ERROR_UNABLE_TO_UNLOAD_MEDIA;
pub const ERROR_MEDIA_CHANGED = WIN32_ERROR.ERROR_MEDIA_CHANGED;
pub const ERROR_BUS_RESET = WIN32_ERROR.ERROR_BUS_RESET;
pub const ERROR_NO_MEDIA_IN_DRIVE = WIN32_ERROR.ERROR_NO_MEDIA_IN_DRIVE;
pub const ERROR_NO_UNICODE_TRANSLATION = WIN32_ERROR.ERROR_NO_UNICODE_TRANSLATION;
pub const ERROR_DLL_INIT_FAILED = WIN32_ERROR.ERROR_DLL_INIT_FAILED;
pub const ERROR_SHUTDOWN_IN_PROGRESS = WIN32_ERROR.ERROR_SHUTDOWN_IN_PROGRESS;
pub const ERROR_NO_SHUTDOWN_IN_PROGRESS = WIN32_ERROR.ERROR_NO_SHUTDOWN_IN_PROGRESS;
pub const ERROR_IO_DEVICE = WIN32_ERROR.ERROR_IO_DEVICE;
pub const ERROR_SERIAL_NO_DEVICE = WIN32_ERROR.ERROR_SERIAL_NO_DEVICE;
pub const ERROR_IRQ_BUSY = WIN32_ERROR.ERROR_IRQ_BUSY;
pub const ERROR_MORE_WRITES = WIN32_ERROR.ERROR_MORE_WRITES;
pub const ERROR_COUNTER_TIMEOUT = WIN32_ERROR.ERROR_COUNTER_TIMEOUT;
pub const ERROR_FLOPPY_ID_MARK_NOT_FOUND = WIN32_ERROR.ERROR_FLOPPY_ID_MARK_NOT_FOUND;
pub const ERROR_FLOPPY_WRONG_CYLINDER = WIN32_ERROR.ERROR_FLOPPY_WRONG_CYLINDER;
pub const ERROR_FLOPPY_UNKNOWN_ERROR = WIN32_ERROR.ERROR_FLOPPY_UNKNOWN_ERROR;
pub const ERROR_FLOPPY_BAD_REGISTERS = WIN32_ERROR.ERROR_FLOPPY_BAD_REGISTERS;
pub const ERROR_DISK_RECALIBRATE_FAILED = WIN32_ERROR.ERROR_DISK_RECALIBRATE_FAILED;
pub const ERROR_DISK_OPERATION_FAILED = WIN32_ERROR.ERROR_DISK_OPERATION_FAILED;
pub const ERROR_DISK_RESET_FAILED = WIN32_ERROR.ERROR_DISK_RESET_FAILED;
pub const ERROR_EOM_OVERFLOW = WIN32_ERROR.ERROR_EOM_OVERFLOW;
pub const ERROR_NOT_ENOUGH_SERVER_MEMORY = WIN32_ERROR.ERROR_NOT_ENOUGH_SERVER_MEMORY;
pub const ERROR_POSSIBLE_DEADLOCK = WIN32_ERROR.ERROR_POSSIBLE_DEADLOCK;
pub const ERROR_MAPPED_ALIGNMENT = WIN32_ERROR.ERROR_MAPPED_ALIGNMENT;
pub const ERROR_SET_POWER_STATE_VETOED = WIN32_ERROR.ERROR_SET_POWER_STATE_VETOED;
pub const ERROR_SET_POWER_STATE_FAILED = WIN32_ERROR.ERROR_SET_POWER_STATE_FAILED;
pub const ERROR_TOO_MANY_LINKS = WIN32_ERROR.ERROR_TOO_MANY_LINKS;
pub const ERROR_OLD_WIN_VERSION = WIN32_ERROR.ERROR_OLD_WIN_VERSION;
pub const ERROR_APP_WRONG_OS = WIN32_ERROR.ERROR_APP_WRONG_OS;
pub const ERROR_SINGLE_INSTANCE_APP = WIN32_ERROR.ERROR_SINGLE_INSTANCE_APP;
pub const ERROR_RMODE_APP = WIN32_ERROR.ERROR_RMODE_APP;
pub const ERROR_INVALID_DLL = WIN32_ERROR.ERROR_INVALID_DLL;
pub const ERROR_NO_ASSOCIATION = WIN32_ERROR.ERROR_NO_ASSOCIATION;
pub const ERROR_DDE_FAIL = WIN32_ERROR.ERROR_DDE_FAIL;
pub const ERROR_DLL_NOT_FOUND = WIN32_ERROR.ERROR_DLL_NOT_FOUND;
pub const ERROR_NO_MORE_USER_HANDLES = WIN32_ERROR.ERROR_NO_MORE_USER_HANDLES;
pub const ERROR_MESSAGE_SYNC_ONLY = WIN32_ERROR.ERROR_MESSAGE_SYNC_ONLY;
pub const ERROR_SOURCE_ELEMENT_EMPTY = WIN32_ERROR.ERROR_SOURCE_ELEMENT_EMPTY;
pub const ERROR_DESTINATION_ELEMENT_FULL = WIN32_ERROR.ERROR_DESTINATION_ELEMENT_FULL;
pub const ERROR_ILLEGAL_ELEMENT_ADDRESS = WIN32_ERROR.ERROR_ILLEGAL_ELEMENT_ADDRESS;
pub const ERROR_MAGAZINE_NOT_PRESENT = WIN32_ERROR.ERROR_MAGAZINE_NOT_PRESENT;
pub const ERROR_DEVICE_REINITIALIZATION_NEEDED = WIN32_ERROR.ERROR_DEVICE_REINITIALIZATION_NEEDED;
pub const ERROR_DEVICE_REQUIRES_CLEANING = WIN32_ERROR.ERROR_DEVICE_REQUIRES_CLEANING;
pub const ERROR_DEVICE_DOOR_OPEN = WIN32_ERROR.ERROR_DEVICE_DOOR_OPEN;
pub const ERROR_DEVICE_NOT_CONNECTED = WIN32_ERROR.ERROR_DEVICE_NOT_CONNECTED;
pub const ERROR_NOT_FOUND = WIN32_ERROR.ERROR_NOT_FOUND;
pub const ERROR_NO_MATCH = WIN32_ERROR.ERROR_NO_MATCH;
pub const ERROR_SET_NOT_FOUND = WIN32_ERROR.ERROR_SET_NOT_FOUND;
pub const ERROR_POINT_NOT_FOUND = WIN32_ERROR.ERROR_POINT_NOT_FOUND;
pub const ERROR_NO_TRACKING_SERVICE = WIN32_ERROR.ERROR_NO_TRACKING_SERVICE;
pub const ERROR_NO_VOLUME_ID = WIN32_ERROR.ERROR_NO_VOLUME_ID;
pub const ERROR_UNABLE_TO_REMOVE_REPLACED = WIN32_ERROR.ERROR_UNABLE_TO_REMOVE_REPLACED;
pub const ERROR_UNABLE_TO_MOVE_REPLACEMENT = WIN32_ERROR.ERROR_UNABLE_TO_MOVE_REPLACEMENT;
pub const ERROR_UNABLE_TO_MOVE_REPLACEMENT_2 = WIN32_ERROR.ERROR_UNABLE_TO_MOVE_REPLACEMENT_2;
pub const ERROR_JOURNAL_DELETE_IN_PROGRESS = WIN32_ERROR.ERROR_JOURNAL_DELETE_IN_PROGRESS;
pub const ERROR_JOURNAL_NOT_ACTIVE = WIN32_ERROR.ERROR_JOURNAL_NOT_ACTIVE;
pub const ERROR_POTENTIAL_FILE_FOUND = WIN32_ERROR.ERROR_POTENTIAL_FILE_FOUND;
pub const ERROR_JOURNAL_ENTRY_DELETED = WIN32_ERROR.ERROR_JOURNAL_ENTRY_DELETED;
pub const ERROR_PARTITION_TERMINATING = WIN32_ERROR.ERROR_PARTITION_TERMINATING;
pub const ERROR_SHUTDOWN_IS_SCHEDULED = WIN32_ERROR.ERROR_SHUTDOWN_IS_SCHEDULED;
pub const ERROR_SHUTDOWN_USERS_LOGGED_ON = WIN32_ERROR.ERROR_SHUTDOWN_USERS_LOGGED_ON;
pub const ERROR_SHUTDOWN_DISKS_NOT_IN_MAINTENANCE_MODE = WIN32_ERROR.ERROR_SHUTDOWN_DISKS_NOT_IN_MAINTENANCE_MODE;
pub const ERROR_BAD_DEVICE = WIN32_ERROR.ERROR_BAD_DEVICE;
pub const ERROR_CONNECTION_UNAVAIL = WIN32_ERROR.ERROR_CONNECTION_UNAVAIL;
pub const ERROR_DEVICE_ALREADY_REMEMBERED = WIN32_ERROR.ERROR_DEVICE_ALREADY_REMEMBERED;
pub const ERROR_NO_NET_OR_BAD_PATH = WIN32_ERROR.ERROR_NO_NET_OR_BAD_PATH;
pub const ERROR_BAD_PROVIDER = WIN32_ERROR.ERROR_BAD_PROVIDER;
pub const ERROR_CANNOT_OPEN_PROFILE = WIN32_ERROR.ERROR_CANNOT_OPEN_PROFILE;
pub const ERROR_BAD_PROFILE = WIN32_ERROR.ERROR_BAD_PROFILE;
pub const ERROR_NOT_CONTAINER = WIN32_ERROR.ERROR_NOT_CONTAINER;
pub const ERROR_EXTENDED_ERROR = WIN32_ERROR.ERROR_EXTENDED_ERROR;
pub const ERROR_INVALID_GROUPNAME = WIN32_ERROR.ERROR_INVALID_GROUPNAME;
pub const ERROR_INVALID_COMPUTERNAME = WIN32_ERROR.ERROR_INVALID_COMPUTERNAME;
pub const ERROR_INVALID_EVENTNAME = WIN32_ERROR.ERROR_INVALID_EVENTNAME;
pub const ERROR_INVALID_DOMAINNAME = WIN32_ERROR.ERROR_INVALID_DOMAINNAME;
pub const ERROR_INVALID_SERVICENAME = WIN32_ERROR.ERROR_INVALID_SERVICENAME;
pub const ERROR_INVALID_NETNAME = WIN32_ERROR.ERROR_INVALID_NETNAME;
pub const ERROR_INVALID_SHARENAME = WIN32_ERROR.ERROR_INVALID_SHARENAME;
pub const ERROR_INVALID_PASSWORDNAME = WIN32_ERROR.ERROR_INVALID_PASSWORDNAME;
pub const ERROR_INVALID_MESSAGENAME = WIN32_ERROR.ERROR_INVALID_MESSAGENAME;
pub const ERROR_INVALID_MESSAGEDEST = WIN32_ERROR.ERROR_INVALID_MESSAGEDEST;
pub const ERROR_SESSION_CREDENTIAL_CONFLICT = WIN32_ERROR.ERROR_SESSION_CREDENTIAL_CONFLICT;
pub const ERROR_REMOTE_SESSION_LIMIT_EXCEEDED = WIN32_ERROR.ERROR_REMOTE_SESSION_LIMIT_EXCEEDED;
pub const ERROR_DUP_DOMAINNAME = WIN32_ERROR.ERROR_DUP_DOMAINNAME;
pub const ERROR_NO_NETWORK = WIN32_ERROR.ERROR_NO_NETWORK;
pub const ERROR_CANCELLED = WIN32_ERROR.ERROR_CANCELLED;
pub const ERROR_USER_MAPPED_FILE = WIN32_ERROR.ERROR_USER_MAPPED_FILE;
pub const ERROR_CONNECTION_REFUSED = WIN32_ERROR.ERROR_CONNECTION_REFUSED;
pub const ERROR_GRACEFUL_DISCONNECT = WIN32_ERROR.ERROR_GRACEFUL_DISCONNECT;
pub const ERROR_ADDRESS_ALREADY_ASSOCIATED = WIN32_ERROR.ERROR_ADDRESS_ALREADY_ASSOCIATED;
pub const ERROR_ADDRESS_NOT_ASSOCIATED = WIN32_ERROR.ERROR_ADDRESS_NOT_ASSOCIATED;
pub const ERROR_CONNECTION_INVALID = WIN32_ERROR.ERROR_CONNECTION_INVALID;
pub const ERROR_CONNECTION_ACTIVE = WIN32_ERROR.ERROR_CONNECTION_ACTIVE;
pub const ERROR_NETWORK_UNREACHABLE = WIN32_ERROR.ERROR_NETWORK_UNREACHABLE;
pub const ERROR_HOST_UNREACHABLE = WIN32_ERROR.ERROR_HOST_UNREACHABLE;
pub const ERROR_PROTOCOL_UNREACHABLE = WIN32_ERROR.ERROR_PROTOCOL_UNREACHABLE;
pub const ERROR_PORT_UNREACHABLE = WIN32_ERROR.ERROR_PORT_UNREACHABLE;
pub const ERROR_REQUEST_ABORTED = WIN32_ERROR.ERROR_REQUEST_ABORTED;
pub const ERROR_CONNECTION_ABORTED = WIN32_ERROR.ERROR_CONNECTION_ABORTED;
pub const ERROR_RETRY = WIN32_ERROR.ERROR_RETRY;
pub const ERROR_CONNECTION_COUNT_LIMIT = WIN32_ERROR.ERROR_CONNECTION_COUNT_LIMIT;
pub const ERROR_LOGIN_TIME_RESTRICTION = WIN32_ERROR.ERROR_LOGIN_TIME_RESTRICTION;
pub const ERROR_LOGIN_WKSTA_RESTRICTION = WIN32_ERROR.ERROR_LOGIN_WKSTA_RESTRICTION;
pub const ERROR_INCORRECT_ADDRESS = WIN32_ERROR.ERROR_INCORRECT_ADDRESS;
pub const ERROR_ALREADY_REGISTERED = WIN32_ERROR.ERROR_ALREADY_REGISTERED;
pub const ERROR_SERVICE_NOT_FOUND = WIN32_ERROR.ERROR_SERVICE_NOT_FOUND;
pub const ERROR_NOT_AUTHENTICATED = WIN32_ERROR.ERROR_NOT_AUTHENTICATED;
pub const ERROR_NOT_LOGGED_ON = WIN32_ERROR.ERROR_NOT_LOGGED_ON;
pub const ERROR_CONTINUE = WIN32_ERROR.ERROR_CONTINUE;
pub const ERROR_ALREADY_INITIALIZED = WIN32_ERROR.ERROR_ALREADY_INITIALIZED;
pub const ERROR_NO_MORE_DEVICES = WIN32_ERROR.ERROR_NO_MORE_DEVICES;
pub const ERROR_NO_SUCH_SITE = WIN32_ERROR.ERROR_NO_SUCH_SITE;
pub const ERROR_DOMAIN_CONTROLLER_EXISTS = WIN32_ERROR.ERROR_DOMAIN_CONTROLLER_EXISTS;
pub const ERROR_ONLY_IF_CONNECTED = WIN32_ERROR.ERROR_ONLY_IF_CONNECTED;
pub const ERROR_OVERRIDE_NOCHANGES = WIN32_ERROR.ERROR_OVERRIDE_NOCHANGES;
pub const ERROR_BAD_USER_PROFILE = WIN32_ERROR.ERROR_BAD_USER_PROFILE;
pub const ERROR_NOT_SUPPORTED_ON_SBS = WIN32_ERROR.ERROR_NOT_SUPPORTED_ON_SBS;
pub const ERROR_SERVER_SHUTDOWN_IN_PROGRESS = WIN32_ERROR.ERROR_SERVER_SHUTDOWN_IN_PROGRESS;
pub const ERROR_HOST_DOWN = WIN32_ERROR.ERROR_HOST_DOWN;
pub const ERROR_NON_ACCOUNT_SID = WIN32_ERROR.ERROR_NON_ACCOUNT_SID;
pub const ERROR_NON_DOMAIN_SID = WIN32_ERROR.ERROR_NON_DOMAIN_SID;
pub const ERROR_APPHELP_BLOCK = WIN32_ERROR.ERROR_APPHELP_BLOCK;
pub const ERROR_ACCESS_DISABLED_BY_POLICY = WIN32_ERROR.ERROR_ACCESS_DISABLED_BY_POLICY;
pub const ERROR_REG_NAT_CONSUMPTION = WIN32_ERROR.ERROR_REG_NAT_CONSUMPTION;
pub const ERROR_CSCSHARE_OFFLINE = WIN32_ERROR.ERROR_CSCSHARE_OFFLINE;
pub const ERROR_PKINIT_FAILURE = WIN32_ERROR.ERROR_PKINIT_FAILURE;
pub const ERROR_SMARTCARD_SUBSYSTEM_FAILURE = WIN32_ERROR.ERROR_SMARTCARD_SUBSYSTEM_FAILURE;
pub const ERROR_DOWNGRADE_DETECTED = WIN32_ERROR.ERROR_DOWNGRADE_DETECTED;
pub const ERROR_MACHINE_LOCKED = WIN32_ERROR.ERROR_MACHINE_LOCKED;
pub const ERROR_SMB_GUEST_LOGON_BLOCKED = WIN32_ERROR.ERROR_SMB_GUEST_LOGON_BLOCKED;
pub const ERROR_CALLBACK_SUPPLIED_INVALID_DATA = WIN32_ERROR.ERROR_CALLBACK_SUPPLIED_INVALID_DATA;
pub const ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED = WIN32_ERROR.ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED;
pub const ERROR_DRIVER_BLOCKED = WIN32_ERROR.ERROR_DRIVER_BLOCKED;
pub const ERROR_INVALID_IMPORT_OF_NON_DLL = WIN32_ERROR.ERROR_INVALID_IMPORT_OF_NON_DLL;
pub const ERROR_ACCESS_DISABLED_WEBBLADE = WIN32_ERROR.ERROR_ACCESS_DISABLED_WEBBLADE;
pub const ERROR_ACCESS_DISABLED_WEBBLADE_TAMPER = WIN32_ERROR.ERROR_ACCESS_DISABLED_WEBBLADE_TAMPER;
pub const ERROR_RECOVERY_FAILURE = WIN32_ERROR.ERROR_RECOVERY_FAILURE;
pub const ERROR_ALREADY_FIBER = WIN32_ERROR.ERROR_ALREADY_FIBER;
pub const ERROR_ALREADY_THREAD = WIN32_ERROR.ERROR_ALREADY_THREAD;
pub const ERROR_STACK_BUFFER_OVERRUN = WIN32_ERROR.ERROR_STACK_BUFFER_OVERRUN;
pub const ERROR_PARAMETER_QUOTA_EXCEEDED = WIN32_ERROR.ERROR_PARAMETER_QUOTA_EXCEEDED;
pub const ERROR_DEBUGGER_INACTIVE = WIN32_ERROR.ERROR_DEBUGGER_INACTIVE;
pub const ERROR_DELAY_LOAD_FAILED = WIN32_ERROR.ERROR_DELAY_LOAD_FAILED;
pub const ERROR_VDM_DISALLOWED = WIN32_ERROR.ERROR_VDM_DISALLOWED;
pub const ERROR_UNIDENTIFIED_ERROR = WIN32_ERROR.ERROR_UNIDENTIFIED_ERROR;
pub const ERROR_INVALID_CRUNTIME_PARAMETER = WIN32_ERROR.ERROR_INVALID_CRUNTIME_PARAMETER;
pub const ERROR_BEYOND_VDL = WIN32_ERROR.ERROR_BEYOND_VDL;
pub const ERROR_INCOMPATIBLE_SERVICE_SID_TYPE = WIN32_ERROR.ERROR_INCOMPATIBLE_SERVICE_SID_TYPE;
pub const ERROR_DRIVER_PROCESS_TERMINATED = WIN32_ERROR.ERROR_DRIVER_PROCESS_TERMINATED;
pub const ERROR_IMPLEMENTATION_LIMIT = WIN32_ERROR.ERROR_IMPLEMENTATION_LIMIT;
pub const ERROR_PROCESS_IS_PROTECTED = WIN32_ERROR.ERROR_PROCESS_IS_PROTECTED;
pub const ERROR_SERVICE_NOTIFY_CLIENT_LAGGING = WIN32_ERROR.ERROR_SERVICE_NOTIFY_CLIENT_LAGGING;
pub const ERROR_DISK_QUOTA_EXCEEDED = WIN32_ERROR.ERROR_DISK_QUOTA_EXCEEDED;
pub const ERROR_CONTENT_BLOCKED = WIN32_ERROR.ERROR_CONTENT_BLOCKED;
pub const ERROR_INCOMPATIBLE_SERVICE_PRIVILEGE = WIN32_ERROR.ERROR_INCOMPATIBLE_SERVICE_PRIVILEGE;
pub const ERROR_APP_HANG = WIN32_ERROR.ERROR_APP_HANG;
pub const ERROR_INVALID_LABEL = WIN32_ERROR.ERROR_INVALID_LABEL;
pub const ERROR_NOT_ALL_ASSIGNED = WIN32_ERROR.ERROR_NOT_ALL_ASSIGNED;
pub const ERROR_SOME_NOT_MAPPED = WIN32_ERROR.ERROR_SOME_NOT_MAPPED;
pub const ERROR_NO_QUOTAS_FOR_ACCOUNT = WIN32_ERROR.ERROR_NO_QUOTAS_FOR_ACCOUNT;
pub const ERROR_LOCAL_USER_SESSION_KEY = WIN32_ERROR.ERROR_LOCAL_USER_SESSION_KEY;
pub const ERROR_NULL_LM_PASSWORD = WIN32_ERROR.ERROR_NULL_LM_PASSWORD;
pub const ERROR_UNKNOWN_REVISION = WIN32_ERROR.ERROR_UNKNOWN_REVISION;
pub const ERROR_REVISION_MISMATCH = WIN32_ERROR.ERROR_REVISION_MISMATCH;
pub const ERROR_INVALID_OWNER = WIN32_ERROR.ERROR_INVALID_OWNER;
pub const ERROR_INVALID_PRIMARY_GROUP = WIN32_ERROR.ERROR_INVALID_PRIMARY_GROUP;
pub const ERROR_NO_IMPERSONATION_TOKEN = WIN32_ERROR.ERROR_NO_IMPERSONATION_TOKEN;
pub const ERROR_CANT_DISABLE_MANDATORY = WIN32_ERROR.ERROR_CANT_DISABLE_MANDATORY;
pub const ERROR_NO_LOGON_SERVERS = WIN32_ERROR.ERROR_NO_LOGON_SERVERS;
pub const ERROR_NO_SUCH_LOGON_SESSION = WIN32_ERROR.ERROR_NO_SUCH_LOGON_SESSION;
pub const ERROR_NO_SUCH_PRIVILEGE = WIN32_ERROR.ERROR_NO_SUCH_PRIVILEGE;
pub const ERROR_PRIVILEGE_NOT_HELD = WIN32_ERROR.ERROR_PRIVILEGE_NOT_HELD;
pub const ERROR_INVALID_ACCOUNT_NAME = WIN32_ERROR.ERROR_INVALID_ACCOUNT_NAME;
pub const ERROR_USER_EXISTS = WIN32_ERROR.ERROR_USER_EXISTS;
pub const ERROR_NO_SUCH_USER = WIN32_ERROR.ERROR_NO_SUCH_USER;
pub const ERROR_GROUP_EXISTS = WIN32_ERROR.ERROR_GROUP_EXISTS;
pub const ERROR_NO_SUCH_GROUP = WIN32_ERROR.ERROR_NO_SUCH_GROUP;
pub const ERROR_MEMBER_IN_GROUP = WIN32_ERROR.ERROR_MEMBER_IN_GROUP;
pub const ERROR_MEMBER_NOT_IN_GROUP = WIN32_ERROR.ERROR_MEMBER_NOT_IN_GROUP;
pub const ERROR_LAST_ADMIN = WIN32_ERROR.ERROR_LAST_ADMIN;
pub const ERROR_WRONG_PASSWORD = WIN32_ERROR.ERROR_WRONG_PASSWORD;
pub const ERROR_ILL_FORMED_PASSWORD = WIN32_ERROR.ERROR_ILL_FORMED_PASSWORD;
pub const ERROR_PASSWORD_RESTRICTION = WIN32_ERROR.ERROR_PASSWORD_RESTRICTION;
pub const ERROR_LOGON_FAILURE = WIN32_ERROR.ERROR_LOGON_FAILURE;
pub const ERROR_ACCOUNT_RESTRICTION = WIN32_ERROR.ERROR_ACCOUNT_RESTRICTION;
pub const ERROR_INVALID_LOGON_HOURS = WIN32_ERROR.ERROR_INVALID_LOGON_HOURS;
pub const ERROR_INVALID_WORKSTATION = WIN32_ERROR.ERROR_INVALID_WORKSTATION;
pub const ERROR_PASSWORD_EXPIRED = WIN32_ERROR.ERROR_PASSWORD_EXPIRED;
pub const ERROR_ACCOUNT_DISABLED = WIN32_ERROR.ERROR_ACCOUNT_DISABLED;
pub const ERROR_NONE_MAPPED = WIN32_ERROR.ERROR_NONE_MAPPED;
pub const ERROR_TOO_MANY_LUIDS_REQUESTED = WIN32_ERROR.ERROR_TOO_MANY_LUIDS_REQUESTED;
pub const ERROR_LUIDS_EXHAUSTED = WIN32_ERROR.ERROR_LUIDS_EXHAUSTED;
pub const ERROR_INVALID_SUB_AUTHORITY = WIN32_ERROR.ERROR_INVALID_SUB_AUTHORITY;
pub const ERROR_INVALID_ACL = WIN32_ERROR.ERROR_INVALID_ACL;
pub const ERROR_INVALID_SID = WIN32_ERROR.ERROR_INVALID_SID;
pub const ERROR_INVALID_SECURITY_DESCR = WIN32_ERROR.ERROR_INVALID_SECURITY_DESCR;
pub const ERROR_BAD_INHERITANCE_ACL = WIN32_ERROR.ERROR_BAD_INHERITANCE_ACL;
pub const ERROR_SERVER_DISABLED = WIN32_ERROR.ERROR_SERVER_DISABLED;
pub const ERROR_SERVER_NOT_DISABLED = WIN32_ERROR.ERROR_SERVER_NOT_DISABLED;
pub const ERROR_INVALID_ID_AUTHORITY = WIN32_ERROR.ERROR_INVALID_ID_AUTHORITY;
pub const ERROR_ALLOTTED_SPACE_EXCEEDED = WIN32_ERROR.ERROR_ALLOTTED_SPACE_EXCEEDED;
pub const ERROR_INVALID_GROUP_ATTRIBUTES = WIN32_ERROR.ERROR_INVALID_GROUP_ATTRIBUTES;
pub const ERROR_BAD_IMPERSONATION_LEVEL = WIN32_ERROR.ERROR_BAD_IMPERSONATION_LEVEL;
pub const ERROR_CANT_OPEN_ANONYMOUS = WIN32_ERROR.ERROR_CANT_OPEN_ANONYMOUS;
pub const ERROR_BAD_VALIDATION_CLASS = WIN32_ERROR.ERROR_BAD_VALIDATION_CLASS;
pub const ERROR_BAD_TOKEN_TYPE = WIN32_ERROR.ERROR_BAD_TOKEN_TYPE;
pub const ERROR_NO_SECURITY_ON_OBJECT = WIN32_ERROR.ERROR_NO_SECURITY_ON_OBJECT;
pub const ERROR_CANT_ACCESS_DOMAIN_INFO = WIN32_ERROR.ERROR_CANT_ACCESS_DOMAIN_INFO;
pub const ERROR_INVALID_SERVER_STATE = WIN32_ERROR.ERROR_INVALID_SERVER_STATE;
pub const ERROR_INVALID_DOMAIN_STATE = WIN32_ERROR.ERROR_INVALID_DOMAIN_STATE;
pub const ERROR_INVALID_DOMAIN_ROLE = WIN32_ERROR.ERROR_INVALID_DOMAIN_ROLE;
pub const ERROR_NO_SUCH_DOMAIN = WIN32_ERROR.ERROR_NO_SUCH_DOMAIN;
pub const ERROR_DOMAIN_EXISTS = WIN32_ERROR.ERROR_DOMAIN_EXISTS;
pub const ERROR_DOMAIN_LIMIT_EXCEEDED = WIN32_ERROR.ERROR_DOMAIN_LIMIT_EXCEEDED;
pub const ERROR_INTERNAL_DB_CORRUPTION = WIN32_ERROR.ERROR_INTERNAL_DB_CORRUPTION;
pub const ERROR_INTERNAL_ERROR = WIN32_ERROR.ERROR_INTERNAL_ERROR;
pub const ERROR_GENERIC_NOT_MAPPED = WIN32_ERROR.ERROR_GENERIC_NOT_MAPPED;
pub const ERROR_BAD_DESCRIPTOR_FORMAT = WIN32_ERROR.ERROR_BAD_DESCRIPTOR_FORMAT;
pub const ERROR_NOT_LOGON_PROCESS = WIN32_ERROR.ERROR_NOT_LOGON_PROCESS;
pub const ERROR_LOGON_SESSION_EXISTS = WIN32_ERROR.ERROR_LOGON_SESSION_EXISTS;
pub const ERROR_NO_SUCH_PACKAGE = WIN32_ERROR.ERROR_NO_SUCH_PACKAGE;
pub const ERROR_BAD_LOGON_SESSION_STATE = WIN32_ERROR.ERROR_BAD_LOGON_SESSION_STATE;
pub const ERROR_LOGON_SESSION_COLLISION = WIN32_ERROR.ERROR_LOGON_SESSION_COLLISION;
pub const ERROR_INVALID_LOGON_TYPE = WIN32_ERROR.ERROR_INVALID_LOGON_TYPE;
pub const ERROR_CANNOT_IMPERSONATE = WIN32_ERROR.ERROR_CANNOT_IMPERSONATE;
pub const ERROR_RXACT_INVALID_STATE = WIN32_ERROR.ERROR_RXACT_INVALID_STATE;
pub const ERROR_RXACT_COMMIT_FAILURE = WIN32_ERROR.ERROR_RXACT_COMMIT_FAILURE;
pub const ERROR_SPECIAL_ACCOUNT = WIN32_ERROR.ERROR_SPECIAL_ACCOUNT;
pub const ERROR_SPECIAL_GROUP = WIN32_ERROR.ERROR_SPECIAL_GROUP;
pub const ERROR_SPECIAL_USER = WIN32_ERROR.ERROR_SPECIAL_USER;
pub const ERROR_MEMBERS_PRIMARY_GROUP = WIN32_ERROR.ERROR_MEMBERS_PRIMARY_GROUP;
pub const ERROR_TOKEN_ALREADY_IN_USE = WIN32_ERROR.ERROR_TOKEN_ALREADY_IN_USE;
pub const ERROR_NO_SUCH_ALIAS = WIN32_ERROR.ERROR_NO_SUCH_ALIAS;
pub const ERROR_MEMBER_NOT_IN_ALIAS = WIN32_ERROR.ERROR_MEMBER_NOT_IN_ALIAS;
pub const ERROR_MEMBER_IN_ALIAS = WIN32_ERROR.ERROR_MEMBER_IN_ALIAS;
pub const ERROR_ALIAS_EXISTS = WIN32_ERROR.ERROR_ALIAS_EXISTS;
pub const ERROR_LOGON_NOT_GRANTED = WIN32_ERROR.ERROR_LOGON_NOT_GRANTED;
pub const ERROR_TOO_MANY_SECRETS = WIN32_ERROR.ERROR_TOO_MANY_SECRETS;
pub const ERROR_SECRET_TOO_LONG = WIN32_ERROR.ERROR_SECRET_TOO_LONG;
pub const ERROR_INTERNAL_DB_ERROR = WIN32_ERROR.ERROR_INTERNAL_DB_ERROR;
pub const ERROR_TOO_MANY_CONTEXT_IDS = WIN32_ERROR.ERROR_TOO_MANY_CONTEXT_IDS;
pub const ERROR_LOGON_TYPE_NOT_GRANTED = WIN32_ERROR.ERROR_LOGON_TYPE_NOT_GRANTED;
pub const ERROR_NT_CROSS_ENCRYPTION_REQUIRED = WIN32_ERROR.ERROR_NT_CROSS_ENCRYPTION_REQUIRED;
pub const ERROR_NO_SUCH_MEMBER = WIN32_ERROR.ERROR_NO_SUCH_MEMBER;
pub const ERROR_INVALID_MEMBER = WIN32_ERROR.ERROR_INVALID_MEMBER;
pub const ERROR_TOO_MANY_SIDS = WIN32_ERROR.ERROR_TOO_MANY_SIDS;
pub const ERROR_LM_CROSS_ENCRYPTION_REQUIRED = WIN32_ERROR.ERROR_LM_CROSS_ENCRYPTION_REQUIRED;
pub const ERROR_NO_INHERITANCE = WIN32_ERROR.ERROR_NO_INHERITANCE;
pub const ERROR_FILE_CORRUPT = WIN32_ERROR.ERROR_FILE_CORRUPT;
pub const ERROR_DISK_CORRUPT = WIN32_ERROR.ERROR_DISK_CORRUPT;
pub const ERROR_NO_USER_SESSION_KEY = WIN32_ERROR.ERROR_NO_USER_SESSION_KEY;
pub const ERROR_LICENSE_QUOTA_EXCEEDED = WIN32_ERROR.ERROR_LICENSE_QUOTA_EXCEEDED;
pub const ERROR_WRONG_TARGET_NAME = WIN32_ERROR.ERROR_WRONG_TARGET_NAME;
pub const ERROR_MUTUAL_AUTH_FAILED = WIN32_ERROR.ERROR_MUTUAL_AUTH_FAILED;
pub const ERROR_TIME_SKEW = WIN32_ERROR.ERROR_TIME_SKEW;
pub const ERROR_CURRENT_DOMAIN_NOT_ALLOWED = WIN32_ERROR.ERROR_CURRENT_DOMAIN_NOT_ALLOWED;
pub const ERROR_INVALID_WINDOW_HANDLE = WIN32_ERROR.ERROR_INVALID_WINDOW_HANDLE;
pub const ERROR_INVALID_MENU_HANDLE = WIN32_ERROR.ERROR_INVALID_MENU_HANDLE;
pub const ERROR_INVALID_CURSOR_HANDLE = WIN32_ERROR.ERROR_INVALID_CURSOR_HANDLE;
pub const ERROR_INVALID_ACCEL_HANDLE = WIN32_ERROR.ERROR_INVALID_ACCEL_HANDLE;
pub const ERROR_INVALID_HOOK_HANDLE = WIN32_ERROR.ERROR_INVALID_HOOK_HANDLE;
pub const ERROR_INVALID_DWP_HANDLE = WIN32_ERROR.ERROR_INVALID_DWP_HANDLE;
pub const ERROR_TLW_WITH_WSCHILD = WIN32_ERROR.ERROR_TLW_WITH_WSCHILD;
pub const ERROR_CANNOT_FIND_WND_CLASS = WIN32_ERROR.ERROR_CANNOT_FIND_WND_CLASS;
pub const ERROR_WINDOW_OF_OTHER_THREAD = WIN32_ERROR.ERROR_WINDOW_OF_OTHER_THREAD;
pub const ERROR_HOTKEY_ALREADY_REGISTERED = WIN32_ERROR.ERROR_HOTKEY_ALREADY_REGISTERED;
pub const ERROR_CLASS_ALREADY_EXISTS = WIN32_ERROR.ERROR_CLASS_ALREADY_EXISTS;
pub const ERROR_CLASS_DOES_NOT_EXIST = WIN32_ERROR.ERROR_CLASS_DOES_NOT_EXIST;
pub const ERROR_CLASS_HAS_WINDOWS = WIN32_ERROR.ERROR_CLASS_HAS_WINDOWS;
pub const ERROR_INVALID_INDEX = WIN32_ERROR.ERROR_INVALID_INDEX;
pub const ERROR_INVALID_ICON_HANDLE = WIN32_ERROR.ERROR_INVALID_ICON_HANDLE;
pub const ERROR_PRIVATE_DIALOG_INDEX = WIN32_ERROR.ERROR_PRIVATE_DIALOG_INDEX;
pub const ERROR_LISTBOX_ID_NOT_FOUND = WIN32_ERROR.ERROR_LISTBOX_ID_NOT_FOUND;
pub const ERROR_NO_WILDCARD_CHARACTERS = WIN32_ERROR.ERROR_NO_WILDCARD_CHARACTERS;
pub const ERROR_CLIPBOARD_NOT_OPEN = WIN32_ERROR.ERROR_CLIPBOARD_NOT_OPEN;
pub const ERROR_HOTKEY_NOT_REGISTERED = WIN32_ERROR.ERROR_HOTKEY_NOT_REGISTERED;
pub const ERROR_WINDOW_NOT_DIALOG = WIN32_ERROR.ERROR_WINDOW_NOT_DIALOG;
pub const ERROR_CONTROL_ID_NOT_FOUND = WIN32_ERROR.ERROR_CONTROL_ID_NOT_FOUND;
pub const ERROR_INVALID_COMBOBOX_MESSAGE = WIN32_ERROR.ERROR_INVALID_COMBOBOX_MESSAGE;
pub const ERROR_WINDOW_NOT_COMBOBOX = WIN32_ERROR.ERROR_WINDOW_NOT_COMBOBOX;
pub const ERROR_INVALID_EDIT_HEIGHT = WIN32_ERROR.ERROR_INVALID_EDIT_HEIGHT;
pub const ERROR_DC_NOT_FOUND = WIN32_ERROR.ERROR_DC_NOT_FOUND;
pub const ERROR_INVALID_HOOK_FILTER = WIN32_ERROR.ERROR_INVALID_HOOK_FILTER;
pub const ERROR_INVALID_FILTER_PROC = WIN32_ERROR.ERROR_INVALID_FILTER_PROC;
pub const ERROR_HOOK_NEEDS_HMOD = WIN32_ERROR.ERROR_HOOK_NEEDS_HMOD;
pub const ERROR_GLOBAL_ONLY_HOOK = WIN32_ERROR.ERROR_GLOBAL_ONLY_HOOK;
pub const ERROR_JOURNAL_HOOK_SET = WIN32_ERROR.ERROR_JOURNAL_HOOK_SET;
pub const ERROR_HOOK_NOT_INSTALLED = WIN32_ERROR.ERROR_HOOK_NOT_INSTALLED;
pub const ERROR_INVALID_LB_MESSAGE = WIN32_ERROR.ERROR_INVALID_LB_MESSAGE;
pub const ERROR_SETCOUNT_ON_BAD_LB = WIN32_ERROR.ERROR_SETCOUNT_ON_BAD_LB;
pub const ERROR_LB_WITHOUT_TABSTOPS = WIN32_ERROR.ERROR_LB_WITHOUT_TABSTOPS;
pub const ERROR_DESTROY_OBJECT_OF_OTHER_THREAD = WIN32_ERROR.ERROR_DESTROY_OBJECT_OF_OTHER_THREAD;
pub const ERROR_CHILD_WINDOW_MENU = WIN32_ERROR.ERROR_CHILD_WINDOW_MENU;
pub const ERROR_NO_SYSTEM_MENU = WIN32_ERROR.ERROR_NO_SYSTEM_MENU;
pub const ERROR_INVALID_MSGBOX_STYLE = WIN32_ERROR.ERROR_INVALID_MSGBOX_STYLE;
pub const ERROR_INVALID_SPI_VALUE = WIN32_ERROR.ERROR_INVALID_SPI_VALUE;
pub const ERROR_SCREEN_ALREADY_LOCKED = WIN32_ERROR.ERROR_SCREEN_ALREADY_LOCKED;
pub const ERROR_HWNDS_HAVE_DIFF_PARENT = WIN32_ERROR.ERROR_HWNDS_HAVE_DIFF_PARENT;
pub const ERROR_NOT_CHILD_WINDOW = WIN32_ERROR.ERROR_NOT_CHILD_WINDOW;
pub const ERROR_INVALID_GW_COMMAND = WIN32_ERROR.ERROR_INVALID_GW_COMMAND;
pub const ERROR_INVALID_THREAD_ID = WIN32_ERROR.ERROR_INVALID_THREAD_ID;
pub const ERROR_NON_MDICHILD_WINDOW = WIN32_ERROR.ERROR_NON_MDICHILD_WINDOW;
pub const ERROR_POPUP_ALREADY_ACTIVE = WIN32_ERROR.ERROR_POPUP_ALREADY_ACTIVE;
pub const ERROR_NO_SCROLLBARS = WIN32_ERROR.ERROR_NO_SCROLLBARS;
pub const ERROR_INVALID_SCROLLBAR_RANGE = WIN32_ERROR.ERROR_INVALID_SCROLLBAR_RANGE;
pub const ERROR_INVALID_SHOWWIN_COMMAND = WIN32_ERROR.ERROR_INVALID_SHOWWIN_COMMAND;
pub const ERROR_NO_SYSTEM_RESOURCES = WIN32_ERROR.ERROR_NO_SYSTEM_RESOURCES;
pub const ERROR_NONPAGED_SYSTEM_RESOURCES = WIN32_ERROR.ERROR_NONPAGED_SYSTEM_RESOURCES;
pub const ERROR_PAGED_SYSTEM_RESOURCES = WIN32_ERROR.ERROR_PAGED_SYSTEM_RESOURCES;
pub const ERROR_WORKING_SET_QUOTA = WIN32_ERROR.ERROR_WORKING_SET_QUOTA;
pub const ERROR_PAGEFILE_QUOTA = WIN32_ERROR.ERROR_PAGEFILE_QUOTA;
pub const ERROR_COMMITMENT_LIMIT = WIN32_ERROR.ERROR_COMMITMENT_LIMIT;
pub const ERROR_MENU_ITEM_NOT_FOUND = WIN32_ERROR.ERROR_MENU_ITEM_NOT_FOUND;
pub const ERROR_INVALID_KEYBOARD_HANDLE = WIN32_ERROR.ERROR_INVALID_KEYBOARD_HANDLE;
pub const ERROR_HOOK_TYPE_NOT_ALLOWED = WIN32_ERROR.ERROR_HOOK_TYPE_NOT_ALLOWED;
pub const ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION = WIN32_ERROR.ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION;
pub const ERROR_TIMEOUT = WIN32_ERROR.ERROR_TIMEOUT;
pub const ERROR_INVALID_MONITOR_HANDLE = WIN32_ERROR.ERROR_INVALID_MONITOR_HANDLE;
pub const ERROR_INCORRECT_SIZE = WIN32_ERROR.ERROR_INCORRECT_SIZE;
pub const ERROR_SYMLINK_CLASS_DISABLED = WIN32_ERROR.ERROR_SYMLINK_CLASS_DISABLED;
pub const ERROR_SYMLINK_NOT_SUPPORTED = WIN32_ERROR.ERROR_SYMLINK_NOT_SUPPORTED;
pub const ERROR_XML_PARSE_ERROR = WIN32_ERROR.ERROR_XML_PARSE_ERROR;
pub const ERROR_XMLDSIG_ERROR = WIN32_ERROR.ERROR_XMLDSIG_ERROR;
pub const ERROR_RESTART_APPLICATION = WIN32_ERROR.ERROR_RESTART_APPLICATION;
pub const ERROR_WRONG_COMPARTMENT = WIN32_ERROR.ERROR_WRONG_COMPARTMENT;
pub const ERROR_AUTHIP_FAILURE = WIN32_ERROR.ERROR_AUTHIP_FAILURE;
pub const ERROR_NO_NVRAM_RESOURCES = WIN32_ERROR.ERROR_NO_NVRAM_RESOURCES;
pub const ERROR_NOT_GUI_PROCESS = WIN32_ERROR.ERROR_NOT_GUI_PROCESS;
pub const ERROR_EVENTLOG_FILE_CORRUPT = WIN32_ERROR.ERROR_EVENTLOG_FILE_CORRUPT;
pub const ERROR_EVENTLOG_CANT_START = WIN32_ERROR.ERROR_EVENTLOG_CANT_START;
pub const ERROR_LOG_FILE_FULL = WIN32_ERROR.ERROR_LOG_FILE_FULL;
pub const ERROR_EVENTLOG_FILE_CHANGED = WIN32_ERROR.ERROR_EVENTLOG_FILE_CHANGED;
pub const ERROR_CONTAINER_ASSIGNED = WIN32_ERROR.ERROR_CONTAINER_ASSIGNED;
pub const ERROR_JOB_NO_CONTAINER = WIN32_ERROR.ERROR_JOB_NO_CONTAINER;
pub const ERROR_INVALID_TASK_NAME = WIN32_ERROR.ERROR_INVALID_TASK_NAME;
pub const ERROR_INVALID_TASK_INDEX = WIN32_ERROR.ERROR_INVALID_TASK_INDEX;
pub const ERROR_THREAD_ALREADY_IN_TASK = WIN32_ERROR.ERROR_THREAD_ALREADY_IN_TASK;
pub const ERROR_INSTALL_SERVICE_FAILURE = WIN32_ERROR.ERROR_INSTALL_SERVICE_FAILURE;
pub const ERROR_INSTALL_USEREXIT = WIN32_ERROR.ERROR_INSTALL_USEREXIT;
pub const ERROR_INSTALL_FAILURE = WIN32_ERROR.ERROR_INSTALL_FAILURE;
pub const ERROR_INSTALL_SUSPEND = WIN32_ERROR.ERROR_INSTALL_SUSPEND;
pub const ERROR_UNKNOWN_PRODUCT = WIN32_ERROR.ERROR_UNKNOWN_PRODUCT;
pub const ERROR_UNKNOWN_FEATURE = WIN32_ERROR.ERROR_UNKNOWN_FEATURE;
pub const ERROR_UNKNOWN_COMPONENT = WIN32_ERROR.ERROR_UNKNOWN_COMPONENT;
pub const ERROR_UNKNOWN_PROPERTY = WIN32_ERROR.ERROR_UNKNOWN_PROPERTY;
pub const ERROR_INVALID_HANDLE_STATE = WIN32_ERROR.ERROR_INVALID_HANDLE_STATE;
pub const ERROR_BAD_CONFIGURATION = WIN32_ERROR.ERROR_BAD_CONFIGURATION;
pub const ERROR_INDEX_ABSENT = WIN32_ERROR.ERROR_INDEX_ABSENT;
pub const ERROR_INSTALL_SOURCE_ABSENT = WIN32_ERROR.ERROR_INSTALL_SOURCE_ABSENT;
pub const ERROR_INSTALL_PACKAGE_VERSION = WIN32_ERROR.ERROR_INSTALL_PACKAGE_VERSION;
pub const ERROR_PRODUCT_UNINSTALLED = WIN32_ERROR.ERROR_PRODUCT_UNINSTALLED;
pub const ERROR_BAD_QUERY_SYNTAX = WIN32_ERROR.ERROR_BAD_QUERY_SYNTAX;
pub const ERROR_INVALID_FIELD = WIN32_ERROR.ERROR_INVALID_FIELD;
pub const ERROR_DEVICE_REMOVED = WIN32_ERROR.ERROR_DEVICE_REMOVED;
pub const ERROR_INSTALL_ALREADY_RUNNING = WIN32_ERROR.ERROR_INSTALL_ALREADY_RUNNING;
pub const ERROR_INSTALL_PACKAGE_OPEN_FAILED = WIN32_ERROR.ERROR_INSTALL_PACKAGE_OPEN_FAILED;
pub const ERROR_INSTALL_PACKAGE_INVALID = WIN32_ERROR.ERROR_INSTALL_PACKAGE_INVALID;
pub const ERROR_INSTALL_UI_FAILURE = WIN32_ERROR.ERROR_INSTALL_UI_FAILURE;
pub const ERROR_INSTALL_LOG_FAILURE = WIN32_ERROR.ERROR_INSTALL_LOG_FAILURE;
pub const ERROR_INSTALL_LANGUAGE_UNSUPPORTED = WIN32_ERROR.ERROR_INSTALL_LANGUAGE_UNSUPPORTED;
pub const ERROR_INSTALL_TRANSFORM_FAILURE = WIN32_ERROR.ERROR_INSTALL_TRANSFORM_FAILURE;
pub const ERROR_INSTALL_PACKAGE_REJECTED = WIN32_ERROR.ERROR_INSTALL_PACKAGE_REJECTED;
pub const ERROR_FUNCTION_NOT_CALLED = WIN32_ERROR.ERROR_FUNCTION_NOT_CALLED;
pub const ERROR_FUNCTION_FAILED = WIN32_ERROR.ERROR_FUNCTION_FAILED;
pub const ERROR_INVALID_TABLE = WIN32_ERROR.ERROR_INVALID_TABLE;
pub const ERROR_DATATYPE_MISMATCH = WIN32_ERROR.ERROR_DATATYPE_MISMATCH;
pub const ERROR_UNSUPPORTED_TYPE = WIN32_ERROR.ERROR_UNSUPPORTED_TYPE;
pub const ERROR_CREATE_FAILED = WIN32_ERROR.ERROR_CREATE_FAILED;
pub const ERROR_INSTALL_TEMP_UNWRITABLE = WIN32_ERROR.ERROR_INSTALL_TEMP_UNWRITABLE;
pub const ERROR_INSTALL_PLATFORM_UNSUPPORTED = WIN32_ERROR.ERROR_INSTALL_PLATFORM_UNSUPPORTED;
pub const ERROR_INSTALL_NOTUSED = WIN32_ERROR.ERROR_INSTALL_NOTUSED;
pub const ERROR_PATCH_PACKAGE_OPEN_FAILED = WIN32_ERROR.ERROR_PATCH_PACKAGE_OPEN_FAILED;
pub const ERROR_PATCH_PACKAGE_INVALID = WIN32_ERROR.ERROR_PATCH_PACKAGE_INVALID;
pub const ERROR_PATCH_PACKAGE_UNSUPPORTED = WIN32_ERROR.ERROR_PATCH_PACKAGE_UNSUPPORTED;
pub const ERROR_PRODUCT_VERSION = WIN32_ERROR.ERROR_PRODUCT_VERSION;
pub const ERROR_INVALID_COMMAND_LINE = WIN32_ERROR.ERROR_INVALID_COMMAND_LINE;
pub const ERROR_INSTALL_REMOTE_DISALLOWED = WIN32_ERROR.ERROR_INSTALL_REMOTE_DISALLOWED;
pub const ERROR_SUCCESS_REBOOT_INITIATED = WIN32_ERROR.ERROR_SUCCESS_REBOOT_INITIATED;
pub const ERROR_PATCH_TARGET_NOT_FOUND = WIN32_ERROR.ERROR_PATCH_TARGET_NOT_FOUND;
pub const ERROR_PATCH_PACKAGE_REJECTED = WIN32_ERROR.ERROR_PATCH_PACKAGE_REJECTED;
pub const ERROR_INSTALL_TRANSFORM_REJECTED = WIN32_ERROR.ERROR_INSTALL_TRANSFORM_REJECTED;
pub const ERROR_INSTALL_REMOTE_PROHIBITED = WIN32_ERROR.ERROR_INSTALL_REMOTE_PROHIBITED;
pub const ERROR_PATCH_REMOVAL_UNSUPPORTED = WIN32_ERROR.ERROR_PATCH_REMOVAL_UNSUPPORTED;
pub const ERROR_UNKNOWN_PATCH = WIN32_ERROR.ERROR_UNKNOWN_PATCH;
pub const ERROR_PATCH_NO_SEQUENCE = WIN32_ERROR.ERROR_PATCH_NO_SEQUENCE;
pub const ERROR_PATCH_REMOVAL_DISALLOWED = WIN32_ERROR.ERROR_PATCH_REMOVAL_DISALLOWED;
pub const ERROR_INVALID_PATCH_XML = WIN32_ERROR.ERROR_INVALID_PATCH_XML;
pub const ERROR_PATCH_MANAGED_ADVERTISED_PRODUCT = WIN32_ERROR.ERROR_PATCH_MANAGED_ADVERTISED_PRODUCT;
pub const ERROR_INSTALL_SERVICE_SAFEBOOT = WIN32_ERROR.ERROR_INSTALL_SERVICE_SAFEBOOT;
pub const ERROR_FAIL_FAST_EXCEPTION = WIN32_ERROR.ERROR_FAIL_FAST_EXCEPTION;
pub const ERROR_INSTALL_REJECTED = WIN32_ERROR.ERROR_INSTALL_REJECTED;
pub const ERROR_DYNAMIC_CODE_BLOCKED = WIN32_ERROR.ERROR_DYNAMIC_CODE_BLOCKED;
pub const ERROR_NOT_SAME_OBJECT = WIN32_ERROR.ERROR_NOT_SAME_OBJECT;
pub const ERROR_STRICT_CFG_VIOLATION = WIN32_ERROR.ERROR_STRICT_CFG_VIOLATION;
pub const ERROR_SET_CONTEXT_DENIED = WIN32_ERROR.ERROR_SET_CONTEXT_DENIED;
pub const ERROR_CROSS_PARTITION_VIOLATION = WIN32_ERROR.ERROR_CROSS_PARTITION_VIOLATION;
pub const ERROR_RETURN_ADDRESS_HIJACK_ATTEMPT = WIN32_ERROR.ERROR_RETURN_ADDRESS_HIJACK_ATTEMPT;
pub const ERROR_INVALID_USER_BUFFER = WIN32_ERROR.ERROR_INVALID_USER_BUFFER;
pub const ERROR_UNRECOGNIZED_MEDIA = WIN32_ERROR.ERROR_UNRECOGNIZED_MEDIA;
pub const ERROR_NO_TRUST_LSA_SECRET = WIN32_ERROR.ERROR_NO_TRUST_LSA_SECRET;
pub const ERROR_NO_TRUST_SAM_ACCOUNT = WIN32_ERROR.ERROR_NO_TRUST_SAM_ACCOUNT;
pub const ERROR_TRUSTED_DOMAIN_FAILURE = WIN32_ERROR.ERROR_TRUSTED_DOMAIN_FAILURE;
pub const ERROR_TRUSTED_RELATIONSHIP_FAILURE = WIN32_ERROR.ERROR_TRUSTED_RELATIONSHIP_FAILURE;
pub const ERROR_TRUST_FAILURE = WIN32_ERROR.ERROR_TRUST_FAILURE;
pub const ERROR_NETLOGON_NOT_STARTED = WIN32_ERROR.ERROR_NETLOGON_NOT_STARTED;
pub const ERROR_ACCOUNT_EXPIRED = WIN32_ERROR.ERROR_ACCOUNT_EXPIRED;
pub const ERROR_REDIRECTOR_HAS_OPEN_HANDLES = WIN32_ERROR.ERROR_REDIRECTOR_HAS_OPEN_HANDLES;
pub const ERROR_PRINTER_DRIVER_ALREADY_INSTALLED = WIN32_ERROR.ERROR_PRINTER_DRIVER_ALREADY_INSTALLED;
pub const ERROR_UNKNOWN_PORT = WIN32_ERROR.ERROR_UNKNOWN_PORT;
pub const ERROR_UNKNOWN_PRINTER_DRIVER = WIN32_ERROR.ERROR_UNKNOWN_PRINTER_DRIVER;
pub const ERROR_UNKNOWN_PRINTPROCESSOR = WIN32_ERROR.ERROR_UNKNOWN_PRINTPROCESSOR;
pub const ERROR_INVALID_SEPARATOR_FILE = WIN32_ERROR.ERROR_INVALID_SEPARATOR_FILE;
pub const ERROR_INVALID_PRIORITY = WIN32_ERROR.ERROR_INVALID_PRIORITY;
pub const ERROR_INVALID_PRINTER_NAME = WIN32_ERROR.ERROR_INVALID_PRINTER_NAME;
pub const ERROR_PRINTER_ALREADY_EXISTS = WIN32_ERROR.ERROR_PRINTER_ALREADY_EXISTS;
pub const ERROR_INVALID_PRINTER_COMMAND = WIN32_ERROR.ERROR_INVALID_PRINTER_COMMAND;
pub const ERROR_INVALID_DATATYPE = WIN32_ERROR.ERROR_INVALID_DATATYPE;
pub const ERROR_INVALID_ENVIRONMENT = WIN32_ERROR.ERROR_INVALID_ENVIRONMENT;
pub const ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT = WIN32_ERROR.ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT;
pub const ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT = WIN32_ERROR.ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT;
pub const ERROR_NOLOGON_SERVER_TRUST_ACCOUNT = WIN32_ERROR.ERROR_NOLOGON_SERVER_TRUST_ACCOUNT;
pub const ERROR_DOMAIN_TRUST_INCONSISTENT = WIN32_ERROR.ERROR_DOMAIN_TRUST_INCONSISTENT;
pub const ERROR_SERVER_HAS_OPEN_HANDLES = WIN32_ERROR.ERROR_SERVER_HAS_OPEN_HANDLES;
pub const ERROR_RESOURCE_DATA_NOT_FOUND = WIN32_ERROR.ERROR_RESOURCE_DATA_NOT_FOUND;
pub const ERROR_RESOURCE_TYPE_NOT_FOUND = WIN32_ERROR.ERROR_RESOURCE_TYPE_NOT_FOUND;
pub const ERROR_RESOURCE_NAME_NOT_FOUND = WIN32_ERROR.ERROR_RESOURCE_NAME_NOT_FOUND;
pub const ERROR_RESOURCE_LANG_NOT_FOUND = WIN32_ERROR.ERROR_RESOURCE_LANG_NOT_FOUND;
pub const ERROR_NOT_ENOUGH_QUOTA = WIN32_ERROR.ERROR_NOT_ENOUGH_QUOTA;
pub const ERROR_INVALID_TIME = WIN32_ERROR.ERROR_INVALID_TIME;
pub const ERROR_INVALID_FORM_NAME = WIN32_ERROR.ERROR_INVALID_FORM_NAME;
pub const ERROR_INVALID_FORM_SIZE = WIN32_ERROR.ERROR_INVALID_FORM_SIZE;
pub const ERROR_ALREADY_WAITING = WIN32_ERROR.ERROR_ALREADY_WAITING;
pub const ERROR_PRINTER_DELETED = WIN32_ERROR.ERROR_PRINTER_DELETED;
pub const ERROR_INVALID_PRINTER_STATE = WIN32_ERROR.ERROR_INVALID_PRINTER_STATE;
pub const ERROR_PASSWORD_MUST_CHANGE = WIN32_ERROR.ERROR_PASSWORD_MUST_CHANGE;
pub const ERROR_DOMAIN_CONTROLLER_NOT_FOUND = WIN32_ERROR.ERROR_DOMAIN_CONTROLLER_NOT_FOUND;
pub const ERROR_ACCOUNT_LOCKED_OUT = WIN32_ERROR.ERROR_ACCOUNT_LOCKED_OUT;
pub const ERROR_NO_SITENAME = WIN32_ERROR.ERROR_NO_SITENAME;
pub const ERROR_CANT_ACCESS_FILE = WIN32_ERROR.ERROR_CANT_ACCESS_FILE;
pub const ERROR_CANT_RESOLVE_FILENAME = WIN32_ERROR.ERROR_CANT_RESOLVE_FILENAME;
pub const ERROR_KM_DRIVER_BLOCKED = WIN32_ERROR.ERROR_KM_DRIVER_BLOCKED;
pub const ERROR_CONTEXT_EXPIRED = WIN32_ERROR.ERROR_CONTEXT_EXPIRED;
pub const ERROR_PER_USER_TRUST_QUOTA_EXCEEDED = WIN32_ERROR.ERROR_PER_USER_TRUST_QUOTA_EXCEEDED;
pub const ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED = WIN32_ERROR.ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED;
pub const ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED = WIN32_ERROR.ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED;
pub const ERROR_AUTHENTICATION_FIREWALL_FAILED = WIN32_ERROR.ERROR_AUTHENTICATION_FIREWALL_FAILED;
pub const ERROR_REMOTE_PRINT_CONNECTIONS_BLOCKED = WIN32_ERROR.ERROR_REMOTE_PRINT_CONNECTIONS_BLOCKED;
pub const ERROR_NTLM_BLOCKED = WIN32_ERROR.ERROR_NTLM_BLOCKED;
pub const ERROR_PASSWORD_CHANGE_REQUIRED = WIN32_ERROR.ERROR_PASSWORD_CHANGE_REQUIRED;
pub const ERROR_LOST_MODE_LOGON_RESTRICTION = WIN32_ERROR.ERROR_LOST_MODE_LOGON_RESTRICTION;
pub const ERROR_INVALID_PIXEL_FORMAT = WIN32_ERROR.ERROR_INVALID_PIXEL_FORMAT;
pub const ERROR_BAD_DRIVER = WIN32_ERROR.ERROR_BAD_DRIVER;
pub const ERROR_INVALID_WINDOW_STYLE = WIN32_ERROR.ERROR_INVALID_WINDOW_STYLE;
pub const ERROR_METAFILE_NOT_SUPPORTED = WIN32_ERROR.ERROR_METAFILE_NOT_SUPPORTED;
pub const ERROR_TRANSFORM_NOT_SUPPORTED = WIN32_ERROR.ERROR_TRANSFORM_NOT_SUPPORTED;
pub const ERROR_CLIPPING_NOT_SUPPORTED = WIN32_ERROR.ERROR_CLIPPING_NOT_SUPPORTED;
pub const ERROR_INVALID_CMM = WIN32_ERROR.ERROR_INVALID_CMM;
pub const ERROR_INVALID_PROFILE = WIN32_ERROR.ERROR_INVALID_PROFILE;
pub const ERROR_TAG_NOT_FOUND = WIN32_ERROR.ERROR_TAG_NOT_FOUND;
pub const ERROR_TAG_NOT_PRESENT = WIN32_ERROR.ERROR_TAG_NOT_PRESENT;
pub const ERROR_DUPLICATE_TAG = WIN32_ERROR.ERROR_DUPLICATE_TAG;
pub const ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE = WIN32_ERROR.ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE;
pub const ERROR_PROFILE_NOT_FOUND = WIN32_ERROR.ERROR_PROFILE_NOT_FOUND;
pub const ERROR_INVALID_COLORSPACE = WIN32_ERROR.ERROR_INVALID_COLORSPACE;
pub const ERROR_ICM_NOT_ENABLED = WIN32_ERROR.ERROR_ICM_NOT_ENABLED;
pub const ERROR_DELETING_ICM_XFORM = WIN32_ERROR.ERROR_DELETING_ICM_XFORM;
pub const ERROR_INVALID_TRANSFORM = WIN32_ERROR.ERROR_INVALID_TRANSFORM;
pub const ERROR_COLORSPACE_MISMATCH = WIN32_ERROR.ERROR_COLORSPACE_MISMATCH;
pub const ERROR_INVALID_COLORINDEX = WIN32_ERROR.ERROR_INVALID_COLORINDEX;
pub const ERROR_PROFILE_DOES_NOT_MATCH_DEVICE = WIN32_ERROR.ERROR_PROFILE_DOES_NOT_MATCH_DEVICE;
pub const ERROR_CONNECTED_OTHER_PASSWORD = WIN32_ERROR.ERROR_CONNECTED_OTHER_PASSWORD;
pub const ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT = WIN32_ERROR.ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT;
pub const ERROR_BAD_USERNAME = WIN32_ERROR.ERROR_BAD_USERNAME;
pub const ERROR_NOT_CONNECTED = WIN32_ERROR.ERROR_NOT_CONNECTED;
pub const ERROR_OPEN_FILES = WIN32_ERROR.ERROR_OPEN_FILES;
pub const ERROR_ACTIVE_CONNECTIONS = WIN32_ERROR.ERROR_ACTIVE_CONNECTIONS;
pub const ERROR_DEVICE_IN_USE = WIN32_ERROR.ERROR_DEVICE_IN_USE;
pub const ERROR_UNKNOWN_PRINT_MONITOR = WIN32_ERROR.ERROR_UNKNOWN_PRINT_MONITOR;
pub const ERROR_PRINTER_DRIVER_IN_USE = WIN32_ERROR.ERROR_PRINTER_DRIVER_IN_USE;
pub const ERROR_SPOOL_FILE_NOT_FOUND = WIN32_ERROR.ERROR_SPOOL_FILE_NOT_FOUND;
pub const ERROR_SPL_NO_STARTDOC = WIN32_ERROR.ERROR_SPL_NO_STARTDOC;
pub const ERROR_SPL_NO_ADDJOB = WIN32_ERROR.ERROR_SPL_NO_ADDJOB;
pub const ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED = WIN32_ERROR.ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED;
pub const ERROR_PRINT_MONITOR_ALREADY_INSTALLED = WIN32_ERROR.ERROR_PRINT_MONITOR_ALREADY_INSTALLED;
pub const ERROR_INVALID_PRINT_MONITOR = WIN32_ERROR.ERROR_INVALID_PRINT_MONITOR;
pub const ERROR_PRINT_MONITOR_IN_USE = WIN32_ERROR.ERROR_PRINT_MONITOR_IN_USE;
pub const ERROR_PRINTER_HAS_JOBS_QUEUED = WIN32_ERROR.ERROR_PRINTER_HAS_JOBS_QUEUED;
pub const ERROR_SUCCESS_REBOOT_REQUIRED = WIN32_ERROR.ERROR_SUCCESS_REBOOT_REQUIRED;
pub const ERROR_SUCCESS_RESTART_REQUIRED = WIN32_ERROR.ERROR_SUCCESS_RESTART_REQUIRED;
pub const ERROR_PRINTER_NOT_FOUND = WIN32_ERROR.ERROR_PRINTER_NOT_FOUND;
pub const ERROR_PRINTER_DRIVER_WARNED = WIN32_ERROR.ERROR_PRINTER_DRIVER_WARNED;
pub const ERROR_PRINTER_DRIVER_BLOCKED = WIN32_ERROR.ERROR_PRINTER_DRIVER_BLOCKED;
pub const ERROR_PRINTER_DRIVER_PACKAGE_IN_USE = WIN32_ERROR.ERROR_PRINTER_DRIVER_PACKAGE_IN_USE;
pub const ERROR_CORE_DRIVER_PACKAGE_NOT_FOUND = WIN32_ERROR.ERROR_CORE_DRIVER_PACKAGE_NOT_FOUND;
pub const ERROR_FAIL_REBOOT_REQUIRED = WIN32_ERROR.ERROR_FAIL_REBOOT_REQUIRED;
pub const ERROR_FAIL_REBOOT_INITIATED = WIN32_ERROR.ERROR_FAIL_REBOOT_INITIATED;
pub const ERROR_PRINTER_DRIVER_DOWNLOAD_NEEDED = WIN32_ERROR.ERROR_PRINTER_DRIVER_DOWNLOAD_NEEDED;
pub const ERROR_PRINT_JOB_RESTART_REQUIRED = WIN32_ERROR.ERROR_PRINT_JOB_RESTART_REQUIRED;
pub const ERROR_INVALID_PRINTER_DRIVER_MANIFEST = WIN32_ERROR.ERROR_INVALID_PRINTER_DRIVER_MANIFEST;
pub const ERROR_PRINTER_NOT_SHAREABLE = WIN32_ERROR.ERROR_PRINTER_NOT_SHAREABLE;
pub const ERROR_REQUEST_PAUSED = WIN32_ERROR.ERROR_REQUEST_PAUSED;
pub const ERROR_APPEXEC_CONDITION_NOT_SATISFIED = WIN32_ERROR.ERROR_APPEXEC_CONDITION_NOT_SATISFIED;
pub const ERROR_APPEXEC_HANDLE_INVALIDATED = WIN32_ERROR.ERROR_APPEXEC_HANDLE_INVALIDATED;
pub const ERROR_APPEXEC_INVALID_HOST_GENERATION = WIN32_ERROR.ERROR_APPEXEC_INVALID_HOST_GENERATION;
pub const ERROR_APPEXEC_UNEXPECTED_PROCESS_REGISTRATION = WIN32_ERROR.ERROR_APPEXEC_UNEXPECTED_PROCESS_REGISTRATION;
pub const ERROR_APPEXEC_INVALID_HOST_STATE = WIN32_ERROR.ERROR_APPEXEC_INVALID_HOST_STATE;
pub const ERROR_APPEXEC_NO_DONOR = WIN32_ERROR.ERROR_APPEXEC_NO_DONOR;
pub const ERROR_APPEXEC_HOST_ID_MISMATCH = WIN32_ERROR.ERROR_APPEXEC_HOST_ID_MISMATCH;
pub const ERROR_APPEXEC_UNKNOWN_USER = WIN32_ERROR.ERROR_APPEXEC_UNKNOWN_USER;
pub const ERROR_APPEXEC_APP_COMPAT_BLOCK = WIN32_ERROR.ERROR_APPEXEC_APP_COMPAT_BLOCK;
pub const ERROR_APPEXEC_CALLER_WAIT_TIMEOUT = WIN32_ERROR.ERROR_APPEXEC_CALLER_WAIT_TIMEOUT;
pub const ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_TERMINATION = WIN32_ERROR.ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_TERMINATION;
pub const ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_LICENSING = WIN32_ERROR.ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_LICENSING;
pub const ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_RESOURCES = WIN32_ERROR.ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_RESOURCES;
pub const ERROR_VRF_VOLATILE_CFG_AND_IO_ENABLED = WIN32_ERROR.ERROR_VRF_VOLATILE_CFG_AND_IO_ENABLED;
pub const ERROR_VRF_VOLATILE_NOT_STOPPABLE = WIN32_ERROR.ERROR_VRF_VOLATILE_NOT_STOPPABLE;
pub const ERROR_VRF_VOLATILE_SAFE_MODE = WIN32_ERROR.ERROR_VRF_VOLATILE_SAFE_MODE;
pub const ERROR_VRF_VOLATILE_NOT_RUNNABLE_SYSTEM = WIN32_ERROR.ERROR_VRF_VOLATILE_NOT_RUNNABLE_SYSTEM;
pub const ERROR_VRF_VOLATILE_NOT_SUPPORTED_RULECLASS = WIN32_ERROR.ERROR_VRF_VOLATILE_NOT_SUPPORTED_RULECLASS;
pub const ERROR_VRF_VOLATILE_PROTECTED_DRIVER = WIN32_ERROR.ERROR_VRF_VOLATILE_PROTECTED_DRIVER;
pub const ERROR_VRF_VOLATILE_NMI_REGISTERED = WIN32_ERROR.ERROR_VRF_VOLATILE_NMI_REGISTERED;
pub const ERROR_VRF_VOLATILE_SETTINGS_CONFLICT = WIN32_ERROR.ERROR_VRF_VOLATILE_SETTINGS_CONFLICT;
pub const ERROR_DIF_IOCALLBACK_NOT_REPLACED = WIN32_ERROR.ERROR_DIF_IOCALLBACK_NOT_REPLACED;
pub const ERROR_DIF_LIVEDUMP_LIMIT_EXCEEDED = WIN32_ERROR.ERROR_DIF_LIVEDUMP_LIMIT_EXCEEDED;
pub const ERROR_DIF_VOLATILE_SECTION_NOT_LOCKED = WIN32_ERROR.ERROR_DIF_VOLATILE_SECTION_NOT_LOCKED;
pub const ERROR_DIF_VOLATILE_DRIVER_HOTPATCHED = WIN32_ERROR.ERROR_DIF_VOLATILE_DRIVER_HOTPATCHED;
pub const ERROR_DIF_VOLATILE_INVALID_INFO = WIN32_ERROR.ERROR_DIF_VOLATILE_INVALID_INFO;
pub const ERROR_DIF_VOLATILE_DRIVER_IS_NOT_RUNNING = WIN32_ERROR.ERROR_DIF_VOLATILE_DRIVER_IS_NOT_RUNNING;
pub const ERROR_DIF_VOLATILE_PLUGIN_IS_NOT_RUNNING = WIN32_ERROR.ERROR_DIF_VOLATILE_PLUGIN_IS_NOT_RUNNING;
pub const ERROR_DIF_VOLATILE_PLUGIN_CHANGE_NOT_ALLOWED = WIN32_ERROR.ERROR_DIF_VOLATILE_PLUGIN_CHANGE_NOT_ALLOWED;
pub const ERROR_DIF_VOLATILE_NOT_ALLOWED = WIN32_ERROR.ERROR_DIF_VOLATILE_NOT_ALLOWED;
pub const ERROR_DIF_BINDING_API_NOT_FOUND = WIN32_ERROR.ERROR_DIF_BINDING_API_NOT_FOUND;
pub const ERROR_IO_REISSUE_AS_CACHED = WIN32_ERROR.ERROR_IO_REISSUE_AS_CACHED;
pub const ERROR_WINS_INTERNAL = WIN32_ERROR.ERROR_WINS_INTERNAL;
pub const ERROR_CAN_NOT_DEL_LOCAL_WINS = WIN32_ERROR.ERROR_CAN_NOT_DEL_LOCAL_WINS;
pub const ERROR_STATIC_INIT = WIN32_ERROR.ERROR_STATIC_INIT;
pub const ERROR_INC_BACKUP = WIN32_ERROR.ERROR_INC_BACKUP;
pub const ERROR_FULL_BACKUP = WIN32_ERROR.ERROR_FULL_BACKUP;
pub const ERROR_REC_NON_EXISTENT = WIN32_ERROR.ERROR_REC_NON_EXISTENT;
pub const ERROR_RPL_NOT_ALLOWED = WIN32_ERROR.ERROR_RPL_NOT_ALLOWED;
pub const ERROR_DHCP_ADDRESS_CONFLICT = WIN32_ERROR.ERROR_DHCP_ADDRESS_CONFLICT;
pub const ERROR_WMI_GUID_NOT_FOUND = WIN32_ERROR.ERROR_WMI_GUID_NOT_FOUND;
pub const ERROR_WMI_INSTANCE_NOT_FOUND = WIN32_ERROR.ERROR_WMI_INSTANCE_NOT_FOUND;
pub const ERROR_WMI_ITEMID_NOT_FOUND = WIN32_ERROR.ERROR_WMI_ITEMID_NOT_FOUND;
pub const ERROR_WMI_TRY_AGAIN = WIN32_ERROR.ERROR_WMI_TRY_AGAIN;
pub const ERROR_WMI_DP_NOT_FOUND = WIN32_ERROR.ERROR_WMI_DP_NOT_FOUND;
pub const ERROR_WMI_UNRESOLVED_INSTANCE_REF = WIN32_ERROR.ERROR_WMI_UNRESOLVED_INSTANCE_REF;
pub const ERROR_WMI_ALREADY_ENABLED = WIN32_ERROR.ERROR_WMI_ALREADY_ENABLED;
pub const ERROR_WMI_GUID_DISCONNECTED = WIN32_ERROR.ERROR_WMI_GUID_DISCONNECTED;
pub const ERROR_WMI_SERVER_UNAVAILABLE = WIN32_ERROR.ERROR_WMI_SERVER_UNAVAILABLE;
pub const ERROR_WMI_DP_FAILED = WIN32_ERROR.ERROR_WMI_DP_FAILED;
pub const ERROR_WMI_INVALID_MOF = WIN32_ERROR.ERROR_WMI_INVALID_MOF;
pub const ERROR_WMI_INVALID_REGINFO = WIN32_ERROR.ERROR_WMI_INVALID_REGINFO;
pub const ERROR_WMI_ALREADY_DISABLED = WIN32_ERROR.ERROR_WMI_ALREADY_DISABLED;
pub const ERROR_WMI_READ_ONLY = WIN32_ERROR.ERROR_WMI_READ_ONLY;
pub const ERROR_WMI_SET_FAILURE = WIN32_ERROR.ERROR_WMI_SET_FAILURE;
pub const ERROR_NOT_APPCONTAINER = WIN32_ERROR.ERROR_NOT_APPCONTAINER;
pub const ERROR_APPCONTAINER_REQUIRED = WIN32_ERROR.ERROR_APPCONTAINER_REQUIRED;
pub const ERROR_NOT_SUPPORTED_IN_APPCONTAINER = WIN32_ERROR.ERROR_NOT_SUPPORTED_IN_APPCONTAINER;
pub const ERROR_INVALID_PACKAGE_SID_LENGTH = WIN32_ERROR.ERROR_INVALID_PACKAGE_SID_LENGTH;
pub const ERROR_INVALID_MEDIA = WIN32_ERROR.ERROR_INVALID_MEDIA;
pub const ERROR_INVALID_LIBRARY = WIN32_ERROR.ERROR_INVALID_LIBRARY;
pub const ERROR_INVALID_MEDIA_POOL = WIN32_ERROR.ERROR_INVALID_MEDIA_POOL;
pub const ERROR_DRIVE_MEDIA_MISMATCH = WIN32_ERROR.ERROR_DRIVE_MEDIA_MISMATCH;
pub const ERROR_MEDIA_OFFLINE = WIN32_ERROR.ERROR_MEDIA_OFFLINE;
pub const ERROR_LIBRARY_OFFLINE = WIN32_ERROR.ERROR_LIBRARY_OFFLINE;
pub const ERROR_EMPTY = WIN32_ERROR.ERROR_EMPTY;
pub const ERROR_NOT_EMPTY = WIN32_ERROR.ERROR_NOT_EMPTY;
pub const ERROR_MEDIA_UNAVAILABLE = WIN32_ERROR.ERROR_MEDIA_UNAVAILABLE;
pub const ERROR_RESOURCE_DISABLED = WIN32_ERROR.ERROR_RESOURCE_DISABLED;
pub const ERROR_INVALID_CLEANER = WIN32_ERROR.ERROR_INVALID_CLEANER;
pub const ERROR_UNABLE_TO_CLEAN = WIN32_ERROR.ERROR_UNABLE_TO_CLEAN;
pub const ERROR_OBJECT_NOT_FOUND = WIN32_ERROR.ERROR_OBJECT_NOT_FOUND;
pub const ERROR_DATABASE_FAILURE = WIN32_ERROR.ERROR_DATABASE_FAILURE;
pub const ERROR_DATABASE_FULL = WIN32_ERROR.ERROR_DATABASE_FULL;
pub const ERROR_MEDIA_INCOMPATIBLE = WIN32_ERROR.ERROR_MEDIA_INCOMPATIBLE;
pub const ERROR_RESOURCE_NOT_PRESENT = WIN32_ERROR.ERROR_RESOURCE_NOT_PRESENT;
pub const ERROR_INVALID_OPERATION = WIN32_ERROR.ERROR_INVALID_OPERATION;
pub const ERROR_MEDIA_NOT_AVAILABLE = WIN32_ERROR.ERROR_MEDIA_NOT_AVAILABLE;
pub const ERROR_DEVICE_NOT_AVAILABLE = WIN32_ERROR.ERROR_DEVICE_NOT_AVAILABLE;
pub const ERROR_REQUEST_REFUSED = WIN32_ERROR.ERROR_REQUEST_REFUSED;
pub const ERROR_INVALID_DRIVE_OBJECT = WIN32_ERROR.ERROR_INVALID_DRIVE_OBJECT;
pub const ERROR_LIBRARY_FULL = WIN32_ERROR.ERROR_LIBRARY_FULL;
pub const ERROR_MEDIUM_NOT_ACCESSIBLE = WIN32_ERROR.ERROR_MEDIUM_NOT_ACCESSIBLE;
pub const ERROR_UNABLE_TO_LOAD_MEDIUM = WIN32_ERROR.ERROR_UNABLE_TO_LOAD_MEDIUM;
pub const ERROR_UNABLE_TO_INVENTORY_DRIVE = WIN32_ERROR.ERROR_UNABLE_TO_INVENTORY_DRIVE;
pub const ERROR_UNABLE_TO_INVENTORY_SLOT = WIN32_ERROR.ERROR_UNABLE_TO_INVENTORY_SLOT;
pub const ERROR_UNABLE_TO_INVENTORY_TRANSPORT = WIN32_ERROR.ERROR_UNABLE_TO_INVENTORY_TRANSPORT;
pub const ERROR_TRANSPORT_FULL = WIN32_ERROR.ERROR_TRANSPORT_FULL;
pub const ERROR_CONTROLLING_IEPORT = WIN32_ERROR.ERROR_CONTROLLING_IEPORT;
pub const ERROR_UNABLE_TO_EJECT_MOUNTED_MEDIA = WIN32_ERROR.ERROR_UNABLE_TO_EJECT_MOUNTED_MEDIA;
pub const ERROR_CLEANER_SLOT_SET = WIN32_ERROR.ERROR_CLEANER_SLOT_SET;
pub const ERROR_CLEANER_SLOT_NOT_SET = WIN32_ERROR.ERROR_CLEANER_SLOT_NOT_SET;
pub const ERROR_CLEANER_CARTRIDGE_SPENT = WIN32_ERROR.ERROR_CLEANER_CARTRIDGE_SPENT;
pub const ERROR_UNEXPECTED_OMID = WIN32_ERROR.ERROR_UNEXPECTED_OMID;
pub const ERROR_CANT_DELETE_LAST_ITEM = WIN32_ERROR.ERROR_CANT_DELETE_LAST_ITEM;
pub const ERROR_MESSAGE_EXCEEDS_MAX_SIZE = WIN32_ERROR.ERROR_MESSAGE_EXCEEDS_MAX_SIZE;
pub const ERROR_VOLUME_CONTAINS_SYS_FILES = WIN32_ERROR.ERROR_VOLUME_CONTAINS_SYS_FILES;
pub const ERROR_INDIGENOUS_TYPE = WIN32_ERROR.ERROR_INDIGENOUS_TYPE;
pub const ERROR_NO_SUPPORTING_DRIVES = WIN32_ERROR.ERROR_NO_SUPPORTING_DRIVES;
pub const ERROR_CLEANER_CARTRIDGE_INSTALLED = WIN32_ERROR.ERROR_CLEANER_CARTRIDGE_INSTALLED;
pub const ERROR_IEPORT_FULL = WIN32_ERROR.ERROR_IEPORT_FULL;
pub const ERROR_FILE_OFFLINE = WIN32_ERROR.ERROR_FILE_OFFLINE;
pub const ERROR_REMOTE_STORAGE_NOT_ACTIVE = WIN32_ERROR.ERROR_REMOTE_STORAGE_NOT_ACTIVE;
pub const ERROR_REMOTE_STORAGE_MEDIA_ERROR = WIN32_ERROR.ERROR_REMOTE_STORAGE_MEDIA_ERROR;
pub const ERROR_NOT_A_REPARSE_POINT = WIN32_ERROR.ERROR_NOT_A_REPARSE_POINT;
pub const ERROR_REPARSE_ATTRIBUTE_CONFLICT = WIN32_ERROR.ERROR_REPARSE_ATTRIBUTE_CONFLICT;
pub const ERROR_INVALID_REPARSE_DATA = WIN32_ERROR.ERROR_INVALID_REPARSE_DATA;
pub const ERROR_REPARSE_TAG_INVALID = WIN32_ERROR.ERROR_REPARSE_TAG_INVALID;
pub const ERROR_REPARSE_TAG_MISMATCH = WIN32_ERROR.ERROR_REPARSE_TAG_MISMATCH;
pub const ERROR_REPARSE_POINT_ENCOUNTERED = WIN32_ERROR.ERROR_REPARSE_POINT_ENCOUNTERED;
pub const ERROR_APP_DATA_NOT_FOUND = WIN32_ERROR.ERROR_APP_DATA_NOT_FOUND;
pub const ERROR_APP_DATA_EXPIRED = WIN32_ERROR.ERROR_APP_DATA_EXPIRED;
pub const ERROR_APP_DATA_CORRUPT = WIN32_ERROR.ERROR_APP_DATA_CORRUPT;
pub const ERROR_APP_DATA_LIMIT_EXCEEDED = WIN32_ERROR.ERROR_APP_DATA_LIMIT_EXCEEDED;
pub const ERROR_APP_DATA_REBOOT_REQUIRED = WIN32_ERROR.ERROR_APP_DATA_REBOOT_REQUIRED;
pub const ERROR_SECUREBOOT_ROLLBACK_DETECTED = WIN32_ERROR.ERROR_SECUREBOOT_ROLLBACK_DETECTED;
pub const ERROR_SECUREBOOT_POLICY_VIOLATION = WIN32_ERROR.ERROR_SECUREBOOT_POLICY_VIOLATION;
pub const ERROR_SECUREBOOT_INVALID_POLICY = WIN32_ERROR.ERROR_SECUREBOOT_INVALID_POLICY;
pub const ERROR_SECUREBOOT_POLICY_PUBLISHER_NOT_FOUND = WIN32_ERROR.ERROR_SECUREBOOT_POLICY_PUBLISHER_NOT_FOUND;
pub const ERROR_SECUREBOOT_POLICY_NOT_SIGNED = WIN32_ERROR.ERROR_SECUREBOOT_POLICY_NOT_SIGNED;
pub const ERROR_SECUREBOOT_NOT_ENABLED = WIN32_ERROR.ERROR_SECUREBOOT_NOT_ENABLED;
pub const ERROR_SECUREBOOT_FILE_REPLACED = WIN32_ERROR.ERROR_SECUREBOOT_FILE_REPLACED;
pub const ERROR_SECUREBOOT_POLICY_NOT_AUTHORIZED = WIN32_ERROR.ERROR_SECUREBOOT_POLICY_NOT_AUTHORIZED;
pub const ERROR_SECUREBOOT_POLICY_UNKNOWN = WIN32_ERROR.ERROR_SECUREBOOT_POLICY_UNKNOWN;
pub const ERROR_SECUREBOOT_POLICY_MISSING_ANTIROLLBACKVERSION = WIN32_ERROR.ERROR_SECUREBOOT_POLICY_MISSING_ANTIROLLBACKVERSION;
pub const ERROR_SECUREBOOT_PLATFORM_ID_MISMATCH = WIN32_ERROR.ERROR_SECUREBOOT_PLATFORM_ID_MISMATCH;
pub const ERROR_SECUREBOOT_POLICY_ROLLBACK_DETECTED = WIN32_ERROR.ERROR_SECUREBOOT_POLICY_ROLLBACK_DETECTED;
pub const ERROR_SECUREBOOT_POLICY_UPGRADE_MISMATCH = WIN32_ERROR.ERROR_SECUREBOOT_POLICY_UPGRADE_MISMATCH;
pub const ERROR_SECUREBOOT_REQUIRED_POLICY_FILE_MISSING = WIN32_ERROR.ERROR_SECUREBOOT_REQUIRED_POLICY_FILE_MISSING;
pub const ERROR_SECUREBOOT_NOT_BASE_POLICY = WIN32_ERROR.ERROR_SECUREBOOT_NOT_BASE_POLICY;
pub const ERROR_SECUREBOOT_NOT_SUPPLEMENTAL_POLICY = WIN32_ERROR.ERROR_SECUREBOOT_NOT_SUPPLEMENTAL_POLICY;
pub const ERROR_OFFLOAD_READ_FLT_NOT_SUPPORTED = WIN32_ERROR.ERROR_OFFLOAD_READ_FLT_NOT_SUPPORTED;
pub const ERROR_OFFLOAD_WRITE_FLT_NOT_SUPPORTED = WIN32_ERROR.ERROR_OFFLOAD_WRITE_FLT_NOT_SUPPORTED;
pub const ERROR_OFFLOAD_READ_FILE_NOT_SUPPORTED = WIN32_ERROR.ERROR_OFFLOAD_READ_FILE_NOT_SUPPORTED;
pub const ERROR_OFFLOAD_WRITE_FILE_NOT_SUPPORTED = WIN32_ERROR.ERROR_OFFLOAD_WRITE_FILE_NOT_SUPPORTED;
pub const ERROR_ALREADY_HAS_STREAM_ID = WIN32_ERROR.ERROR_ALREADY_HAS_STREAM_ID;
pub const ERROR_SMR_GARBAGE_COLLECTION_REQUIRED = WIN32_ERROR.ERROR_SMR_GARBAGE_COLLECTION_REQUIRED;
pub const ERROR_WOF_WIM_HEADER_CORRUPT = WIN32_ERROR.ERROR_WOF_WIM_HEADER_CORRUPT;
pub const ERROR_WOF_WIM_RESOURCE_TABLE_CORRUPT = WIN32_ERROR.ERROR_WOF_WIM_RESOURCE_TABLE_CORRUPT;
pub const ERROR_WOF_FILE_RESOURCE_TABLE_CORRUPT = WIN32_ERROR.ERROR_WOF_FILE_RESOURCE_TABLE_CORRUPT;
pub const ERROR_OBJECT_IS_IMMUTABLE = WIN32_ERROR.ERROR_OBJECT_IS_IMMUTABLE;
pub const ERROR_VOLUME_NOT_SIS_ENABLED = WIN32_ERROR.ERROR_VOLUME_NOT_SIS_ENABLED;
pub const ERROR_SYSTEM_INTEGRITY_ROLLBACK_DETECTED = WIN32_ERROR.ERROR_SYSTEM_INTEGRITY_ROLLBACK_DETECTED;
pub const ERROR_SYSTEM_INTEGRITY_POLICY_VIOLATION = WIN32_ERROR.ERROR_SYSTEM_INTEGRITY_POLICY_VIOLATION;
pub const ERROR_SYSTEM_INTEGRITY_INVALID_POLICY = WIN32_ERROR.ERROR_SYSTEM_INTEGRITY_INVALID_POLICY;
pub const ERROR_SYSTEM_INTEGRITY_POLICY_NOT_SIGNED = WIN32_ERROR.ERROR_SYSTEM_INTEGRITY_POLICY_NOT_SIGNED;
pub const ERROR_SYSTEM_INTEGRITY_TOO_MANY_POLICIES = WIN32_ERROR.ERROR_SYSTEM_INTEGRITY_TOO_MANY_POLICIES;
pub const ERROR_SYSTEM_INTEGRITY_SUPPLEMENTAL_POLICY_NOT_AUTHORIZED = WIN32_ERROR.ERROR_SYSTEM_INTEGRITY_SUPPLEMENTAL_POLICY_NOT_AUTHORIZED;
pub const ERROR_SYSTEM_INTEGRITY_REPUTATION_MALICIOUS = WIN32_ERROR.ERROR_SYSTEM_INTEGRITY_REPUTATION_MALICIOUS;
pub const ERROR_SYSTEM_INTEGRITY_REPUTATION_PUA = WIN32_ERROR.ERROR_SYSTEM_INTEGRITY_REPUTATION_PUA;
pub const ERROR_SYSTEM_INTEGRITY_REPUTATION_DANGEROUS_EXT = WIN32_ERROR.ERROR_SYSTEM_INTEGRITY_REPUTATION_DANGEROUS_EXT;
pub const ERROR_SYSTEM_INTEGRITY_REPUTATION_OFFLINE = WIN32_ERROR.ERROR_SYSTEM_INTEGRITY_REPUTATION_OFFLINE;
pub const ERROR_VSM_NOT_INITIALIZED = WIN32_ERROR.ERROR_VSM_NOT_INITIALIZED;
pub const ERROR_VSM_DMA_PROTECTION_NOT_IN_USE = WIN32_ERROR.ERROR_VSM_DMA_PROTECTION_NOT_IN_USE;
pub const ERROR_PLATFORM_MANIFEST_NOT_AUTHORIZED = WIN32_ERROR.ERROR_PLATFORM_MANIFEST_NOT_AUTHORIZED;
pub const ERROR_PLATFORM_MANIFEST_INVALID = WIN32_ERROR.ERROR_PLATFORM_MANIFEST_INVALID;
pub const ERROR_PLATFORM_MANIFEST_FILE_NOT_AUTHORIZED = WIN32_ERROR.ERROR_PLATFORM_MANIFEST_FILE_NOT_AUTHORIZED;
pub const ERROR_PLATFORM_MANIFEST_CATALOG_NOT_AUTHORIZED = WIN32_ERROR.ERROR_PLATFORM_MANIFEST_CATALOG_NOT_AUTHORIZED;
pub const ERROR_PLATFORM_MANIFEST_BINARY_ID_NOT_FOUND = WIN32_ERROR.ERROR_PLATFORM_MANIFEST_BINARY_ID_NOT_FOUND;
pub const ERROR_PLATFORM_MANIFEST_NOT_ACTIVE = WIN32_ERROR.ERROR_PLATFORM_MANIFEST_NOT_ACTIVE;
pub const ERROR_PLATFORM_MANIFEST_NOT_SIGNED = WIN32_ERROR.ERROR_PLATFORM_MANIFEST_NOT_SIGNED;
pub const ERROR_DEPENDENT_RESOURCE_EXISTS = WIN32_ERROR.ERROR_DEPENDENT_RESOURCE_EXISTS;
pub const ERROR_DEPENDENCY_NOT_FOUND = WIN32_ERROR.ERROR_DEPENDENCY_NOT_FOUND;
pub const ERROR_DEPENDENCY_ALREADY_EXISTS = WIN32_ERROR.ERROR_DEPENDENCY_ALREADY_EXISTS;
pub const ERROR_RESOURCE_NOT_ONLINE = WIN32_ERROR.ERROR_RESOURCE_NOT_ONLINE;
pub const ERROR_HOST_NODE_NOT_AVAILABLE = WIN32_ERROR.ERROR_HOST_NODE_NOT_AVAILABLE;
pub const ERROR_RESOURCE_NOT_AVAILABLE = WIN32_ERROR.ERROR_RESOURCE_NOT_AVAILABLE;
pub const ERROR_RESOURCE_NOT_FOUND = WIN32_ERROR.ERROR_RESOURCE_NOT_FOUND;
pub const ERROR_SHUTDOWN_CLUSTER = WIN32_ERROR.ERROR_SHUTDOWN_CLUSTER;
pub const ERROR_CANT_EVICT_ACTIVE_NODE = WIN32_ERROR.ERROR_CANT_EVICT_ACTIVE_NODE;
pub const ERROR_OBJECT_ALREADY_EXISTS = WIN32_ERROR.ERROR_OBJECT_ALREADY_EXISTS;
pub const ERROR_OBJECT_IN_LIST = WIN32_ERROR.ERROR_OBJECT_IN_LIST;
pub const ERROR_GROUP_NOT_AVAILABLE = WIN32_ERROR.ERROR_GROUP_NOT_AVAILABLE;
pub const ERROR_GROUP_NOT_FOUND = WIN32_ERROR.ERROR_GROUP_NOT_FOUND;
pub const ERROR_GROUP_NOT_ONLINE = WIN32_ERROR.ERROR_GROUP_NOT_ONLINE;
pub const ERROR_HOST_NODE_NOT_RESOURCE_OWNER = WIN32_ERROR.ERROR_HOST_NODE_NOT_RESOURCE_OWNER;
pub const ERROR_HOST_NODE_NOT_GROUP_OWNER = WIN32_ERROR.ERROR_HOST_NODE_NOT_GROUP_OWNER;
pub const ERROR_RESMON_CREATE_FAILED = WIN32_ERROR.ERROR_RESMON_CREATE_FAILED;
pub const ERROR_RESMON_ONLINE_FAILED = WIN32_ERROR.ERROR_RESMON_ONLINE_FAILED;
pub const ERROR_RESOURCE_ONLINE = WIN32_ERROR.ERROR_RESOURCE_ONLINE;
pub const ERROR_QUORUM_RESOURCE = WIN32_ERROR.ERROR_QUORUM_RESOURCE;
pub const ERROR_NOT_QUORUM_CAPABLE = WIN32_ERROR.ERROR_NOT_QUORUM_CAPABLE;
pub const ERROR_CLUSTER_SHUTTING_DOWN = WIN32_ERROR.ERROR_CLUSTER_SHUTTING_DOWN;
pub const ERROR_INVALID_STATE = WIN32_ERROR.ERROR_INVALID_STATE;
pub const ERROR_RESOURCE_PROPERTIES_STORED = WIN32_ERROR.ERROR_RESOURCE_PROPERTIES_STORED;
pub const ERROR_NOT_QUORUM_CLASS = WIN32_ERROR.ERROR_NOT_QUORUM_CLASS;
pub const ERROR_CORE_RESOURCE = WIN32_ERROR.ERROR_CORE_RESOURCE;
pub const ERROR_QUORUM_RESOURCE_ONLINE_FAILED = WIN32_ERROR.ERROR_QUORUM_RESOURCE_ONLINE_FAILED;
pub const ERROR_QUORUMLOG_OPEN_FAILED = WIN32_ERROR.ERROR_QUORUMLOG_OPEN_FAILED;
pub const ERROR_CLUSTERLOG_CORRUPT = WIN32_ERROR.ERROR_CLUSTERLOG_CORRUPT;
pub const ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE = WIN32_ERROR.ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE;
pub const ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE = WIN32_ERROR.ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE;
pub const ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND = WIN32_ERROR.ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND;
pub const ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE = WIN32_ERROR.ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE;
pub const ERROR_QUORUM_OWNER_ALIVE = WIN32_ERROR.ERROR_QUORUM_OWNER_ALIVE;
pub const ERROR_NETWORK_NOT_AVAILABLE = WIN32_ERROR.ERROR_NETWORK_NOT_AVAILABLE;
pub const ERROR_NODE_NOT_AVAILABLE = WIN32_ERROR.ERROR_NODE_NOT_AVAILABLE;
pub const ERROR_ALL_NODES_NOT_AVAILABLE = WIN32_ERROR.ERROR_ALL_NODES_NOT_AVAILABLE;
pub const ERROR_RESOURCE_FAILED = WIN32_ERROR.ERROR_RESOURCE_FAILED;
pub const ERROR_CLUSTER_INVALID_NODE = WIN32_ERROR.ERROR_CLUSTER_INVALID_NODE;
pub const ERROR_CLUSTER_NODE_EXISTS = WIN32_ERROR.ERROR_CLUSTER_NODE_EXISTS;
pub const ERROR_CLUSTER_JOIN_IN_PROGRESS = WIN32_ERROR.ERROR_CLUSTER_JOIN_IN_PROGRESS;
pub const ERROR_CLUSTER_NODE_NOT_FOUND = WIN32_ERROR.ERROR_CLUSTER_NODE_NOT_FOUND;
pub const ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND = WIN32_ERROR.ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND;
pub const ERROR_CLUSTER_NETWORK_EXISTS = WIN32_ERROR.ERROR_CLUSTER_NETWORK_EXISTS;
pub const ERROR_CLUSTER_NETWORK_NOT_FOUND = WIN32_ERROR.ERROR_CLUSTER_NETWORK_NOT_FOUND;
pub const ERROR_CLUSTER_NETINTERFACE_EXISTS = WIN32_ERROR.ERROR_CLUSTER_NETINTERFACE_EXISTS;
pub const ERROR_CLUSTER_NETINTERFACE_NOT_FOUND = WIN32_ERROR.ERROR_CLUSTER_NETINTERFACE_NOT_FOUND;
pub const ERROR_CLUSTER_INVALID_REQUEST = WIN32_ERROR.ERROR_CLUSTER_INVALID_REQUEST;
pub const ERROR_CLUSTER_INVALID_NETWORK_PROVIDER = WIN32_ERROR.ERROR_CLUSTER_INVALID_NETWORK_PROVIDER;
pub const ERROR_CLUSTER_NODE_DOWN = WIN32_ERROR.ERROR_CLUSTER_NODE_DOWN;
pub const ERROR_CLUSTER_NODE_UNREACHABLE = WIN32_ERROR.ERROR_CLUSTER_NODE_UNREACHABLE;
pub const ERROR_CLUSTER_NODE_NOT_MEMBER = WIN32_ERROR.ERROR_CLUSTER_NODE_NOT_MEMBER;
pub const ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS = WIN32_ERROR.ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS;
pub const ERROR_CLUSTER_INVALID_NETWORK = WIN32_ERROR.ERROR_CLUSTER_INVALID_NETWORK;
pub const ERROR_CLUSTER_NODE_UP = WIN32_ERROR.ERROR_CLUSTER_NODE_UP;
pub const ERROR_CLUSTER_IPADDR_IN_USE = WIN32_ERROR.ERROR_CLUSTER_IPADDR_IN_USE;
pub const ERROR_CLUSTER_NODE_NOT_PAUSED = WIN32_ERROR.ERROR_CLUSTER_NODE_NOT_PAUSED;
pub const ERROR_CLUSTER_NO_SECURITY_CONTEXT = WIN32_ERROR.ERROR_CLUSTER_NO_SECURITY_CONTEXT;
pub const ERROR_CLUSTER_NETWORK_NOT_INTERNAL = WIN32_ERROR.ERROR_CLUSTER_NETWORK_NOT_INTERNAL;
pub const ERROR_CLUSTER_NODE_ALREADY_UP = WIN32_ERROR.ERROR_CLUSTER_NODE_ALREADY_UP;
pub const ERROR_CLUSTER_NODE_ALREADY_DOWN = WIN32_ERROR.ERROR_CLUSTER_NODE_ALREADY_DOWN;
pub const ERROR_CLUSTER_NETWORK_ALREADY_ONLINE = WIN32_ERROR.ERROR_CLUSTER_NETWORK_ALREADY_ONLINE;
pub const ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE = WIN32_ERROR.ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE;
pub const ERROR_CLUSTER_NODE_ALREADY_MEMBER = WIN32_ERROR.ERROR_CLUSTER_NODE_ALREADY_MEMBER;
pub const ERROR_CLUSTER_LAST_INTERNAL_NETWORK = WIN32_ERROR.ERROR_CLUSTER_LAST_INTERNAL_NETWORK;
pub const ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS = WIN32_ERROR.ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS;
pub const ERROR_INVALID_OPERATION_ON_QUORUM = WIN32_ERROR.ERROR_INVALID_OPERATION_ON_QUORUM;
pub const ERROR_DEPENDENCY_NOT_ALLOWED = WIN32_ERROR.ERROR_DEPENDENCY_NOT_ALLOWED;
pub const ERROR_CLUSTER_NODE_PAUSED = WIN32_ERROR.ERROR_CLUSTER_NODE_PAUSED;
pub const ERROR_NODE_CANT_HOST_RESOURCE = WIN32_ERROR.ERROR_NODE_CANT_HOST_RESOURCE;
pub const ERROR_CLUSTER_NODE_NOT_READY = WIN32_ERROR.ERROR_CLUSTER_NODE_NOT_READY;
pub const ERROR_CLUSTER_NODE_SHUTTING_DOWN = WIN32_ERROR.ERROR_CLUSTER_NODE_SHUTTING_DOWN;
pub const ERROR_CLUSTER_JOIN_ABORTED = WIN32_ERROR.ERROR_CLUSTER_JOIN_ABORTED;
pub const ERROR_CLUSTER_INCOMPATIBLE_VERSIONS = WIN32_ERROR.ERROR_CLUSTER_INCOMPATIBLE_VERSIONS;
pub const ERROR_CLUSTER_MAXNUM_OF_RESOURCES_EXCEEDED = WIN32_ERROR.ERROR_CLUSTER_MAXNUM_OF_RESOURCES_EXCEEDED;
pub const ERROR_CLUSTER_SYSTEM_CONFIG_CHANGED = WIN32_ERROR.ERROR_CLUSTER_SYSTEM_CONFIG_CHANGED;
pub const ERROR_CLUSTER_RESOURCE_TYPE_NOT_FOUND = WIN32_ERROR.ERROR_CLUSTER_RESOURCE_TYPE_NOT_FOUND;
pub const ERROR_CLUSTER_RESTYPE_NOT_SUPPORTED = WIN32_ERROR.ERROR_CLUSTER_RESTYPE_NOT_SUPPORTED;
pub const ERROR_CLUSTER_RESNAME_NOT_FOUND = WIN32_ERROR.ERROR_CLUSTER_RESNAME_NOT_FOUND;
pub const ERROR_CLUSTER_NO_RPC_PACKAGES_REGISTERED = WIN32_ERROR.ERROR_CLUSTER_NO_RPC_PACKAGES_REGISTERED;
pub const ERROR_CLUSTER_OWNER_NOT_IN_PREFLIST = WIN32_ERROR.ERROR_CLUSTER_OWNER_NOT_IN_PREFLIST;
pub const ERROR_CLUSTER_DATABASE_SEQMISMATCH = WIN32_ERROR.ERROR_CLUSTER_DATABASE_SEQMISMATCH;
pub const ERROR_RESMON_INVALID_STATE = WIN32_ERROR.ERROR_RESMON_INVALID_STATE;
pub const ERROR_CLUSTER_GUM_NOT_LOCKER = WIN32_ERROR.ERROR_CLUSTER_GUM_NOT_LOCKER;
pub const ERROR_QUORUM_DISK_NOT_FOUND = WIN32_ERROR.ERROR_QUORUM_DISK_NOT_FOUND;
pub const ERROR_DATABASE_BACKUP_CORRUPT = WIN32_ERROR.ERROR_DATABASE_BACKUP_CORRUPT;
pub const ERROR_CLUSTER_NODE_ALREADY_HAS_DFS_ROOT = WIN32_ERROR.ERROR_CLUSTER_NODE_ALREADY_HAS_DFS_ROOT;
pub const ERROR_RESOURCE_PROPERTY_UNCHANGEABLE = WIN32_ERROR.ERROR_RESOURCE_PROPERTY_UNCHANGEABLE;
pub const ERROR_NO_ADMIN_ACCESS_POINT = WIN32_ERROR.ERROR_NO_ADMIN_ACCESS_POINT;
pub const ERROR_CLUSTER_MEMBERSHIP_INVALID_STATE = WIN32_ERROR.ERROR_CLUSTER_MEMBERSHIP_INVALID_STATE;
pub const ERROR_CLUSTER_QUORUMLOG_NOT_FOUND = WIN32_ERROR.ERROR_CLUSTER_QUORUMLOG_NOT_FOUND;
pub const ERROR_CLUSTER_MEMBERSHIP_HALT = WIN32_ERROR.ERROR_CLUSTER_MEMBERSHIP_HALT;
pub const ERROR_CLUSTER_INSTANCE_ID_MISMATCH = WIN32_ERROR.ERROR_CLUSTER_INSTANCE_ID_MISMATCH;
pub const ERROR_CLUSTER_NETWORK_NOT_FOUND_FOR_IP = WIN32_ERROR.ERROR_CLUSTER_NETWORK_NOT_FOUND_FOR_IP;
pub const ERROR_CLUSTER_PROPERTY_DATA_TYPE_MISMATCH = WIN32_ERROR.ERROR_CLUSTER_PROPERTY_DATA_TYPE_MISMATCH;
pub const ERROR_CLUSTER_EVICT_WITHOUT_CLEANUP = WIN32_ERROR.ERROR_CLUSTER_EVICT_WITHOUT_CLEANUP;
pub const ERROR_CLUSTER_PARAMETER_MISMATCH = WIN32_ERROR.ERROR_CLUSTER_PARAMETER_MISMATCH;
pub const ERROR_NODE_CANNOT_BE_CLUSTERED = WIN32_ERROR.ERROR_NODE_CANNOT_BE_CLUSTERED;
pub const ERROR_CLUSTER_WRONG_OS_VERSION = WIN32_ERROR.ERROR_CLUSTER_WRONG_OS_VERSION;
pub const ERROR_CLUSTER_CANT_CREATE_DUP_CLUSTER_NAME = WIN32_ERROR.ERROR_CLUSTER_CANT_CREATE_DUP_CLUSTER_NAME;
pub const ERROR_CLUSCFG_ALREADY_COMMITTED = WIN32_ERROR.ERROR_CLUSCFG_ALREADY_COMMITTED;
pub const ERROR_CLUSCFG_ROLLBACK_FAILED = WIN32_ERROR.ERROR_CLUSCFG_ROLLBACK_FAILED;
pub const ERROR_CLUSCFG_SYSTEM_DISK_DRIVE_LETTER_CONFLICT = WIN32_ERROR.ERROR_CLUSCFG_SYSTEM_DISK_DRIVE_LETTER_CONFLICT;
pub const ERROR_CLUSTER_OLD_VERSION = WIN32_ERROR.ERROR_CLUSTER_OLD_VERSION;
pub const ERROR_CLUSTER_MISMATCHED_COMPUTER_ACCT_NAME = WIN32_ERROR.ERROR_CLUSTER_MISMATCHED_COMPUTER_ACCT_NAME;
pub const ERROR_CLUSTER_NO_NET_ADAPTERS = WIN32_ERROR.ERROR_CLUSTER_NO_NET_ADAPTERS;
pub const ERROR_CLUSTER_POISONED = WIN32_ERROR.ERROR_CLUSTER_POISONED;
pub const ERROR_CLUSTER_GROUP_MOVING = WIN32_ERROR.ERROR_CLUSTER_GROUP_MOVING;
pub const ERROR_CLUSTER_RESOURCE_TYPE_BUSY = WIN32_ERROR.ERROR_CLUSTER_RESOURCE_TYPE_BUSY;
pub const ERROR_RESOURCE_CALL_TIMED_OUT = WIN32_ERROR.ERROR_RESOURCE_CALL_TIMED_OUT;
pub const ERROR_INVALID_CLUSTER_IPV6_ADDRESS = WIN32_ERROR.ERROR_INVALID_CLUSTER_IPV6_ADDRESS;
pub const ERROR_CLUSTER_INTERNAL_INVALID_FUNCTION = WIN32_ERROR.ERROR_CLUSTER_INTERNAL_INVALID_FUNCTION;
pub const ERROR_CLUSTER_PARAMETER_OUT_OF_BOUNDS = WIN32_ERROR.ERROR_CLUSTER_PARAMETER_OUT_OF_BOUNDS;
pub const ERROR_CLUSTER_PARTIAL_SEND = WIN32_ERROR.ERROR_CLUSTER_PARTIAL_SEND;
pub const ERROR_CLUSTER_REGISTRY_INVALID_FUNCTION = WIN32_ERROR.ERROR_CLUSTER_REGISTRY_INVALID_FUNCTION;
pub const ERROR_CLUSTER_INVALID_STRING_TERMINATION = WIN32_ERROR.ERROR_CLUSTER_INVALID_STRING_TERMINATION;
pub const ERROR_CLUSTER_INVALID_STRING_FORMAT = WIN32_ERROR.ERROR_CLUSTER_INVALID_STRING_FORMAT;
pub const ERROR_CLUSTER_DATABASE_TRANSACTION_IN_PROGRESS = WIN32_ERROR.ERROR_CLUSTER_DATABASE_TRANSACTION_IN_PROGRESS;
pub const ERROR_CLUSTER_DATABASE_TRANSACTION_NOT_IN_PROGRESS = WIN32_ERROR.ERROR_CLUSTER_DATABASE_TRANSACTION_NOT_IN_PROGRESS;
pub const ERROR_CLUSTER_NULL_DATA = WIN32_ERROR.ERROR_CLUSTER_NULL_DATA;
pub const ERROR_CLUSTER_PARTIAL_READ = WIN32_ERROR.ERROR_CLUSTER_PARTIAL_READ;
pub const ERROR_CLUSTER_PARTIAL_WRITE = WIN32_ERROR.ERROR_CLUSTER_PARTIAL_WRITE;
pub const ERROR_CLUSTER_CANT_DESERIALIZE_DATA = WIN32_ERROR.ERROR_CLUSTER_CANT_DESERIALIZE_DATA;
pub const ERROR_DEPENDENT_RESOURCE_PROPERTY_CONFLICT = WIN32_ERROR.ERROR_DEPENDENT_RESOURCE_PROPERTY_CONFLICT;
pub const ERROR_CLUSTER_NO_QUORUM = WIN32_ERROR.ERROR_CLUSTER_NO_QUORUM;
pub const ERROR_CLUSTER_INVALID_IPV6_NETWORK = WIN32_ERROR.ERROR_CLUSTER_INVALID_IPV6_NETWORK;
pub const ERROR_CLUSTER_INVALID_IPV6_TUNNEL_NETWORK = WIN32_ERROR.ERROR_CLUSTER_INVALID_IPV6_TUNNEL_NETWORK;
pub const ERROR_QUORUM_NOT_ALLOWED_IN_THIS_GROUP = WIN32_ERROR.ERROR_QUORUM_NOT_ALLOWED_IN_THIS_GROUP;
pub const ERROR_DEPENDENCY_TREE_TOO_COMPLEX = WIN32_ERROR.ERROR_DEPENDENCY_TREE_TOO_COMPLEX;
pub const ERROR_EXCEPTION_IN_RESOURCE_CALL = WIN32_ERROR.ERROR_EXCEPTION_IN_RESOURCE_CALL;
pub const ERROR_CLUSTER_RHS_FAILED_INITIALIZATION = WIN32_ERROR.ERROR_CLUSTER_RHS_FAILED_INITIALIZATION;
pub const ERROR_CLUSTER_NOT_INSTALLED = WIN32_ERROR.ERROR_CLUSTER_NOT_INSTALLED;
pub const ERROR_CLUSTER_RESOURCES_MUST_BE_ONLINE_ON_THE_SAME_NODE = WIN32_ERROR.ERROR_CLUSTER_RESOURCES_MUST_BE_ONLINE_ON_THE_SAME_NODE;
pub const ERROR_CLUSTER_MAX_NODES_IN_CLUSTER = WIN32_ERROR.ERROR_CLUSTER_MAX_NODES_IN_CLUSTER;
pub const ERROR_CLUSTER_TOO_MANY_NODES = WIN32_ERROR.ERROR_CLUSTER_TOO_MANY_NODES;
pub const ERROR_CLUSTER_OBJECT_ALREADY_USED = WIN32_ERROR.ERROR_CLUSTER_OBJECT_ALREADY_USED;
pub const ERROR_NONCORE_GROUPS_FOUND = WIN32_ERROR.ERROR_NONCORE_GROUPS_FOUND;
pub const ERROR_FILE_SHARE_RESOURCE_CONFLICT = WIN32_ERROR.ERROR_FILE_SHARE_RESOURCE_CONFLICT;
pub const ERROR_CLUSTER_EVICT_INVALID_REQUEST = WIN32_ERROR.ERROR_CLUSTER_EVICT_INVALID_REQUEST;
pub const ERROR_CLUSTER_SINGLETON_RESOURCE = WIN32_ERROR.ERROR_CLUSTER_SINGLETON_RESOURCE;
pub const ERROR_CLUSTER_GROUP_SINGLETON_RESOURCE = WIN32_ERROR.ERROR_CLUSTER_GROUP_SINGLETON_RESOURCE;
pub const ERROR_CLUSTER_RESOURCE_PROVIDER_FAILED = WIN32_ERROR.ERROR_CLUSTER_RESOURCE_PROVIDER_FAILED;
pub const ERROR_CLUSTER_RESOURCE_CONFIGURATION_ERROR = WIN32_ERROR.ERROR_CLUSTER_RESOURCE_CONFIGURATION_ERROR;
pub const ERROR_CLUSTER_GROUP_BUSY = WIN32_ERROR.ERROR_CLUSTER_GROUP_BUSY;
pub const ERROR_CLUSTER_NOT_SHARED_VOLUME = WIN32_ERROR.ERROR_CLUSTER_NOT_SHARED_VOLUME;
pub const ERROR_CLUSTER_INVALID_SECURITY_DESCRIPTOR = WIN32_ERROR.ERROR_CLUSTER_INVALID_SECURITY_DESCRIPTOR;
pub const ERROR_CLUSTER_SHARED_VOLUMES_IN_USE = WIN32_ERROR.ERROR_CLUSTER_SHARED_VOLUMES_IN_USE;
pub const ERROR_CLUSTER_USE_SHARED_VOLUMES_API = WIN32_ERROR.ERROR_CLUSTER_USE_SHARED_VOLUMES_API;
pub const ERROR_CLUSTER_BACKUP_IN_PROGRESS = WIN32_ERROR.ERROR_CLUSTER_BACKUP_IN_PROGRESS;
pub const ERROR_NON_CSV_PATH = WIN32_ERROR.ERROR_NON_CSV_PATH;
pub const ERROR_CSV_VOLUME_NOT_LOCAL = WIN32_ERROR.ERROR_CSV_VOLUME_NOT_LOCAL;
pub const ERROR_CLUSTER_WATCHDOG_TERMINATING = WIN32_ERROR.ERROR_CLUSTER_WATCHDOG_TERMINATING;
pub const ERROR_CLUSTER_RESOURCE_VETOED_MOVE_INCOMPATIBLE_NODES = WIN32_ERROR.ERROR_CLUSTER_RESOURCE_VETOED_MOVE_INCOMPATIBLE_NODES;
pub const ERROR_CLUSTER_INVALID_NODE_WEIGHT = WIN32_ERROR.ERROR_CLUSTER_INVALID_NODE_WEIGHT;
pub const ERROR_CLUSTER_RESOURCE_VETOED_CALL = WIN32_ERROR.ERROR_CLUSTER_RESOURCE_VETOED_CALL;
pub const ERROR_RESMON_SYSTEM_RESOURCES_LACKING = WIN32_ERROR.ERROR_RESMON_SYSTEM_RESOURCES_LACKING;
pub const ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_DESTINATION = WIN32_ERROR.ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_DESTINATION;
pub const ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_SOURCE = WIN32_ERROR.ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_SOURCE;
pub const ERROR_CLUSTER_GROUP_QUEUED = WIN32_ERROR.ERROR_CLUSTER_GROUP_QUEUED;
pub const ERROR_CLUSTER_RESOURCE_LOCKED_STATUS = WIN32_ERROR.ERROR_CLUSTER_RESOURCE_LOCKED_STATUS;
pub const ERROR_CLUSTER_SHARED_VOLUME_FAILOVER_NOT_ALLOWED = WIN32_ERROR.ERROR_CLUSTER_SHARED_VOLUME_FAILOVER_NOT_ALLOWED;
pub const ERROR_CLUSTER_NODE_DRAIN_IN_PROGRESS = WIN32_ERROR.ERROR_CLUSTER_NODE_DRAIN_IN_PROGRESS;
pub const ERROR_CLUSTER_DISK_NOT_CONNECTED = WIN32_ERROR.ERROR_CLUSTER_DISK_NOT_CONNECTED;
pub const ERROR_DISK_NOT_CSV_CAPABLE = WIN32_ERROR.ERROR_DISK_NOT_CSV_CAPABLE;
pub const ERROR_RESOURCE_NOT_IN_AVAILABLE_STORAGE = WIN32_ERROR.ERROR_RESOURCE_NOT_IN_AVAILABLE_STORAGE;
pub const ERROR_CLUSTER_SHARED_VOLUME_REDIRECTED = WIN32_ERROR.ERROR_CLUSTER_SHARED_VOLUME_REDIRECTED;
pub const ERROR_CLUSTER_SHARED_VOLUME_NOT_REDIRECTED = WIN32_ERROR.ERROR_CLUSTER_SHARED_VOLUME_NOT_REDIRECTED;
pub const ERROR_CLUSTER_CANNOT_RETURN_PROPERTIES = WIN32_ERROR.ERROR_CLUSTER_CANNOT_RETURN_PROPERTIES;
pub const ERROR_CLUSTER_RESOURCE_CONTAINS_UNSUPPORTED_DIFF_AREA_FOR_SHARED_VOLUMES = WIN32_ERROR.ERROR_CLUSTER_RESOURCE_CONTAINS_UNSUPPORTED_DIFF_AREA_FOR_SHARED_VOLUMES;
pub const ERROR_CLUSTER_RESOURCE_IS_IN_MAINTENANCE_MODE = WIN32_ERROR.ERROR_CLUSTER_RESOURCE_IS_IN_MAINTENANCE_MODE;
pub const ERROR_CLUSTER_AFFINITY_CONFLICT = WIN32_ERROR.ERROR_CLUSTER_AFFINITY_CONFLICT;
pub const ERROR_CLUSTER_RESOURCE_IS_REPLICA_VIRTUAL_MACHINE = WIN32_ERROR.ERROR_CLUSTER_RESOURCE_IS_REPLICA_VIRTUAL_MACHINE;
pub const ERROR_CLUSTER_UPGRADE_INCOMPATIBLE_VERSIONS = WIN32_ERROR.ERROR_CLUSTER_UPGRADE_INCOMPATIBLE_VERSIONS;
pub const ERROR_CLUSTER_UPGRADE_FIX_QUORUM_NOT_SUPPORTED = WIN32_ERROR.ERROR_CLUSTER_UPGRADE_FIX_QUORUM_NOT_SUPPORTED;
pub const ERROR_CLUSTER_UPGRADE_RESTART_REQUIRED = WIN32_ERROR.ERROR_CLUSTER_UPGRADE_RESTART_REQUIRED;
pub const ERROR_CLUSTER_UPGRADE_IN_PROGRESS = WIN32_ERROR.ERROR_CLUSTER_UPGRADE_IN_PROGRESS;
pub const ERROR_CLUSTER_UPGRADE_INCOMPLETE = WIN32_ERROR.ERROR_CLUSTER_UPGRADE_INCOMPLETE;
pub const ERROR_CLUSTER_NODE_IN_GRACE_PERIOD = WIN32_ERROR.ERROR_CLUSTER_NODE_IN_GRACE_PERIOD;
pub const ERROR_CLUSTER_CSV_IO_PAUSE_TIMEOUT = WIN32_ERROR.ERROR_CLUSTER_CSV_IO_PAUSE_TIMEOUT;
pub const ERROR_NODE_NOT_ACTIVE_CLUSTER_MEMBER = WIN32_ERROR.ERROR_NODE_NOT_ACTIVE_CLUSTER_MEMBER;
pub const ERROR_CLUSTER_RESOURCE_NOT_MONITORED = WIN32_ERROR.ERROR_CLUSTER_RESOURCE_NOT_MONITORED;
pub const ERROR_CLUSTER_RESOURCE_DOES_NOT_SUPPORT_UNMONITORED = WIN32_ERROR.ERROR_CLUSTER_RESOURCE_DOES_NOT_SUPPORT_UNMONITORED;
pub const ERROR_CLUSTER_RESOURCE_IS_REPLICATED = WIN32_ERROR.ERROR_CLUSTER_RESOURCE_IS_REPLICATED;
pub const ERROR_CLUSTER_NODE_ISOLATED = WIN32_ERROR.ERROR_CLUSTER_NODE_ISOLATED;
pub const ERROR_CLUSTER_NODE_QUARANTINED = WIN32_ERROR.ERROR_CLUSTER_NODE_QUARANTINED;
pub const ERROR_CLUSTER_DATABASE_UPDATE_CONDITION_FAILED = WIN32_ERROR.ERROR_CLUSTER_DATABASE_UPDATE_CONDITION_FAILED;
pub const ERROR_CLUSTER_SPACE_DEGRADED = WIN32_ERROR.ERROR_CLUSTER_SPACE_DEGRADED;
pub const ERROR_CLUSTER_TOKEN_DELEGATION_NOT_SUPPORTED = WIN32_ERROR.ERROR_CLUSTER_TOKEN_DELEGATION_NOT_SUPPORTED;
pub const ERROR_CLUSTER_CSV_INVALID_HANDLE = WIN32_ERROR.ERROR_CLUSTER_CSV_INVALID_HANDLE;
pub const ERROR_CLUSTER_CSV_SUPPORTED_ONLY_ON_COORDINATOR = WIN32_ERROR.ERROR_CLUSTER_CSV_SUPPORTED_ONLY_ON_COORDINATOR;
pub const ERROR_GROUPSET_NOT_AVAILABLE = WIN32_ERROR.ERROR_GROUPSET_NOT_AVAILABLE;
pub const ERROR_GROUPSET_NOT_FOUND = WIN32_ERROR.ERROR_GROUPSET_NOT_FOUND;
pub const ERROR_GROUPSET_CANT_PROVIDE = WIN32_ERROR.ERROR_GROUPSET_CANT_PROVIDE;
pub const ERROR_CLUSTER_FAULT_DOMAIN_PARENT_NOT_FOUND = WIN32_ERROR.ERROR_CLUSTER_FAULT_DOMAIN_PARENT_NOT_FOUND;
pub const ERROR_CLUSTER_FAULT_DOMAIN_INVALID_HIERARCHY = WIN32_ERROR.ERROR_CLUSTER_FAULT_DOMAIN_INVALID_HIERARCHY;
pub const ERROR_CLUSTER_FAULT_DOMAIN_FAILED_S2D_VALIDATION = WIN32_ERROR.ERROR_CLUSTER_FAULT_DOMAIN_FAILED_S2D_VALIDATION;
pub const ERROR_CLUSTER_FAULT_DOMAIN_S2D_CONNECTIVITY_LOSS = WIN32_ERROR.ERROR_CLUSTER_FAULT_DOMAIN_S2D_CONNECTIVITY_LOSS;
pub const ERROR_CLUSTER_INVALID_INFRASTRUCTURE_FILESERVER_NAME = WIN32_ERROR.ERROR_CLUSTER_INVALID_INFRASTRUCTURE_FILESERVER_NAME;
pub const ERROR_CLUSTERSET_MANAGEMENT_CLUSTER_UNREACHABLE = WIN32_ERROR.ERROR_CLUSTERSET_MANAGEMENT_CLUSTER_UNREACHABLE;
pub const ERROR_ENCRYPTION_FAILED = WIN32_ERROR.ERROR_ENCRYPTION_FAILED;
pub const ERROR_DECRYPTION_FAILED = WIN32_ERROR.ERROR_DECRYPTION_FAILED;
pub const ERROR_FILE_ENCRYPTED = WIN32_ERROR.ERROR_FILE_ENCRYPTED;
pub const ERROR_NO_RECOVERY_POLICY = WIN32_ERROR.ERROR_NO_RECOVERY_POLICY;
pub const ERROR_NO_EFS = WIN32_ERROR.ERROR_NO_EFS;
pub const ERROR_WRONG_EFS = WIN32_ERROR.ERROR_WRONG_EFS;
pub const ERROR_NO_USER_KEYS = WIN32_ERROR.ERROR_NO_USER_KEYS;
pub const ERROR_FILE_NOT_ENCRYPTED = WIN32_ERROR.ERROR_FILE_NOT_ENCRYPTED;
pub const ERROR_NOT_EXPORT_FORMAT = WIN32_ERROR.ERROR_NOT_EXPORT_FORMAT;
pub const ERROR_FILE_READ_ONLY = WIN32_ERROR.ERROR_FILE_READ_ONLY;
pub const ERROR_DIR_EFS_DISALLOWED = WIN32_ERROR.ERROR_DIR_EFS_DISALLOWED;
pub const ERROR_EFS_SERVER_NOT_TRUSTED = WIN32_ERROR.ERROR_EFS_SERVER_NOT_TRUSTED;
pub const ERROR_BAD_RECOVERY_POLICY = WIN32_ERROR.ERROR_BAD_RECOVERY_POLICY;
pub const ERROR_EFS_ALG_BLOB_TOO_BIG = WIN32_ERROR.ERROR_EFS_ALG_BLOB_TOO_BIG;
pub const ERROR_VOLUME_NOT_SUPPORT_EFS = WIN32_ERROR.ERROR_VOLUME_NOT_SUPPORT_EFS;
pub const ERROR_EFS_DISABLED = WIN32_ERROR.ERROR_EFS_DISABLED;
pub const ERROR_EFS_VERSION_NOT_SUPPORT = WIN32_ERROR.ERROR_EFS_VERSION_NOT_SUPPORT;
pub const ERROR_CS_ENCRYPTION_INVALID_SERVER_RESPONSE = WIN32_ERROR.ERROR_CS_ENCRYPTION_INVALID_SERVER_RESPONSE;
pub const ERROR_CS_ENCRYPTION_UNSUPPORTED_SERVER = WIN32_ERROR.ERROR_CS_ENCRYPTION_UNSUPPORTED_SERVER;
pub const ERROR_CS_ENCRYPTION_EXISTING_ENCRYPTED_FILE = WIN32_ERROR.ERROR_CS_ENCRYPTION_EXISTING_ENCRYPTED_FILE;
pub const ERROR_CS_ENCRYPTION_NEW_ENCRYPTED_FILE = WIN32_ERROR.ERROR_CS_ENCRYPTION_NEW_ENCRYPTED_FILE;
pub const ERROR_CS_ENCRYPTION_FILE_NOT_CSE = WIN32_ERROR.ERROR_CS_ENCRYPTION_FILE_NOT_CSE;
pub const ERROR_ENCRYPTION_POLICY_DENIES_OPERATION = WIN32_ERROR.ERROR_ENCRYPTION_POLICY_DENIES_OPERATION;
pub const ERROR_WIP_ENCRYPTION_FAILED = WIN32_ERROR.ERROR_WIP_ENCRYPTION_FAILED;
pub const ERROR_NO_BROWSER_SERVERS_FOUND = WIN32_ERROR.ERROR_NO_BROWSER_SERVERS_FOUND;
pub const ERROR_CLUSTER_OBJECT_IS_CLUSTER_SET_VM = WIN32_ERROR.ERROR_CLUSTER_OBJECT_IS_CLUSTER_SET_VM;
pub const ERROR_LOG_SECTOR_INVALID = WIN32_ERROR.ERROR_LOG_SECTOR_INVALID;
pub const ERROR_LOG_SECTOR_PARITY_INVALID = WIN32_ERROR.ERROR_LOG_SECTOR_PARITY_INVALID;
pub const ERROR_LOG_SECTOR_REMAPPED = WIN32_ERROR.ERROR_LOG_SECTOR_REMAPPED;
pub const ERROR_LOG_BLOCK_INCOMPLETE = WIN32_ERROR.ERROR_LOG_BLOCK_INCOMPLETE;
pub const ERROR_LOG_INVALID_RANGE = WIN32_ERROR.ERROR_LOG_INVALID_RANGE;
pub const ERROR_LOG_BLOCKS_EXHAUSTED = WIN32_ERROR.ERROR_LOG_BLOCKS_EXHAUSTED;
pub const ERROR_LOG_READ_CONTEXT_INVALID = WIN32_ERROR.ERROR_LOG_READ_CONTEXT_INVALID;
pub const ERROR_LOG_RESTART_INVALID = WIN32_ERROR.ERROR_LOG_RESTART_INVALID;
pub const ERROR_LOG_BLOCK_VERSION = WIN32_ERROR.ERROR_LOG_BLOCK_VERSION;
pub const ERROR_LOG_BLOCK_INVALID = WIN32_ERROR.ERROR_LOG_BLOCK_INVALID;
pub const ERROR_LOG_READ_MODE_INVALID = WIN32_ERROR.ERROR_LOG_READ_MODE_INVALID;
pub const ERROR_LOG_NO_RESTART = WIN32_ERROR.ERROR_LOG_NO_RESTART;
pub const ERROR_LOG_METADATA_CORRUPT = WIN32_ERROR.ERROR_LOG_METADATA_CORRUPT;
pub const ERROR_LOG_METADATA_INVALID = WIN32_ERROR.ERROR_LOG_METADATA_INVALID;
pub const ERROR_LOG_METADATA_INCONSISTENT = WIN32_ERROR.ERROR_LOG_METADATA_INCONSISTENT;
pub const ERROR_LOG_RESERVATION_INVALID = WIN32_ERROR.ERROR_LOG_RESERVATION_INVALID;
pub const ERROR_LOG_CANT_DELETE = WIN32_ERROR.ERROR_LOG_CANT_DELETE;
pub const ERROR_LOG_CONTAINER_LIMIT_EXCEEDED = WIN32_ERROR.ERROR_LOG_CONTAINER_LIMIT_EXCEEDED;
pub const ERROR_LOG_START_OF_LOG = WIN32_ERROR.ERROR_LOG_START_OF_LOG;
pub const ERROR_LOG_POLICY_ALREADY_INSTALLED = WIN32_ERROR.ERROR_LOG_POLICY_ALREADY_INSTALLED;
pub const ERROR_LOG_POLICY_NOT_INSTALLED = WIN32_ERROR.ERROR_LOG_POLICY_NOT_INSTALLED;
pub const ERROR_LOG_POLICY_INVALID = WIN32_ERROR.ERROR_LOG_POLICY_INVALID;
pub const ERROR_LOG_POLICY_CONFLICT = WIN32_ERROR.ERROR_LOG_POLICY_CONFLICT;
pub const ERROR_LOG_PINNED_ARCHIVE_TAIL = WIN32_ERROR.ERROR_LOG_PINNED_ARCHIVE_TAIL;
pub const ERROR_LOG_RECORD_NONEXISTENT = WIN32_ERROR.ERROR_LOG_RECORD_NONEXISTENT;
pub const ERROR_LOG_RECORDS_RESERVED_INVALID = WIN32_ERROR.ERROR_LOG_RECORDS_RESERVED_INVALID;
pub const ERROR_LOG_SPACE_RESERVED_INVALID = WIN32_ERROR.ERROR_LOG_SPACE_RESERVED_INVALID;
pub const ERROR_LOG_TAIL_INVALID = WIN32_ERROR.ERROR_LOG_TAIL_INVALID;
pub const ERROR_LOG_FULL = WIN32_ERROR.ERROR_LOG_FULL;
pub const ERROR_COULD_NOT_RESIZE_LOG = WIN32_ERROR.ERROR_COULD_NOT_RESIZE_LOG;
pub const ERROR_LOG_MULTIPLEXED = WIN32_ERROR.ERROR_LOG_MULTIPLEXED;
pub const ERROR_LOG_DEDICATED = WIN32_ERROR.ERROR_LOG_DEDICATED;
pub const ERROR_LOG_ARCHIVE_NOT_IN_PROGRESS = WIN32_ERROR.ERROR_LOG_ARCHIVE_NOT_IN_PROGRESS;
pub const ERROR_LOG_ARCHIVE_IN_PROGRESS = WIN32_ERROR.ERROR_LOG_ARCHIVE_IN_PROGRESS;
pub const ERROR_LOG_EPHEMERAL = WIN32_ERROR.ERROR_LOG_EPHEMERAL;
pub const ERROR_LOG_NOT_ENOUGH_CONTAINERS = WIN32_ERROR.ERROR_LOG_NOT_ENOUGH_CONTAINERS;
pub const ERROR_LOG_CLIENT_ALREADY_REGISTERED = WIN32_ERROR.ERROR_LOG_CLIENT_ALREADY_REGISTERED;
pub const ERROR_LOG_CLIENT_NOT_REGISTERED = WIN32_ERROR.ERROR_LOG_CLIENT_NOT_REGISTERED;
pub const ERROR_LOG_FULL_HANDLER_IN_PROGRESS = WIN32_ERROR.ERROR_LOG_FULL_HANDLER_IN_PROGRESS;
pub const ERROR_LOG_CONTAINER_READ_FAILED = WIN32_ERROR.ERROR_LOG_CONTAINER_READ_FAILED;
pub const ERROR_LOG_CONTAINER_WRITE_FAILED = WIN32_ERROR.ERROR_LOG_CONTAINER_WRITE_FAILED;
pub const ERROR_LOG_CONTAINER_OPEN_FAILED = WIN32_ERROR.ERROR_LOG_CONTAINER_OPEN_FAILED;
pub const ERROR_LOG_CONTAINER_STATE_INVALID = WIN32_ERROR.ERROR_LOG_CONTAINER_STATE_INVALID;
pub const ERROR_LOG_STATE_INVALID = WIN32_ERROR.ERROR_LOG_STATE_INVALID;
pub const ERROR_LOG_PINNED = WIN32_ERROR.ERROR_LOG_PINNED;
pub const ERROR_LOG_METADATA_FLUSH_FAILED = WIN32_ERROR.ERROR_LOG_METADATA_FLUSH_FAILED;
pub const ERROR_LOG_INCONSISTENT_SECURITY = WIN32_ERROR.ERROR_LOG_INCONSISTENT_SECURITY;
pub const ERROR_LOG_APPENDED_FLUSH_FAILED = WIN32_ERROR.ERROR_LOG_APPENDED_FLUSH_FAILED;
pub const ERROR_LOG_PINNED_RESERVATION = WIN32_ERROR.ERROR_LOG_PINNED_RESERVATION;
pub const ERROR_INVALID_TRANSACTION = WIN32_ERROR.ERROR_INVALID_TRANSACTION;
pub const ERROR_TRANSACTION_NOT_ACTIVE = WIN32_ERROR.ERROR_TRANSACTION_NOT_ACTIVE;
pub const ERROR_TRANSACTION_REQUEST_NOT_VALID = WIN32_ERROR.ERROR_TRANSACTION_REQUEST_NOT_VALID;
pub const ERROR_TRANSACTION_NOT_REQUESTED = WIN32_ERROR.ERROR_TRANSACTION_NOT_REQUESTED;
pub const ERROR_TRANSACTION_ALREADY_ABORTED = WIN32_ERROR.ERROR_TRANSACTION_ALREADY_ABORTED;
pub const ERROR_TRANSACTION_ALREADY_COMMITTED = WIN32_ERROR.ERROR_TRANSACTION_ALREADY_COMMITTED;
pub const ERROR_TM_INITIALIZATION_FAILED = WIN32_ERROR.ERROR_TM_INITIALIZATION_FAILED;
pub const ERROR_RESOURCEMANAGER_READ_ONLY = WIN32_ERROR.ERROR_RESOURCEMANAGER_READ_ONLY;
pub const ERROR_TRANSACTION_NOT_JOINED = WIN32_ERROR.ERROR_TRANSACTION_NOT_JOINED;
pub const ERROR_TRANSACTION_SUPERIOR_EXISTS = WIN32_ERROR.ERROR_TRANSACTION_SUPERIOR_EXISTS;
pub const ERROR_CRM_PROTOCOL_ALREADY_EXISTS = WIN32_ERROR.ERROR_CRM_PROTOCOL_ALREADY_EXISTS;
pub const ERROR_TRANSACTION_PROPAGATION_FAILED = WIN32_ERROR.ERROR_TRANSACTION_PROPAGATION_FAILED;
pub const ERROR_CRM_PROTOCOL_NOT_FOUND = WIN32_ERROR.ERROR_CRM_PROTOCOL_NOT_FOUND;
pub const ERROR_TRANSACTION_INVALID_MARSHALL_BUFFER = WIN32_ERROR.ERROR_TRANSACTION_INVALID_MARSHALL_BUFFER;
pub const ERROR_CURRENT_TRANSACTION_NOT_VALID = WIN32_ERROR.ERROR_CURRENT_TRANSACTION_NOT_VALID;
pub const ERROR_TRANSACTION_NOT_FOUND = WIN32_ERROR.ERROR_TRANSACTION_NOT_FOUND;
pub const ERROR_RESOURCEMANAGER_NOT_FOUND = WIN32_ERROR.ERROR_RESOURCEMANAGER_NOT_FOUND;
pub const ERROR_ENLISTMENT_NOT_FOUND = WIN32_ERROR.ERROR_ENLISTMENT_NOT_FOUND;
pub const ERROR_TRANSACTIONMANAGER_NOT_FOUND = WIN32_ERROR.ERROR_TRANSACTIONMANAGER_NOT_FOUND;
pub const ERROR_TRANSACTIONMANAGER_NOT_ONLINE = WIN32_ERROR.ERROR_TRANSACTIONMANAGER_NOT_ONLINE;
pub const ERROR_TRANSACTIONMANAGER_RECOVERY_NAME_COLLISION = WIN32_ERROR.ERROR_TRANSACTIONMANAGER_RECOVERY_NAME_COLLISION;
pub const ERROR_TRANSACTION_NOT_ROOT = WIN32_ERROR.ERROR_TRANSACTION_NOT_ROOT;
pub const ERROR_TRANSACTION_OBJECT_EXPIRED = WIN32_ERROR.ERROR_TRANSACTION_OBJECT_EXPIRED;
pub const ERROR_TRANSACTION_RESPONSE_NOT_ENLISTED = WIN32_ERROR.ERROR_TRANSACTION_RESPONSE_NOT_ENLISTED;
pub const ERROR_TRANSACTION_RECORD_TOO_LONG = WIN32_ERROR.ERROR_TRANSACTION_RECORD_TOO_LONG;
pub const ERROR_IMPLICIT_TRANSACTION_NOT_SUPPORTED = WIN32_ERROR.ERROR_IMPLICIT_TRANSACTION_NOT_SUPPORTED;
pub const ERROR_TRANSACTION_INTEGRITY_VIOLATED = WIN32_ERROR.ERROR_TRANSACTION_INTEGRITY_VIOLATED;
pub const ERROR_TRANSACTIONMANAGER_IDENTITY_MISMATCH = WIN32_ERROR.ERROR_TRANSACTIONMANAGER_IDENTITY_MISMATCH;
pub const ERROR_RM_CANNOT_BE_FROZEN_FOR_SNAPSHOT = WIN32_ERROR.ERROR_RM_CANNOT_BE_FROZEN_FOR_SNAPSHOT;
pub const ERROR_TRANSACTION_MUST_WRITETHROUGH = WIN32_ERROR.ERROR_TRANSACTION_MUST_WRITETHROUGH;
pub const ERROR_TRANSACTION_NO_SUPERIOR = WIN32_ERROR.ERROR_TRANSACTION_NO_SUPERIOR;
pub const ERROR_HEURISTIC_DAMAGE_POSSIBLE = WIN32_ERROR.ERROR_HEURISTIC_DAMAGE_POSSIBLE;
pub const ERROR_TRANSACTIONAL_CONFLICT = WIN32_ERROR.ERROR_TRANSACTIONAL_CONFLICT;
pub const ERROR_RM_NOT_ACTIVE = WIN32_ERROR.ERROR_RM_NOT_ACTIVE;
pub const ERROR_RM_METADATA_CORRUPT = WIN32_ERROR.ERROR_RM_METADATA_CORRUPT;
pub const ERROR_DIRECTORY_NOT_RM = WIN32_ERROR.ERROR_DIRECTORY_NOT_RM;
pub const ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE = WIN32_ERROR.ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE;
pub const ERROR_LOG_RESIZE_INVALID_SIZE = WIN32_ERROR.ERROR_LOG_RESIZE_INVALID_SIZE;
pub const ERROR_OBJECT_NO_LONGER_EXISTS = WIN32_ERROR.ERROR_OBJECT_NO_LONGER_EXISTS;
pub const ERROR_STREAM_MINIVERSION_NOT_FOUND = WIN32_ERROR.ERROR_STREAM_MINIVERSION_NOT_FOUND;
pub const ERROR_STREAM_MINIVERSION_NOT_VALID = WIN32_ERROR.ERROR_STREAM_MINIVERSION_NOT_VALID;
pub const ERROR_MINIVERSION_INACCESSIBLE_FROM_SPECIFIED_TRANSACTION = WIN32_ERROR.ERROR_MINIVERSION_INACCESSIBLE_FROM_SPECIFIED_TRANSACTION;
pub const ERROR_CANT_OPEN_MINIVERSION_WITH_MODIFY_INTENT = WIN32_ERROR.ERROR_CANT_OPEN_MINIVERSION_WITH_MODIFY_INTENT;
pub const ERROR_CANT_CREATE_MORE_STREAM_MINIVERSIONS = WIN32_ERROR.ERROR_CANT_CREATE_MORE_STREAM_MINIVERSIONS;
pub const ERROR_REMOTE_FILE_VERSION_MISMATCH = WIN32_ERROR.ERROR_REMOTE_FILE_VERSION_MISMATCH;
pub const ERROR_HANDLE_NO_LONGER_VALID = WIN32_ERROR.ERROR_HANDLE_NO_LONGER_VALID;
pub const ERROR_NO_TXF_METADATA = WIN32_ERROR.ERROR_NO_TXF_METADATA;
pub const ERROR_LOG_CORRUPTION_DETECTED = WIN32_ERROR.ERROR_LOG_CORRUPTION_DETECTED;
pub const ERROR_CANT_RECOVER_WITH_HANDLE_OPEN = WIN32_ERROR.ERROR_CANT_RECOVER_WITH_HANDLE_OPEN;
pub const ERROR_RM_DISCONNECTED = WIN32_ERROR.ERROR_RM_DISCONNECTED;
pub const ERROR_ENLISTMENT_NOT_SUPERIOR = WIN32_ERROR.ERROR_ENLISTMENT_NOT_SUPERIOR;
pub const ERROR_RECOVERY_NOT_NEEDED = WIN32_ERROR.ERROR_RECOVERY_NOT_NEEDED;
pub const ERROR_RM_ALREADY_STARTED = WIN32_ERROR.ERROR_RM_ALREADY_STARTED;
pub const ERROR_FILE_IDENTITY_NOT_PERSISTENT = WIN32_ERROR.ERROR_FILE_IDENTITY_NOT_PERSISTENT;
pub const ERROR_CANT_BREAK_TRANSACTIONAL_DEPENDENCY = WIN32_ERROR.ERROR_CANT_BREAK_TRANSACTIONAL_DEPENDENCY;
pub const ERROR_CANT_CROSS_RM_BOUNDARY = WIN32_ERROR.ERROR_CANT_CROSS_RM_BOUNDARY;
pub const ERROR_TXF_DIR_NOT_EMPTY = WIN32_ERROR.ERROR_TXF_DIR_NOT_EMPTY;
pub const ERROR_INDOUBT_TRANSACTIONS_EXIST = WIN32_ERROR.ERROR_INDOUBT_TRANSACTIONS_EXIST;
pub const ERROR_TM_VOLATILE = WIN32_ERROR.ERROR_TM_VOLATILE;
pub const ERROR_ROLLBACK_TIMER_EXPIRED = WIN32_ERROR.ERROR_ROLLBACK_TIMER_EXPIRED;
pub const ERROR_TXF_ATTRIBUTE_CORRUPT = WIN32_ERROR.ERROR_TXF_ATTRIBUTE_CORRUPT;
pub const ERROR_EFS_NOT_ALLOWED_IN_TRANSACTION = WIN32_ERROR.ERROR_EFS_NOT_ALLOWED_IN_TRANSACTION;
pub const ERROR_TRANSACTIONAL_OPEN_NOT_ALLOWED = WIN32_ERROR.ERROR_TRANSACTIONAL_OPEN_NOT_ALLOWED;
pub const ERROR_LOG_GROWTH_FAILED = WIN32_ERROR.ERROR_LOG_GROWTH_FAILED;
pub const ERROR_TRANSACTED_MAPPING_UNSUPPORTED_REMOTE = WIN32_ERROR.ERROR_TRANSACTED_MAPPING_UNSUPPORTED_REMOTE;
pub const ERROR_TXF_METADATA_ALREADY_PRESENT = WIN32_ERROR.ERROR_TXF_METADATA_ALREADY_PRESENT;
pub const ERROR_TRANSACTION_SCOPE_CALLBACKS_NOT_SET = WIN32_ERROR.ERROR_TRANSACTION_SCOPE_CALLBACKS_NOT_SET;
pub const ERROR_TRANSACTION_REQUIRED_PROMOTION = WIN32_ERROR.ERROR_TRANSACTION_REQUIRED_PROMOTION;
pub const ERROR_CANNOT_EXECUTE_FILE_IN_TRANSACTION = WIN32_ERROR.ERROR_CANNOT_EXECUTE_FILE_IN_TRANSACTION;
pub const ERROR_TRANSACTIONS_NOT_FROZEN = WIN32_ERROR.ERROR_TRANSACTIONS_NOT_FROZEN;
pub const ERROR_TRANSACTION_FREEZE_IN_PROGRESS = WIN32_ERROR.ERROR_TRANSACTION_FREEZE_IN_PROGRESS;
pub const ERROR_NOT_SNAPSHOT_VOLUME = WIN32_ERROR.ERROR_NOT_SNAPSHOT_VOLUME;
pub const ERROR_NO_SAVEPOINT_WITH_OPEN_FILES = WIN32_ERROR.ERROR_NO_SAVEPOINT_WITH_OPEN_FILES;
pub const ERROR_DATA_LOST_REPAIR = WIN32_ERROR.ERROR_DATA_LOST_REPAIR;
pub const ERROR_SPARSE_NOT_ALLOWED_IN_TRANSACTION = WIN32_ERROR.ERROR_SPARSE_NOT_ALLOWED_IN_TRANSACTION;
pub const ERROR_TM_IDENTITY_MISMATCH = WIN32_ERROR.ERROR_TM_IDENTITY_MISMATCH;
pub const ERROR_FLOATED_SECTION = WIN32_ERROR.ERROR_FLOATED_SECTION;
pub const ERROR_CANNOT_ACCEPT_TRANSACTED_WORK = WIN32_ERROR.ERROR_CANNOT_ACCEPT_TRANSACTED_WORK;
pub const ERROR_CANNOT_ABORT_TRANSACTIONS = WIN32_ERROR.ERROR_CANNOT_ABORT_TRANSACTIONS;
pub const ERROR_BAD_CLUSTERS = WIN32_ERROR.ERROR_BAD_CLUSTERS;
pub const ERROR_COMPRESSION_NOT_ALLOWED_IN_TRANSACTION = WIN32_ERROR.ERROR_COMPRESSION_NOT_ALLOWED_IN_TRANSACTION;
pub const ERROR_VOLUME_DIRTY = WIN32_ERROR.ERROR_VOLUME_DIRTY;
pub const ERROR_NO_LINK_TRACKING_IN_TRANSACTION = WIN32_ERROR.ERROR_NO_LINK_TRACKING_IN_TRANSACTION;
pub const ERROR_OPERATION_NOT_SUPPORTED_IN_TRANSACTION = WIN32_ERROR.ERROR_OPERATION_NOT_SUPPORTED_IN_TRANSACTION;
pub const ERROR_EXPIRED_HANDLE = WIN32_ERROR.ERROR_EXPIRED_HANDLE;
pub const ERROR_TRANSACTION_NOT_ENLISTED = WIN32_ERROR.ERROR_TRANSACTION_NOT_ENLISTED;
pub const ERROR_CTX_WINSTATION_NAME_INVALID = WIN32_ERROR.ERROR_CTX_WINSTATION_NAME_INVALID;
pub const ERROR_CTX_INVALID_PD = WIN32_ERROR.ERROR_CTX_INVALID_PD;
pub const ERROR_CTX_PD_NOT_FOUND = WIN32_ERROR.ERROR_CTX_PD_NOT_FOUND;
pub const ERROR_CTX_WD_NOT_FOUND = WIN32_ERROR.ERROR_CTX_WD_NOT_FOUND;
pub const ERROR_CTX_CANNOT_MAKE_EVENTLOG_ENTRY = WIN32_ERROR.ERROR_CTX_CANNOT_MAKE_EVENTLOG_ENTRY;
pub const ERROR_CTX_SERVICE_NAME_COLLISION = WIN32_ERROR.ERROR_CTX_SERVICE_NAME_COLLISION;
pub const ERROR_CTX_CLOSE_PENDING = WIN32_ERROR.ERROR_CTX_CLOSE_PENDING;
pub const ERROR_CTX_NO_OUTBUF = WIN32_ERROR.ERROR_CTX_NO_OUTBUF;
pub const ERROR_CTX_MODEM_INF_NOT_FOUND = WIN32_ERROR.ERROR_CTX_MODEM_INF_NOT_FOUND;
pub const ERROR_CTX_INVALID_MODEMNAME = WIN32_ERROR.ERROR_CTX_INVALID_MODEMNAME;
pub const ERROR_CTX_MODEM_RESPONSE_ERROR = WIN32_ERROR.ERROR_CTX_MODEM_RESPONSE_ERROR;
pub const ERROR_CTX_MODEM_RESPONSE_TIMEOUT = WIN32_ERROR.ERROR_CTX_MODEM_RESPONSE_TIMEOUT;
pub const ERROR_CTX_MODEM_RESPONSE_NO_CARRIER = WIN32_ERROR.ERROR_CTX_MODEM_RESPONSE_NO_CARRIER;
pub const ERROR_CTX_MODEM_RESPONSE_NO_DIALTONE = WIN32_ERROR.ERROR_CTX_MODEM_RESPONSE_NO_DIALTONE;
pub const ERROR_CTX_MODEM_RESPONSE_BUSY = WIN32_ERROR.ERROR_CTX_MODEM_RESPONSE_BUSY;
pub const ERROR_CTX_MODEM_RESPONSE_VOICE = WIN32_ERROR.ERROR_CTX_MODEM_RESPONSE_VOICE;
pub const ERROR_CTX_TD_ERROR = WIN32_ERROR.ERROR_CTX_TD_ERROR;
pub const ERROR_CTX_WINSTATION_NOT_FOUND = WIN32_ERROR.ERROR_CTX_WINSTATION_NOT_FOUND;
pub const ERROR_CTX_WINSTATION_ALREADY_EXISTS = WIN32_ERROR.ERROR_CTX_WINSTATION_ALREADY_EXISTS;
pub const ERROR_CTX_WINSTATION_BUSY = WIN32_ERROR.ERROR_CTX_WINSTATION_BUSY;
pub const ERROR_CTX_BAD_VIDEO_MODE = WIN32_ERROR.ERROR_CTX_BAD_VIDEO_MODE;
pub const ERROR_CTX_GRAPHICS_INVALID = WIN32_ERROR.ERROR_CTX_GRAPHICS_INVALID;
pub const ERROR_CTX_LOGON_DISABLED = WIN32_ERROR.ERROR_CTX_LOGON_DISABLED;
pub const ERROR_CTX_NOT_CONSOLE = WIN32_ERROR.ERROR_CTX_NOT_CONSOLE;
pub const ERROR_CTX_CLIENT_QUERY_TIMEOUT = WIN32_ERROR.ERROR_CTX_CLIENT_QUERY_TIMEOUT;
pub const ERROR_CTX_CONSOLE_DISCONNECT = WIN32_ERROR.ERROR_CTX_CONSOLE_DISCONNECT;
pub const ERROR_CTX_CONSOLE_CONNECT = WIN32_ERROR.ERROR_CTX_CONSOLE_CONNECT;
pub const ERROR_CTX_SHADOW_DENIED = WIN32_ERROR.ERROR_CTX_SHADOW_DENIED;
pub const ERROR_CTX_WINSTATION_ACCESS_DENIED = WIN32_ERROR.ERROR_CTX_WINSTATION_ACCESS_DENIED;
pub const ERROR_CTX_INVALID_WD = WIN32_ERROR.ERROR_CTX_INVALID_WD;
pub const ERROR_CTX_SHADOW_INVALID = WIN32_ERROR.ERROR_CTX_SHADOW_INVALID;
pub const ERROR_CTX_SHADOW_DISABLED = WIN32_ERROR.ERROR_CTX_SHADOW_DISABLED;
pub const ERROR_CTX_CLIENT_LICENSE_IN_USE = WIN32_ERROR.ERROR_CTX_CLIENT_LICENSE_IN_USE;
pub const ERROR_CTX_CLIENT_LICENSE_NOT_SET = WIN32_ERROR.ERROR_CTX_CLIENT_LICENSE_NOT_SET;
pub const ERROR_CTX_LICENSE_NOT_AVAILABLE = WIN32_ERROR.ERROR_CTX_LICENSE_NOT_AVAILABLE;
pub const ERROR_CTX_LICENSE_CLIENT_INVALID = WIN32_ERROR.ERROR_CTX_LICENSE_CLIENT_INVALID;
pub const ERROR_CTX_LICENSE_EXPIRED = WIN32_ERROR.ERROR_CTX_LICENSE_EXPIRED;
pub const ERROR_CTX_SHADOW_NOT_RUNNING = WIN32_ERROR.ERROR_CTX_SHADOW_NOT_RUNNING;
pub const ERROR_CTX_SHADOW_ENDED_BY_MODE_CHANGE = WIN32_ERROR.ERROR_CTX_SHADOW_ENDED_BY_MODE_CHANGE;
pub const ERROR_ACTIVATION_COUNT_EXCEEDED = WIN32_ERROR.ERROR_ACTIVATION_COUNT_EXCEEDED;
pub const ERROR_CTX_WINSTATIONS_DISABLED = WIN32_ERROR.ERROR_CTX_WINSTATIONS_DISABLED;
pub const ERROR_CTX_ENCRYPTION_LEVEL_REQUIRED = WIN32_ERROR.ERROR_CTX_ENCRYPTION_LEVEL_REQUIRED;
pub const ERROR_CTX_SESSION_IN_USE = WIN32_ERROR.ERROR_CTX_SESSION_IN_USE;
pub const ERROR_CTX_NO_FORCE_LOGOFF = WIN32_ERROR.ERROR_CTX_NO_FORCE_LOGOFF;
pub const ERROR_CTX_ACCOUNT_RESTRICTION = WIN32_ERROR.ERROR_CTX_ACCOUNT_RESTRICTION;
pub const ERROR_RDP_PROTOCOL_ERROR = WIN32_ERROR.ERROR_RDP_PROTOCOL_ERROR;
pub const ERROR_CTX_CDM_CONNECT = WIN32_ERROR.ERROR_CTX_CDM_CONNECT;
pub const ERROR_CTX_CDM_DISCONNECT = WIN32_ERROR.ERROR_CTX_CDM_DISCONNECT;
pub const ERROR_CTX_SECURITY_LAYER_ERROR = WIN32_ERROR.ERROR_CTX_SECURITY_LAYER_ERROR;
pub const ERROR_TS_INCOMPATIBLE_SESSIONS = WIN32_ERROR.ERROR_TS_INCOMPATIBLE_SESSIONS;
pub const ERROR_TS_VIDEO_SUBSYSTEM_ERROR = WIN32_ERROR.ERROR_TS_VIDEO_SUBSYSTEM_ERROR;
pub const ERROR_DS_NOT_INSTALLED = WIN32_ERROR.ERROR_DS_NOT_INSTALLED;
pub const ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY = WIN32_ERROR.ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY;
pub const ERROR_DS_NO_ATTRIBUTE_OR_VALUE = WIN32_ERROR.ERROR_DS_NO_ATTRIBUTE_OR_VALUE;
pub const ERROR_DS_INVALID_ATTRIBUTE_SYNTAX = WIN32_ERROR.ERROR_DS_INVALID_ATTRIBUTE_SYNTAX;
pub const ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED = WIN32_ERROR.ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED;
pub const ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS = WIN32_ERROR.ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS;
pub const ERROR_DS_BUSY = WIN32_ERROR.ERROR_DS_BUSY;
pub const ERROR_DS_UNAVAILABLE = WIN32_ERROR.ERROR_DS_UNAVAILABLE;
pub const ERROR_DS_NO_RIDS_ALLOCATED = WIN32_ERROR.ERROR_DS_NO_RIDS_ALLOCATED;
pub const ERROR_DS_NO_MORE_RIDS = WIN32_ERROR.ERROR_DS_NO_MORE_RIDS;
pub const ERROR_DS_INCORRECT_ROLE_OWNER = WIN32_ERROR.ERROR_DS_INCORRECT_ROLE_OWNER;
pub const ERROR_DS_RIDMGR_INIT_ERROR = WIN32_ERROR.ERROR_DS_RIDMGR_INIT_ERROR;
pub const ERROR_DS_OBJ_CLASS_VIOLATION = WIN32_ERROR.ERROR_DS_OBJ_CLASS_VIOLATION;
pub const ERROR_DS_CANT_ON_NON_LEAF = WIN32_ERROR.ERROR_DS_CANT_ON_NON_LEAF;
pub const ERROR_DS_CANT_ON_RDN = WIN32_ERROR.ERROR_DS_CANT_ON_RDN;
pub const ERROR_DS_CANT_MOD_OBJ_CLASS = WIN32_ERROR.ERROR_DS_CANT_MOD_OBJ_CLASS;
pub const ERROR_DS_CROSS_DOM_MOVE_ERROR = WIN32_ERROR.ERROR_DS_CROSS_DOM_MOVE_ERROR;
pub const ERROR_DS_GC_NOT_AVAILABLE = WIN32_ERROR.ERROR_DS_GC_NOT_AVAILABLE;
pub const ERROR_SHARED_POLICY = WIN32_ERROR.ERROR_SHARED_POLICY;
pub const ERROR_POLICY_OBJECT_NOT_FOUND = WIN32_ERROR.ERROR_POLICY_OBJECT_NOT_FOUND;
pub const ERROR_POLICY_ONLY_IN_DS = WIN32_ERROR.ERROR_POLICY_ONLY_IN_DS;
pub const ERROR_PROMOTION_ACTIVE = WIN32_ERROR.ERROR_PROMOTION_ACTIVE;
pub const ERROR_NO_PROMOTION_ACTIVE = WIN32_ERROR.ERROR_NO_PROMOTION_ACTIVE;
pub const ERROR_DS_OPERATIONS_ERROR = WIN32_ERROR.ERROR_DS_OPERATIONS_ERROR;
pub const ERROR_DS_PROTOCOL_ERROR = WIN32_ERROR.ERROR_DS_PROTOCOL_ERROR;
pub const ERROR_DS_TIMELIMIT_EXCEEDED = WIN32_ERROR.ERROR_DS_TIMELIMIT_EXCEEDED;
pub const ERROR_DS_SIZELIMIT_EXCEEDED = WIN32_ERROR.ERROR_DS_SIZELIMIT_EXCEEDED;
pub const ERROR_DS_ADMIN_LIMIT_EXCEEDED = WIN32_ERROR.ERROR_DS_ADMIN_LIMIT_EXCEEDED;
pub const ERROR_DS_COMPARE_FALSE = WIN32_ERROR.ERROR_DS_COMPARE_FALSE;
pub const ERROR_DS_COMPARE_TRUE = WIN32_ERROR.ERROR_DS_COMPARE_TRUE;
pub const ERROR_DS_AUTH_METHOD_NOT_SUPPORTED = WIN32_ERROR.ERROR_DS_AUTH_METHOD_NOT_SUPPORTED;
pub const ERROR_DS_STRONG_AUTH_REQUIRED = WIN32_ERROR.ERROR_DS_STRONG_AUTH_REQUIRED;
pub const ERROR_DS_INAPPROPRIATE_AUTH = WIN32_ERROR.ERROR_DS_INAPPROPRIATE_AUTH;
pub const ERROR_DS_AUTH_UNKNOWN = WIN32_ERROR.ERROR_DS_AUTH_UNKNOWN;
pub const ERROR_DS_REFERRAL = WIN32_ERROR.ERROR_DS_REFERRAL;
pub const ERROR_DS_UNAVAILABLE_CRIT_EXTENSION = WIN32_ERROR.ERROR_DS_UNAVAILABLE_CRIT_EXTENSION;
pub const ERROR_DS_CONFIDENTIALITY_REQUIRED = WIN32_ERROR.ERROR_DS_CONFIDENTIALITY_REQUIRED;
pub const ERROR_DS_INAPPROPRIATE_MATCHING = WIN32_ERROR.ERROR_DS_INAPPROPRIATE_MATCHING;
pub const ERROR_DS_CONSTRAINT_VIOLATION = WIN32_ERROR.ERROR_DS_CONSTRAINT_VIOLATION;
pub const ERROR_DS_NO_SUCH_OBJECT = WIN32_ERROR.ERROR_DS_NO_SUCH_OBJECT;
pub const ERROR_DS_ALIAS_PROBLEM = WIN32_ERROR.ERROR_DS_ALIAS_PROBLEM;
pub const ERROR_DS_INVALID_DN_SYNTAX = WIN32_ERROR.ERROR_DS_INVALID_DN_SYNTAX;
pub const ERROR_DS_IS_LEAF = WIN32_ERROR.ERROR_DS_IS_LEAF;
pub const ERROR_DS_ALIAS_DEREF_PROBLEM = WIN32_ERROR.ERROR_DS_ALIAS_DEREF_PROBLEM;
pub const ERROR_DS_UNWILLING_TO_PERFORM = WIN32_ERROR.ERROR_DS_UNWILLING_TO_PERFORM;
pub const ERROR_DS_LOOP_DETECT = WIN32_ERROR.ERROR_DS_LOOP_DETECT;
pub const ERROR_DS_NAMING_VIOLATION = WIN32_ERROR.ERROR_DS_NAMING_VIOLATION;
pub const ERROR_DS_OBJECT_RESULTS_TOO_LARGE = WIN32_ERROR.ERROR_DS_OBJECT_RESULTS_TOO_LARGE;
pub const ERROR_DS_AFFECTS_MULTIPLE_DSAS = WIN32_ERROR.ERROR_DS_AFFECTS_MULTIPLE_DSAS;
pub const ERROR_DS_SERVER_DOWN = WIN32_ERROR.ERROR_DS_SERVER_DOWN;
pub const ERROR_DS_LOCAL_ERROR = WIN32_ERROR.ERROR_DS_LOCAL_ERROR;
pub const ERROR_DS_ENCODING_ERROR = WIN32_ERROR.ERROR_DS_ENCODING_ERROR;
pub const ERROR_DS_DECODING_ERROR = WIN32_ERROR.ERROR_DS_DECODING_ERROR;
pub const ERROR_DS_FILTER_UNKNOWN = WIN32_ERROR.ERROR_DS_FILTER_UNKNOWN;
pub const ERROR_DS_PARAM_ERROR = WIN32_ERROR.ERROR_DS_PARAM_ERROR;
pub const ERROR_DS_NOT_SUPPORTED = WIN32_ERROR.ERROR_DS_NOT_SUPPORTED;
pub const ERROR_DS_NO_RESULTS_RETURNED = WIN32_ERROR.ERROR_DS_NO_RESULTS_RETURNED;
pub const ERROR_DS_CONTROL_NOT_FOUND = WIN32_ERROR.ERROR_DS_CONTROL_NOT_FOUND;
pub const ERROR_DS_CLIENT_LOOP = WIN32_ERROR.ERROR_DS_CLIENT_LOOP;
pub const ERROR_DS_REFERRAL_LIMIT_EXCEEDED = WIN32_ERROR.ERROR_DS_REFERRAL_LIMIT_EXCEEDED;
pub const ERROR_DS_SORT_CONTROL_MISSING = WIN32_ERROR.ERROR_DS_SORT_CONTROL_MISSING;
pub const ERROR_DS_OFFSET_RANGE_ERROR = WIN32_ERROR.ERROR_DS_OFFSET_RANGE_ERROR;
pub const ERROR_DS_RIDMGR_DISABLED = WIN32_ERROR.ERROR_DS_RIDMGR_DISABLED;
pub const ERROR_DS_ROOT_MUST_BE_NC = WIN32_ERROR.ERROR_DS_ROOT_MUST_BE_NC;
pub const ERROR_DS_ADD_REPLICA_INHIBITED = WIN32_ERROR.ERROR_DS_ADD_REPLICA_INHIBITED;
pub const ERROR_DS_ATT_NOT_DEF_IN_SCHEMA = WIN32_ERROR.ERROR_DS_ATT_NOT_DEF_IN_SCHEMA;
pub const ERROR_DS_MAX_OBJ_SIZE_EXCEEDED = WIN32_ERROR.ERROR_DS_MAX_OBJ_SIZE_EXCEEDED;
pub const ERROR_DS_OBJ_STRING_NAME_EXISTS = WIN32_ERROR.ERROR_DS_OBJ_STRING_NAME_EXISTS;
pub const ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA = WIN32_ERROR.ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA;
pub const ERROR_DS_RDN_DOESNT_MATCH_SCHEMA = WIN32_ERROR.ERROR_DS_RDN_DOESNT_MATCH_SCHEMA;
pub const ERROR_DS_NO_REQUESTED_ATTS_FOUND = WIN32_ERROR.ERROR_DS_NO_REQUESTED_ATTS_FOUND;
pub const ERROR_DS_USER_BUFFER_TO_SMALL = WIN32_ERROR.ERROR_DS_USER_BUFFER_TO_SMALL;
pub const ERROR_DS_ATT_IS_NOT_ON_OBJ = WIN32_ERROR.ERROR_DS_ATT_IS_NOT_ON_OBJ;
pub const ERROR_DS_ILLEGAL_MOD_OPERATION = WIN32_ERROR.ERROR_DS_ILLEGAL_MOD_OPERATION;
pub const ERROR_DS_OBJ_TOO_LARGE = WIN32_ERROR.ERROR_DS_OBJ_TOO_LARGE;
pub const ERROR_DS_BAD_INSTANCE_TYPE = WIN32_ERROR.ERROR_DS_BAD_INSTANCE_TYPE;
pub const ERROR_DS_MASTERDSA_REQUIRED = WIN32_ERROR.ERROR_DS_MASTERDSA_REQUIRED;
pub const ERROR_DS_OBJECT_CLASS_REQUIRED = WIN32_ERROR.ERROR_DS_OBJECT_CLASS_REQUIRED;
pub const ERROR_DS_MISSING_REQUIRED_ATT = WIN32_ERROR.ERROR_DS_MISSING_REQUIRED_ATT;
pub const ERROR_DS_ATT_NOT_DEF_FOR_CLASS = WIN32_ERROR.ERROR_DS_ATT_NOT_DEF_FOR_CLASS;
pub const ERROR_DS_ATT_ALREADY_EXISTS = WIN32_ERROR.ERROR_DS_ATT_ALREADY_EXISTS;
pub const ERROR_DS_CANT_ADD_ATT_VALUES = WIN32_ERROR.ERROR_DS_CANT_ADD_ATT_VALUES;
pub const ERROR_DS_SINGLE_VALUE_CONSTRAINT = WIN32_ERROR.ERROR_DS_SINGLE_VALUE_CONSTRAINT;
pub const ERROR_DS_RANGE_CONSTRAINT = WIN32_ERROR.ERROR_DS_RANGE_CONSTRAINT;
pub const ERROR_DS_ATT_VAL_ALREADY_EXISTS = WIN32_ERROR.ERROR_DS_ATT_VAL_ALREADY_EXISTS;
pub const ERROR_DS_CANT_REM_MISSING_ATT = WIN32_ERROR.ERROR_DS_CANT_REM_MISSING_ATT;
pub const ERROR_DS_CANT_REM_MISSING_ATT_VAL = WIN32_ERROR.ERROR_DS_CANT_REM_MISSING_ATT_VAL;
pub const ERROR_DS_ROOT_CANT_BE_SUBREF = WIN32_ERROR.ERROR_DS_ROOT_CANT_BE_SUBREF;
pub const ERROR_DS_NO_CHAINING = WIN32_ERROR.ERROR_DS_NO_CHAINING;
pub const ERROR_DS_NO_CHAINED_EVAL = WIN32_ERROR.ERROR_DS_NO_CHAINED_EVAL;
pub const ERROR_DS_NO_PARENT_OBJECT = WIN32_ERROR.ERROR_DS_NO_PARENT_OBJECT;
pub const ERROR_DS_PARENT_IS_AN_ALIAS = WIN32_ERROR.ERROR_DS_PARENT_IS_AN_ALIAS;
pub const ERROR_DS_CANT_MIX_MASTER_AND_REPS = WIN32_ERROR.ERROR_DS_CANT_MIX_MASTER_AND_REPS;
pub const ERROR_DS_CHILDREN_EXIST = WIN32_ERROR.ERROR_DS_CHILDREN_EXIST;
pub const ERROR_DS_OBJ_NOT_FOUND = WIN32_ERROR.ERROR_DS_OBJ_NOT_FOUND;
pub const ERROR_DS_ALIASED_OBJ_MISSING = WIN32_ERROR.ERROR_DS_ALIASED_OBJ_MISSING;
pub const ERROR_DS_BAD_NAME_SYNTAX = WIN32_ERROR.ERROR_DS_BAD_NAME_SYNTAX;
pub const ERROR_DS_ALIAS_POINTS_TO_ALIAS = WIN32_ERROR.ERROR_DS_ALIAS_POINTS_TO_ALIAS;
pub const ERROR_DS_CANT_DEREF_ALIAS = WIN32_ERROR.ERROR_DS_CANT_DEREF_ALIAS;
pub const ERROR_DS_OUT_OF_SCOPE = WIN32_ERROR.ERROR_DS_OUT_OF_SCOPE;
pub const ERROR_DS_OBJECT_BEING_REMOVED = WIN32_ERROR.ERROR_DS_OBJECT_BEING_REMOVED;
pub const ERROR_DS_CANT_DELETE_DSA_OBJ = WIN32_ERROR.ERROR_DS_CANT_DELETE_DSA_OBJ;
pub const ERROR_DS_GENERIC_ERROR = WIN32_ERROR.ERROR_DS_GENERIC_ERROR;
pub const ERROR_DS_DSA_MUST_BE_INT_MASTER = WIN32_ERROR.ERROR_DS_DSA_MUST_BE_INT_MASTER;
pub const ERROR_DS_CLASS_NOT_DSA = WIN32_ERROR.ERROR_DS_CLASS_NOT_DSA;
pub const ERROR_DS_INSUFF_ACCESS_RIGHTS = WIN32_ERROR.ERROR_DS_INSUFF_ACCESS_RIGHTS;
pub const ERROR_DS_ILLEGAL_SUPERIOR = WIN32_ERROR.ERROR_DS_ILLEGAL_SUPERIOR;
pub const ERROR_DS_ATTRIBUTE_OWNED_BY_SAM = WIN32_ERROR.ERROR_DS_ATTRIBUTE_OWNED_BY_SAM;
pub const ERROR_DS_NAME_TOO_MANY_PARTS = WIN32_ERROR.ERROR_DS_NAME_TOO_MANY_PARTS;
pub const ERROR_DS_NAME_TOO_LONG = WIN32_ERROR.ERROR_DS_NAME_TOO_LONG;
pub const ERROR_DS_NAME_VALUE_TOO_LONG = WIN32_ERROR.ERROR_DS_NAME_VALUE_TOO_LONG;
pub const ERROR_DS_NAME_UNPARSEABLE = WIN32_ERROR.ERROR_DS_NAME_UNPARSEABLE;
pub const ERROR_DS_NAME_TYPE_UNKNOWN = WIN32_ERROR.ERROR_DS_NAME_TYPE_UNKNOWN;
pub const ERROR_DS_NOT_AN_OBJECT = WIN32_ERROR.ERROR_DS_NOT_AN_OBJECT;
pub const ERROR_DS_SEC_DESC_TOO_SHORT = WIN32_ERROR.ERROR_DS_SEC_DESC_TOO_SHORT;
pub const ERROR_DS_SEC_DESC_INVALID = WIN32_ERROR.ERROR_DS_SEC_DESC_INVALID;
pub const ERROR_DS_NO_DELETED_NAME = WIN32_ERROR.ERROR_DS_NO_DELETED_NAME;
pub const ERROR_DS_SUBREF_MUST_HAVE_PARENT = WIN32_ERROR.ERROR_DS_SUBREF_MUST_HAVE_PARENT;
pub const ERROR_DS_NCNAME_MUST_BE_NC = WIN32_ERROR.ERROR_DS_NCNAME_MUST_BE_NC;
pub const ERROR_DS_CANT_ADD_SYSTEM_ONLY = WIN32_ERROR.ERROR_DS_CANT_ADD_SYSTEM_ONLY;
pub const ERROR_DS_CLASS_MUST_BE_CONCRETE = WIN32_ERROR.ERROR_DS_CLASS_MUST_BE_CONCRETE;
pub const ERROR_DS_INVALID_DMD = WIN32_ERROR.ERROR_DS_INVALID_DMD;
pub const ERROR_DS_OBJ_GUID_EXISTS = WIN32_ERROR.ERROR_DS_OBJ_GUID_EXISTS;
pub const ERROR_DS_NOT_ON_BACKLINK = WIN32_ERROR.ERROR_DS_NOT_ON_BACKLINK;
pub const ERROR_DS_NO_CROSSREF_FOR_NC = WIN32_ERROR.ERROR_DS_NO_CROSSREF_FOR_NC;
pub const ERROR_DS_SHUTTING_DOWN = WIN32_ERROR.ERROR_DS_SHUTTING_DOWN;
pub const ERROR_DS_UNKNOWN_OPERATION = WIN32_ERROR.ERROR_DS_UNKNOWN_OPERATION;
pub const ERROR_DS_INVALID_ROLE_OWNER = WIN32_ERROR.ERROR_DS_INVALID_ROLE_OWNER;
pub const ERROR_DS_COULDNT_CONTACT_FSMO = WIN32_ERROR.ERROR_DS_COULDNT_CONTACT_FSMO;
pub const ERROR_DS_CROSS_NC_DN_RENAME = WIN32_ERROR.ERROR_DS_CROSS_NC_DN_RENAME;
pub const ERROR_DS_CANT_MOD_SYSTEM_ONLY = WIN32_ERROR.ERROR_DS_CANT_MOD_SYSTEM_ONLY;
pub const ERROR_DS_REPLICATOR_ONLY = WIN32_ERROR.ERROR_DS_REPLICATOR_ONLY;
pub const ERROR_DS_OBJ_CLASS_NOT_DEFINED = WIN32_ERROR.ERROR_DS_OBJ_CLASS_NOT_DEFINED;
pub const ERROR_DS_OBJ_CLASS_NOT_SUBCLASS = WIN32_ERROR.ERROR_DS_OBJ_CLASS_NOT_SUBCLASS;
pub const ERROR_DS_NAME_REFERENCE_INVALID = WIN32_ERROR.ERROR_DS_NAME_REFERENCE_INVALID;
pub const ERROR_DS_CROSS_REF_EXISTS = WIN32_ERROR.ERROR_DS_CROSS_REF_EXISTS;
pub const ERROR_DS_CANT_DEL_MASTER_CROSSREF = WIN32_ERROR.ERROR_DS_CANT_DEL_MASTER_CROSSREF;
pub const ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD = WIN32_ERROR.ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD;
pub const ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX = WIN32_ERROR.ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX;
pub const ERROR_DS_DUP_RDN = WIN32_ERROR.ERROR_DS_DUP_RDN;
pub const ERROR_DS_DUP_OID = WIN32_ERROR.ERROR_DS_DUP_OID;
pub const ERROR_DS_DUP_MAPI_ID = WIN32_ERROR.ERROR_DS_DUP_MAPI_ID;
pub const ERROR_DS_DUP_SCHEMA_ID_GUID = WIN32_ERROR.ERROR_DS_DUP_SCHEMA_ID_GUID;
pub const ERROR_DS_DUP_LDAP_DISPLAY_NAME = WIN32_ERROR.ERROR_DS_DUP_LDAP_DISPLAY_NAME;
pub const ERROR_DS_SEMANTIC_ATT_TEST = WIN32_ERROR.ERROR_DS_SEMANTIC_ATT_TEST;
pub const ERROR_DS_SYNTAX_MISMATCH = WIN32_ERROR.ERROR_DS_SYNTAX_MISMATCH;
pub const ERROR_DS_EXISTS_IN_MUST_HAVE = WIN32_ERROR.ERROR_DS_EXISTS_IN_MUST_HAVE;
pub const ERROR_DS_EXISTS_IN_MAY_HAVE = WIN32_ERROR.ERROR_DS_EXISTS_IN_MAY_HAVE;
pub const ERROR_DS_NONEXISTENT_MAY_HAVE = WIN32_ERROR.ERROR_DS_NONEXISTENT_MAY_HAVE;
pub const ERROR_DS_NONEXISTENT_MUST_HAVE = WIN32_ERROR.ERROR_DS_NONEXISTENT_MUST_HAVE;
pub const ERROR_DS_AUX_CLS_TEST_FAIL = WIN32_ERROR.ERROR_DS_AUX_CLS_TEST_FAIL;
pub const ERROR_DS_NONEXISTENT_POSS_SUP = WIN32_ERROR.ERROR_DS_NONEXISTENT_POSS_SUP;
pub const ERROR_DS_SUB_CLS_TEST_FAIL = WIN32_ERROR.ERROR_DS_SUB_CLS_TEST_FAIL;
pub const ERROR_DS_BAD_RDN_ATT_ID_SYNTAX = WIN32_ERROR.ERROR_DS_BAD_RDN_ATT_ID_SYNTAX;
pub const ERROR_DS_EXISTS_IN_AUX_CLS = WIN32_ERROR.ERROR_DS_EXISTS_IN_AUX_CLS;
pub const ERROR_DS_EXISTS_IN_SUB_CLS = WIN32_ERROR.ERROR_DS_EXISTS_IN_SUB_CLS;
pub const ERROR_DS_EXISTS_IN_POSS_SUP = WIN32_ERROR.ERROR_DS_EXISTS_IN_POSS_SUP;
pub const ERROR_DS_RECALCSCHEMA_FAILED = WIN32_ERROR.ERROR_DS_RECALCSCHEMA_FAILED;
pub const ERROR_DS_TREE_DELETE_NOT_FINISHED = WIN32_ERROR.ERROR_DS_TREE_DELETE_NOT_FINISHED;
pub const ERROR_DS_CANT_DELETE = WIN32_ERROR.ERROR_DS_CANT_DELETE;
pub const ERROR_DS_ATT_SCHEMA_REQ_ID = WIN32_ERROR.ERROR_DS_ATT_SCHEMA_REQ_ID;
pub const ERROR_DS_BAD_ATT_SCHEMA_SYNTAX = WIN32_ERROR.ERROR_DS_BAD_ATT_SCHEMA_SYNTAX;
pub const ERROR_DS_CANT_CACHE_ATT = WIN32_ERROR.ERROR_DS_CANT_CACHE_ATT;
pub const ERROR_DS_CANT_CACHE_CLASS = WIN32_ERROR.ERROR_DS_CANT_CACHE_CLASS;
pub const ERROR_DS_CANT_REMOVE_ATT_CACHE = WIN32_ERROR.ERROR_DS_CANT_REMOVE_ATT_CACHE;
pub const ERROR_DS_CANT_REMOVE_CLASS_CACHE = WIN32_ERROR.ERROR_DS_CANT_REMOVE_CLASS_CACHE;
pub const ERROR_DS_CANT_RETRIEVE_DN = WIN32_ERROR.ERROR_DS_CANT_RETRIEVE_DN;
pub const ERROR_DS_MISSING_SUPREF = WIN32_ERROR.ERROR_DS_MISSING_SUPREF;
pub const ERROR_DS_CANT_RETRIEVE_INSTANCE = WIN32_ERROR.ERROR_DS_CANT_RETRIEVE_INSTANCE;
pub const ERROR_DS_CODE_INCONSISTENCY = WIN32_ERROR.ERROR_DS_CODE_INCONSISTENCY;
pub const ERROR_DS_DATABASE_ERROR = WIN32_ERROR.ERROR_DS_DATABASE_ERROR;
pub const ERROR_DS_GOVERNSID_MISSING = WIN32_ERROR.ERROR_DS_GOVERNSID_MISSING;
pub const ERROR_DS_MISSING_EXPECTED_ATT = WIN32_ERROR.ERROR_DS_MISSING_EXPECTED_ATT;
pub const ERROR_DS_NCNAME_MISSING_CR_REF = WIN32_ERROR.ERROR_DS_NCNAME_MISSING_CR_REF;
pub const ERROR_DS_SECURITY_CHECKING_ERROR = WIN32_ERROR.ERROR_DS_SECURITY_CHECKING_ERROR;
pub const ERROR_DS_SCHEMA_NOT_LOADED = WIN32_ERROR.ERROR_DS_SCHEMA_NOT_LOADED;
pub const ERROR_DS_SCHEMA_ALLOC_FAILED = WIN32_ERROR.ERROR_DS_SCHEMA_ALLOC_FAILED;
pub const ERROR_DS_ATT_SCHEMA_REQ_SYNTAX = WIN32_ERROR.ERROR_DS_ATT_SCHEMA_REQ_SYNTAX;
pub const ERROR_DS_GCVERIFY_ERROR = WIN32_ERROR.ERROR_DS_GCVERIFY_ERROR;
pub const ERROR_DS_DRA_SCHEMA_MISMATCH = WIN32_ERROR.ERROR_DS_DRA_SCHEMA_MISMATCH;
pub const ERROR_DS_CANT_FIND_DSA_OBJ = WIN32_ERROR.ERROR_DS_CANT_FIND_DSA_OBJ;
pub const ERROR_DS_CANT_FIND_EXPECTED_NC = WIN32_ERROR.ERROR_DS_CANT_FIND_EXPECTED_NC;
pub const ERROR_DS_CANT_FIND_NC_IN_CACHE = WIN32_ERROR.ERROR_DS_CANT_FIND_NC_IN_CACHE;
pub const ERROR_DS_CANT_RETRIEVE_CHILD = WIN32_ERROR.ERROR_DS_CANT_RETRIEVE_CHILD;
pub const ERROR_DS_SECURITY_ILLEGAL_MODIFY = WIN32_ERROR.ERROR_DS_SECURITY_ILLEGAL_MODIFY;
pub const ERROR_DS_CANT_REPLACE_HIDDEN_REC = WIN32_ERROR.ERROR_DS_CANT_REPLACE_HIDDEN_REC;
pub const ERROR_DS_BAD_HIERARCHY_FILE = WIN32_ERROR.ERROR_DS_BAD_HIERARCHY_FILE;
pub const ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED = WIN32_ERROR.ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED;
pub const ERROR_DS_CONFIG_PARAM_MISSING = WIN32_ERROR.ERROR_DS_CONFIG_PARAM_MISSING;
pub const ERROR_DS_COUNTING_AB_INDICES_FAILED = WIN32_ERROR.ERROR_DS_COUNTING_AB_INDICES_FAILED;
pub const ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED = WIN32_ERROR.ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED;
pub const ERROR_DS_INTERNAL_FAILURE = WIN32_ERROR.ERROR_DS_INTERNAL_FAILURE;
pub const ERROR_DS_UNKNOWN_ERROR = WIN32_ERROR.ERROR_DS_UNKNOWN_ERROR;
pub const ERROR_DS_ROOT_REQUIRES_CLASS_TOP = WIN32_ERROR.ERROR_DS_ROOT_REQUIRES_CLASS_TOP;
pub const ERROR_DS_REFUSING_FSMO_ROLES = WIN32_ERROR.ERROR_DS_REFUSING_FSMO_ROLES;
pub const ERROR_DS_MISSING_FSMO_SETTINGS = WIN32_ERROR.ERROR_DS_MISSING_FSMO_SETTINGS;
pub const ERROR_DS_UNABLE_TO_SURRENDER_ROLES = WIN32_ERROR.ERROR_DS_UNABLE_TO_SURRENDER_ROLES;
pub const ERROR_DS_DRA_GENERIC = WIN32_ERROR.ERROR_DS_DRA_GENERIC;
pub const ERROR_DS_DRA_INVALID_PARAMETER = WIN32_ERROR.ERROR_DS_DRA_INVALID_PARAMETER;
pub const ERROR_DS_DRA_BUSY = WIN32_ERROR.ERROR_DS_DRA_BUSY;
pub const ERROR_DS_DRA_BAD_DN = WIN32_ERROR.ERROR_DS_DRA_BAD_DN;
pub const ERROR_DS_DRA_BAD_NC = WIN32_ERROR.ERROR_DS_DRA_BAD_NC;
pub const ERROR_DS_DRA_DN_EXISTS = WIN32_ERROR.ERROR_DS_DRA_DN_EXISTS;
pub const ERROR_DS_DRA_INTERNAL_ERROR = WIN32_ERROR.ERROR_DS_DRA_INTERNAL_ERROR;
pub const ERROR_DS_DRA_INCONSISTENT_DIT = WIN32_ERROR.ERROR_DS_DRA_INCONSISTENT_DIT;
pub const ERROR_DS_DRA_CONNECTION_FAILED = WIN32_ERROR.ERROR_DS_DRA_CONNECTION_FAILED;
pub const ERROR_DS_DRA_BAD_INSTANCE_TYPE = WIN32_ERROR.ERROR_DS_DRA_BAD_INSTANCE_TYPE;
pub const ERROR_DS_DRA_OUT_OF_MEM = WIN32_ERROR.ERROR_DS_DRA_OUT_OF_MEM;
pub const ERROR_DS_DRA_MAIL_PROBLEM = WIN32_ERROR.ERROR_DS_DRA_MAIL_PROBLEM;
pub const ERROR_DS_DRA_REF_ALREADY_EXISTS = WIN32_ERROR.ERROR_DS_DRA_REF_ALREADY_EXISTS;
pub const ERROR_DS_DRA_REF_NOT_FOUND = WIN32_ERROR.ERROR_DS_DRA_REF_NOT_FOUND;
pub const ERROR_DS_DRA_OBJ_IS_REP_SOURCE = WIN32_ERROR.ERROR_DS_DRA_OBJ_IS_REP_SOURCE;
pub const ERROR_DS_DRA_DB_ERROR = WIN32_ERROR.ERROR_DS_DRA_DB_ERROR;
pub const ERROR_DS_DRA_NO_REPLICA = WIN32_ERROR.ERROR_DS_DRA_NO_REPLICA;
pub const ERROR_DS_DRA_ACCESS_DENIED = WIN32_ERROR.ERROR_DS_DRA_ACCESS_DENIED;
pub const ERROR_DS_DRA_NOT_SUPPORTED = WIN32_ERROR.ERROR_DS_DRA_NOT_SUPPORTED;
pub const ERROR_DS_DRA_RPC_CANCELLED = WIN32_ERROR.ERROR_DS_DRA_RPC_CANCELLED;
pub const ERROR_DS_DRA_SOURCE_DISABLED = WIN32_ERROR.ERROR_DS_DRA_SOURCE_DISABLED;
pub const ERROR_DS_DRA_SINK_DISABLED = WIN32_ERROR.ERROR_DS_DRA_SINK_DISABLED;
pub const ERROR_DS_DRA_NAME_COLLISION = WIN32_ERROR.ERROR_DS_DRA_NAME_COLLISION;
pub const ERROR_DS_DRA_SOURCE_REINSTALLED = WIN32_ERROR.ERROR_DS_DRA_SOURCE_REINSTALLED;
pub const ERROR_DS_DRA_MISSING_PARENT = WIN32_ERROR.ERROR_DS_DRA_MISSING_PARENT;
pub const ERROR_DS_DRA_PREEMPTED = WIN32_ERROR.ERROR_DS_DRA_PREEMPTED;
pub const ERROR_DS_DRA_ABANDON_SYNC = WIN32_ERROR.ERROR_DS_DRA_ABANDON_SYNC;
pub const ERROR_DS_DRA_SHUTDOWN = WIN32_ERROR.ERROR_DS_DRA_SHUTDOWN;
pub const ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET = WIN32_ERROR.ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET;
pub const ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA = WIN32_ERROR.ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA;
pub const ERROR_DS_DRA_EXTN_CONNECTION_FAILED = WIN32_ERROR.ERROR_DS_DRA_EXTN_CONNECTION_FAILED;
pub const ERROR_DS_INSTALL_SCHEMA_MISMATCH = WIN32_ERROR.ERROR_DS_INSTALL_SCHEMA_MISMATCH;
pub const ERROR_DS_DUP_LINK_ID = WIN32_ERROR.ERROR_DS_DUP_LINK_ID;
pub const ERROR_DS_NAME_ERROR_RESOLVING = WIN32_ERROR.ERROR_DS_NAME_ERROR_RESOLVING;
pub const ERROR_DS_NAME_ERROR_NOT_FOUND = WIN32_ERROR.ERROR_DS_NAME_ERROR_NOT_FOUND;
pub const ERROR_DS_NAME_ERROR_NOT_UNIQUE = WIN32_ERROR.ERROR_DS_NAME_ERROR_NOT_UNIQUE;
pub const ERROR_DS_NAME_ERROR_NO_MAPPING = WIN32_ERROR.ERROR_DS_NAME_ERROR_NO_MAPPING;
pub const ERROR_DS_NAME_ERROR_DOMAIN_ONLY = WIN32_ERROR.ERROR_DS_NAME_ERROR_DOMAIN_ONLY;
pub const ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING = WIN32_ERROR.ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING;
pub const ERROR_DS_CONSTRUCTED_ATT_MOD = WIN32_ERROR.ERROR_DS_CONSTRUCTED_ATT_MOD;
pub const ERROR_DS_WRONG_OM_OBJ_CLASS = WIN32_ERROR.ERROR_DS_WRONG_OM_OBJ_CLASS;
pub const ERROR_DS_DRA_REPL_PENDING = WIN32_ERROR.ERROR_DS_DRA_REPL_PENDING;
pub const ERROR_DS_DS_REQUIRED = WIN32_ERROR.ERROR_DS_DS_REQUIRED;
pub const ERROR_DS_INVALID_LDAP_DISPLAY_NAME = WIN32_ERROR.ERROR_DS_INVALID_LDAP_DISPLAY_NAME;
pub const ERROR_DS_NON_BASE_SEARCH = WIN32_ERROR.ERROR_DS_NON_BASE_SEARCH;
pub const ERROR_DS_CANT_RETRIEVE_ATTS = WIN32_ERROR.ERROR_DS_CANT_RETRIEVE_ATTS;
pub const ERROR_DS_BACKLINK_WITHOUT_LINK = WIN32_ERROR.ERROR_DS_BACKLINK_WITHOUT_LINK;
pub const ERROR_DS_EPOCH_MISMATCH = WIN32_ERROR.ERROR_DS_EPOCH_MISMATCH;
pub const ERROR_DS_SRC_NAME_MISMATCH = WIN32_ERROR.ERROR_DS_SRC_NAME_MISMATCH;
pub const ERROR_DS_SRC_AND_DST_NC_IDENTICAL = WIN32_ERROR.ERROR_DS_SRC_AND_DST_NC_IDENTICAL;
pub const ERROR_DS_DST_NC_MISMATCH = WIN32_ERROR.ERROR_DS_DST_NC_MISMATCH;
pub const ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC = WIN32_ERROR.ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC;
pub const ERROR_DS_SRC_GUID_MISMATCH = WIN32_ERROR.ERROR_DS_SRC_GUID_MISMATCH;
pub const ERROR_DS_CANT_MOVE_DELETED_OBJECT = WIN32_ERROR.ERROR_DS_CANT_MOVE_DELETED_OBJECT;
pub const ERROR_DS_PDC_OPERATION_IN_PROGRESS = WIN32_ERROR.ERROR_DS_PDC_OPERATION_IN_PROGRESS;
pub const ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD = WIN32_ERROR.ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD;
pub const ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION = WIN32_ERROR.ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION;
pub const ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS = WIN32_ERROR.ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS;
pub const ERROR_DS_NC_MUST_HAVE_NC_PARENT = WIN32_ERROR.ERROR_DS_NC_MUST_HAVE_NC_PARENT;
pub const ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE = WIN32_ERROR.ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE;
pub const ERROR_DS_DST_DOMAIN_NOT_NATIVE = WIN32_ERROR.ERROR_DS_DST_DOMAIN_NOT_NATIVE;
pub const ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER = WIN32_ERROR.ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER;
pub const ERROR_DS_CANT_MOVE_ACCOUNT_GROUP = WIN32_ERROR.ERROR_DS_CANT_MOVE_ACCOUNT_GROUP;
pub const ERROR_DS_CANT_MOVE_RESOURCE_GROUP = WIN32_ERROR.ERROR_DS_CANT_MOVE_RESOURCE_GROUP;
pub const ERROR_DS_INVALID_SEARCH_FLAG = WIN32_ERROR.ERROR_DS_INVALID_SEARCH_FLAG;
pub const ERROR_DS_NO_TREE_DELETE_ABOVE_NC = WIN32_ERROR.ERROR_DS_NO_TREE_DELETE_ABOVE_NC;
pub const ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE = WIN32_ERROR.ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE;
pub const ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE = WIN32_ERROR.ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE;
pub const ERROR_DS_SAM_INIT_FAILURE = WIN32_ERROR.ERROR_DS_SAM_INIT_FAILURE;
pub const ERROR_DS_SENSITIVE_GROUP_VIOLATION = WIN32_ERROR.ERROR_DS_SENSITIVE_GROUP_VIOLATION;
pub const ERROR_DS_CANT_MOD_PRIMARYGROUPID = WIN32_ERROR.ERROR_DS_CANT_MOD_PRIMARYGROUPID;
pub const ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD = WIN32_ERROR.ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD;
pub const ERROR_DS_NONSAFE_SCHEMA_CHANGE = WIN32_ERROR.ERROR_DS_NONSAFE_SCHEMA_CHANGE;
pub const ERROR_DS_SCHEMA_UPDATE_DISALLOWED = WIN32_ERROR.ERROR_DS_SCHEMA_UPDATE_DISALLOWED;
pub const ERROR_DS_CANT_CREATE_UNDER_SCHEMA = WIN32_ERROR.ERROR_DS_CANT_CREATE_UNDER_SCHEMA;
pub const ERROR_DS_INSTALL_NO_SRC_SCH_VERSION = WIN32_ERROR.ERROR_DS_INSTALL_NO_SRC_SCH_VERSION;
pub const ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE = WIN32_ERROR.ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE;
pub const ERROR_DS_INVALID_GROUP_TYPE = WIN32_ERROR.ERROR_DS_INVALID_GROUP_TYPE;
pub const ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN = WIN32_ERROR.ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN;
pub const ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN = WIN32_ERROR.ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN;
pub const ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER = WIN32_ERROR.ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER;
pub const ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER = WIN32_ERROR.ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER;
pub const ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER = WIN32_ERROR.ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER;
pub const ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER = WIN32_ERROR.ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER;
pub const ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER = WIN32_ERROR.ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER;
pub const ERROR_DS_HAVE_PRIMARY_MEMBERS = WIN32_ERROR.ERROR_DS_HAVE_PRIMARY_MEMBERS;
pub const ERROR_DS_STRING_SD_CONVERSION_FAILED = WIN32_ERROR.ERROR_DS_STRING_SD_CONVERSION_FAILED;
pub const ERROR_DS_NAMING_MASTER_GC = WIN32_ERROR.ERROR_DS_NAMING_MASTER_GC;
pub const ERROR_DS_DNS_LOOKUP_FAILURE = WIN32_ERROR.ERROR_DS_DNS_LOOKUP_FAILURE;
pub const ERROR_DS_COULDNT_UPDATE_SPNS = WIN32_ERROR.ERROR_DS_COULDNT_UPDATE_SPNS;
pub const ERROR_DS_CANT_RETRIEVE_SD = WIN32_ERROR.ERROR_DS_CANT_RETRIEVE_SD;
pub const ERROR_DS_KEY_NOT_UNIQUE = WIN32_ERROR.ERROR_DS_KEY_NOT_UNIQUE;
pub const ERROR_DS_WRONG_LINKED_ATT_SYNTAX = WIN32_ERROR.ERROR_DS_WRONG_LINKED_ATT_SYNTAX;
pub const ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD = WIN32_ERROR.ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD;
pub const ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY = WIN32_ERROR.ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY;
pub const ERROR_DS_CANT_START = WIN32_ERROR.ERROR_DS_CANT_START;
pub const ERROR_DS_INIT_FAILURE = WIN32_ERROR.ERROR_DS_INIT_FAILURE;
pub const ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION = WIN32_ERROR.ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION;
pub const ERROR_DS_SOURCE_DOMAIN_IN_FOREST = WIN32_ERROR.ERROR_DS_SOURCE_DOMAIN_IN_FOREST;
pub const ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST = WIN32_ERROR.ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST;
pub const ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED = WIN32_ERROR.ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED;
pub const ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN = WIN32_ERROR.ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN;
pub const ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER = WIN32_ERROR.ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER;
pub const ERROR_DS_SRC_SID_EXISTS_IN_FOREST = WIN32_ERROR.ERROR_DS_SRC_SID_EXISTS_IN_FOREST;
pub const ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH = WIN32_ERROR.ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH;
pub const ERROR_SAM_INIT_FAILURE = WIN32_ERROR.ERROR_SAM_INIT_FAILURE;
pub const ERROR_DS_DRA_SCHEMA_INFO_SHIP = WIN32_ERROR.ERROR_DS_DRA_SCHEMA_INFO_SHIP;
pub const ERROR_DS_DRA_SCHEMA_CONFLICT = WIN32_ERROR.ERROR_DS_DRA_SCHEMA_CONFLICT;
pub const ERROR_DS_DRA_EARLIER_SCHEMA_CONFLICT = WIN32_ERROR.ERROR_DS_DRA_EARLIER_SCHEMA_CONFLICT;
pub const ERROR_DS_DRA_OBJ_NC_MISMATCH = WIN32_ERROR.ERROR_DS_DRA_OBJ_NC_MISMATCH;
pub const ERROR_DS_NC_STILL_HAS_DSAS = WIN32_ERROR.ERROR_DS_NC_STILL_HAS_DSAS;
pub const ERROR_DS_GC_REQUIRED = WIN32_ERROR.ERROR_DS_GC_REQUIRED;
pub const ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY = WIN32_ERROR.ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY;
pub const ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS = WIN32_ERROR.ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS;
pub const ERROR_DS_CANT_ADD_TO_GC = WIN32_ERROR.ERROR_DS_CANT_ADD_TO_GC;
pub const ERROR_DS_NO_CHECKPOINT_WITH_PDC = WIN32_ERROR.ERROR_DS_NO_CHECKPOINT_WITH_PDC;
pub const ERROR_DS_SOURCE_AUDITING_NOT_ENABLED = WIN32_ERROR.ERROR_DS_SOURCE_AUDITING_NOT_ENABLED;
pub const ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC = WIN32_ERROR.ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC;
pub const ERROR_DS_INVALID_NAME_FOR_SPN = WIN32_ERROR.ERROR_DS_INVALID_NAME_FOR_SPN;
pub const ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS = WIN32_ERROR.ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS;
pub const ERROR_DS_UNICODEPWD_NOT_IN_QUOTES = WIN32_ERROR.ERROR_DS_UNICODEPWD_NOT_IN_QUOTES;
pub const ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED = WIN32_ERROR.ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED;
pub const ERROR_DS_MUST_BE_RUN_ON_DST_DC = WIN32_ERROR.ERROR_DS_MUST_BE_RUN_ON_DST_DC;
pub const ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER = WIN32_ERROR.ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER;
pub const ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ = WIN32_ERROR.ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ;
pub const ERROR_DS_INIT_FAILURE_CONSOLE = WIN32_ERROR.ERROR_DS_INIT_FAILURE_CONSOLE;
pub const ERROR_DS_SAM_INIT_FAILURE_CONSOLE = WIN32_ERROR.ERROR_DS_SAM_INIT_FAILURE_CONSOLE;
pub const ERROR_DS_FOREST_VERSION_TOO_HIGH = WIN32_ERROR.ERROR_DS_FOREST_VERSION_TOO_HIGH;
pub const ERROR_DS_DOMAIN_VERSION_TOO_HIGH = WIN32_ERROR.ERROR_DS_DOMAIN_VERSION_TOO_HIGH;
pub const ERROR_DS_FOREST_VERSION_TOO_LOW = WIN32_ERROR.ERROR_DS_FOREST_VERSION_TOO_LOW;
pub const ERROR_DS_DOMAIN_VERSION_TOO_LOW = WIN32_ERROR.ERROR_DS_DOMAIN_VERSION_TOO_LOW;
pub const ERROR_DS_INCOMPATIBLE_VERSION = WIN32_ERROR.ERROR_DS_INCOMPATIBLE_VERSION;
pub const ERROR_DS_LOW_DSA_VERSION = WIN32_ERROR.ERROR_DS_LOW_DSA_VERSION;
pub const ERROR_DS_NO_BEHAVIOR_VERSION_IN_MIXEDDOMAIN = WIN32_ERROR.ERROR_DS_NO_BEHAVIOR_VERSION_IN_MIXEDDOMAIN;
pub const ERROR_DS_NOT_SUPPORTED_SORT_ORDER = WIN32_ERROR.ERROR_DS_NOT_SUPPORTED_SORT_ORDER;
pub const ERROR_DS_NAME_NOT_UNIQUE = WIN32_ERROR.ERROR_DS_NAME_NOT_UNIQUE;
pub const ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4 = WIN32_ERROR.ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4;
pub const ERROR_DS_OUT_OF_VERSION_STORE = WIN32_ERROR.ERROR_DS_OUT_OF_VERSION_STORE;
pub const ERROR_DS_INCOMPATIBLE_CONTROLS_USED = WIN32_ERROR.ERROR_DS_INCOMPATIBLE_CONTROLS_USED;
pub const ERROR_DS_NO_REF_DOMAIN = WIN32_ERROR.ERROR_DS_NO_REF_DOMAIN;
pub const ERROR_DS_RESERVED_LINK_ID = WIN32_ERROR.ERROR_DS_RESERVED_LINK_ID;
pub const ERROR_DS_LINK_ID_NOT_AVAILABLE = WIN32_ERROR.ERROR_DS_LINK_ID_NOT_AVAILABLE;
pub const ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER = WIN32_ERROR.ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER;
pub const ERROR_DS_MODIFYDN_DISALLOWED_BY_INSTANCE_TYPE = WIN32_ERROR.ERROR_DS_MODIFYDN_DISALLOWED_BY_INSTANCE_TYPE;
pub const ERROR_DS_NO_OBJECT_MOVE_IN_SCHEMA_NC = WIN32_ERROR.ERROR_DS_NO_OBJECT_MOVE_IN_SCHEMA_NC;
pub const ERROR_DS_MODIFYDN_DISALLOWED_BY_FLAG = WIN32_ERROR.ERROR_DS_MODIFYDN_DISALLOWED_BY_FLAG;
pub const ERROR_DS_MODIFYDN_WRONG_GRANDPARENT = WIN32_ERROR.ERROR_DS_MODIFYDN_WRONG_GRANDPARENT;
pub const ERROR_DS_NAME_ERROR_TRUST_REFERRAL = WIN32_ERROR.ERROR_DS_NAME_ERROR_TRUST_REFERRAL;
pub const ERROR_NOT_SUPPORTED_ON_STANDARD_SERVER = WIN32_ERROR.ERROR_NOT_SUPPORTED_ON_STANDARD_SERVER;
pub const ERROR_DS_CANT_ACCESS_REMOTE_PART_OF_AD = WIN32_ERROR.ERROR_DS_CANT_ACCESS_REMOTE_PART_OF_AD;
pub const ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE_V2 = WIN32_ERROR.ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE_V2;
pub const ERROR_DS_THREAD_LIMIT_EXCEEDED = WIN32_ERROR.ERROR_DS_THREAD_LIMIT_EXCEEDED;
pub const ERROR_DS_NOT_CLOSEST = WIN32_ERROR.ERROR_DS_NOT_CLOSEST;
pub const ERROR_DS_CANT_DERIVE_SPN_WITHOUT_SERVER_REF = WIN32_ERROR.ERROR_DS_CANT_DERIVE_SPN_WITHOUT_SERVER_REF;
pub const ERROR_DS_SINGLE_USER_MODE_FAILED = WIN32_ERROR.ERROR_DS_SINGLE_USER_MODE_FAILED;
pub const ERROR_DS_NTDSCRIPT_SYNTAX_ERROR = WIN32_ERROR.ERROR_DS_NTDSCRIPT_SYNTAX_ERROR;
pub const ERROR_DS_NTDSCRIPT_PROCESS_ERROR = WIN32_ERROR.ERROR_DS_NTDSCRIPT_PROCESS_ERROR;
pub const ERROR_DS_DIFFERENT_REPL_EPOCHS = WIN32_ERROR.ERROR_DS_DIFFERENT_REPL_EPOCHS;
pub const ERROR_DS_DRS_EXTENSIONS_CHANGED = WIN32_ERROR.ERROR_DS_DRS_EXTENSIONS_CHANGED;
pub const ERROR_DS_REPLICA_SET_CHANGE_NOT_ALLOWED_ON_DISABLED_CR = WIN32_ERROR.ERROR_DS_REPLICA_SET_CHANGE_NOT_ALLOWED_ON_DISABLED_CR;
pub const ERROR_DS_NO_MSDS_INTID = WIN32_ERROR.ERROR_DS_NO_MSDS_INTID;
pub const ERROR_DS_DUP_MSDS_INTID = WIN32_ERROR.ERROR_DS_DUP_MSDS_INTID;
pub const ERROR_DS_EXISTS_IN_RDNATTID = WIN32_ERROR.ERROR_DS_EXISTS_IN_RDNATTID;
pub const ERROR_DS_AUTHORIZATION_FAILED = WIN32_ERROR.ERROR_DS_AUTHORIZATION_FAILED;
pub const ERROR_DS_INVALID_SCRIPT = WIN32_ERROR.ERROR_DS_INVALID_SCRIPT;
pub const ERROR_DS_REMOTE_CROSSREF_OP_FAILED = WIN32_ERROR.ERROR_DS_REMOTE_CROSSREF_OP_FAILED;
pub const ERROR_DS_CROSS_REF_BUSY = WIN32_ERROR.ERROR_DS_CROSS_REF_BUSY;
pub const ERROR_DS_CANT_DERIVE_SPN_FOR_DELETED_DOMAIN = WIN32_ERROR.ERROR_DS_CANT_DERIVE_SPN_FOR_DELETED_DOMAIN;
pub const ERROR_DS_CANT_DEMOTE_WITH_WRITEABLE_NC = WIN32_ERROR.ERROR_DS_CANT_DEMOTE_WITH_WRITEABLE_NC;
pub const ERROR_DS_DUPLICATE_ID_FOUND = WIN32_ERROR.ERROR_DS_DUPLICATE_ID_FOUND;
pub const ERROR_DS_INSUFFICIENT_ATTR_TO_CREATE_OBJECT = WIN32_ERROR.ERROR_DS_INSUFFICIENT_ATTR_TO_CREATE_OBJECT;
pub const ERROR_DS_GROUP_CONVERSION_ERROR = WIN32_ERROR.ERROR_DS_GROUP_CONVERSION_ERROR;
pub const ERROR_DS_CANT_MOVE_APP_BASIC_GROUP = WIN32_ERROR.ERROR_DS_CANT_MOVE_APP_BASIC_GROUP;
pub const ERROR_DS_CANT_MOVE_APP_QUERY_GROUP = WIN32_ERROR.ERROR_DS_CANT_MOVE_APP_QUERY_GROUP;
pub const ERROR_DS_ROLE_NOT_VERIFIED = WIN32_ERROR.ERROR_DS_ROLE_NOT_VERIFIED;
pub const ERROR_DS_WKO_CONTAINER_CANNOT_BE_SPECIAL = WIN32_ERROR.ERROR_DS_WKO_CONTAINER_CANNOT_BE_SPECIAL;
pub const ERROR_DS_DOMAIN_RENAME_IN_PROGRESS = WIN32_ERROR.ERROR_DS_DOMAIN_RENAME_IN_PROGRESS;
pub const ERROR_DS_EXISTING_AD_CHILD_NC = WIN32_ERROR.ERROR_DS_EXISTING_AD_CHILD_NC;
pub const ERROR_DS_REPL_LIFETIME_EXCEEDED = WIN32_ERROR.ERROR_DS_REPL_LIFETIME_EXCEEDED;
pub const ERROR_DS_DISALLOWED_IN_SYSTEM_CONTAINER = WIN32_ERROR.ERROR_DS_DISALLOWED_IN_SYSTEM_CONTAINER;
pub const ERROR_DS_LDAP_SEND_QUEUE_FULL = WIN32_ERROR.ERROR_DS_LDAP_SEND_QUEUE_FULL;
pub const ERROR_DS_DRA_OUT_SCHEDULE_WINDOW = WIN32_ERROR.ERROR_DS_DRA_OUT_SCHEDULE_WINDOW;
pub const ERROR_DS_POLICY_NOT_KNOWN = WIN32_ERROR.ERROR_DS_POLICY_NOT_KNOWN;
pub const ERROR_NO_SITE_SETTINGS_OBJECT = WIN32_ERROR.ERROR_NO_SITE_SETTINGS_OBJECT;
pub const ERROR_NO_SECRETS = WIN32_ERROR.ERROR_NO_SECRETS;
pub const ERROR_NO_WRITABLE_DC_FOUND = WIN32_ERROR.ERROR_NO_WRITABLE_DC_FOUND;
pub const ERROR_DS_NO_SERVER_OBJECT = WIN32_ERROR.ERROR_DS_NO_SERVER_OBJECT;
pub const ERROR_DS_NO_NTDSA_OBJECT = WIN32_ERROR.ERROR_DS_NO_NTDSA_OBJECT;
pub const ERROR_DS_NON_ASQ_SEARCH = WIN32_ERROR.ERROR_DS_NON_ASQ_SEARCH;
pub const ERROR_DS_AUDIT_FAILURE = WIN32_ERROR.ERROR_DS_AUDIT_FAILURE;
pub const ERROR_DS_INVALID_SEARCH_FLAG_SUBTREE = WIN32_ERROR.ERROR_DS_INVALID_SEARCH_FLAG_SUBTREE;
pub const ERROR_DS_INVALID_SEARCH_FLAG_TUPLE = WIN32_ERROR.ERROR_DS_INVALID_SEARCH_FLAG_TUPLE;
pub const ERROR_DS_HIERARCHY_TABLE_TOO_DEEP = WIN32_ERROR.ERROR_DS_HIERARCHY_TABLE_TOO_DEEP;
pub const ERROR_DS_DRA_CORRUPT_UTD_VECTOR = WIN32_ERROR.ERROR_DS_DRA_CORRUPT_UTD_VECTOR;
pub const ERROR_DS_DRA_SECRETS_DENIED = WIN32_ERROR.ERROR_DS_DRA_SECRETS_DENIED;
pub const ERROR_DS_RESERVED_MAPI_ID = WIN32_ERROR.ERROR_DS_RESERVED_MAPI_ID;
pub const ERROR_DS_MAPI_ID_NOT_AVAILABLE = WIN32_ERROR.ERROR_DS_MAPI_ID_NOT_AVAILABLE;
pub const ERROR_DS_DRA_MISSING_KRBTGT_SECRET = WIN32_ERROR.ERROR_DS_DRA_MISSING_KRBTGT_SECRET;
pub const ERROR_DS_DOMAIN_NAME_EXISTS_IN_FOREST = WIN32_ERROR.ERROR_DS_DOMAIN_NAME_EXISTS_IN_FOREST;
pub const ERROR_DS_FLAT_NAME_EXISTS_IN_FOREST = WIN32_ERROR.ERROR_DS_FLAT_NAME_EXISTS_IN_FOREST;
pub const ERROR_INVALID_USER_PRINCIPAL_NAME = WIN32_ERROR.ERROR_INVALID_USER_PRINCIPAL_NAME;
pub const ERROR_DS_OID_MAPPED_GROUP_CANT_HAVE_MEMBERS = WIN32_ERROR.ERROR_DS_OID_MAPPED_GROUP_CANT_HAVE_MEMBERS;
pub const ERROR_DS_OID_NOT_FOUND = WIN32_ERROR.ERROR_DS_OID_NOT_FOUND;
pub const ERROR_DS_DRA_RECYCLED_TARGET = WIN32_ERROR.ERROR_DS_DRA_RECYCLED_TARGET;
pub const ERROR_DS_DISALLOWED_NC_REDIRECT = WIN32_ERROR.ERROR_DS_DISALLOWED_NC_REDIRECT;
pub const ERROR_DS_HIGH_ADLDS_FFL = WIN32_ERROR.ERROR_DS_HIGH_ADLDS_FFL;
pub const ERROR_DS_HIGH_DSA_VERSION = WIN32_ERROR.ERROR_DS_HIGH_DSA_VERSION;
pub const ERROR_DS_LOW_ADLDS_FFL = WIN32_ERROR.ERROR_DS_LOW_ADLDS_FFL;
pub const ERROR_DOMAIN_SID_SAME_AS_LOCAL_WORKSTATION = WIN32_ERROR.ERROR_DOMAIN_SID_SAME_AS_LOCAL_WORKSTATION;
pub const ERROR_DS_UNDELETE_SAM_VALIDATION_FAILED = WIN32_ERROR.ERROR_DS_UNDELETE_SAM_VALIDATION_FAILED;
pub const ERROR_INCORRECT_ACCOUNT_TYPE = WIN32_ERROR.ERROR_INCORRECT_ACCOUNT_TYPE;
pub const ERROR_DS_SPN_VALUE_NOT_UNIQUE_IN_FOREST = WIN32_ERROR.ERROR_DS_SPN_VALUE_NOT_UNIQUE_IN_FOREST;
pub const ERROR_DS_UPN_VALUE_NOT_UNIQUE_IN_FOREST = WIN32_ERROR.ERROR_DS_UPN_VALUE_NOT_UNIQUE_IN_FOREST;
pub const ERROR_DS_MISSING_FOREST_TRUST = WIN32_ERROR.ERROR_DS_MISSING_FOREST_TRUST;
pub const ERROR_DS_VALUE_KEY_NOT_UNIQUE = WIN32_ERROR.ERROR_DS_VALUE_KEY_NOT_UNIQUE;
pub const ERROR_WEAK_WHFBKEY_BLOCKED = WIN32_ERROR.ERROR_WEAK_WHFBKEY_BLOCKED;
pub const DNS_ERROR_RESPONSE_CODES_BASE = WIN32_ERROR.DNS_ERROR_RESPONSE_CODES_BASE;
pub const DNS_ERROR_RCODE_NO_ERROR = WIN32_ERROR.NO_ERROR;
pub const DNS_ERROR_MASK = WIN32_ERROR.DNS_ERROR_RESPONSE_CODES_BASE;
pub const DNS_ERROR_RCODE_FORMAT_ERROR = WIN32_ERROR.DNS_ERROR_RCODE_FORMAT_ERROR;
pub const DNS_ERROR_RCODE_SERVER_FAILURE = WIN32_ERROR.DNS_ERROR_RCODE_SERVER_FAILURE;
pub const DNS_ERROR_RCODE_NAME_ERROR = WIN32_ERROR.DNS_ERROR_RCODE_NAME_ERROR;
pub const DNS_ERROR_RCODE_NOT_IMPLEMENTED = WIN32_ERROR.DNS_ERROR_RCODE_NOT_IMPLEMENTED;
pub const DNS_ERROR_RCODE_REFUSED = WIN32_ERROR.DNS_ERROR_RCODE_REFUSED;
pub const DNS_ERROR_RCODE_YXDOMAIN = WIN32_ERROR.DNS_ERROR_RCODE_YXDOMAIN;
pub const DNS_ERROR_RCODE_YXRRSET = WIN32_ERROR.DNS_ERROR_RCODE_YXRRSET;
pub const DNS_ERROR_RCODE_NXRRSET = WIN32_ERROR.DNS_ERROR_RCODE_NXRRSET;
pub const DNS_ERROR_RCODE_NOTAUTH = WIN32_ERROR.DNS_ERROR_RCODE_NOTAUTH;
pub const DNS_ERROR_RCODE_NOTZONE = WIN32_ERROR.DNS_ERROR_RCODE_NOTZONE;
pub const DNS_ERROR_RCODE_BADSIG = WIN32_ERROR.DNS_ERROR_RCODE_BADSIG;
pub const DNS_ERROR_RCODE_BADKEY = WIN32_ERROR.DNS_ERROR_RCODE_BADKEY;
pub const DNS_ERROR_RCODE_BADTIME = WIN32_ERROR.DNS_ERROR_RCODE_BADTIME;
pub const DNS_ERROR_RCODE_LAST = WIN32_ERROR.DNS_ERROR_RCODE_BADTIME;
pub const DNS_ERROR_DNSSEC_BASE = WIN32_ERROR.DNS_ERROR_DNSSEC_BASE;
pub const DNS_ERROR_KEYMASTER_REQUIRED = WIN32_ERROR.DNS_ERROR_KEYMASTER_REQUIRED;
pub const DNS_ERROR_NOT_ALLOWED_ON_SIGNED_ZONE = WIN32_ERROR.DNS_ERROR_NOT_ALLOWED_ON_SIGNED_ZONE;
pub const DNS_ERROR_NSEC3_INCOMPATIBLE_WITH_RSA_SHA1 = WIN32_ERROR.DNS_ERROR_NSEC3_INCOMPATIBLE_WITH_RSA_SHA1;
pub const DNS_ERROR_NOT_ENOUGH_SIGNING_KEY_DESCRIPTORS = WIN32_ERROR.DNS_ERROR_NOT_ENOUGH_SIGNING_KEY_DESCRIPTORS;
pub const DNS_ERROR_UNSUPPORTED_ALGORITHM = WIN32_ERROR.DNS_ERROR_UNSUPPORTED_ALGORITHM;
pub const DNS_ERROR_INVALID_KEY_SIZE = WIN32_ERROR.DNS_ERROR_INVALID_KEY_SIZE;
pub const DNS_ERROR_SIGNING_KEY_NOT_ACCESSIBLE = WIN32_ERROR.DNS_ERROR_SIGNING_KEY_NOT_ACCESSIBLE;
pub const DNS_ERROR_KSP_DOES_NOT_SUPPORT_PROTECTION = WIN32_ERROR.DNS_ERROR_KSP_DOES_NOT_SUPPORT_PROTECTION;
pub const DNS_ERROR_UNEXPECTED_DATA_PROTECTION_ERROR = WIN32_ERROR.DNS_ERROR_UNEXPECTED_DATA_PROTECTION_ERROR;
pub const DNS_ERROR_UNEXPECTED_CNG_ERROR = WIN32_ERROR.DNS_ERROR_UNEXPECTED_CNG_ERROR;
pub const DNS_ERROR_UNKNOWN_SIGNING_PARAMETER_VERSION = WIN32_ERROR.DNS_ERROR_UNKNOWN_SIGNING_PARAMETER_VERSION;
pub const DNS_ERROR_KSP_NOT_ACCESSIBLE = WIN32_ERROR.DNS_ERROR_KSP_NOT_ACCESSIBLE;
pub const DNS_ERROR_TOO_MANY_SKDS = WIN32_ERROR.DNS_ERROR_TOO_MANY_SKDS;
pub const DNS_ERROR_INVALID_ROLLOVER_PERIOD = WIN32_ERROR.DNS_ERROR_INVALID_ROLLOVER_PERIOD;
pub const DNS_ERROR_INVALID_INITIAL_ROLLOVER_OFFSET = WIN32_ERROR.DNS_ERROR_INVALID_INITIAL_ROLLOVER_OFFSET;
pub const DNS_ERROR_ROLLOVER_IN_PROGRESS = WIN32_ERROR.DNS_ERROR_ROLLOVER_IN_PROGRESS;
pub const DNS_ERROR_STANDBY_KEY_NOT_PRESENT = WIN32_ERROR.DNS_ERROR_STANDBY_KEY_NOT_PRESENT;
pub const DNS_ERROR_NOT_ALLOWED_ON_ZSK = WIN32_ERROR.DNS_ERROR_NOT_ALLOWED_ON_ZSK;
pub const DNS_ERROR_NOT_ALLOWED_ON_ACTIVE_SKD = WIN32_ERROR.DNS_ERROR_NOT_ALLOWED_ON_ACTIVE_SKD;
pub const DNS_ERROR_ROLLOVER_ALREADY_QUEUED = WIN32_ERROR.DNS_ERROR_ROLLOVER_ALREADY_QUEUED;
pub const DNS_ERROR_NOT_ALLOWED_ON_UNSIGNED_ZONE = WIN32_ERROR.DNS_ERROR_NOT_ALLOWED_ON_UNSIGNED_ZONE;
pub const DNS_ERROR_BAD_KEYMASTER = WIN32_ERROR.DNS_ERROR_BAD_KEYMASTER;
pub const DNS_ERROR_INVALID_SIGNATURE_VALIDITY_PERIOD = WIN32_ERROR.DNS_ERROR_INVALID_SIGNATURE_VALIDITY_PERIOD;
pub const DNS_ERROR_INVALID_NSEC3_ITERATION_COUNT = WIN32_ERROR.DNS_ERROR_INVALID_NSEC3_ITERATION_COUNT;
pub const DNS_ERROR_DNSSEC_IS_DISABLED = WIN32_ERROR.DNS_ERROR_DNSSEC_IS_DISABLED;
pub const DNS_ERROR_INVALID_XML = WIN32_ERROR.DNS_ERROR_INVALID_XML;
pub const DNS_ERROR_NO_VALID_TRUST_ANCHORS = WIN32_ERROR.DNS_ERROR_NO_VALID_TRUST_ANCHORS;
pub const DNS_ERROR_ROLLOVER_NOT_POKEABLE = WIN32_ERROR.DNS_ERROR_ROLLOVER_NOT_POKEABLE;
pub const DNS_ERROR_NSEC3_NAME_COLLISION = WIN32_ERROR.DNS_ERROR_NSEC3_NAME_COLLISION;
pub const DNS_ERROR_NSEC_INCOMPATIBLE_WITH_NSEC3_RSA_SHA1 = WIN32_ERROR.DNS_ERROR_NSEC_INCOMPATIBLE_WITH_NSEC3_RSA_SHA1;
pub const DNS_ERROR_PACKET_FMT_BASE = WIN32_ERROR.DNS_ERROR_PACKET_FMT_BASE;
pub const DNS_ERROR_BAD_PACKET = WIN32_ERROR.DNS_ERROR_BAD_PACKET;
pub const DNS_ERROR_NO_PACKET = WIN32_ERROR.DNS_ERROR_NO_PACKET;
pub const DNS_ERROR_RCODE = WIN32_ERROR.DNS_ERROR_RCODE;
pub const DNS_ERROR_UNSECURE_PACKET = WIN32_ERROR.DNS_ERROR_UNSECURE_PACKET;
pub const DNS_ERROR_NO_MEMORY = WIN32_ERROR.ERROR_OUTOFMEMORY;
pub const DNS_ERROR_INVALID_NAME = WIN32_ERROR.ERROR_INVALID_NAME;
pub const DNS_ERROR_INVALID_DATA = WIN32_ERROR.ERROR_INVALID_DATA;
pub const DNS_ERROR_GENERAL_API_BASE = WIN32_ERROR.DNS_ERROR_GENERAL_API_BASE;
pub const DNS_ERROR_INVALID_TYPE = WIN32_ERROR.DNS_ERROR_INVALID_TYPE;
pub const DNS_ERROR_INVALID_IP_ADDRESS = WIN32_ERROR.DNS_ERROR_INVALID_IP_ADDRESS;
pub const DNS_ERROR_INVALID_PROPERTY = WIN32_ERROR.DNS_ERROR_INVALID_PROPERTY;
pub const DNS_ERROR_TRY_AGAIN_LATER = WIN32_ERROR.DNS_ERROR_TRY_AGAIN_LATER;
pub const DNS_ERROR_NOT_UNIQUE = WIN32_ERROR.DNS_ERROR_NOT_UNIQUE;
pub const DNS_ERROR_NON_RFC_NAME = WIN32_ERROR.DNS_ERROR_NON_RFC_NAME;
pub const DNS_ERROR_INVALID_NAME_CHAR = WIN32_ERROR.DNS_ERROR_INVALID_NAME_CHAR;
pub const DNS_ERROR_NUMERIC_NAME = WIN32_ERROR.DNS_ERROR_NUMERIC_NAME;
pub const DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER = WIN32_ERROR.DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER;
pub const DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION = WIN32_ERROR.DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION;
pub const DNS_ERROR_CANNOT_FIND_ROOT_HINTS = WIN32_ERROR.DNS_ERROR_CANNOT_FIND_ROOT_HINTS;
pub const DNS_ERROR_INCONSISTENT_ROOT_HINTS = WIN32_ERROR.DNS_ERROR_INCONSISTENT_ROOT_HINTS;
pub const DNS_ERROR_DWORD_VALUE_TOO_SMALL = WIN32_ERROR.DNS_ERROR_DWORD_VALUE_TOO_SMALL;
pub const DNS_ERROR_DWORD_VALUE_TOO_LARGE = WIN32_ERROR.DNS_ERROR_DWORD_VALUE_TOO_LARGE;
pub const DNS_ERROR_BACKGROUND_LOADING = WIN32_ERROR.DNS_ERROR_BACKGROUND_LOADING;
pub const DNS_ERROR_NOT_ALLOWED_ON_RODC = WIN32_ERROR.DNS_ERROR_NOT_ALLOWED_ON_RODC;
pub const DNS_ERROR_NOT_ALLOWED_UNDER_DNAME = WIN32_ERROR.DNS_ERROR_NOT_ALLOWED_UNDER_DNAME;
pub const DNS_ERROR_DELEGATION_REQUIRED = WIN32_ERROR.DNS_ERROR_DELEGATION_REQUIRED;
pub const DNS_ERROR_INVALID_POLICY_TABLE = WIN32_ERROR.DNS_ERROR_INVALID_POLICY_TABLE;
pub const DNS_ERROR_ADDRESS_REQUIRED = WIN32_ERROR.DNS_ERROR_ADDRESS_REQUIRED;
pub const DNS_ERROR_ZONE_BASE = WIN32_ERROR.DNS_ERROR_ZONE_BASE;
pub const DNS_ERROR_ZONE_DOES_NOT_EXIST = WIN32_ERROR.DNS_ERROR_ZONE_DOES_NOT_EXIST;
pub const DNS_ERROR_NO_ZONE_INFO = WIN32_ERROR.DNS_ERROR_NO_ZONE_INFO;
pub const DNS_ERROR_INVALID_ZONE_OPERATION = WIN32_ERROR.DNS_ERROR_INVALID_ZONE_OPERATION;
pub const DNS_ERROR_ZONE_CONFIGURATION_ERROR = WIN32_ERROR.DNS_ERROR_ZONE_CONFIGURATION_ERROR;
pub const DNS_ERROR_ZONE_HAS_NO_SOA_RECORD = WIN32_ERROR.DNS_ERROR_ZONE_HAS_NO_SOA_RECORD;
pub const DNS_ERROR_ZONE_HAS_NO_NS_RECORDS = WIN32_ERROR.DNS_ERROR_ZONE_HAS_NO_NS_RECORDS;
pub const DNS_ERROR_ZONE_LOCKED = WIN32_ERROR.DNS_ERROR_ZONE_LOCKED;
pub const DNS_ERROR_ZONE_CREATION_FAILED = WIN32_ERROR.DNS_ERROR_ZONE_CREATION_FAILED;
pub const DNS_ERROR_ZONE_ALREADY_EXISTS = WIN32_ERROR.DNS_ERROR_ZONE_ALREADY_EXISTS;
pub const DNS_ERROR_AUTOZONE_ALREADY_EXISTS = WIN32_ERROR.DNS_ERROR_AUTOZONE_ALREADY_EXISTS;
pub const DNS_ERROR_INVALID_ZONE_TYPE = WIN32_ERROR.DNS_ERROR_INVALID_ZONE_TYPE;
pub const DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP = WIN32_ERROR.DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP;
pub const DNS_ERROR_ZONE_NOT_SECONDARY = WIN32_ERROR.DNS_ERROR_ZONE_NOT_SECONDARY;
pub const DNS_ERROR_NEED_SECONDARY_ADDRESSES = WIN32_ERROR.DNS_ERROR_NEED_SECONDARY_ADDRESSES;
pub const DNS_ERROR_WINS_INIT_FAILED = WIN32_ERROR.DNS_ERROR_WINS_INIT_FAILED;
pub const DNS_ERROR_NEED_WINS_SERVERS = WIN32_ERROR.DNS_ERROR_NEED_WINS_SERVERS;
pub const DNS_ERROR_NBSTAT_INIT_FAILED = WIN32_ERROR.DNS_ERROR_NBSTAT_INIT_FAILED;
pub const DNS_ERROR_SOA_DELETE_INVALID = WIN32_ERROR.DNS_ERROR_SOA_DELETE_INVALID;
pub const DNS_ERROR_FORWARDER_ALREADY_EXISTS = WIN32_ERROR.DNS_ERROR_FORWARDER_ALREADY_EXISTS;
pub const DNS_ERROR_ZONE_REQUIRES_MASTER_IP = WIN32_ERROR.DNS_ERROR_ZONE_REQUIRES_MASTER_IP;
pub const DNS_ERROR_ZONE_IS_SHUTDOWN = WIN32_ERROR.DNS_ERROR_ZONE_IS_SHUTDOWN;
pub const DNS_ERROR_ZONE_LOCKED_FOR_SIGNING = WIN32_ERROR.DNS_ERROR_ZONE_LOCKED_FOR_SIGNING;
pub const DNS_ERROR_DATAFILE_BASE = WIN32_ERROR.DNS_ERROR_DATAFILE_BASE;
pub const DNS_ERROR_PRIMARY_REQUIRES_DATAFILE = WIN32_ERROR.DNS_ERROR_PRIMARY_REQUIRES_DATAFILE;
pub const DNS_ERROR_INVALID_DATAFILE_NAME = WIN32_ERROR.DNS_ERROR_INVALID_DATAFILE_NAME;
pub const DNS_ERROR_DATAFILE_OPEN_FAILURE = WIN32_ERROR.DNS_ERROR_DATAFILE_OPEN_FAILURE;
pub const DNS_ERROR_FILE_WRITEBACK_FAILED = WIN32_ERROR.DNS_ERROR_FILE_WRITEBACK_FAILED;
pub const DNS_ERROR_DATAFILE_PARSING = WIN32_ERROR.DNS_ERROR_DATAFILE_PARSING;
pub const DNS_ERROR_DATABASE_BASE = WIN32_ERROR.DNS_ERROR_DATABASE_BASE;
pub const DNS_ERROR_RECORD_DOES_NOT_EXIST = WIN32_ERROR.DNS_ERROR_RECORD_DOES_NOT_EXIST;
pub const DNS_ERROR_RECORD_FORMAT = WIN32_ERROR.DNS_ERROR_RECORD_FORMAT;
pub const DNS_ERROR_NODE_CREATION_FAILED = WIN32_ERROR.DNS_ERROR_NODE_CREATION_FAILED;
pub const DNS_ERROR_UNKNOWN_RECORD_TYPE = WIN32_ERROR.DNS_ERROR_UNKNOWN_RECORD_TYPE;
pub const DNS_ERROR_RECORD_TIMED_OUT = WIN32_ERROR.DNS_ERROR_RECORD_TIMED_OUT;
pub const DNS_ERROR_NAME_NOT_IN_ZONE = WIN32_ERROR.DNS_ERROR_NAME_NOT_IN_ZONE;
pub const DNS_ERROR_CNAME_LOOP = WIN32_ERROR.DNS_ERROR_CNAME_LOOP;
pub const DNS_ERROR_NODE_IS_CNAME = WIN32_ERROR.DNS_ERROR_NODE_IS_CNAME;
pub const DNS_ERROR_CNAME_COLLISION = WIN32_ERROR.DNS_ERROR_CNAME_COLLISION;
pub const DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT = WIN32_ERROR.DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT;
pub const DNS_ERROR_RECORD_ALREADY_EXISTS = WIN32_ERROR.DNS_ERROR_RECORD_ALREADY_EXISTS;
pub const DNS_ERROR_SECONDARY_DATA = WIN32_ERROR.DNS_ERROR_SECONDARY_DATA;
pub const DNS_ERROR_NO_CREATE_CACHE_DATA = WIN32_ERROR.DNS_ERROR_NO_CREATE_CACHE_DATA;
pub const DNS_ERROR_NAME_DOES_NOT_EXIST = WIN32_ERROR.DNS_ERROR_NAME_DOES_NOT_EXIST;
pub const DNS_ERROR_DS_UNAVAILABLE = WIN32_ERROR.DNS_ERROR_DS_UNAVAILABLE;
pub const DNS_ERROR_DS_ZONE_ALREADY_EXISTS = WIN32_ERROR.DNS_ERROR_DS_ZONE_ALREADY_EXISTS;
pub const DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE = WIN32_ERROR.DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE;
pub const DNS_ERROR_NODE_IS_DNAME = WIN32_ERROR.DNS_ERROR_NODE_IS_DNAME;
pub const DNS_ERROR_DNAME_COLLISION = WIN32_ERROR.DNS_ERROR_DNAME_COLLISION;
pub const DNS_ERROR_ALIAS_LOOP = WIN32_ERROR.DNS_ERROR_ALIAS_LOOP;
pub const DNS_ERROR_OPERATION_BASE = WIN32_ERROR.DNS_ERROR_OPERATION_BASE;
pub const DNS_ERROR_AXFR = WIN32_ERROR.DNS_ERROR_AXFR;
pub const DNS_ERROR_SECURE_BASE = WIN32_ERROR.DNS_ERROR_SECURE_BASE;
pub const DNS_ERROR_SETUP_BASE = WIN32_ERROR.DNS_ERROR_SETUP_BASE;
pub const DNS_ERROR_NO_TCPIP = WIN32_ERROR.DNS_ERROR_NO_TCPIP;
pub const DNS_ERROR_NO_DNS_SERVERS = WIN32_ERROR.DNS_ERROR_NO_DNS_SERVERS;
pub const DNS_ERROR_DP_BASE = WIN32_ERROR.DNS_ERROR_DP_BASE;
pub const DNS_ERROR_DP_DOES_NOT_EXIST = WIN32_ERROR.DNS_ERROR_DP_DOES_NOT_EXIST;
pub const DNS_ERROR_DP_ALREADY_EXISTS = WIN32_ERROR.DNS_ERROR_DP_ALREADY_EXISTS;
pub const DNS_ERROR_DP_NOT_ENLISTED = WIN32_ERROR.DNS_ERROR_DP_NOT_ENLISTED;
pub const DNS_ERROR_DP_ALREADY_ENLISTED = WIN32_ERROR.DNS_ERROR_DP_ALREADY_ENLISTED;
pub const DNS_ERROR_DP_NOT_AVAILABLE = WIN32_ERROR.DNS_ERROR_DP_NOT_AVAILABLE;
pub const DNS_ERROR_DP_FSMO_ERROR = WIN32_ERROR.DNS_ERROR_DP_FSMO_ERROR;
pub const DNS_ERROR_RRL_NOT_ENABLED = WIN32_ERROR.DNS_ERROR_RRL_NOT_ENABLED;
pub const DNS_ERROR_RRL_INVALID_WINDOW_SIZE = WIN32_ERROR.DNS_ERROR_RRL_INVALID_WINDOW_SIZE;
pub const DNS_ERROR_RRL_INVALID_IPV4_PREFIX = WIN32_ERROR.DNS_ERROR_RRL_INVALID_IPV4_PREFIX;
pub const DNS_ERROR_RRL_INVALID_IPV6_PREFIX = WIN32_ERROR.DNS_ERROR_RRL_INVALID_IPV6_PREFIX;
pub const DNS_ERROR_RRL_INVALID_TC_RATE = WIN32_ERROR.DNS_ERROR_RRL_INVALID_TC_RATE;
pub const DNS_ERROR_RRL_INVALID_LEAK_RATE = WIN32_ERROR.DNS_ERROR_RRL_INVALID_LEAK_RATE;
pub const DNS_ERROR_RRL_LEAK_RATE_LESSTHAN_TC_RATE = WIN32_ERROR.DNS_ERROR_RRL_LEAK_RATE_LESSTHAN_TC_RATE;
pub const DNS_ERROR_VIRTUALIZATION_INSTANCE_ALREADY_EXISTS = WIN32_ERROR.DNS_ERROR_VIRTUALIZATION_INSTANCE_ALREADY_EXISTS;
pub const DNS_ERROR_VIRTUALIZATION_INSTANCE_DOES_NOT_EXIST = WIN32_ERROR.DNS_ERROR_VIRTUALIZATION_INSTANCE_DOES_NOT_EXIST;
pub const DNS_ERROR_VIRTUALIZATION_TREE_LOCKED = WIN32_ERROR.DNS_ERROR_VIRTUALIZATION_TREE_LOCKED;
pub const DNS_ERROR_INVAILD_VIRTUALIZATION_INSTANCE_NAME = WIN32_ERROR.DNS_ERROR_INVAILD_VIRTUALIZATION_INSTANCE_NAME;
pub const DNS_ERROR_DEFAULT_VIRTUALIZATION_INSTANCE = WIN32_ERROR.DNS_ERROR_DEFAULT_VIRTUALIZATION_INSTANCE;
pub const DNS_ERROR_ZONESCOPE_ALREADY_EXISTS = WIN32_ERROR.DNS_ERROR_ZONESCOPE_ALREADY_EXISTS;
pub const DNS_ERROR_ZONESCOPE_DOES_NOT_EXIST = WIN32_ERROR.DNS_ERROR_ZONESCOPE_DOES_NOT_EXIST;
pub const DNS_ERROR_DEFAULT_ZONESCOPE = WIN32_ERROR.DNS_ERROR_DEFAULT_ZONESCOPE;
pub const DNS_ERROR_INVALID_ZONESCOPE_NAME = WIN32_ERROR.DNS_ERROR_INVALID_ZONESCOPE_NAME;
pub const DNS_ERROR_NOT_ALLOWED_WITH_ZONESCOPES = WIN32_ERROR.DNS_ERROR_NOT_ALLOWED_WITH_ZONESCOPES;
pub const DNS_ERROR_LOAD_ZONESCOPE_FAILED = WIN32_ERROR.DNS_ERROR_LOAD_ZONESCOPE_FAILED;
pub const DNS_ERROR_ZONESCOPE_FILE_WRITEBACK_FAILED = WIN32_ERROR.DNS_ERROR_ZONESCOPE_FILE_WRITEBACK_FAILED;
pub const DNS_ERROR_INVALID_SCOPE_NAME = WIN32_ERROR.DNS_ERROR_INVALID_SCOPE_NAME;
pub const DNS_ERROR_SCOPE_DOES_NOT_EXIST = WIN32_ERROR.DNS_ERROR_SCOPE_DOES_NOT_EXIST;
pub const DNS_ERROR_DEFAULT_SCOPE = WIN32_ERROR.DNS_ERROR_DEFAULT_SCOPE;
pub const DNS_ERROR_INVALID_SCOPE_OPERATION = WIN32_ERROR.DNS_ERROR_INVALID_SCOPE_OPERATION;
pub const DNS_ERROR_SCOPE_LOCKED = WIN32_ERROR.DNS_ERROR_SCOPE_LOCKED;
pub const DNS_ERROR_SCOPE_ALREADY_EXISTS = WIN32_ERROR.DNS_ERROR_SCOPE_ALREADY_EXISTS;
pub const DNS_ERROR_POLICY_ALREADY_EXISTS = WIN32_ERROR.DNS_ERROR_POLICY_ALREADY_EXISTS;
pub const DNS_ERROR_POLICY_DOES_NOT_EXIST = WIN32_ERROR.DNS_ERROR_POLICY_DOES_NOT_EXIST;
pub const DNS_ERROR_POLICY_INVALID_CRITERIA = WIN32_ERROR.DNS_ERROR_POLICY_INVALID_CRITERIA;
pub const DNS_ERROR_POLICY_INVALID_SETTINGS = WIN32_ERROR.DNS_ERROR_POLICY_INVALID_SETTINGS;
pub const DNS_ERROR_CLIENT_SUBNET_IS_ACCESSED = WIN32_ERROR.DNS_ERROR_CLIENT_SUBNET_IS_ACCESSED;
pub const DNS_ERROR_CLIENT_SUBNET_DOES_NOT_EXIST = WIN32_ERROR.DNS_ERROR_CLIENT_SUBNET_DOES_NOT_EXIST;
pub const DNS_ERROR_CLIENT_SUBNET_ALREADY_EXISTS = WIN32_ERROR.DNS_ERROR_CLIENT_SUBNET_ALREADY_EXISTS;
pub const DNS_ERROR_SUBNET_DOES_NOT_EXIST = WIN32_ERROR.DNS_ERROR_SUBNET_DOES_NOT_EXIST;
pub const DNS_ERROR_SUBNET_ALREADY_EXISTS = WIN32_ERROR.DNS_ERROR_SUBNET_ALREADY_EXISTS;
pub const DNS_ERROR_POLICY_LOCKED = WIN32_ERROR.DNS_ERROR_POLICY_LOCKED;
pub const DNS_ERROR_POLICY_INVALID_WEIGHT = WIN32_ERROR.DNS_ERROR_POLICY_INVALID_WEIGHT;
pub const DNS_ERROR_POLICY_INVALID_NAME = WIN32_ERROR.DNS_ERROR_POLICY_INVALID_NAME;
pub const DNS_ERROR_POLICY_MISSING_CRITERIA = WIN32_ERROR.DNS_ERROR_POLICY_MISSING_CRITERIA;
pub const DNS_ERROR_INVALID_CLIENT_SUBNET_NAME = WIN32_ERROR.DNS_ERROR_INVALID_CLIENT_SUBNET_NAME;
pub const DNS_ERROR_POLICY_PROCESSING_ORDER_INVALID = WIN32_ERROR.DNS_ERROR_POLICY_PROCESSING_ORDER_INVALID;
pub const DNS_ERROR_POLICY_SCOPE_MISSING = WIN32_ERROR.DNS_ERROR_POLICY_SCOPE_MISSING;
pub const DNS_ERROR_POLICY_SCOPE_NOT_ALLOWED = WIN32_ERROR.DNS_ERROR_POLICY_SCOPE_NOT_ALLOWED;
pub const DNS_ERROR_SERVERSCOPE_IS_REFERENCED = WIN32_ERROR.DNS_ERROR_SERVERSCOPE_IS_REFERENCED;
pub const DNS_ERROR_ZONESCOPE_IS_REFERENCED = WIN32_ERROR.DNS_ERROR_ZONESCOPE_IS_REFERENCED;
pub const DNS_ERROR_POLICY_INVALID_CRITERIA_CLIENT_SUBNET = WIN32_ERROR.DNS_ERROR_POLICY_INVALID_CRITERIA_CLIENT_SUBNET;
pub const DNS_ERROR_POLICY_INVALID_CRITERIA_TRANSPORT_PROTOCOL = WIN32_ERROR.DNS_ERROR_POLICY_INVALID_CRITERIA_TRANSPORT_PROTOCOL;
pub const DNS_ERROR_POLICY_INVALID_CRITERIA_NETWORK_PROTOCOL = WIN32_ERROR.DNS_ERROR_POLICY_INVALID_CRITERIA_NETWORK_PROTOCOL;
pub const DNS_ERROR_POLICY_INVALID_CRITERIA_INTERFACE = WIN32_ERROR.DNS_ERROR_POLICY_INVALID_CRITERIA_INTERFACE;
pub const DNS_ERROR_POLICY_INVALID_CRITERIA_FQDN = WIN32_ERROR.DNS_ERROR_POLICY_INVALID_CRITERIA_FQDN;
pub const DNS_ERROR_POLICY_INVALID_CRITERIA_QUERY_TYPE = WIN32_ERROR.DNS_ERROR_POLICY_INVALID_CRITERIA_QUERY_TYPE;
pub const DNS_ERROR_POLICY_INVALID_CRITERIA_TIME_OF_DAY = WIN32_ERROR.DNS_ERROR_POLICY_INVALID_CRITERIA_TIME_OF_DAY;
pub const ERROR_IPSEC_QM_POLICY_EXISTS = WIN32_ERROR.ERROR_IPSEC_QM_POLICY_EXISTS;
pub const ERROR_IPSEC_QM_POLICY_NOT_FOUND = WIN32_ERROR.ERROR_IPSEC_QM_POLICY_NOT_FOUND;
pub const ERROR_IPSEC_QM_POLICY_IN_USE = WIN32_ERROR.ERROR_IPSEC_QM_POLICY_IN_USE;
pub const ERROR_IPSEC_MM_POLICY_EXISTS = WIN32_ERROR.ERROR_IPSEC_MM_POLICY_EXISTS;
pub const ERROR_IPSEC_MM_POLICY_NOT_FOUND = WIN32_ERROR.ERROR_IPSEC_MM_POLICY_NOT_FOUND;
pub const ERROR_IPSEC_MM_POLICY_IN_USE = WIN32_ERROR.ERROR_IPSEC_MM_POLICY_IN_USE;
pub const ERROR_IPSEC_MM_FILTER_EXISTS = WIN32_ERROR.ERROR_IPSEC_MM_FILTER_EXISTS;
pub const ERROR_IPSEC_MM_FILTER_NOT_FOUND = WIN32_ERROR.ERROR_IPSEC_MM_FILTER_NOT_FOUND;
pub const ERROR_IPSEC_TRANSPORT_FILTER_EXISTS = WIN32_ERROR.ERROR_IPSEC_TRANSPORT_FILTER_EXISTS;
pub const ERROR_IPSEC_TRANSPORT_FILTER_NOT_FOUND = WIN32_ERROR.ERROR_IPSEC_TRANSPORT_FILTER_NOT_FOUND;
pub const ERROR_IPSEC_MM_AUTH_EXISTS = WIN32_ERROR.ERROR_IPSEC_MM_AUTH_EXISTS;
pub const ERROR_IPSEC_MM_AUTH_NOT_FOUND = WIN32_ERROR.ERROR_IPSEC_MM_AUTH_NOT_FOUND;
pub const ERROR_IPSEC_MM_AUTH_IN_USE = WIN32_ERROR.ERROR_IPSEC_MM_AUTH_IN_USE;
pub const ERROR_IPSEC_DEFAULT_MM_POLICY_NOT_FOUND = WIN32_ERROR.ERROR_IPSEC_DEFAULT_MM_POLICY_NOT_FOUND;
pub const ERROR_IPSEC_DEFAULT_MM_AUTH_NOT_FOUND = WIN32_ERROR.ERROR_IPSEC_DEFAULT_MM_AUTH_NOT_FOUND;
pub const ERROR_IPSEC_DEFAULT_QM_POLICY_NOT_FOUND = WIN32_ERROR.ERROR_IPSEC_DEFAULT_QM_POLICY_NOT_FOUND;
pub const ERROR_IPSEC_TUNNEL_FILTER_EXISTS = WIN32_ERROR.ERROR_IPSEC_TUNNEL_FILTER_EXISTS;
pub const ERROR_IPSEC_TUNNEL_FILTER_NOT_FOUND = WIN32_ERROR.ERROR_IPSEC_TUNNEL_FILTER_NOT_FOUND;
pub const ERROR_IPSEC_MM_FILTER_PENDING_DELETION = WIN32_ERROR.ERROR_IPSEC_MM_FILTER_PENDING_DELETION;
pub const ERROR_IPSEC_TRANSPORT_FILTER_PENDING_DELETION = WIN32_ERROR.ERROR_IPSEC_TRANSPORT_FILTER_PENDING_DELETION;
pub const ERROR_IPSEC_TUNNEL_FILTER_PENDING_DELETION = WIN32_ERROR.ERROR_IPSEC_TUNNEL_FILTER_PENDING_DELETION;
pub const ERROR_IPSEC_MM_POLICY_PENDING_DELETION = WIN32_ERROR.ERROR_IPSEC_MM_POLICY_PENDING_DELETION;
pub const ERROR_IPSEC_MM_AUTH_PENDING_DELETION = WIN32_ERROR.ERROR_IPSEC_MM_AUTH_PENDING_DELETION;
pub const ERROR_IPSEC_QM_POLICY_PENDING_DELETION = WIN32_ERROR.ERROR_IPSEC_QM_POLICY_PENDING_DELETION;
pub const ERROR_IPSEC_IKE_NEG_STATUS_BEGIN = WIN32_ERROR.ERROR_IPSEC_IKE_NEG_STATUS_BEGIN;
pub const ERROR_IPSEC_IKE_AUTH_FAIL = WIN32_ERROR.ERROR_IPSEC_IKE_AUTH_FAIL;
pub const ERROR_IPSEC_IKE_ATTRIB_FAIL = WIN32_ERROR.ERROR_IPSEC_IKE_ATTRIB_FAIL;
pub const ERROR_IPSEC_IKE_NEGOTIATION_PENDING = WIN32_ERROR.ERROR_IPSEC_IKE_NEGOTIATION_PENDING;
pub const ERROR_IPSEC_IKE_GENERAL_PROCESSING_ERROR = WIN32_ERROR.ERROR_IPSEC_IKE_GENERAL_PROCESSING_ERROR;
pub const ERROR_IPSEC_IKE_TIMED_OUT = WIN32_ERROR.ERROR_IPSEC_IKE_TIMED_OUT;
pub const ERROR_IPSEC_IKE_NO_CERT = WIN32_ERROR.ERROR_IPSEC_IKE_NO_CERT;
pub const ERROR_IPSEC_IKE_SA_DELETED = WIN32_ERROR.ERROR_IPSEC_IKE_SA_DELETED;
pub const ERROR_IPSEC_IKE_SA_REAPED = WIN32_ERROR.ERROR_IPSEC_IKE_SA_REAPED;
pub const ERROR_IPSEC_IKE_MM_ACQUIRE_DROP = WIN32_ERROR.ERROR_IPSEC_IKE_MM_ACQUIRE_DROP;
pub const ERROR_IPSEC_IKE_QM_ACQUIRE_DROP = WIN32_ERROR.ERROR_IPSEC_IKE_QM_ACQUIRE_DROP;
pub const ERROR_IPSEC_IKE_QUEUE_DROP_MM = WIN32_ERROR.ERROR_IPSEC_IKE_QUEUE_DROP_MM;
pub const ERROR_IPSEC_IKE_QUEUE_DROP_NO_MM = WIN32_ERROR.ERROR_IPSEC_IKE_QUEUE_DROP_NO_MM;
pub const ERROR_IPSEC_IKE_DROP_NO_RESPONSE = WIN32_ERROR.ERROR_IPSEC_IKE_DROP_NO_RESPONSE;
pub const ERROR_IPSEC_IKE_MM_DELAY_DROP = WIN32_ERROR.ERROR_IPSEC_IKE_MM_DELAY_DROP;
pub const ERROR_IPSEC_IKE_QM_DELAY_DROP = WIN32_ERROR.ERROR_IPSEC_IKE_QM_DELAY_DROP;
pub const ERROR_IPSEC_IKE_ERROR = WIN32_ERROR.ERROR_IPSEC_IKE_ERROR;
pub const ERROR_IPSEC_IKE_CRL_FAILED = WIN32_ERROR.ERROR_IPSEC_IKE_CRL_FAILED;
pub const ERROR_IPSEC_IKE_INVALID_KEY_USAGE = WIN32_ERROR.ERROR_IPSEC_IKE_INVALID_KEY_USAGE;
pub const ERROR_IPSEC_IKE_INVALID_CERT_TYPE = WIN32_ERROR.ERROR_IPSEC_IKE_INVALID_CERT_TYPE;
pub const ERROR_IPSEC_IKE_NO_PRIVATE_KEY = WIN32_ERROR.ERROR_IPSEC_IKE_NO_PRIVATE_KEY;
pub const ERROR_IPSEC_IKE_SIMULTANEOUS_REKEY = WIN32_ERROR.ERROR_IPSEC_IKE_SIMULTANEOUS_REKEY;
pub const ERROR_IPSEC_IKE_DH_FAIL = WIN32_ERROR.ERROR_IPSEC_IKE_DH_FAIL;
pub const ERROR_IPSEC_IKE_CRITICAL_PAYLOAD_NOT_RECOGNIZED = WIN32_ERROR.ERROR_IPSEC_IKE_CRITICAL_PAYLOAD_NOT_RECOGNIZED;
pub const ERROR_IPSEC_IKE_INVALID_HEADER = WIN32_ERROR.ERROR_IPSEC_IKE_INVALID_HEADER;
pub const ERROR_IPSEC_IKE_NO_POLICY = WIN32_ERROR.ERROR_IPSEC_IKE_NO_POLICY;
pub const ERROR_IPSEC_IKE_INVALID_SIGNATURE = WIN32_ERROR.ERROR_IPSEC_IKE_INVALID_SIGNATURE;
pub const ERROR_IPSEC_IKE_KERBEROS_ERROR = WIN32_ERROR.ERROR_IPSEC_IKE_KERBEROS_ERROR;
pub const ERROR_IPSEC_IKE_NO_PUBLIC_KEY = WIN32_ERROR.ERROR_IPSEC_IKE_NO_PUBLIC_KEY;
pub const ERROR_IPSEC_IKE_PROCESS_ERR = WIN32_ERROR.ERROR_IPSEC_IKE_PROCESS_ERR;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_SA = WIN32_ERROR.ERROR_IPSEC_IKE_PROCESS_ERR_SA;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_PROP = WIN32_ERROR.ERROR_IPSEC_IKE_PROCESS_ERR_PROP;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_TRANS = WIN32_ERROR.ERROR_IPSEC_IKE_PROCESS_ERR_TRANS;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_KE = WIN32_ERROR.ERROR_IPSEC_IKE_PROCESS_ERR_KE;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_ID = WIN32_ERROR.ERROR_IPSEC_IKE_PROCESS_ERR_ID;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_CERT = WIN32_ERROR.ERROR_IPSEC_IKE_PROCESS_ERR_CERT;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_CERT_REQ = WIN32_ERROR.ERROR_IPSEC_IKE_PROCESS_ERR_CERT_REQ;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_HASH = WIN32_ERROR.ERROR_IPSEC_IKE_PROCESS_ERR_HASH;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_SIG = WIN32_ERROR.ERROR_IPSEC_IKE_PROCESS_ERR_SIG;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_NONCE = WIN32_ERROR.ERROR_IPSEC_IKE_PROCESS_ERR_NONCE;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_NOTIFY = WIN32_ERROR.ERROR_IPSEC_IKE_PROCESS_ERR_NOTIFY;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_DELETE = WIN32_ERROR.ERROR_IPSEC_IKE_PROCESS_ERR_DELETE;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_VENDOR = WIN32_ERROR.ERROR_IPSEC_IKE_PROCESS_ERR_VENDOR;
pub const ERROR_IPSEC_IKE_INVALID_PAYLOAD = WIN32_ERROR.ERROR_IPSEC_IKE_INVALID_PAYLOAD;
pub const ERROR_IPSEC_IKE_LOAD_SOFT_SA = WIN32_ERROR.ERROR_IPSEC_IKE_LOAD_SOFT_SA;
pub const ERROR_IPSEC_IKE_SOFT_SA_TORN_DOWN = WIN32_ERROR.ERROR_IPSEC_IKE_SOFT_SA_TORN_DOWN;
pub const ERROR_IPSEC_IKE_INVALID_COOKIE = WIN32_ERROR.ERROR_IPSEC_IKE_INVALID_COOKIE;
pub const ERROR_IPSEC_IKE_NO_PEER_CERT = WIN32_ERROR.ERROR_IPSEC_IKE_NO_PEER_CERT;
pub const ERROR_IPSEC_IKE_PEER_CRL_FAILED = WIN32_ERROR.ERROR_IPSEC_IKE_PEER_CRL_FAILED;
pub const ERROR_IPSEC_IKE_POLICY_CHANGE = WIN32_ERROR.ERROR_IPSEC_IKE_POLICY_CHANGE;
pub const ERROR_IPSEC_IKE_NO_MM_POLICY = WIN32_ERROR.ERROR_IPSEC_IKE_NO_MM_POLICY;
pub const ERROR_IPSEC_IKE_NOTCBPRIV = WIN32_ERROR.ERROR_IPSEC_IKE_NOTCBPRIV;
pub const ERROR_IPSEC_IKE_SECLOADFAIL = WIN32_ERROR.ERROR_IPSEC_IKE_SECLOADFAIL;
pub const ERROR_IPSEC_IKE_FAILSSPINIT = WIN32_ERROR.ERROR_IPSEC_IKE_FAILSSPINIT;
pub const ERROR_IPSEC_IKE_FAILQUERYSSP = WIN32_ERROR.ERROR_IPSEC_IKE_FAILQUERYSSP;
pub const ERROR_IPSEC_IKE_SRVACQFAIL = WIN32_ERROR.ERROR_IPSEC_IKE_SRVACQFAIL;
pub const ERROR_IPSEC_IKE_SRVQUERYCRED = WIN32_ERROR.ERROR_IPSEC_IKE_SRVQUERYCRED;
pub const ERROR_IPSEC_IKE_GETSPIFAIL = WIN32_ERROR.ERROR_IPSEC_IKE_GETSPIFAIL;
pub const ERROR_IPSEC_IKE_INVALID_FILTER = WIN32_ERROR.ERROR_IPSEC_IKE_INVALID_FILTER;
pub const ERROR_IPSEC_IKE_OUT_OF_MEMORY = WIN32_ERROR.ERROR_IPSEC_IKE_OUT_OF_MEMORY;
pub const ERROR_IPSEC_IKE_ADD_UPDATE_KEY_FAILED = WIN32_ERROR.ERROR_IPSEC_IKE_ADD_UPDATE_KEY_FAILED;
pub const ERROR_IPSEC_IKE_INVALID_POLICY = WIN32_ERROR.ERROR_IPSEC_IKE_INVALID_POLICY;
pub const ERROR_IPSEC_IKE_UNKNOWN_DOI = WIN32_ERROR.ERROR_IPSEC_IKE_UNKNOWN_DOI;
pub const ERROR_IPSEC_IKE_INVALID_SITUATION = WIN32_ERROR.ERROR_IPSEC_IKE_INVALID_SITUATION;
pub const ERROR_IPSEC_IKE_DH_FAILURE = WIN32_ERROR.ERROR_IPSEC_IKE_DH_FAILURE;
pub const ERROR_IPSEC_IKE_INVALID_GROUP = WIN32_ERROR.ERROR_IPSEC_IKE_INVALID_GROUP;
pub const ERROR_IPSEC_IKE_ENCRYPT = WIN32_ERROR.ERROR_IPSEC_IKE_ENCRYPT;
pub const ERROR_IPSEC_IKE_DECRYPT = WIN32_ERROR.ERROR_IPSEC_IKE_DECRYPT;
pub const ERROR_IPSEC_IKE_POLICY_MATCH = WIN32_ERROR.ERROR_IPSEC_IKE_POLICY_MATCH;
pub const ERROR_IPSEC_IKE_UNSUPPORTED_ID = WIN32_ERROR.ERROR_IPSEC_IKE_UNSUPPORTED_ID;
pub const ERROR_IPSEC_IKE_INVALID_HASH = WIN32_ERROR.ERROR_IPSEC_IKE_INVALID_HASH;
pub const ERROR_IPSEC_IKE_INVALID_HASH_ALG = WIN32_ERROR.ERROR_IPSEC_IKE_INVALID_HASH_ALG;
pub const ERROR_IPSEC_IKE_INVALID_HASH_SIZE = WIN32_ERROR.ERROR_IPSEC_IKE_INVALID_HASH_SIZE;
pub const ERROR_IPSEC_IKE_INVALID_ENCRYPT_ALG = WIN32_ERROR.ERROR_IPSEC_IKE_INVALID_ENCRYPT_ALG;
pub const ERROR_IPSEC_IKE_INVALID_AUTH_ALG = WIN32_ERROR.ERROR_IPSEC_IKE_INVALID_AUTH_ALG;
pub const ERROR_IPSEC_IKE_INVALID_SIG = WIN32_ERROR.ERROR_IPSEC_IKE_INVALID_SIG;
pub const ERROR_IPSEC_IKE_LOAD_FAILED = WIN32_ERROR.ERROR_IPSEC_IKE_LOAD_FAILED;
pub const ERROR_IPSEC_IKE_RPC_DELETE = WIN32_ERROR.ERROR_IPSEC_IKE_RPC_DELETE;
pub const ERROR_IPSEC_IKE_BENIGN_REINIT = WIN32_ERROR.ERROR_IPSEC_IKE_BENIGN_REINIT;
pub const ERROR_IPSEC_IKE_INVALID_RESPONDER_LIFETIME_NOTIFY = WIN32_ERROR.ERROR_IPSEC_IKE_INVALID_RESPONDER_LIFETIME_NOTIFY;
pub const ERROR_IPSEC_IKE_INVALID_MAJOR_VERSION = WIN32_ERROR.ERROR_IPSEC_IKE_INVALID_MAJOR_VERSION;
pub const ERROR_IPSEC_IKE_INVALID_CERT_KEYLEN = WIN32_ERROR.ERROR_IPSEC_IKE_INVALID_CERT_KEYLEN;
pub const ERROR_IPSEC_IKE_MM_LIMIT = WIN32_ERROR.ERROR_IPSEC_IKE_MM_LIMIT;
pub const ERROR_IPSEC_IKE_NEGOTIATION_DISABLED = WIN32_ERROR.ERROR_IPSEC_IKE_NEGOTIATION_DISABLED;
pub const ERROR_IPSEC_IKE_QM_LIMIT = WIN32_ERROR.ERROR_IPSEC_IKE_QM_LIMIT;
pub const ERROR_IPSEC_IKE_MM_EXPIRED = WIN32_ERROR.ERROR_IPSEC_IKE_MM_EXPIRED;
pub const ERROR_IPSEC_IKE_PEER_MM_ASSUMED_INVALID = WIN32_ERROR.ERROR_IPSEC_IKE_PEER_MM_ASSUMED_INVALID;
pub const ERROR_IPSEC_IKE_CERT_CHAIN_POLICY_MISMATCH = WIN32_ERROR.ERROR_IPSEC_IKE_CERT_CHAIN_POLICY_MISMATCH;
pub const ERROR_IPSEC_IKE_UNEXPECTED_MESSAGE_ID = WIN32_ERROR.ERROR_IPSEC_IKE_UNEXPECTED_MESSAGE_ID;
pub const ERROR_IPSEC_IKE_INVALID_AUTH_PAYLOAD = WIN32_ERROR.ERROR_IPSEC_IKE_INVALID_AUTH_PAYLOAD;
pub const ERROR_IPSEC_IKE_DOS_COOKIE_SENT = WIN32_ERROR.ERROR_IPSEC_IKE_DOS_COOKIE_SENT;
pub const ERROR_IPSEC_IKE_SHUTTING_DOWN = WIN32_ERROR.ERROR_IPSEC_IKE_SHUTTING_DOWN;
pub const ERROR_IPSEC_IKE_CGA_AUTH_FAILED = WIN32_ERROR.ERROR_IPSEC_IKE_CGA_AUTH_FAILED;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_NATOA = WIN32_ERROR.ERROR_IPSEC_IKE_PROCESS_ERR_NATOA;
pub const ERROR_IPSEC_IKE_INVALID_MM_FOR_QM = WIN32_ERROR.ERROR_IPSEC_IKE_INVALID_MM_FOR_QM;
pub const ERROR_IPSEC_IKE_QM_EXPIRED = WIN32_ERROR.ERROR_IPSEC_IKE_QM_EXPIRED;
pub const ERROR_IPSEC_IKE_TOO_MANY_FILTERS = WIN32_ERROR.ERROR_IPSEC_IKE_TOO_MANY_FILTERS;
pub const ERROR_IPSEC_IKE_NEG_STATUS_END = WIN32_ERROR.ERROR_IPSEC_IKE_NEG_STATUS_END;
pub const ERROR_IPSEC_IKE_KILL_DUMMY_NAP_TUNNEL = WIN32_ERROR.ERROR_IPSEC_IKE_KILL_DUMMY_NAP_TUNNEL;
pub const ERROR_IPSEC_IKE_INNER_IP_ASSIGNMENT_FAILURE = WIN32_ERROR.ERROR_IPSEC_IKE_INNER_IP_ASSIGNMENT_FAILURE;
pub const ERROR_IPSEC_IKE_REQUIRE_CP_PAYLOAD_MISSING = WIN32_ERROR.ERROR_IPSEC_IKE_REQUIRE_CP_PAYLOAD_MISSING;
pub const ERROR_IPSEC_KEY_MODULE_IMPERSONATION_NEGOTIATION_PENDING = WIN32_ERROR.ERROR_IPSEC_KEY_MODULE_IMPERSONATION_NEGOTIATION_PENDING;
pub const ERROR_IPSEC_IKE_COEXISTENCE_SUPPRESS = WIN32_ERROR.ERROR_IPSEC_IKE_COEXISTENCE_SUPPRESS;
pub const ERROR_IPSEC_IKE_RATELIMIT_DROP = WIN32_ERROR.ERROR_IPSEC_IKE_RATELIMIT_DROP;
pub const ERROR_IPSEC_IKE_PEER_DOESNT_SUPPORT_MOBIKE = WIN32_ERROR.ERROR_IPSEC_IKE_PEER_DOESNT_SUPPORT_MOBIKE;
pub const ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE = WIN32_ERROR.ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE;
pub const ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_FAILURE = WIN32_ERROR.ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_FAILURE;
pub const ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE_WITH_OPTIONAL_RETRY = WIN32_ERROR.ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE_WITH_OPTIONAL_RETRY;
pub const ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_AND_CERTMAP_FAILURE = WIN32_ERROR.ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_AND_CERTMAP_FAILURE;
pub const ERROR_IPSEC_IKE_NEG_STATUS_EXTENDED_END = WIN32_ERROR.ERROR_IPSEC_IKE_NEG_STATUS_EXTENDED_END;
pub const ERROR_IPSEC_BAD_SPI = WIN32_ERROR.ERROR_IPSEC_BAD_SPI;
pub const ERROR_IPSEC_SA_LIFETIME_EXPIRED = WIN32_ERROR.ERROR_IPSEC_SA_LIFETIME_EXPIRED;
pub const ERROR_IPSEC_WRONG_SA = WIN32_ERROR.ERROR_IPSEC_WRONG_SA;
pub const ERROR_IPSEC_REPLAY_CHECK_FAILED = WIN32_ERROR.ERROR_IPSEC_REPLAY_CHECK_FAILED;
pub const ERROR_IPSEC_INVALID_PACKET = WIN32_ERROR.ERROR_IPSEC_INVALID_PACKET;
pub const ERROR_IPSEC_INTEGRITY_CHECK_FAILED = WIN32_ERROR.ERROR_IPSEC_INTEGRITY_CHECK_FAILED;
pub const ERROR_IPSEC_CLEAR_TEXT_DROP = WIN32_ERROR.ERROR_IPSEC_CLEAR_TEXT_DROP;
pub const ERROR_IPSEC_AUTH_FIREWALL_DROP = WIN32_ERROR.ERROR_IPSEC_AUTH_FIREWALL_DROP;
pub const ERROR_IPSEC_THROTTLE_DROP = WIN32_ERROR.ERROR_IPSEC_THROTTLE_DROP;
pub const ERROR_IPSEC_DOSP_BLOCK = WIN32_ERROR.ERROR_IPSEC_DOSP_BLOCK;
pub const ERROR_IPSEC_DOSP_RECEIVED_MULTICAST = WIN32_ERROR.ERROR_IPSEC_DOSP_RECEIVED_MULTICAST;
pub const ERROR_IPSEC_DOSP_INVALID_PACKET = WIN32_ERROR.ERROR_IPSEC_DOSP_INVALID_PACKET;
pub const ERROR_IPSEC_DOSP_STATE_LOOKUP_FAILED = WIN32_ERROR.ERROR_IPSEC_DOSP_STATE_LOOKUP_FAILED;
pub const ERROR_IPSEC_DOSP_MAX_ENTRIES = WIN32_ERROR.ERROR_IPSEC_DOSP_MAX_ENTRIES;
pub const ERROR_IPSEC_DOSP_KEYMOD_NOT_ALLOWED = WIN32_ERROR.ERROR_IPSEC_DOSP_KEYMOD_NOT_ALLOWED;
pub const ERROR_IPSEC_DOSP_NOT_INSTALLED = WIN32_ERROR.ERROR_IPSEC_DOSP_NOT_INSTALLED;
pub const ERROR_IPSEC_DOSP_MAX_PER_IP_RATELIMIT_QUEUES = WIN32_ERROR.ERROR_IPSEC_DOSP_MAX_PER_IP_RATELIMIT_QUEUES;
pub const ERROR_SXS_SECTION_NOT_FOUND = WIN32_ERROR.ERROR_SXS_SECTION_NOT_FOUND;
pub const ERROR_SXS_CANT_GEN_ACTCTX = WIN32_ERROR.ERROR_SXS_CANT_GEN_ACTCTX;
pub const ERROR_SXS_INVALID_ACTCTXDATA_FORMAT = WIN32_ERROR.ERROR_SXS_INVALID_ACTCTXDATA_FORMAT;
pub const ERROR_SXS_ASSEMBLY_NOT_FOUND = WIN32_ERROR.ERROR_SXS_ASSEMBLY_NOT_FOUND;
pub const ERROR_SXS_MANIFEST_FORMAT_ERROR = WIN32_ERROR.ERROR_SXS_MANIFEST_FORMAT_ERROR;
pub const ERROR_SXS_MANIFEST_PARSE_ERROR = WIN32_ERROR.ERROR_SXS_MANIFEST_PARSE_ERROR;
pub const ERROR_SXS_ACTIVATION_CONTEXT_DISABLED = WIN32_ERROR.ERROR_SXS_ACTIVATION_CONTEXT_DISABLED;
pub const ERROR_SXS_KEY_NOT_FOUND = WIN32_ERROR.ERROR_SXS_KEY_NOT_FOUND;
pub const ERROR_SXS_VERSION_CONFLICT = WIN32_ERROR.ERROR_SXS_VERSION_CONFLICT;
pub const ERROR_SXS_WRONG_SECTION_TYPE = WIN32_ERROR.ERROR_SXS_WRONG_SECTION_TYPE;
pub const ERROR_SXS_THREAD_QUERIES_DISABLED = WIN32_ERROR.ERROR_SXS_THREAD_QUERIES_DISABLED;
pub const ERROR_SXS_PROCESS_DEFAULT_ALREADY_SET = WIN32_ERROR.ERROR_SXS_PROCESS_DEFAULT_ALREADY_SET;
pub const ERROR_SXS_UNKNOWN_ENCODING_GROUP = WIN32_ERROR.ERROR_SXS_UNKNOWN_ENCODING_GROUP;
pub const ERROR_SXS_UNKNOWN_ENCODING = WIN32_ERROR.ERROR_SXS_UNKNOWN_ENCODING;
pub const ERROR_SXS_INVALID_XML_NAMESPACE_URI = WIN32_ERROR.ERROR_SXS_INVALID_XML_NAMESPACE_URI;
pub const ERROR_SXS_ROOT_MANIFEST_DEPENDENCY_NOT_INSTALLED = WIN32_ERROR.ERROR_SXS_ROOT_MANIFEST_DEPENDENCY_NOT_INSTALLED;
pub const ERROR_SXS_LEAF_MANIFEST_DEPENDENCY_NOT_INSTALLED = WIN32_ERROR.ERROR_SXS_LEAF_MANIFEST_DEPENDENCY_NOT_INSTALLED;
pub const ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE = WIN32_ERROR.ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE;
pub const ERROR_SXS_MANIFEST_MISSING_REQUIRED_DEFAULT_NAMESPACE = WIN32_ERROR.ERROR_SXS_MANIFEST_MISSING_REQUIRED_DEFAULT_NAMESPACE;
pub const ERROR_SXS_MANIFEST_INVALID_REQUIRED_DEFAULT_NAMESPACE = WIN32_ERROR.ERROR_SXS_MANIFEST_INVALID_REQUIRED_DEFAULT_NAMESPACE;
pub const ERROR_SXS_PRIVATE_MANIFEST_CROSS_PATH_WITH_REPARSE_POINT = WIN32_ERROR.ERROR_SXS_PRIVATE_MANIFEST_CROSS_PATH_WITH_REPARSE_POINT;
pub const ERROR_SXS_DUPLICATE_DLL_NAME = WIN32_ERROR.ERROR_SXS_DUPLICATE_DLL_NAME;
pub const ERROR_SXS_DUPLICATE_WINDOWCLASS_NAME = WIN32_ERROR.ERROR_SXS_DUPLICATE_WINDOWCLASS_NAME;
pub const ERROR_SXS_DUPLICATE_CLSID = WIN32_ERROR.ERROR_SXS_DUPLICATE_CLSID;
pub const ERROR_SXS_DUPLICATE_IID = WIN32_ERROR.ERROR_SXS_DUPLICATE_IID;
pub const ERROR_SXS_DUPLICATE_TLBID = WIN32_ERROR.ERROR_SXS_DUPLICATE_TLBID;
pub const ERROR_SXS_DUPLICATE_PROGID = WIN32_ERROR.ERROR_SXS_DUPLICATE_PROGID;
pub const ERROR_SXS_DUPLICATE_ASSEMBLY_NAME = WIN32_ERROR.ERROR_SXS_DUPLICATE_ASSEMBLY_NAME;
pub const ERROR_SXS_FILE_HASH_MISMATCH = WIN32_ERROR.ERROR_SXS_FILE_HASH_MISMATCH;
pub const ERROR_SXS_POLICY_PARSE_ERROR = WIN32_ERROR.ERROR_SXS_POLICY_PARSE_ERROR;
pub const ERROR_SXS_XML_E_MISSINGQUOTE = WIN32_ERROR.ERROR_SXS_XML_E_MISSINGQUOTE;
pub const ERROR_SXS_XML_E_COMMENTSYNTAX = WIN32_ERROR.ERROR_SXS_XML_E_COMMENTSYNTAX;
pub const ERROR_SXS_XML_E_BADSTARTNAMECHAR = WIN32_ERROR.ERROR_SXS_XML_E_BADSTARTNAMECHAR;
pub const ERROR_SXS_XML_E_BADNAMECHAR = WIN32_ERROR.ERROR_SXS_XML_E_BADNAMECHAR;
pub const ERROR_SXS_XML_E_BADCHARINSTRING = WIN32_ERROR.ERROR_SXS_XML_E_BADCHARINSTRING;
pub const ERROR_SXS_XML_E_XMLDECLSYNTAX = WIN32_ERROR.ERROR_SXS_XML_E_XMLDECLSYNTAX;
pub const ERROR_SXS_XML_E_BADCHARDATA = WIN32_ERROR.ERROR_SXS_XML_E_BADCHARDATA;
pub const ERROR_SXS_XML_E_MISSINGWHITESPACE = WIN32_ERROR.ERROR_SXS_XML_E_MISSINGWHITESPACE;
pub const ERROR_SXS_XML_E_EXPECTINGTAGEND = WIN32_ERROR.ERROR_SXS_XML_E_EXPECTINGTAGEND;
pub const ERROR_SXS_XML_E_MISSINGSEMICOLON = WIN32_ERROR.ERROR_SXS_XML_E_MISSINGSEMICOLON;
pub const ERROR_SXS_XML_E_UNBALANCEDPAREN = WIN32_ERROR.ERROR_SXS_XML_E_UNBALANCEDPAREN;
pub const ERROR_SXS_XML_E_INTERNALERROR = WIN32_ERROR.ERROR_SXS_XML_E_INTERNALERROR;
pub const ERROR_SXS_XML_E_UNEXPECTED_WHITESPACE = WIN32_ERROR.ERROR_SXS_XML_E_UNEXPECTED_WHITESPACE;
pub const ERROR_SXS_XML_E_INCOMPLETE_ENCODING = WIN32_ERROR.ERROR_SXS_XML_E_INCOMPLETE_ENCODING;
pub const ERROR_SXS_XML_E_MISSING_PAREN = WIN32_ERROR.ERROR_SXS_XML_E_MISSING_PAREN;
pub const ERROR_SXS_XML_E_EXPECTINGCLOSEQUOTE = WIN32_ERROR.ERROR_SXS_XML_E_EXPECTINGCLOSEQUOTE;
pub const ERROR_SXS_XML_E_MULTIPLE_COLONS = WIN32_ERROR.ERROR_SXS_XML_E_MULTIPLE_COLONS;
pub const ERROR_SXS_XML_E_INVALID_DECIMAL = WIN32_ERROR.ERROR_SXS_XML_E_INVALID_DECIMAL;
pub const ERROR_SXS_XML_E_INVALID_HEXIDECIMAL = WIN32_ERROR.ERROR_SXS_XML_E_INVALID_HEXIDECIMAL;
pub const ERROR_SXS_XML_E_INVALID_UNICODE = WIN32_ERROR.ERROR_SXS_XML_E_INVALID_UNICODE;
pub const ERROR_SXS_XML_E_WHITESPACEORQUESTIONMARK = WIN32_ERROR.ERROR_SXS_XML_E_WHITESPACEORQUESTIONMARK;
pub const ERROR_SXS_XML_E_UNEXPECTEDENDTAG = WIN32_ERROR.ERROR_SXS_XML_E_UNEXPECTEDENDTAG;
pub const ERROR_SXS_XML_E_UNCLOSEDTAG = WIN32_ERROR.ERROR_SXS_XML_E_UNCLOSEDTAG;
pub const ERROR_SXS_XML_E_DUPLICATEATTRIBUTE = WIN32_ERROR.ERROR_SXS_XML_E_DUPLICATEATTRIBUTE;
pub const ERROR_SXS_XML_E_MULTIPLEROOTS = WIN32_ERROR.ERROR_SXS_XML_E_MULTIPLEROOTS;
pub const ERROR_SXS_XML_E_INVALIDATROOTLEVEL = WIN32_ERROR.ERROR_SXS_XML_E_INVALIDATROOTLEVEL;
pub const ERROR_SXS_XML_E_BADXMLDECL = WIN32_ERROR.ERROR_SXS_XML_E_BADXMLDECL;
pub const ERROR_SXS_XML_E_MISSINGROOT = WIN32_ERROR.ERROR_SXS_XML_E_MISSINGROOT;
pub const ERROR_SXS_XML_E_UNEXPECTEDEOF = WIN32_ERROR.ERROR_SXS_XML_E_UNEXPECTEDEOF;
pub const ERROR_SXS_XML_E_BADPEREFINSUBSET = WIN32_ERROR.ERROR_SXS_XML_E_BADPEREFINSUBSET;
pub const ERROR_SXS_XML_E_UNCLOSEDSTARTTAG = WIN32_ERROR.ERROR_SXS_XML_E_UNCLOSEDSTARTTAG;
pub const ERROR_SXS_XML_E_UNCLOSEDENDTAG = WIN32_ERROR.ERROR_SXS_XML_E_UNCLOSEDENDTAG;
pub const ERROR_SXS_XML_E_UNCLOSEDSTRING = WIN32_ERROR.ERROR_SXS_XML_E_UNCLOSEDSTRING;
pub const ERROR_SXS_XML_E_UNCLOSEDCOMMENT = WIN32_ERROR.ERROR_SXS_XML_E_UNCLOSEDCOMMENT;
pub const ERROR_SXS_XML_E_UNCLOSEDDECL = WIN32_ERROR.ERROR_SXS_XML_E_UNCLOSEDDECL;
pub const ERROR_SXS_XML_E_UNCLOSEDCDATA = WIN32_ERROR.ERROR_SXS_XML_E_UNCLOSEDCDATA;
pub const ERROR_SXS_XML_E_RESERVEDNAMESPACE = WIN32_ERROR.ERROR_SXS_XML_E_RESERVEDNAMESPACE;
pub const ERROR_SXS_XML_E_INVALIDENCODING = WIN32_ERROR.ERROR_SXS_XML_E_INVALIDENCODING;
pub const ERROR_SXS_XML_E_INVALIDSWITCH = WIN32_ERROR.ERROR_SXS_XML_E_INVALIDSWITCH;
pub const ERROR_SXS_XML_E_BADXMLCASE = WIN32_ERROR.ERROR_SXS_XML_E_BADXMLCASE;
pub const ERROR_SXS_XML_E_INVALID_STANDALONE = WIN32_ERROR.ERROR_SXS_XML_E_INVALID_STANDALONE;
pub const ERROR_SXS_XML_E_UNEXPECTED_STANDALONE = WIN32_ERROR.ERROR_SXS_XML_E_UNEXPECTED_STANDALONE;
pub const ERROR_SXS_XML_E_INVALID_VERSION = WIN32_ERROR.ERROR_SXS_XML_E_INVALID_VERSION;
pub const ERROR_SXS_XML_E_MISSINGEQUALS = WIN32_ERROR.ERROR_SXS_XML_E_MISSINGEQUALS;
pub const ERROR_SXS_PROTECTION_RECOVERY_FAILED = WIN32_ERROR.ERROR_SXS_PROTECTION_RECOVERY_FAILED;
pub const ERROR_SXS_PROTECTION_PUBLIC_KEY_TOO_SHORT = WIN32_ERROR.ERROR_SXS_PROTECTION_PUBLIC_KEY_TOO_SHORT;
pub const ERROR_SXS_PROTECTION_CATALOG_NOT_VALID = WIN32_ERROR.ERROR_SXS_PROTECTION_CATALOG_NOT_VALID;
pub const ERROR_SXS_UNTRANSLATABLE_HRESULT = WIN32_ERROR.ERROR_SXS_UNTRANSLATABLE_HRESULT;
pub const ERROR_SXS_PROTECTION_CATALOG_FILE_MISSING = WIN32_ERROR.ERROR_SXS_PROTECTION_CATALOG_FILE_MISSING;
pub const ERROR_SXS_MISSING_ASSEMBLY_IDENTITY_ATTRIBUTE = WIN32_ERROR.ERROR_SXS_MISSING_ASSEMBLY_IDENTITY_ATTRIBUTE;
pub const ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE_NAME = WIN32_ERROR.ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE_NAME;
pub const ERROR_SXS_ASSEMBLY_MISSING = WIN32_ERROR.ERROR_SXS_ASSEMBLY_MISSING;
pub const ERROR_SXS_CORRUPT_ACTIVATION_STACK = WIN32_ERROR.ERROR_SXS_CORRUPT_ACTIVATION_STACK;
pub const ERROR_SXS_CORRUPTION = WIN32_ERROR.ERROR_SXS_CORRUPTION;
pub const ERROR_SXS_EARLY_DEACTIVATION = WIN32_ERROR.ERROR_SXS_EARLY_DEACTIVATION;
pub const ERROR_SXS_INVALID_DEACTIVATION = WIN32_ERROR.ERROR_SXS_INVALID_DEACTIVATION;
pub const ERROR_SXS_MULTIPLE_DEACTIVATION = WIN32_ERROR.ERROR_SXS_MULTIPLE_DEACTIVATION;
pub const ERROR_SXS_PROCESS_TERMINATION_REQUESTED = WIN32_ERROR.ERROR_SXS_PROCESS_TERMINATION_REQUESTED;
pub const ERROR_SXS_RELEASE_ACTIVATION_CONTEXT = WIN32_ERROR.ERROR_SXS_RELEASE_ACTIVATION_CONTEXT;
pub const ERROR_SXS_SYSTEM_DEFAULT_ACTIVATION_CONTEXT_EMPTY = WIN32_ERROR.ERROR_SXS_SYSTEM_DEFAULT_ACTIVATION_CONTEXT_EMPTY;
pub const ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_VALUE = WIN32_ERROR.ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_VALUE;
pub const ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_NAME = WIN32_ERROR.ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_NAME;
pub const ERROR_SXS_IDENTITY_DUPLICATE_ATTRIBUTE = WIN32_ERROR.ERROR_SXS_IDENTITY_DUPLICATE_ATTRIBUTE;
pub const ERROR_SXS_IDENTITY_PARSE_ERROR = WIN32_ERROR.ERROR_SXS_IDENTITY_PARSE_ERROR;
pub const ERROR_MALFORMED_SUBSTITUTION_STRING = WIN32_ERROR.ERROR_MALFORMED_SUBSTITUTION_STRING;
pub const ERROR_SXS_INCORRECT_PUBLIC_KEY_TOKEN = WIN32_ERROR.ERROR_SXS_INCORRECT_PUBLIC_KEY_TOKEN;
pub const ERROR_UNMAPPED_SUBSTITUTION_STRING = WIN32_ERROR.ERROR_UNMAPPED_SUBSTITUTION_STRING;
pub const ERROR_SXS_ASSEMBLY_NOT_LOCKED = WIN32_ERROR.ERROR_SXS_ASSEMBLY_NOT_LOCKED;
pub const ERROR_SXS_COMPONENT_STORE_CORRUPT = WIN32_ERROR.ERROR_SXS_COMPONENT_STORE_CORRUPT;
pub const ERROR_ADVANCED_INSTALLER_FAILED = WIN32_ERROR.ERROR_ADVANCED_INSTALLER_FAILED;
pub const ERROR_XML_ENCODING_MISMATCH = WIN32_ERROR.ERROR_XML_ENCODING_MISMATCH;
pub const ERROR_SXS_MANIFEST_IDENTITY_SAME_BUT_CONTENTS_DIFFERENT = WIN32_ERROR.ERROR_SXS_MANIFEST_IDENTITY_SAME_BUT_CONTENTS_DIFFERENT;
pub const ERROR_SXS_IDENTITIES_DIFFERENT = WIN32_ERROR.ERROR_SXS_IDENTITIES_DIFFERENT;
pub const ERROR_SXS_ASSEMBLY_IS_NOT_A_DEPLOYMENT = WIN32_ERROR.ERROR_SXS_ASSEMBLY_IS_NOT_A_DEPLOYMENT;
pub const ERROR_SXS_FILE_NOT_PART_OF_ASSEMBLY = WIN32_ERROR.ERROR_SXS_FILE_NOT_PART_OF_ASSEMBLY;
pub const ERROR_SXS_MANIFEST_TOO_BIG = WIN32_ERROR.ERROR_SXS_MANIFEST_TOO_BIG;
pub const ERROR_SXS_SETTING_NOT_REGISTERED = WIN32_ERROR.ERROR_SXS_SETTING_NOT_REGISTERED;
pub const ERROR_SXS_TRANSACTION_CLOSURE_INCOMPLETE = WIN32_ERROR.ERROR_SXS_TRANSACTION_CLOSURE_INCOMPLETE;
pub const ERROR_SMI_PRIMITIVE_INSTALLER_FAILED = WIN32_ERROR.ERROR_SMI_PRIMITIVE_INSTALLER_FAILED;
pub const ERROR_GENERIC_COMMAND_FAILED = WIN32_ERROR.ERROR_GENERIC_COMMAND_FAILED;
pub const ERROR_SXS_FILE_HASH_MISSING = WIN32_ERROR.ERROR_SXS_FILE_HASH_MISSING;
pub const ERROR_SXS_DUPLICATE_ACTIVATABLE_CLASS = WIN32_ERROR.ERROR_SXS_DUPLICATE_ACTIVATABLE_CLASS;
pub const ERROR_EVT_INVALID_CHANNEL_PATH = WIN32_ERROR.ERROR_EVT_INVALID_CHANNEL_PATH;
pub const ERROR_EVT_INVALID_QUERY = WIN32_ERROR.ERROR_EVT_INVALID_QUERY;
pub const ERROR_EVT_PUBLISHER_METADATA_NOT_FOUND = WIN32_ERROR.ERROR_EVT_PUBLISHER_METADATA_NOT_FOUND;
pub const ERROR_EVT_EVENT_TEMPLATE_NOT_FOUND = WIN32_ERROR.ERROR_EVT_EVENT_TEMPLATE_NOT_FOUND;
pub const ERROR_EVT_INVALID_PUBLISHER_NAME = WIN32_ERROR.ERROR_EVT_INVALID_PUBLISHER_NAME;
pub const ERROR_EVT_INVALID_EVENT_DATA = WIN32_ERROR.ERROR_EVT_INVALID_EVENT_DATA;
pub const ERROR_EVT_CHANNEL_NOT_FOUND = WIN32_ERROR.ERROR_EVT_CHANNEL_NOT_FOUND;
pub const ERROR_EVT_MALFORMED_XML_TEXT = WIN32_ERROR.ERROR_EVT_MALFORMED_XML_TEXT;
pub const ERROR_EVT_SUBSCRIPTION_TO_DIRECT_CHANNEL = WIN32_ERROR.ERROR_EVT_SUBSCRIPTION_TO_DIRECT_CHANNEL;
pub const ERROR_EVT_CONFIGURATION_ERROR = WIN32_ERROR.ERROR_EVT_CONFIGURATION_ERROR;
pub const ERROR_EVT_QUERY_RESULT_STALE = WIN32_ERROR.ERROR_EVT_QUERY_RESULT_STALE;
pub const ERROR_EVT_QUERY_RESULT_INVALID_POSITION = WIN32_ERROR.ERROR_EVT_QUERY_RESULT_INVALID_POSITION;
pub const ERROR_EVT_NON_VALIDATING_MSXML = WIN32_ERROR.ERROR_EVT_NON_VALIDATING_MSXML;
pub const ERROR_EVT_FILTER_ALREADYSCOPED = WIN32_ERROR.ERROR_EVT_FILTER_ALREADYSCOPED;
pub const ERROR_EVT_FILTER_NOTELTSET = WIN32_ERROR.ERROR_EVT_FILTER_NOTELTSET;
pub const ERROR_EVT_FILTER_INVARG = WIN32_ERROR.ERROR_EVT_FILTER_INVARG;
pub const ERROR_EVT_FILTER_INVTEST = WIN32_ERROR.ERROR_EVT_FILTER_INVTEST;
pub const ERROR_EVT_FILTER_INVTYPE = WIN32_ERROR.ERROR_EVT_FILTER_INVTYPE;
pub const ERROR_EVT_FILTER_PARSEERR = WIN32_ERROR.ERROR_EVT_FILTER_PARSEERR;
pub const ERROR_EVT_FILTER_UNSUPPORTEDOP = WIN32_ERROR.ERROR_EVT_FILTER_UNSUPPORTEDOP;
pub const ERROR_EVT_FILTER_UNEXPECTEDTOKEN = WIN32_ERROR.ERROR_EVT_FILTER_UNEXPECTEDTOKEN;
pub const ERROR_EVT_INVALID_OPERATION_OVER_ENABLED_DIRECT_CHANNEL = WIN32_ERROR.ERROR_EVT_INVALID_OPERATION_OVER_ENABLED_DIRECT_CHANNEL;
pub const ERROR_EVT_INVALID_CHANNEL_PROPERTY_VALUE = WIN32_ERROR.ERROR_EVT_INVALID_CHANNEL_PROPERTY_VALUE;
pub const ERROR_EVT_INVALID_PUBLISHER_PROPERTY_VALUE = WIN32_ERROR.ERROR_EVT_INVALID_PUBLISHER_PROPERTY_VALUE;
pub const ERROR_EVT_CHANNEL_CANNOT_ACTIVATE = WIN32_ERROR.ERROR_EVT_CHANNEL_CANNOT_ACTIVATE;
pub const ERROR_EVT_FILTER_TOO_COMPLEX = WIN32_ERROR.ERROR_EVT_FILTER_TOO_COMPLEX;
pub const ERROR_EVT_MESSAGE_NOT_FOUND = WIN32_ERROR.ERROR_EVT_MESSAGE_NOT_FOUND;
pub const ERROR_EVT_MESSAGE_ID_NOT_FOUND = WIN32_ERROR.ERROR_EVT_MESSAGE_ID_NOT_FOUND;
pub const ERROR_EVT_UNRESOLVED_VALUE_INSERT = WIN32_ERROR.ERROR_EVT_UNRESOLVED_VALUE_INSERT;
pub const ERROR_EVT_UNRESOLVED_PARAMETER_INSERT = WIN32_ERROR.ERROR_EVT_UNRESOLVED_PARAMETER_INSERT;
pub const ERROR_EVT_MAX_INSERTS_REACHED = WIN32_ERROR.ERROR_EVT_MAX_INSERTS_REACHED;
pub const ERROR_EVT_EVENT_DEFINITION_NOT_FOUND = WIN32_ERROR.ERROR_EVT_EVENT_DEFINITION_NOT_FOUND;
pub const ERROR_EVT_MESSAGE_LOCALE_NOT_FOUND = WIN32_ERROR.ERROR_EVT_MESSAGE_LOCALE_NOT_FOUND;
pub const ERROR_EVT_VERSION_TOO_OLD = WIN32_ERROR.ERROR_EVT_VERSION_TOO_OLD;
pub const ERROR_EVT_VERSION_TOO_NEW = WIN32_ERROR.ERROR_EVT_VERSION_TOO_NEW;
pub const ERROR_EVT_CANNOT_OPEN_CHANNEL_OF_QUERY = WIN32_ERROR.ERROR_EVT_CANNOT_OPEN_CHANNEL_OF_QUERY;
pub const ERROR_EVT_PUBLISHER_DISABLED = WIN32_ERROR.ERROR_EVT_PUBLISHER_DISABLED;
pub const ERROR_EVT_FILTER_OUT_OF_RANGE = WIN32_ERROR.ERROR_EVT_FILTER_OUT_OF_RANGE;
pub const ERROR_EC_SUBSCRIPTION_CANNOT_ACTIVATE = WIN32_ERROR.ERROR_EC_SUBSCRIPTION_CANNOT_ACTIVATE;
pub const ERROR_EC_LOG_DISABLED = WIN32_ERROR.ERROR_EC_LOG_DISABLED;
pub const ERROR_EC_CIRCULAR_FORWARDING = WIN32_ERROR.ERROR_EC_CIRCULAR_FORWARDING;
pub const ERROR_EC_CREDSTORE_FULL = WIN32_ERROR.ERROR_EC_CREDSTORE_FULL;
pub const ERROR_EC_CRED_NOT_FOUND = WIN32_ERROR.ERROR_EC_CRED_NOT_FOUND;
pub const ERROR_EC_NO_ACTIVE_CHANNEL = WIN32_ERROR.ERROR_EC_NO_ACTIVE_CHANNEL;
pub const ERROR_MUI_FILE_NOT_FOUND = WIN32_ERROR.ERROR_MUI_FILE_NOT_FOUND;
pub const ERROR_MUI_INVALID_FILE = WIN32_ERROR.ERROR_MUI_INVALID_FILE;
pub const ERROR_MUI_INVALID_RC_CONFIG = WIN32_ERROR.ERROR_MUI_INVALID_RC_CONFIG;
pub const ERROR_MUI_INVALID_LOCALE_NAME = WIN32_ERROR.ERROR_MUI_INVALID_LOCALE_NAME;
pub const ERROR_MUI_INVALID_ULTIMATEFALLBACK_NAME = WIN32_ERROR.ERROR_MUI_INVALID_ULTIMATEFALLBACK_NAME;
pub const ERROR_MUI_FILE_NOT_LOADED = WIN32_ERROR.ERROR_MUI_FILE_NOT_LOADED;
pub const ERROR_RESOURCE_ENUM_USER_STOP = WIN32_ERROR.ERROR_RESOURCE_ENUM_USER_STOP;
pub const ERROR_MUI_INTLSETTINGS_UILANG_NOT_INSTALLED = WIN32_ERROR.ERROR_MUI_INTLSETTINGS_UILANG_NOT_INSTALLED;
pub const ERROR_MUI_INTLSETTINGS_INVALID_LOCALE_NAME = WIN32_ERROR.ERROR_MUI_INTLSETTINGS_INVALID_LOCALE_NAME;
pub const ERROR_MRM_RUNTIME_NO_DEFAULT_OR_NEUTRAL_RESOURCE = WIN32_ERROR.ERROR_MRM_RUNTIME_NO_DEFAULT_OR_NEUTRAL_RESOURCE;
pub const ERROR_MRM_INVALID_PRICONFIG = WIN32_ERROR.ERROR_MRM_INVALID_PRICONFIG;
pub const ERROR_MRM_INVALID_FILE_TYPE = WIN32_ERROR.ERROR_MRM_INVALID_FILE_TYPE;
pub const ERROR_MRM_UNKNOWN_QUALIFIER = WIN32_ERROR.ERROR_MRM_UNKNOWN_QUALIFIER;
pub const ERROR_MRM_INVALID_QUALIFIER_VALUE = WIN32_ERROR.ERROR_MRM_INVALID_QUALIFIER_VALUE;
pub const ERROR_MRM_NO_CANDIDATE = WIN32_ERROR.ERROR_MRM_NO_CANDIDATE;
pub const ERROR_MRM_NO_MATCH_OR_DEFAULT_CANDIDATE = WIN32_ERROR.ERROR_MRM_NO_MATCH_OR_DEFAULT_CANDIDATE;
pub const ERROR_MRM_RESOURCE_TYPE_MISMATCH = WIN32_ERROR.ERROR_MRM_RESOURCE_TYPE_MISMATCH;
pub const ERROR_MRM_DUPLICATE_MAP_NAME = WIN32_ERROR.ERROR_MRM_DUPLICATE_MAP_NAME;
pub const ERROR_MRM_DUPLICATE_ENTRY = WIN32_ERROR.ERROR_MRM_DUPLICATE_ENTRY;
pub const ERROR_MRM_INVALID_RESOURCE_IDENTIFIER = WIN32_ERROR.ERROR_MRM_INVALID_RESOURCE_IDENTIFIER;
pub const ERROR_MRM_FILEPATH_TOO_LONG = WIN32_ERROR.ERROR_MRM_FILEPATH_TOO_LONG;
pub const ERROR_MRM_UNSUPPORTED_DIRECTORY_TYPE = WIN32_ERROR.ERROR_MRM_UNSUPPORTED_DIRECTORY_TYPE;
pub const ERROR_MRM_INVALID_PRI_FILE = WIN32_ERROR.ERROR_MRM_INVALID_PRI_FILE;
pub const ERROR_MRM_NAMED_RESOURCE_NOT_FOUND = WIN32_ERROR.ERROR_MRM_NAMED_RESOURCE_NOT_FOUND;
pub const ERROR_MRM_MAP_NOT_FOUND = WIN32_ERROR.ERROR_MRM_MAP_NOT_FOUND;
pub const ERROR_MRM_UNSUPPORTED_PROFILE_TYPE = WIN32_ERROR.ERROR_MRM_UNSUPPORTED_PROFILE_TYPE;
pub const ERROR_MRM_INVALID_QUALIFIER_OPERATOR = WIN32_ERROR.ERROR_MRM_INVALID_QUALIFIER_OPERATOR;
pub const ERROR_MRM_INDETERMINATE_QUALIFIER_VALUE = WIN32_ERROR.ERROR_MRM_INDETERMINATE_QUALIFIER_VALUE;
pub const ERROR_MRM_AUTOMERGE_ENABLED = WIN32_ERROR.ERROR_MRM_AUTOMERGE_ENABLED;
pub const ERROR_MRM_TOO_MANY_RESOURCES = WIN32_ERROR.ERROR_MRM_TOO_MANY_RESOURCES;
pub const ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_MERGE = WIN32_ERROR.ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_MERGE;
pub const ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_LOAD_UNLOAD_PRI_FILE = WIN32_ERROR.ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_LOAD_UNLOAD_PRI_FILE;
pub const ERROR_MRM_NO_CURRENT_VIEW_ON_THREAD = WIN32_ERROR.ERROR_MRM_NO_CURRENT_VIEW_ON_THREAD;
pub const ERROR_DIFFERENT_PROFILE_RESOURCE_MANAGER_EXIST = WIN32_ERROR.ERROR_DIFFERENT_PROFILE_RESOURCE_MANAGER_EXIST;
pub const ERROR_OPERATION_NOT_ALLOWED_FROM_SYSTEM_COMPONENT = WIN32_ERROR.ERROR_OPERATION_NOT_ALLOWED_FROM_SYSTEM_COMPONENT;
pub const ERROR_MRM_DIRECT_REF_TO_NON_DEFAULT_RESOURCE = WIN32_ERROR.ERROR_MRM_DIRECT_REF_TO_NON_DEFAULT_RESOURCE;
pub const ERROR_MRM_GENERATION_COUNT_MISMATCH = WIN32_ERROR.ERROR_MRM_GENERATION_COUNT_MISMATCH;
pub const ERROR_PRI_MERGE_VERSION_MISMATCH = WIN32_ERROR.ERROR_PRI_MERGE_VERSION_MISMATCH;
pub const ERROR_PRI_MERGE_MISSING_SCHEMA = WIN32_ERROR.ERROR_PRI_MERGE_MISSING_SCHEMA;
pub const ERROR_PRI_MERGE_LOAD_FILE_FAILED = WIN32_ERROR.ERROR_PRI_MERGE_LOAD_FILE_FAILED;
pub const ERROR_PRI_MERGE_ADD_FILE_FAILED = WIN32_ERROR.ERROR_PRI_MERGE_ADD_FILE_FAILED;
pub const ERROR_PRI_MERGE_WRITE_FILE_FAILED = WIN32_ERROR.ERROR_PRI_MERGE_WRITE_FILE_FAILED;
pub const ERROR_PRI_MERGE_MULTIPLE_PACKAGE_FAMILIES_NOT_ALLOWED = WIN32_ERROR.ERROR_PRI_MERGE_MULTIPLE_PACKAGE_FAMILIES_NOT_ALLOWED;
pub const ERROR_PRI_MERGE_MULTIPLE_MAIN_PACKAGES_NOT_ALLOWED = WIN32_ERROR.ERROR_PRI_MERGE_MULTIPLE_MAIN_PACKAGES_NOT_ALLOWED;
pub const ERROR_PRI_MERGE_BUNDLE_PACKAGES_NOT_ALLOWED = WIN32_ERROR.ERROR_PRI_MERGE_BUNDLE_PACKAGES_NOT_ALLOWED;
pub const ERROR_PRI_MERGE_MAIN_PACKAGE_REQUIRED = WIN32_ERROR.ERROR_PRI_MERGE_MAIN_PACKAGE_REQUIRED;
pub const ERROR_PRI_MERGE_RESOURCE_PACKAGE_REQUIRED = WIN32_ERROR.ERROR_PRI_MERGE_RESOURCE_PACKAGE_REQUIRED;
pub const ERROR_PRI_MERGE_INVALID_FILE_NAME = WIN32_ERROR.ERROR_PRI_MERGE_INVALID_FILE_NAME;
pub const ERROR_MRM_PACKAGE_NOT_FOUND = WIN32_ERROR.ERROR_MRM_PACKAGE_NOT_FOUND;
pub const ERROR_MRM_MISSING_DEFAULT_LANGUAGE = WIN32_ERROR.ERROR_MRM_MISSING_DEFAULT_LANGUAGE;
pub const ERROR_MCA_INVALID_CAPABILITIES_STRING = WIN32_ERROR.ERROR_MCA_INVALID_CAPABILITIES_STRING;
pub const ERROR_MCA_INVALID_VCP_VERSION = WIN32_ERROR.ERROR_MCA_INVALID_VCP_VERSION;
pub const ERROR_MCA_MONITOR_VIOLATES_MCCS_SPECIFICATION = WIN32_ERROR.ERROR_MCA_MONITOR_VIOLATES_MCCS_SPECIFICATION;
pub const ERROR_MCA_MCCS_VERSION_MISMATCH = WIN32_ERROR.ERROR_MCA_MCCS_VERSION_MISMATCH;
pub const ERROR_MCA_UNSUPPORTED_MCCS_VERSION = WIN32_ERROR.ERROR_MCA_UNSUPPORTED_MCCS_VERSION;
pub const ERROR_MCA_INTERNAL_ERROR = WIN32_ERROR.ERROR_MCA_INTERNAL_ERROR;
pub const ERROR_MCA_INVALID_TECHNOLOGY_TYPE_RETURNED = WIN32_ERROR.ERROR_MCA_INVALID_TECHNOLOGY_TYPE_RETURNED;
pub const ERROR_MCA_UNSUPPORTED_COLOR_TEMPERATURE = WIN32_ERROR.ERROR_MCA_UNSUPPORTED_COLOR_TEMPERATURE;
pub const ERROR_AMBIGUOUS_SYSTEM_DEVICE = WIN32_ERROR.ERROR_AMBIGUOUS_SYSTEM_DEVICE;
pub const ERROR_SYSTEM_DEVICE_NOT_FOUND = WIN32_ERROR.ERROR_SYSTEM_DEVICE_NOT_FOUND;
pub const ERROR_HASH_NOT_SUPPORTED = WIN32_ERROR.ERROR_HASH_NOT_SUPPORTED;
pub const ERROR_HASH_NOT_PRESENT = WIN32_ERROR.ERROR_HASH_NOT_PRESENT;
pub const ERROR_SECONDARY_IC_PROVIDER_NOT_REGISTERED = WIN32_ERROR.ERROR_SECONDARY_IC_PROVIDER_NOT_REGISTERED;
pub const ERROR_GPIO_CLIENT_INFORMATION_INVALID = WIN32_ERROR.ERROR_GPIO_CLIENT_INFORMATION_INVALID;
pub const ERROR_GPIO_VERSION_NOT_SUPPORTED = WIN32_ERROR.ERROR_GPIO_VERSION_NOT_SUPPORTED;
pub const ERROR_GPIO_INVALID_REGISTRATION_PACKET = WIN32_ERROR.ERROR_GPIO_INVALID_REGISTRATION_PACKET;
pub const ERROR_GPIO_OPERATION_DENIED = WIN32_ERROR.ERROR_GPIO_OPERATION_DENIED;
pub const ERROR_GPIO_INCOMPATIBLE_CONNECT_MODE = WIN32_ERROR.ERROR_GPIO_INCOMPATIBLE_CONNECT_MODE;
pub const ERROR_GPIO_INTERRUPT_ALREADY_UNMASKED = WIN32_ERROR.ERROR_GPIO_INTERRUPT_ALREADY_UNMASKED;
pub const ERROR_CANNOT_SWITCH_RUNLEVEL = WIN32_ERROR.ERROR_CANNOT_SWITCH_RUNLEVEL;
pub const ERROR_INVALID_RUNLEVEL_SETTING = WIN32_ERROR.ERROR_INVALID_RUNLEVEL_SETTING;
pub const ERROR_RUNLEVEL_SWITCH_TIMEOUT = WIN32_ERROR.ERROR_RUNLEVEL_SWITCH_TIMEOUT;
pub const ERROR_RUNLEVEL_SWITCH_AGENT_TIMEOUT = WIN32_ERROR.ERROR_RUNLEVEL_SWITCH_AGENT_TIMEOUT;
pub const ERROR_RUNLEVEL_SWITCH_IN_PROGRESS = WIN32_ERROR.ERROR_RUNLEVEL_SWITCH_IN_PROGRESS;
pub const ERROR_SERVICES_FAILED_AUTOSTART = WIN32_ERROR.ERROR_SERVICES_FAILED_AUTOSTART;
pub const ERROR_COM_TASK_STOP_PENDING = WIN32_ERROR.ERROR_COM_TASK_STOP_PENDING;
pub const ERROR_INSTALL_OPEN_PACKAGE_FAILED = WIN32_ERROR.ERROR_INSTALL_OPEN_PACKAGE_FAILED;
pub const ERROR_INSTALL_PACKAGE_NOT_FOUND = WIN32_ERROR.ERROR_INSTALL_PACKAGE_NOT_FOUND;
pub const ERROR_INSTALL_INVALID_PACKAGE = WIN32_ERROR.ERROR_INSTALL_INVALID_PACKAGE;
pub const ERROR_INSTALL_RESOLVE_DEPENDENCY_FAILED = WIN32_ERROR.ERROR_INSTALL_RESOLVE_DEPENDENCY_FAILED;
pub const ERROR_INSTALL_OUT_OF_DISK_SPACE = WIN32_ERROR.ERROR_INSTALL_OUT_OF_DISK_SPACE;
pub const ERROR_INSTALL_NETWORK_FAILURE = WIN32_ERROR.ERROR_INSTALL_NETWORK_FAILURE;
pub const ERROR_INSTALL_REGISTRATION_FAILURE = WIN32_ERROR.ERROR_INSTALL_REGISTRATION_FAILURE;
pub const ERROR_INSTALL_DEREGISTRATION_FAILURE = WIN32_ERROR.ERROR_INSTALL_DEREGISTRATION_FAILURE;
pub const ERROR_INSTALL_CANCEL = WIN32_ERROR.ERROR_INSTALL_CANCEL;
pub const ERROR_INSTALL_FAILED = WIN32_ERROR.ERROR_INSTALL_FAILED;
pub const ERROR_REMOVE_FAILED = WIN32_ERROR.ERROR_REMOVE_FAILED;
pub const ERROR_PACKAGE_ALREADY_EXISTS = WIN32_ERROR.ERROR_PACKAGE_ALREADY_EXISTS;
pub const ERROR_NEEDS_REMEDIATION = WIN32_ERROR.ERROR_NEEDS_REMEDIATION;
pub const ERROR_INSTALL_PREREQUISITE_FAILED = WIN32_ERROR.ERROR_INSTALL_PREREQUISITE_FAILED;
pub const ERROR_PACKAGE_REPOSITORY_CORRUPTED = WIN32_ERROR.ERROR_PACKAGE_REPOSITORY_CORRUPTED;
pub const ERROR_INSTALL_POLICY_FAILURE = WIN32_ERROR.ERROR_INSTALL_POLICY_FAILURE;
pub const ERROR_PACKAGE_UPDATING = WIN32_ERROR.ERROR_PACKAGE_UPDATING;
pub const ERROR_DEPLOYMENT_BLOCKED_BY_POLICY = WIN32_ERROR.ERROR_DEPLOYMENT_BLOCKED_BY_POLICY;
pub const ERROR_PACKAGES_IN_USE = WIN32_ERROR.ERROR_PACKAGES_IN_USE;
pub const ERROR_RECOVERY_FILE_CORRUPT = WIN32_ERROR.ERROR_RECOVERY_FILE_CORRUPT;
pub const ERROR_INVALID_STAGED_SIGNATURE = WIN32_ERROR.ERROR_INVALID_STAGED_SIGNATURE;
pub const ERROR_DELETING_EXISTING_APPLICATIONDATA_STORE_FAILED = WIN32_ERROR.ERROR_DELETING_EXISTING_APPLICATIONDATA_STORE_FAILED;
pub const ERROR_INSTALL_PACKAGE_DOWNGRADE = WIN32_ERROR.ERROR_INSTALL_PACKAGE_DOWNGRADE;
pub const ERROR_SYSTEM_NEEDS_REMEDIATION = WIN32_ERROR.ERROR_SYSTEM_NEEDS_REMEDIATION;
pub const ERROR_APPX_INTEGRITY_FAILURE_CLR_NGEN = WIN32_ERROR.ERROR_APPX_INTEGRITY_FAILURE_CLR_NGEN;
pub const ERROR_RESILIENCY_FILE_CORRUPT = WIN32_ERROR.ERROR_RESILIENCY_FILE_CORRUPT;
pub const ERROR_INSTALL_FIREWALL_SERVICE_NOT_RUNNING = WIN32_ERROR.ERROR_INSTALL_FIREWALL_SERVICE_NOT_RUNNING;
pub const ERROR_PACKAGE_MOVE_FAILED = WIN32_ERROR.ERROR_PACKAGE_MOVE_FAILED;
pub const ERROR_INSTALL_VOLUME_NOT_EMPTY = WIN32_ERROR.ERROR_INSTALL_VOLUME_NOT_EMPTY;
pub const ERROR_INSTALL_VOLUME_OFFLINE = WIN32_ERROR.ERROR_INSTALL_VOLUME_OFFLINE;
pub const ERROR_INSTALL_VOLUME_CORRUPT = WIN32_ERROR.ERROR_INSTALL_VOLUME_CORRUPT;
pub const ERROR_NEEDS_REGISTRATION = WIN32_ERROR.ERROR_NEEDS_REGISTRATION;
pub const ERROR_INSTALL_WRONG_PROCESSOR_ARCHITECTURE = WIN32_ERROR.ERROR_INSTALL_WRONG_PROCESSOR_ARCHITECTURE;
pub const ERROR_DEV_SIDELOAD_LIMIT_EXCEEDED = WIN32_ERROR.ERROR_DEV_SIDELOAD_LIMIT_EXCEEDED;
pub const ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE = WIN32_ERROR.ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE;
pub const ERROR_PACKAGE_NOT_SUPPORTED_ON_FILESYSTEM = WIN32_ERROR.ERROR_PACKAGE_NOT_SUPPORTED_ON_FILESYSTEM;
pub const ERROR_PACKAGE_MOVE_BLOCKED_BY_STREAMING = WIN32_ERROR.ERROR_PACKAGE_MOVE_BLOCKED_BY_STREAMING;
pub const ERROR_INSTALL_OPTIONAL_PACKAGE_APPLICATIONID_NOT_UNIQUE = WIN32_ERROR.ERROR_INSTALL_OPTIONAL_PACKAGE_APPLICATIONID_NOT_UNIQUE;
pub const ERROR_PACKAGE_STAGING_ONHOLD = WIN32_ERROR.ERROR_PACKAGE_STAGING_ONHOLD;
pub const ERROR_INSTALL_INVALID_RELATED_SET_UPDATE = WIN32_ERROR.ERROR_INSTALL_INVALID_RELATED_SET_UPDATE;
pub const ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_FULLTRUST_CAPABILITY = WIN32_ERROR.ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_FULLTRUST_CAPABILITY;
pub const ERROR_DEPLOYMENT_BLOCKED_BY_USER_LOG_OFF = WIN32_ERROR.ERROR_DEPLOYMENT_BLOCKED_BY_USER_LOG_OFF;
pub const ERROR_PROVISION_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_PROVISIONED = WIN32_ERROR.ERROR_PROVISION_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_PROVISIONED;
pub const ERROR_PACKAGES_REPUTATION_CHECK_FAILED = WIN32_ERROR.ERROR_PACKAGES_REPUTATION_CHECK_FAILED;
pub const ERROR_PACKAGES_REPUTATION_CHECK_TIMEDOUT = WIN32_ERROR.ERROR_PACKAGES_REPUTATION_CHECK_TIMEDOUT;
pub const ERROR_DEPLOYMENT_OPTION_NOT_SUPPORTED = WIN32_ERROR.ERROR_DEPLOYMENT_OPTION_NOT_SUPPORTED;
pub const ERROR_APPINSTALLER_ACTIVATION_BLOCKED = WIN32_ERROR.ERROR_APPINSTALLER_ACTIVATION_BLOCKED;
pub const ERROR_REGISTRATION_FROM_REMOTE_DRIVE_NOT_SUPPORTED = WIN32_ERROR.ERROR_REGISTRATION_FROM_REMOTE_DRIVE_NOT_SUPPORTED;
pub const ERROR_APPX_RAW_DATA_WRITE_FAILED = WIN32_ERROR.ERROR_APPX_RAW_DATA_WRITE_FAILED;
pub const ERROR_DEPLOYMENT_BLOCKED_BY_VOLUME_POLICY_PACKAGE = WIN32_ERROR.ERROR_DEPLOYMENT_BLOCKED_BY_VOLUME_POLICY_PACKAGE;
pub const ERROR_DEPLOYMENT_BLOCKED_BY_VOLUME_POLICY_MACHINE = WIN32_ERROR.ERROR_DEPLOYMENT_BLOCKED_BY_VOLUME_POLICY_MACHINE;
pub const ERROR_DEPLOYMENT_BLOCKED_BY_PROFILE_POLICY = WIN32_ERROR.ERROR_DEPLOYMENT_BLOCKED_BY_PROFILE_POLICY;
pub const ERROR_DEPLOYMENT_FAILED_CONFLICTING_MUTABLE_PACKAGE_DIRECTORY = WIN32_ERROR.ERROR_DEPLOYMENT_FAILED_CONFLICTING_MUTABLE_PACKAGE_DIRECTORY;
pub const ERROR_SINGLETON_RESOURCE_INSTALLED_IN_ACTIVE_USER = WIN32_ERROR.ERROR_SINGLETON_RESOURCE_INSTALLED_IN_ACTIVE_USER;
pub const ERROR_DIFFERENT_VERSION_OF_PACKAGED_SERVICE_INSTALLED = WIN32_ERROR.ERROR_DIFFERENT_VERSION_OF_PACKAGED_SERVICE_INSTALLED;
pub const ERROR_SERVICE_EXISTS_AS_NON_PACKAGED_SERVICE = WIN32_ERROR.ERROR_SERVICE_EXISTS_AS_NON_PACKAGED_SERVICE;
pub const ERROR_PACKAGED_SERVICE_REQUIRES_ADMIN_PRIVILEGES = WIN32_ERROR.ERROR_PACKAGED_SERVICE_REQUIRES_ADMIN_PRIVILEGES;
pub const ERROR_REDIRECTION_TO_DEFAULT_ACCOUNT_NOT_ALLOWED = WIN32_ERROR.ERROR_REDIRECTION_TO_DEFAULT_ACCOUNT_NOT_ALLOWED;
pub const ERROR_PACKAGE_LACKS_CAPABILITY_TO_DEPLOY_ON_HOST = WIN32_ERROR.ERROR_PACKAGE_LACKS_CAPABILITY_TO_DEPLOY_ON_HOST;
pub const ERROR_UNSIGNED_PACKAGE_INVALID_CONTENT = WIN32_ERROR.ERROR_UNSIGNED_PACKAGE_INVALID_CONTENT;
pub const ERROR_UNSIGNED_PACKAGE_INVALID_PUBLISHER_NAMESPACE = WIN32_ERROR.ERROR_UNSIGNED_PACKAGE_INVALID_PUBLISHER_NAMESPACE;
pub const ERROR_SIGNED_PACKAGE_INVALID_PUBLISHER_NAMESPACE = WIN32_ERROR.ERROR_SIGNED_PACKAGE_INVALID_PUBLISHER_NAMESPACE;
pub const ERROR_PACKAGE_EXTERNAL_LOCATION_NOT_ALLOWED = WIN32_ERROR.ERROR_PACKAGE_EXTERNAL_LOCATION_NOT_ALLOWED;
pub const ERROR_INSTALL_FULLTRUST_HOSTRUNTIME_REQUIRES_MAIN_PACKAGE_FULLTRUST_CAPABILITY = WIN32_ERROR.ERROR_INSTALL_FULLTRUST_HOSTRUNTIME_REQUIRES_MAIN_PACKAGE_FULLTRUST_CAPABILITY;
pub const ERROR_PACKAGE_LACKS_CAPABILITY_FOR_MANDATORY_STARTUPTASKS = WIN32_ERROR.ERROR_PACKAGE_LACKS_CAPABILITY_FOR_MANDATORY_STARTUPTASKS;
pub const ERROR_INSTALL_RESOLVE_HOSTRUNTIME_DEPENDENCY_FAILED = WIN32_ERROR.ERROR_INSTALL_RESOLVE_HOSTRUNTIME_DEPENDENCY_FAILED;
pub const ERROR_MACHINE_SCOPE_NOT_ALLOWED = WIN32_ERROR.ERROR_MACHINE_SCOPE_NOT_ALLOWED;
pub const ERROR_CLASSIC_COMPAT_MODE_NOT_ALLOWED = WIN32_ERROR.ERROR_CLASSIC_COMPAT_MODE_NOT_ALLOWED;
pub const ERROR_STAGEFROMUPDATEAGENT_PACKAGE_NOT_APPLICABLE = WIN32_ERROR.ERROR_STAGEFROMUPDATEAGENT_PACKAGE_NOT_APPLICABLE;
pub const ERROR_PACKAGE_NOT_REGISTERED_FOR_USER = WIN32_ERROR.ERROR_PACKAGE_NOT_REGISTERED_FOR_USER;
pub const ERROR_STATE_LOAD_STORE_FAILED = WIN32_ERROR.ERROR_STATE_LOAD_STORE_FAILED;
pub const ERROR_STATE_GET_VERSION_FAILED = WIN32_ERROR.ERROR_STATE_GET_VERSION_FAILED;
pub const ERROR_STATE_SET_VERSION_FAILED = WIN32_ERROR.ERROR_STATE_SET_VERSION_FAILED;
pub const ERROR_STATE_STRUCTURED_RESET_FAILED = WIN32_ERROR.ERROR_STATE_STRUCTURED_RESET_FAILED;
pub const ERROR_STATE_OPEN_CONTAINER_FAILED = WIN32_ERROR.ERROR_STATE_OPEN_CONTAINER_FAILED;
pub const ERROR_STATE_CREATE_CONTAINER_FAILED = WIN32_ERROR.ERROR_STATE_CREATE_CONTAINER_FAILED;
pub const ERROR_STATE_DELETE_CONTAINER_FAILED = WIN32_ERROR.ERROR_STATE_DELETE_CONTAINER_FAILED;
pub const ERROR_STATE_READ_SETTING_FAILED = WIN32_ERROR.ERROR_STATE_READ_SETTING_FAILED;
pub const ERROR_STATE_WRITE_SETTING_FAILED = WIN32_ERROR.ERROR_STATE_WRITE_SETTING_FAILED;
pub const ERROR_STATE_DELETE_SETTING_FAILED = WIN32_ERROR.ERROR_STATE_DELETE_SETTING_FAILED;
pub const ERROR_STATE_QUERY_SETTING_FAILED = WIN32_ERROR.ERROR_STATE_QUERY_SETTING_FAILED;
pub const ERROR_STATE_READ_COMPOSITE_SETTING_FAILED = WIN32_ERROR.ERROR_STATE_READ_COMPOSITE_SETTING_FAILED;
pub const ERROR_STATE_WRITE_COMPOSITE_SETTING_FAILED = WIN32_ERROR.ERROR_STATE_WRITE_COMPOSITE_SETTING_FAILED;
pub const ERROR_STATE_ENUMERATE_CONTAINER_FAILED = WIN32_ERROR.ERROR_STATE_ENUMERATE_CONTAINER_FAILED;
pub const ERROR_STATE_ENUMERATE_SETTINGS_FAILED = WIN32_ERROR.ERROR_STATE_ENUMERATE_SETTINGS_FAILED;
pub const ERROR_STATE_COMPOSITE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED = WIN32_ERROR.ERROR_STATE_COMPOSITE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED;
pub const ERROR_STATE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED = WIN32_ERROR.ERROR_STATE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED;
pub const ERROR_STATE_SETTING_NAME_SIZE_LIMIT_EXCEEDED = WIN32_ERROR.ERROR_STATE_SETTING_NAME_SIZE_LIMIT_EXCEEDED;
pub const ERROR_STATE_CONTAINER_NAME_SIZE_LIMIT_EXCEEDED = WIN32_ERROR.ERROR_STATE_CONTAINER_NAME_SIZE_LIMIT_EXCEEDED;
pub const ERROR_API_UNAVAILABLE = WIN32_ERROR.ERROR_API_UNAVAILABLE;
pub const ERROR_NDIS_INTERFACE_CLOSING = WIN32_ERROR.ERROR_NDIS_INTERFACE_CLOSING;
pub const ERROR_NDIS_BAD_VERSION = WIN32_ERROR.ERROR_NDIS_BAD_VERSION;
pub const ERROR_NDIS_BAD_CHARACTERISTICS = WIN32_ERROR.ERROR_NDIS_BAD_CHARACTERISTICS;
pub const ERROR_NDIS_ADAPTER_NOT_FOUND = WIN32_ERROR.ERROR_NDIS_ADAPTER_NOT_FOUND;
pub const ERROR_NDIS_OPEN_FAILED = WIN32_ERROR.ERROR_NDIS_OPEN_FAILED;
pub const ERROR_NDIS_DEVICE_FAILED = WIN32_ERROR.ERROR_NDIS_DEVICE_FAILED;
pub const ERROR_NDIS_MULTICAST_FULL = WIN32_ERROR.ERROR_NDIS_MULTICAST_FULL;
pub const ERROR_NDIS_MULTICAST_EXISTS = WIN32_ERROR.ERROR_NDIS_MULTICAST_EXISTS;
pub const ERROR_NDIS_MULTICAST_NOT_FOUND = WIN32_ERROR.ERROR_NDIS_MULTICAST_NOT_FOUND;
pub const ERROR_NDIS_REQUEST_ABORTED = WIN32_ERROR.ERROR_NDIS_REQUEST_ABORTED;
pub const ERROR_NDIS_RESET_IN_PROGRESS = WIN32_ERROR.ERROR_NDIS_RESET_IN_PROGRESS;
pub const ERROR_NDIS_NOT_SUPPORTED = WIN32_ERROR.ERROR_NDIS_NOT_SUPPORTED;
pub const ERROR_NDIS_INVALID_PACKET = WIN32_ERROR.ERROR_NDIS_INVALID_PACKET;
pub const ERROR_NDIS_ADAPTER_NOT_READY = WIN32_ERROR.ERROR_NDIS_ADAPTER_NOT_READY;
pub const ERROR_NDIS_INVALID_LENGTH = WIN32_ERROR.ERROR_NDIS_INVALID_LENGTH;
pub const ERROR_NDIS_INVALID_DATA = WIN32_ERROR.ERROR_NDIS_INVALID_DATA;
pub const ERROR_NDIS_BUFFER_TOO_SHORT = WIN32_ERROR.ERROR_NDIS_BUFFER_TOO_SHORT;
pub const ERROR_NDIS_INVALID_OID = WIN32_ERROR.ERROR_NDIS_INVALID_OID;
pub const ERROR_NDIS_ADAPTER_REMOVED = WIN32_ERROR.ERROR_NDIS_ADAPTER_REMOVED;
pub const ERROR_NDIS_UNSUPPORTED_MEDIA = WIN32_ERROR.ERROR_NDIS_UNSUPPORTED_MEDIA;
pub const ERROR_NDIS_GROUP_ADDRESS_IN_USE = WIN32_ERROR.ERROR_NDIS_GROUP_ADDRESS_IN_USE;
pub const ERROR_NDIS_FILE_NOT_FOUND = WIN32_ERROR.ERROR_NDIS_FILE_NOT_FOUND;
pub const ERROR_NDIS_ERROR_READING_FILE = WIN32_ERROR.ERROR_NDIS_ERROR_READING_FILE;
pub const ERROR_NDIS_ALREADY_MAPPED = WIN32_ERROR.ERROR_NDIS_ALREADY_MAPPED;
pub const ERROR_NDIS_RESOURCE_CONFLICT = WIN32_ERROR.ERROR_NDIS_RESOURCE_CONFLICT;
pub const ERROR_NDIS_MEDIA_DISCONNECTED = WIN32_ERROR.ERROR_NDIS_MEDIA_DISCONNECTED;
pub const ERROR_NDIS_INVALID_ADDRESS = WIN32_ERROR.ERROR_NDIS_INVALID_ADDRESS;
pub const ERROR_NDIS_INVALID_DEVICE_REQUEST = WIN32_ERROR.ERROR_NDIS_INVALID_DEVICE_REQUEST;
pub const ERROR_NDIS_PAUSED = WIN32_ERROR.ERROR_NDIS_PAUSED;
pub const ERROR_NDIS_INTERFACE_NOT_FOUND = WIN32_ERROR.ERROR_NDIS_INTERFACE_NOT_FOUND;
pub const ERROR_NDIS_UNSUPPORTED_REVISION = WIN32_ERROR.ERROR_NDIS_UNSUPPORTED_REVISION;
pub const ERROR_NDIS_INVALID_PORT = WIN32_ERROR.ERROR_NDIS_INVALID_PORT;
pub const ERROR_NDIS_INVALID_PORT_STATE = WIN32_ERROR.ERROR_NDIS_INVALID_PORT_STATE;
pub const ERROR_NDIS_LOW_POWER_STATE = WIN32_ERROR.ERROR_NDIS_LOW_POWER_STATE;
pub const ERROR_NDIS_REINIT_REQUIRED = WIN32_ERROR.ERROR_NDIS_REINIT_REQUIRED;
pub const ERROR_NDIS_NO_QUEUES = WIN32_ERROR.ERROR_NDIS_NO_QUEUES;
pub const ERROR_NDIS_DOT11_AUTO_CONFIG_ENABLED = WIN32_ERROR.ERROR_NDIS_DOT11_AUTO_CONFIG_ENABLED;
pub const ERROR_NDIS_DOT11_MEDIA_IN_USE = WIN32_ERROR.ERROR_NDIS_DOT11_MEDIA_IN_USE;
pub const ERROR_NDIS_DOT11_POWER_STATE_INVALID = WIN32_ERROR.ERROR_NDIS_DOT11_POWER_STATE_INVALID;
pub const ERROR_NDIS_PM_WOL_PATTERN_LIST_FULL = WIN32_ERROR.ERROR_NDIS_PM_WOL_PATTERN_LIST_FULL;
pub const ERROR_NDIS_PM_PROTOCOL_OFFLOAD_LIST_FULL = WIN32_ERROR.ERROR_NDIS_PM_PROTOCOL_OFFLOAD_LIST_FULL;
pub const ERROR_NDIS_DOT11_AP_CHANNEL_CURRENTLY_NOT_AVAILABLE = WIN32_ERROR.ERROR_NDIS_DOT11_AP_CHANNEL_CURRENTLY_NOT_AVAILABLE;
pub const ERROR_NDIS_DOT11_AP_BAND_CURRENTLY_NOT_AVAILABLE = WIN32_ERROR.ERROR_NDIS_DOT11_AP_BAND_CURRENTLY_NOT_AVAILABLE;
pub const ERROR_NDIS_DOT11_AP_CHANNEL_NOT_ALLOWED = WIN32_ERROR.ERROR_NDIS_DOT11_AP_CHANNEL_NOT_ALLOWED;
pub const ERROR_NDIS_DOT11_AP_BAND_NOT_ALLOWED = WIN32_ERROR.ERROR_NDIS_DOT11_AP_BAND_NOT_ALLOWED;
pub const ERROR_NDIS_INDICATION_REQUIRED = WIN32_ERROR.ERROR_NDIS_INDICATION_REQUIRED;
pub const ERROR_NDIS_OFFLOAD_POLICY = WIN32_ERROR.ERROR_NDIS_OFFLOAD_POLICY;
pub const ERROR_NDIS_OFFLOAD_CONNECTION_REJECTED = WIN32_ERROR.ERROR_NDIS_OFFLOAD_CONNECTION_REJECTED;
pub const ERROR_NDIS_OFFLOAD_PATH_REJECTED = WIN32_ERROR.ERROR_NDIS_OFFLOAD_PATH_REJECTED;
pub const ERROR_HV_INVALID_HYPERCALL_CODE = WIN32_ERROR.ERROR_HV_INVALID_HYPERCALL_CODE;
pub const ERROR_HV_INVALID_HYPERCALL_INPUT = WIN32_ERROR.ERROR_HV_INVALID_HYPERCALL_INPUT;
pub const ERROR_HV_INVALID_ALIGNMENT = WIN32_ERROR.ERROR_HV_INVALID_ALIGNMENT;
pub const ERROR_HV_INVALID_PARAMETER = WIN32_ERROR.ERROR_HV_INVALID_PARAMETER;
pub const ERROR_HV_ACCESS_DENIED = WIN32_ERROR.ERROR_HV_ACCESS_DENIED;
pub const ERROR_HV_INVALID_PARTITION_STATE = WIN32_ERROR.ERROR_HV_INVALID_PARTITION_STATE;
pub const ERROR_HV_OPERATION_DENIED = WIN32_ERROR.ERROR_HV_OPERATION_DENIED;
pub const ERROR_HV_UNKNOWN_PROPERTY = WIN32_ERROR.ERROR_HV_UNKNOWN_PROPERTY;
pub const ERROR_HV_PROPERTY_VALUE_OUT_OF_RANGE = WIN32_ERROR.ERROR_HV_PROPERTY_VALUE_OUT_OF_RANGE;
pub const ERROR_HV_INSUFFICIENT_MEMORY = WIN32_ERROR.ERROR_HV_INSUFFICIENT_MEMORY;
pub const ERROR_HV_PARTITION_TOO_DEEP = WIN32_ERROR.ERROR_HV_PARTITION_TOO_DEEP;
pub const ERROR_HV_INVALID_PARTITION_ID = WIN32_ERROR.ERROR_HV_INVALID_PARTITION_ID;
pub const ERROR_HV_INVALID_VP_INDEX = WIN32_ERROR.ERROR_HV_INVALID_VP_INDEX;
pub const ERROR_HV_INVALID_PORT_ID = WIN32_ERROR.ERROR_HV_INVALID_PORT_ID;
pub const ERROR_HV_INVALID_CONNECTION_ID = WIN32_ERROR.ERROR_HV_INVALID_CONNECTION_ID;
pub const ERROR_HV_INSUFFICIENT_BUFFERS = WIN32_ERROR.ERROR_HV_INSUFFICIENT_BUFFERS;
pub const ERROR_HV_NOT_ACKNOWLEDGED = WIN32_ERROR.ERROR_HV_NOT_ACKNOWLEDGED;
pub const ERROR_HV_INVALID_VP_STATE = WIN32_ERROR.ERROR_HV_INVALID_VP_STATE;
pub const ERROR_HV_ACKNOWLEDGED = WIN32_ERROR.ERROR_HV_ACKNOWLEDGED;
pub const ERROR_HV_INVALID_SAVE_RESTORE_STATE = WIN32_ERROR.ERROR_HV_INVALID_SAVE_RESTORE_STATE;
pub const ERROR_HV_INVALID_SYNIC_STATE = WIN32_ERROR.ERROR_HV_INVALID_SYNIC_STATE;
pub const ERROR_HV_OBJECT_IN_USE = WIN32_ERROR.ERROR_HV_OBJECT_IN_USE;
pub const ERROR_HV_INVALID_PROXIMITY_DOMAIN_INFO = WIN32_ERROR.ERROR_HV_INVALID_PROXIMITY_DOMAIN_INFO;
pub const ERROR_HV_NO_DATA = WIN32_ERROR.ERROR_HV_NO_DATA;
pub const ERROR_HV_INACTIVE = WIN32_ERROR.ERROR_HV_INACTIVE;
pub const ERROR_HV_NO_RESOURCES = WIN32_ERROR.ERROR_HV_NO_RESOURCES;
pub const ERROR_HV_FEATURE_UNAVAILABLE = WIN32_ERROR.ERROR_HV_FEATURE_UNAVAILABLE;
pub const ERROR_HV_INSUFFICIENT_BUFFER = WIN32_ERROR.ERROR_HV_INSUFFICIENT_BUFFER;
pub const ERROR_HV_INSUFFICIENT_DEVICE_DOMAINS = WIN32_ERROR.ERROR_HV_INSUFFICIENT_DEVICE_DOMAINS;
pub const ERROR_HV_CPUID_FEATURE_VALIDATION = WIN32_ERROR.ERROR_HV_CPUID_FEATURE_VALIDATION;
pub const ERROR_HV_CPUID_XSAVE_FEATURE_VALIDATION = WIN32_ERROR.ERROR_HV_CPUID_XSAVE_FEATURE_VALIDATION;
pub const ERROR_HV_PROCESSOR_STARTUP_TIMEOUT = WIN32_ERROR.ERROR_HV_PROCESSOR_STARTUP_TIMEOUT;
pub const ERROR_HV_SMX_ENABLED = WIN32_ERROR.ERROR_HV_SMX_ENABLED;
pub const ERROR_HV_INVALID_LP_INDEX = WIN32_ERROR.ERROR_HV_INVALID_LP_INDEX;
pub const ERROR_HV_INVALID_REGISTER_VALUE = WIN32_ERROR.ERROR_HV_INVALID_REGISTER_VALUE;
pub const ERROR_HV_INVALID_VTL_STATE = WIN32_ERROR.ERROR_HV_INVALID_VTL_STATE;
pub const ERROR_HV_NX_NOT_DETECTED = WIN32_ERROR.ERROR_HV_NX_NOT_DETECTED;
pub const ERROR_HV_INVALID_DEVICE_ID = WIN32_ERROR.ERROR_HV_INVALID_DEVICE_ID;
pub const ERROR_HV_INVALID_DEVICE_STATE = WIN32_ERROR.ERROR_HV_INVALID_DEVICE_STATE;
pub const ERROR_HV_PENDING_PAGE_REQUESTS = WIN32_ERROR.ERROR_HV_PENDING_PAGE_REQUESTS;
pub const ERROR_HV_PAGE_REQUEST_INVALID = WIN32_ERROR.ERROR_HV_PAGE_REQUEST_INVALID;
pub const ERROR_HV_INVALID_CPU_GROUP_ID = WIN32_ERROR.ERROR_HV_INVALID_CPU_GROUP_ID;
pub const ERROR_HV_INVALID_CPU_GROUP_STATE = WIN32_ERROR.ERROR_HV_INVALID_CPU_GROUP_STATE;
pub const ERROR_HV_OPERATION_FAILED = WIN32_ERROR.ERROR_HV_OPERATION_FAILED;
pub const ERROR_HV_NOT_ALLOWED_WITH_NESTED_VIRT_ACTIVE = WIN32_ERROR.ERROR_HV_NOT_ALLOWED_WITH_NESTED_VIRT_ACTIVE;
pub const ERROR_HV_INSUFFICIENT_ROOT_MEMORY = WIN32_ERROR.ERROR_HV_INSUFFICIENT_ROOT_MEMORY;
pub const ERROR_HV_EVENT_BUFFER_ALREADY_FREED = WIN32_ERROR.ERROR_HV_EVENT_BUFFER_ALREADY_FREED;
pub const ERROR_HV_INSUFFICIENT_CONTIGUOUS_MEMORY = WIN32_ERROR.ERROR_HV_INSUFFICIENT_CONTIGUOUS_MEMORY;
pub const ERROR_HV_DEVICE_NOT_IN_DOMAIN = WIN32_ERROR.ERROR_HV_DEVICE_NOT_IN_DOMAIN;
pub const ERROR_HV_NESTED_VM_EXIT = WIN32_ERROR.ERROR_HV_NESTED_VM_EXIT;
pub const ERROR_HV_MSR_ACCESS_FAILED = WIN32_ERROR.ERROR_HV_MSR_ACCESS_FAILED;
pub const ERROR_HV_NOT_PRESENT = WIN32_ERROR.ERROR_HV_NOT_PRESENT;
pub const ERROR_VID_DUPLICATE_HANDLER = WIN32_ERROR.ERROR_VID_DUPLICATE_HANDLER;
pub const ERROR_VID_TOO_MANY_HANDLERS = WIN32_ERROR.ERROR_VID_TOO_MANY_HANDLERS;
pub const ERROR_VID_QUEUE_FULL = WIN32_ERROR.ERROR_VID_QUEUE_FULL;
pub const ERROR_VID_HANDLER_NOT_PRESENT = WIN32_ERROR.ERROR_VID_HANDLER_NOT_PRESENT;
pub const ERROR_VID_INVALID_OBJECT_NAME = WIN32_ERROR.ERROR_VID_INVALID_OBJECT_NAME;
pub const ERROR_VID_PARTITION_NAME_TOO_LONG = WIN32_ERROR.ERROR_VID_PARTITION_NAME_TOO_LONG;
pub const ERROR_VID_MESSAGE_QUEUE_NAME_TOO_LONG = WIN32_ERROR.ERROR_VID_MESSAGE_QUEUE_NAME_TOO_LONG;
pub const ERROR_VID_PARTITION_ALREADY_EXISTS = WIN32_ERROR.ERROR_VID_PARTITION_ALREADY_EXISTS;
pub const ERROR_VID_PARTITION_DOES_NOT_EXIST = WIN32_ERROR.ERROR_VID_PARTITION_DOES_NOT_EXIST;
pub const ERROR_VID_PARTITION_NAME_NOT_FOUND = WIN32_ERROR.ERROR_VID_PARTITION_NAME_NOT_FOUND;
pub const ERROR_VID_MESSAGE_QUEUE_ALREADY_EXISTS = WIN32_ERROR.ERROR_VID_MESSAGE_QUEUE_ALREADY_EXISTS;
pub const ERROR_VID_EXCEEDED_MBP_ENTRY_MAP_LIMIT = WIN32_ERROR.ERROR_VID_EXCEEDED_MBP_ENTRY_MAP_LIMIT;
pub const ERROR_VID_MB_STILL_REFERENCED = WIN32_ERROR.ERROR_VID_MB_STILL_REFERENCED;
pub const ERROR_VID_CHILD_GPA_PAGE_SET_CORRUPTED = WIN32_ERROR.ERROR_VID_CHILD_GPA_PAGE_SET_CORRUPTED;
pub const ERROR_VID_INVALID_NUMA_SETTINGS = WIN32_ERROR.ERROR_VID_INVALID_NUMA_SETTINGS;
pub const ERROR_VID_INVALID_NUMA_NODE_INDEX = WIN32_ERROR.ERROR_VID_INVALID_NUMA_NODE_INDEX;
pub const ERROR_VID_NOTIFICATION_QUEUE_ALREADY_ASSOCIATED = WIN32_ERROR.ERROR_VID_NOTIFICATION_QUEUE_ALREADY_ASSOCIATED;
pub const ERROR_VID_INVALID_MEMORY_BLOCK_HANDLE = WIN32_ERROR.ERROR_VID_INVALID_MEMORY_BLOCK_HANDLE;
pub const ERROR_VID_PAGE_RANGE_OVERFLOW = WIN32_ERROR.ERROR_VID_PAGE_RANGE_OVERFLOW;
pub const ERROR_VID_INVALID_MESSAGE_QUEUE_HANDLE = WIN32_ERROR.ERROR_VID_INVALID_MESSAGE_QUEUE_HANDLE;
pub const ERROR_VID_INVALID_GPA_RANGE_HANDLE = WIN32_ERROR.ERROR_VID_INVALID_GPA_RANGE_HANDLE;
pub const ERROR_VID_NO_MEMORY_BLOCK_NOTIFICATION_QUEUE = WIN32_ERROR.ERROR_VID_NO_MEMORY_BLOCK_NOTIFICATION_QUEUE;
pub const ERROR_VID_MEMORY_BLOCK_LOCK_COUNT_EXCEEDED = WIN32_ERROR.ERROR_VID_MEMORY_BLOCK_LOCK_COUNT_EXCEEDED;
pub const ERROR_VID_INVALID_PPM_HANDLE = WIN32_ERROR.ERROR_VID_INVALID_PPM_HANDLE;
pub const ERROR_VID_MBPS_ARE_LOCKED = WIN32_ERROR.ERROR_VID_MBPS_ARE_LOCKED;
pub const ERROR_VID_MESSAGE_QUEUE_CLOSED = WIN32_ERROR.ERROR_VID_MESSAGE_QUEUE_CLOSED;
pub const ERROR_VID_VIRTUAL_PROCESSOR_LIMIT_EXCEEDED = WIN32_ERROR.ERROR_VID_VIRTUAL_PROCESSOR_LIMIT_EXCEEDED;
pub const ERROR_VID_STOP_PENDING = WIN32_ERROR.ERROR_VID_STOP_PENDING;
pub const ERROR_VID_INVALID_PROCESSOR_STATE = WIN32_ERROR.ERROR_VID_INVALID_PROCESSOR_STATE;
pub const ERROR_VID_EXCEEDED_KM_CONTEXT_COUNT_LIMIT = WIN32_ERROR.ERROR_VID_EXCEEDED_KM_CONTEXT_COUNT_LIMIT;
pub const ERROR_VID_KM_INTERFACE_ALREADY_INITIALIZED = WIN32_ERROR.ERROR_VID_KM_INTERFACE_ALREADY_INITIALIZED;
pub const ERROR_VID_MB_PROPERTY_ALREADY_SET_RESET = WIN32_ERROR.ERROR_VID_MB_PROPERTY_ALREADY_SET_RESET;
pub const ERROR_VID_MMIO_RANGE_DESTROYED = WIN32_ERROR.ERROR_VID_MMIO_RANGE_DESTROYED;
pub const ERROR_VID_INVALID_CHILD_GPA_PAGE_SET = WIN32_ERROR.ERROR_VID_INVALID_CHILD_GPA_PAGE_SET;
pub const ERROR_VID_RESERVE_PAGE_SET_IS_BEING_USED = WIN32_ERROR.ERROR_VID_RESERVE_PAGE_SET_IS_BEING_USED;
pub const ERROR_VID_RESERVE_PAGE_SET_TOO_SMALL = WIN32_ERROR.ERROR_VID_RESERVE_PAGE_SET_TOO_SMALL;
pub const ERROR_VID_MBP_ALREADY_LOCKED_USING_RESERVED_PAGE = WIN32_ERROR.ERROR_VID_MBP_ALREADY_LOCKED_USING_RESERVED_PAGE;
pub const ERROR_VID_MBP_COUNT_EXCEEDED_LIMIT = WIN32_ERROR.ERROR_VID_MBP_COUNT_EXCEEDED_LIMIT;
pub const ERROR_VID_SAVED_STATE_CORRUPT = WIN32_ERROR.ERROR_VID_SAVED_STATE_CORRUPT;
pub const ERROR_VID_SAVED_STATE_UNRECOGNIZED_ITEM = WIN32_ERROR.ERROR_VID_SAVED_STATE_UNRECOGNIZED_ITEM;
pub const ERROR_VID_SAVED_STATE_INCOMPATIBLE = WIN32_ERROR.ERROR_VID_SAVED_STATE_INCOMPATIBLE;
pub const ERROR_VID_VTL_ACCESS_DENIED = WIN32_ERROR.ERROR_VID_VTL_ACCESS_DENIED;
pub const ERROR_VMCOMPUTE_TERMINATED_DURING_START = WIN32_ERROR.ERROR_VMCOMPUTE_TERMINATED_DURING_START;
pub const ERROR_VMCOMPUTE_IMAGE_MISMATCH = WIN32_ERROR.ERROR_VMCOMPUTE_IMAGE_MISMATCH;
pub const ERROR_VMCOMPUTE_HYPERV_NOT_INSTALLED = WIN32_ERROR.ERROR_VMCOMPUTE_HYPERV_NOT_INSTALLED;
pub const ERROR_VMCOMPUTE_OPERATION_PENDING = WIN32_ERROR.ERROR_VMCOMPUTE_OPERATION_PENDING;
pub const ERROR_VMCOMPUTE_TOO_MANY_NOTIFICATIONS = WIN32_ERROR.ERROR_VMCOMPUTE_TOO_MANY_NOTIFICATIONS;
pub const ERROR_VMCOMPUTE_INVALID_STATE = WIN32_ERROR.ERROR_VMCOMPUTE_INVALID_STATE;
pub const ERROR_VMCOMPUTE_UNEXPECTED_EXIT = WIN32_ERROR.ERROR_VMCOMPUTE_UNEXPECTED_EXIT;
pub const ERROR_VMCOMPUTE_TERMINATED = WIN32_ERROR.ERROR_VMCOMPUTE_TERMINATED;
pub const ERROR_VMCOMPUTE_CONNECT_FAILED = WIN32_ERROR.ERROR_VMCOMPUTE_CONNECT_FAILED;
pub const ERROR_VMCOMPUTE_TIMEOUT = WIN32_ERROR.ERROR_VMCOMPUTE_TIMEOUT;
pub const ERROR_VMCOMPUTE_CONNECTION_CLOSED = WIN32_ERROR.ERROR_VMCOMPUTE_CONNECTION_CLOSED;
pub const ERROR_VMCOMPUTE_UNKNOWN_MESSAGE = WIN32_ERROR.ERROR_VMCOMPUTE_UNKNOWN_MESSAGE;
pub const ERROR_VMCOMPUTE_UNSUPPORTED_PROTOCOL_VERSION = WIN32_ERROR.ERROR_VMCOMPUTE_UNSUPPORTED_PROTOCOL_VERSION;
pub const ERROR_VMCOMPUTE_INVALID_JSON = WIN32_ERROR.ERROR_VMCOMPUTE_INVALID_JSON;
pub const ERROR_VMCOMPUTE_SYSTEM_NOT_FOUND = WIN32_ERROR.ERROR_VMCOMPUTE_SYSTEM_NOT_FOUND;
pub const ERROR_VMCOMPUTE_SYSTEM_ALREADY_EXISTS = WIN32_ERROR.ERROR_VMCOMPUTE_SYSTEM_ALREADY_EXISTS;
pub const ERROR_VMCOMPUTE_SYSTEM_ALREADY_STOPPED = WIN32_ERROR.ERROR_VMCOMPUTE_SYSTEM_ALREADY_STOPPED;
pub const ERROR_VMCOMPUTE_PROTOCOL_ERROR = WIN32_ERROR.ERROR_VMCOMPUTE_PROTOCOL_ERROR;
pub const ERROR_VMCOMPUTE_INVALID_LAYER = WIN32_ERROR.ERROR_VMCOMPUTE_INVALID_LAYER;
pub const ERROR_VMCOMPUTE_WINDOWS_INSIDER_REQUIRED = WIN32_ERROR.ERROR_VMCOMPUTE_WINDOWS_INSIDER_REQUIRED;
pub const ERROR_VNET_VIRTUAL_SWITCH_NAME_NOT_FOUND = WIN32_ERROR.ERROR_VNET_VIRTUAL_SWITCH_NAME_NOT_FOUND;
pub const ERROR_VID_REMOTE_NODE_PARENT_GPA_PAGES_USED = WIN32_ERROR.ERROR_VID_REMOTE_NODE_PARENT_GPA_PAGES_USED;
pub const ERROR_VSMB_SAVED_STATE_FILE_NOT_FOUND = WIN32_ERROR.ERROR_VSMB_SAVED_STATE_FILE_NOT_FOUND;
pub const ERROR_VSMB_SAVED_STATE_CORRUPT = WIN32_ERROR.ERROR_VSMB_SAVED_STATE_CORRUPT;
pub const ERROR_VOLMGR_INCOMPLETE_REGENERATION = WIN32_ERROR.ERROR_VOLMGR_INCOMPLETE_REGENERATION;
pub const ERROR_VOLMGR_INCOMPLETE_DISK_MIGRATION = WIN32_ERROR.ERROR_VOLMGR_INCOMPLETE_DISK_MIGRATION;
pub const ERROR_VOLMGR_DATABASE_FULL = WIN32_ERROR.ERROR_VOLMGR_DATABASE_FULL;
pub const ERROR_VOLMGR_DISK_CONFIGURATION_CORRUPTED = WIN32_ERROR.ERROR_VOLMGR_DISK_CONFIGURATION_CORRUPTED;
pub const ERROR_VOLMGR_DISK_CONFIGURATION_NOT_IN_SYNC = WIN32_ERROR.ERROR_VOLMGR_DISK_CONFIGURATION_NOT_IN_SYNC;
pub const ERROR_VOLMGR_PACK_CONFIG_UPDATE_FAILED = WIN32_ERROR.ERROR_VOLMGR_PACK_CONFIG_UPDATE_FAILED;
pub const ERROR_VOLMGR_DISK_CONTAINS_NON_SIMPLE_VOLUME = WIN32_ERROR.ERROR_VOLMGR_DISK_CONTAINS_NON_SIMPLE_VOLUME;
pub const ERROR_VOLMGR_DISK_DUPLICATE = WIN32_ERROR.ERROR_VOLMGR_DISK_DUPLICATE;
pub const ERROR_VOLMGR_DISK_DYNAMIC = WIN32_ERROR.ERROR_VOLMGR_DISK_DYNAMIC;
pub const ERROR_VOLMGR_DISK_ID_INVALID = WIN32_ERROR.ERROR_VOLMGR_DISK_ID_INVALID;
pub const ERROR_VOLMGR_DISK_INVALID = WIN32_ERROR.ERROR_VOLMGR_DISK_INVALID;
pub const ERROR_VOLMGR_DISK_LAST_VOTER = WIN32_ERROR.ERROR_VOLMGR_DISK_LAST_VOTER;
pub const ERROR_VOLMGR_DISK_LAYOUT_INVALID = WIN32_ERROR.ERROR_VOLMGR_DISK_LAYOUT_INVALID;
pub const ERROR_VOLMGR_DISK_LAYOUT_NON_BASIC_BETWEEN_BASIC_PARTITIONS = WIN32_ERROR.ERROR_VOLMGR_DISK_LAYOUT_NON_BASIC_BETWEEN_BASIC_PARTITIONS;
pub const ERROR_VOLMGR_DISK_LAYOUT_NOT_CYLINDER_ALIGNED = WIN32_ERROR.ERROR_VOLMGR_DISK_LAYOUT_NOT_CYLINDER_ALIGNED;
pub const ERROR_VOLMGR_DISK_LAYOUT_PARTITIONS_TOO_SMALL = WIN32_ERROR.ERROR_VOLMGR_DISK_LAYOUT_PARTITIONS_TOO_SMALL;
pub const ERROR_VOLMGR_DISK_LAYOUT_PRIMARY_BETWEEN_LOGICAL_PARTITIONS = WIN32_ERROR.ERROR_VOLMGR_DISK_LAYOUT_PRIMARY_BETWEEN_LOGICAL_PARTITIONS;
pub const ERROR_VOLMGR_DISK_LAYOUT_TOO_MANY_PARTITIONS = WIN32_ERROR.ERROR_VOLMGR_DISK_LAYOUT_TOO_MANY_PARTITIONS;
pub const ERROR_VOLMGR_DISK_MISSING = WIN32_ERROR.ERROR_VOLMGR_DISK_MISSING;
pub const ERROR_VOLMGR_DISK_NOT_EMPTY = WIN32_ERROR.ERROR_VOLMGR_DISK_NOT_EMPTY;
pub const ERROR_VOLMGR_DISK_NOT_ENOUGH_SPACE = WIN32_ERROR.ERROR_VOLMGR_DISK_NOT_ENOUGH_SPACE;
pub const ERROR_VOLMGR_DISK_REVECTORING_FAILED = WIN32_ERROR.ERROR_VOLMGR_DISK_REVECTORING_FAILED;
pub const ERROR_VOLMGR_DISK_SECTOR_SIZE_INVALID = WIN32_ERROR.ERROR_VOLMGR_DISK_SECTOR_SIZE_INVALID;
pub const ERROR_VOLMGR_DISK_SET_NOT_CONTAINED = WIN32_ERROR.ERROR_VOLMGR_DISK_SET_NOT_CONTAINED;
pub const ERROR_VOLMGR_DISK_USED_BY_MULTIPLE_MEMBERS = WIN32_ERROR.ERROR_VOLMGR_DISK_USED_BY_MULTIPLE_MEMBERS;
pub const ERROR_VOLMGR_DISK_USED_BY_MULTIPLE_PLEXES = WIN32_ERROR.ERROR_VOLMGR_DISK_USED_BY_MULTIPLE_PLEXES;
pub const ERROR_VOLMGR_DYNAMIC_DISK_NOT_SUPPORTED = WIN32_ERROR.ERROR_VOLMGR_DYNAMIC_DISK_NOT_SUPPORTED;
pub const ERROR_VOLMGR_EXTENT_ALREADY_USED = WIN32_ERROR.ERROR_VOLMGR_EXTENT_ALREADY_USED;
pub const ERROR_VOLMGR_EXTENT_NOT_CONTIGUOUS = WIN32_ERROR.ERROR_VOLMGR_EXTENT_NOT_CONTIGUOUS;
pub const ERROR_VOLMGR_EXTENT_NOT_IN_PUBLIC_REGION = WIN32_ERROR.ERROR_VOLMGR_EXTENT_NOT_IN_PUBLIC_REGION;
pub const ERROR_VOLMGR_EXTENT_NOT_SECTOR_ALIGNED = WIN32_ERROR.ERROR_VOLMGR_EXTENT_NOT_SECTOR_ALIGNED;
pub const ERROR_VOLMGR_EXTENT_OVERLAPS_EBR_PARTITION = WIN32_ERROR.ERROR_VOLMGR_EXTENT_OVERLAPS_EBR_PARTITION;
pub const ERROR_VOLMGR_EXTENT_VOLUME_LENGTHS_DO_NOT_MATCH = WIN32_ERROR.ERROR_VOLMGR_EXTENT_VOLUME_LENGTHS_DO_NOT_MATCH;
pub const ERROR_VOLMGR_FAULT_TOLERANT_NOT_SUPPORTED = WIN32_ERROR.ERROR_VOLMGR_FAULT_TOLERANT_NOT_SUPPORTED;
pub const ERROR_VOLMGR_INTERLEAVE_LENGTH_INVALID = WIN32_ERROR.ERROR_VOLMGR_INTERLEAVE_LENGTH_INVALID;
pub const ERROR_VOLMGR_MAXIMUM_REGISTERED_USERS = WIN32_ERROR.ERROR_VOLMGR_MAXIMUM_REGISTERED_USERS;
pub const ERROR_VOLMGR_MEMBER_IN_SYNC = WIN32_ERROR.ERROR_VOLMGR_MEMBER_IN_SYNC;
pub const ERROR_VOLMGR_MEMBER_INDEX_DUPLICATE = WIN32_ERROR.ERROR_VOLMGR_MEMBER_INDEX_DUPLICATE;
pub const ERROR_VOLMGR_MEMBER_INDEX_INVALID = WIN32_ERROR.ERROR_VOLMGR_MEMBER_INDEX_INVALID;
pub const ERROR_VOLMGR_MEMBER_MISSING = WIN32_ERROR.ERROR_VOLMGR_MEMBER_MISSING;
pub const ERROR_VOLMGR_MEMBER_NOT_DETACHED = WIN32_ERROR.ERROR_VOLMGR_MEMBER_NOT_DETACHED;
pub const ERROR_VOLMGR_MEMBER_REGENERATING = WIN32_ERROR.ERROR_VOLMGR_MEMBER_REGENERATING;
pub const ERROR_VOLMGR_ALL_DISKS_FAILED = WIN32_ERROR.ERROR_VOLMGR_ALL_DISKS_FAILED;
pub const ERROR_VOLMGR_NO_REGISTERED_USERS = WIN32_ERROR.ERROR_VOLMGR_NO_REGISTERED_USERS;
pub const ERROR_VOLMGR_NO_SUCH_USER = WIN32_ERROR.ERROR_VOLMGR_NO_SUCH_USER;
pub const ERROR_VOLMGR_NOTIFICATION_RESET = WIN32_ERROR.ERROR_VOLMGR_NOTIFICATION_RESET;
pub const ERROR_VOLMGR_NUMBER_OF_MEMBERS_INVALID = WIN32_ERROR.ERROR_VOLMGR_NUMBER_OF_MEMBERS_INVALID;
pub const ERROR_VOLMGR_NUMBER_OF_PLEXES_INVALID = WIN32_ERROR.ERROR_VOLMGR_NUMBER_OF_PLEXES_INVALID;
pub const ERROR_VOLMGR_PACK_DUPLICATE = WIN32_ERROR.ERROR_VOLMGR_PACK_DUPLICATE;
pub const ERROR_VOLMGR_PACK_ID_INVALID = WIN32_ERROR.ERROR_VOLMGR_PACK_ID_INVALID;
pub const ERROR_VOLMGR_PACK_INVALID = WIN32_ERROR.ERROR_VOLMGR_PACK_INVALID;
pub const ERROR_VOLMGR_PACK_NAME_INVALID = WIN32_ERROR.ERROR_VOLMGR_PACK_NAME_INVALID;
pub const ERROR_VOLMGR_PACK_OFFLINE = WIN32_ERROR.ERROR_VOLMGR_PACK_OFFLINE;
pub const ERROR_VOLMGR_PACK_HAS_QUORUM = WIN32_ERROR.ERROR_VOLMGR_PACK_HAS_QUORUM;
pub const ERROR_VOLMGR_PACK_WITHOUT_QUORUM = WIN32_ERROR.ERROR_VOLMGR_PACK_WITHOUT_QUORUM;
pub const ERROR_VOLMGR_PARTITION_STYLE_INVALID = WIN32_ERROR.ERROR_VOLMGR_PARTITION_STYLE_INVALID;
pub const ERROR_VOLMGR_PARTITION_UPDATE_FAILED = WIN32_ERROR.ERROR_VOLMGR_PARTITION_UPDATE_FAILED;
pub const ERROR_VOLMGR_PLEX_IN_SYNC = WIN32_ERROR.ERROR_VOLMGR_PLEX_IN_SYNC;
pub const ERROR_VOLMGR_PLEX_INDEX_DUPLICATE = WIN32_ERROR.ERROR_VOLMGR_PLEX_INDEX_DUPLICATE;
pub const ERROR_VOLMGR_PLEX_INDEX_INVALID = WIN32_ERROR.ERROR_VOLMGR_PLEX_INDEX_INVALID;
pub const ERROR_VOLMGR_PLEX_LAST_ACTIVE = WIN32_ERROR.ERROR_VOLMGR_PLEX_LAST_ACTIVE;
pub const ERROR_VOLMGR_PLEX_MISSING = WIN32_ERROR.ERROR_VOLMGR_PLEX_MISSING;
pub const ERROR_VOLMGR_PLEX_REGENERATING = WIN32_ERROR.ERROR_VOLMGR_PLEX_REGENERATING;
pub const ERROR_VOLMGR_PLEX_TYPE_INVALID = WIN32_ERROR.ERROR_VOLMGR_PLEX_TYPE_INVALID;
pub const ERROR_VOLMGR_PLEX_NOT_RAID5 = WIN32_ERROR.ERROR_VOLMGR_PLEX_NOT_RAID5;
pub const ERROR_VOLMGR_PLEX_NOT_SIMPLE = WIN32_ERROR.ERROR_VOLMGR_PLEX_NOT_SIMPLE;
pub const ERROR_VOLMGR_STRUCTURE_SIZE_INVALID = WIN32_ERROR.ERROR_VOLMGR_STRUCTURE_SIZE_INVALID;
pub const ERROR_VOLMGR_TOO_MANY_NOTIFICATION_REQUESTS = WIN32_ERROR.ERROR_VOLMGR_TOO_MANY_NOTIFICATION_REQUESTS;
pub const ERROR_VOLMGR_TRANSACTION_IN_PROGRESS = WIN32_ERROR.ERROR_VOLMGR_TRANSACTION_IN_PROGRESS;
pub const ERROR_VOLMGR_UNEXPECTED_DISK_LAYOUT_CHANGE = WIN32_ERROR.ERROR_VOLMGR_UNEXPECTED_DISK_LAYOUT_CHANGE;
pub const ERROR_VOLMGR_VOLUME_CONTAINS_MISSING_DISK = WIN32_ERROR.ERROR_VOLMGR_VOLUME_CONTAINS_MISSING_DISK;
pub const ERROR_VOLMGR_VOLUME_ID_INVALID = WIN32_ERROR.ERROR_VOLMGR_VOLUME_ID_INVALID;
pub const ERROR_VOLMGR_VOLUME_LENGTH_INVALID = WIN32_ERROR.ERROR_VOLMGR_VOLUME_LENGTH_INVALID;
pub const ERROR_VOLMGR_VOLUME_LENGTH_NOT_SECTOR_SIZE_MULTIPLE = WIN32_ERROR.ERROR_VOLMGR_VOLUME_LENGTH_NOT_SECTOR_SIZE_MULTIPLE;
pub const ERROR_VOLMGR_VOLUME_NOT_MIRRORED = WIN32_ERROR.ERROR_VOLMGR_VOLUME_NOT_MIRRORED;
pub const ERROR_VOLMGR_VOLUME_NOT_RETAINED = WIN32_ERROR.ERROR_VOLMGR_VOLUME_NOT_RETAINED;
pub const ERROR_VOLMGR_VOLUME_OFFLINE = WIN32_ERROR.ERROR_VOLMGR_VOLUME_OFFLINE;
pub const ERROR_VOLMGR_VOLUME_RETAINED = WIN32_ERROR.ERROR_VOLMGR_VOLUME_RETAINED;
pub const ERROR_VOLMGR_NUMBER_OF_EXTENTS_INVALID = WIN32_ERROR.ERROR_VOLMGR_NUMBER_OF_EXTENTS_INVALID;
pub const ERROR_VOLMGR_DIFFERENT_SECTOR_SIZE = WIN32_ERROR.ERROR_VOLMGR_DIFFERENT_SECTOR_SIZE;
pub const ERROR_VOLMGR_BAD_BOOT_DISK = WIN32_ERROR.ERROR_VOLMGR_BAD_BOOT_DISK;
pub const ERROR_VOLMGR_PACK_CONFIG_OFFLINE = WIN32_ERROR.ERROR_VOLMGR_PACK_CONFIG_OFFLINE;
pub const ERROR_VOLMGR_PACK_CONFIG_ONLINE = WIN32_ERROR.ERROR_VOLMGR_PACK_CONFIG_ONLINE;
pub const ERROR_VOLMGR_NOT_PRIMARY_PACK = WIN32_ERROR.ERROR_VOLMGR_NOT_PRIMARY_PACK;
pub const ERROR_VOLMGR_PACK_LOG_UPDATE_FAILED = WIN32_ERROR.ERROR_VOLMGR_PACK_LOG_UPDATE_FAILED;
pub const ERROR_VOLMGR_NUMBER_OF_DISKS_IN_PLEX_INVALID = WIN32_ERROR.ERROR_VOLMGR_NUMBER_OF_DISKS_IN_PLEX_INVALID;
pub const ERROR_VOLMGR_NUMBER_OF_DISKS_IN_MEMBER_INVALID = WIN32_ERROR.ERROR_VOLMGR_NUMBER_OF_DISKS_IN_MEMBER_INVALID;
pub const ERROR_VOLMGR_VOLUME_MIRRORED = WIN32_ERROR.ERROR_VOLMGR_VOLUME_MIRRORED;
pub const ERROR_VOLMGR_PLEX_NOT_SIMPLE_SPANNED = WIN32_ERROR.ERROR_VOLMGR_PLEX_NOT_SIMPLE_SPANNED;
pub const ERROR_VOLMGR_NO_VALID_LOG_COPIES = WIN32_ERROR.ERROR_VOLMGR_NO_VALID_LOG_COPIES;
pub const ERROR_VOLMGR_PRIMARY_PACK_PRESENT = WIN32_ERROR.ERROR_VOLMGR_PRIMARY_PACK_PRESENT;
pub const ERROR_VOLMGR_NUMBER_OF_DISKS_INVALID = WIN32_ERROR.ERROR_VOLMGR_NUMBER_OF_DISKS_INVALID;
pub const ERROR_VOLMGR_MIRROR_NOT_SUPPORTED = WIN32_ERROR.ERROR_VOLMGR_MIRROR_NOT_SUPPORTED;
pub const ERROR_VOLMGR_RAID5_NOT_SUPPORTED = WIN32_ERROR.ERROR_VOLMGR_RAID5_NOT_SUPPORTED;
pub const ERROR_BCD_NOT_ALL_ENTRIES_IMPORTED = WIN32_ERROR.ERROR_BCD_NOT_ALL_ENTRIES_IMPORTED;
pub const ERROR_BCD_TOO_MANY_ELEMENTS = WIN32_ERROR.ERROR_BCD_TOO_MANY_ELEMENTS;
pub const ERROR_BCD_NOT_ALL_ENTRIES_SYNCHRONIZED = WIN32_ERROR.ERROR_BCD_NOT_ALL_ENTRIES_SYNCHRONIZED;
pub const ERROR_VHD_DRIVE_FOOTER_MISSING = WIN32_ERROR.ERROR_VHD_DRIVE_FOOTER_MISSING;
pub const ERROR_VHD_DRIVE_FOOTER_CHECKSUM_MISMATCH = WIN32_ERROR.ERROR_VHD_DRIVE_FOOTER_CHECKSUM_MISMATCH;
pub const ERROR_VHD_DRIVE_FOOTER_CORRUPT = WIN32_ERROR.ERROR_VHD_DRIVE_FOOTER_CORRUPT;
pub const ERROR_VHD_FORMAT_UNKNOWN = WIN32_ERROR.ERROR_VHD_FORMAT_UNKNOWN;
pub const ERROR_VHD_FORMAT_UNSUPPORTED_VERSION = WIN32_ERROR.ERROR_VHD_FORMAT_UNSUPPORTED_VERSION;
pub const ERROR_VHD_SPARSE_HEADER_CHECKSUM_MISMATCH = WIN32_ERROR.ERROR_VHD_SPARSE_HEADER_CHECKSUM_MISMATCH;
pub const ERROR_VHD_SPARSE_HEADER_UNSUPPORTED_VERSION = WIN32_ERROR.ERROR_VHD_SPARSE_HEADER_UNSUPPORTED_VERSION;
pub const ERROR_VHD_SPARSE_HEADER_CORRUPT = WIN32_ERROR.ERROR_VHD_SPARSE_HEADER_CORRUPT;
pub const ERROR_VHD_BLOCK_ALLOCATION_FAILURE = WIN32_ERROR.ERROR_VHD_BLOCK_ALLOCATION_FAILURE;
pub const ERROR_VHD_BLOCK_ALLOCATION_TABLE_CORRUPT = WIN32_ERROR.ERROR_VHD_BLOCK_ALLOCATION_TABLE_CORRUPT;
pub const ERROR_VHD_INVALID_BLOCK_SIZE = WIN32_ERROR.ERROR_VHD_INVALID_BLOCK_SIZE;
pub const ERROR_VHD_BITMAP_MISMATCH = WIN32_ERROR.ERROR_VHD_BITMAP_MISMATCH;
pub const ERROR_VHD_PARENT_VHD_NOT_FOUND = WIN32_ERROR.ERROR_VHD_PARENT_VHD_NOT_FOUND;
pub const ERROR_VHD_CHILD_PARENT_ID_MISMATCH = WIN32_ERROR.ERROR_VHD_CHILD_PARENT_ID_MISMATCH;
pub const ERROR_VHD_CHILD_PARENT_TIMESTAMP_MISMATCH = WIN32_ERROR.ERROR_VHD_CHILD_PARENT_TIMESTAMP_MISMATCH;
pub const ERROR_VHD_METADATA_READ_FAILURE = WIN32_ERROR.ERROR_VHD_METADATA_READ_FAILURE;
pub const ERROR_VHD_METADATA_WRITE_FAILURE = WIN32_ERROR.ERROR_VHD_METADATA_WRITE_FAILURE;
pub const ERROR_VHD_INVALID_SIZE = WIN32_ERROR.ERROR_VHD_INVALID_SIZE;
pub const ERROR_VHD_INVALID_FILE_SIZE = WIN32_ERROR.ERROR_VHD_INVALID_FILE_SIZE;
pub const ERROR_VIRTDISK_PROVIDER_NOT_FOUND = WIN32_ERROR.ERROR_VIRTDISK_PROVIDER_NOT_FOUND;
pub const ERROR_VIRTDISK_NOT_VIRTUAL_DISK = WIN32_ERROR.ERROR_VIRTDISK_NOT_VIRTUAL_DISK;
pub const ERROR_VHD_PARENT_VHD_ACCESS_DENIED = WIN32_ERROR.ERROR_VHD_PARENT_VHD_ACCESS_DENIED;
pub const ERROR_VHD_CHILD_PARENT_SIZE_MISMATCH = WIN32_ERROR.ERROR_VHD_CHILD_PARENT_SIZE_MISMATCH;
pub const ERROR_VHD_DIFFERENCING_CHAIN_CYCLE_DETECTED = WIN32_ERROR.ERROR_VHD_DIFFERENCING_CHAIN_CYCLE_DETECTED;
pub const ERROR_VHD_DIFFERENCING_CHAIN_ERROR_IN_PARENT = WIN32_ERROR.ERROR_VHD_DIFFERENCING_CHAIN_ERROR_IN_PARENT;
pub const ERROR_VIRTUAL_DISK_LIMITATION = WIN32_ERROR.ERROR_VIRTUAL_DISK_LIMITATION;
pub const ERROR_VHD_INVALID_TYPE = WIN32_ERROR.ERROR_VHD_INVALID_TYPE;
pub const ERROR_VHD_INVALID_STATE = WIN32_ERROR.ERROR_VHD_INVALID_STATE;
pub const ERROR_VIRTDISK_UNSUPPORTED_DISK_SECTOR_SIZE = WIN32_ERROR.ERROR_VIRTDISK_UNSUPPORTED_DISK_SECTOR_SIZE;
pub const ERROR_VIRTDISK_DISK_ALREADY_OWNED = WIN32_ERROR.ERROR_VIRTDISK_DISK_ALREADY_OWNED;
pub const ERROR_VIRTDISK_DISK_ONLINE_AND_WRITABLE = WIN32_ERROR.ERROR_VIRTDISK_DISK_ONLINE_AND_WRITABLE;
pub const ERROR_CTLOG_TRACKING_NOT_INITIALIZED = WIN32_ERROR.ERROR_CTLOG_TRACKING_NOT_INITIALIZED;
pub const ERROR_CTLOG_LOGFILE_SIZE_EXCEEDED_MAXSIZE = WIN32_ERROR.ERROR_CTLOG_LOGFILE_SIZE_EXCEEDED_MAXSIZE;
pub const ERROR_CTLOG_VHD_CHANGED_OFFLINE = WIN32_ERROR.ERROR_CTLOG_VHD_CHANGED_OFFLINE;
pub const ERROR_CTLOG_INVALID_TRACKING_STATE = WIN32_ERROR.ERROR_CTLOG_INVALID_TRACKING_STATE;
pub const ERROR_CTLOG_INCONSISTENT_TRACKING_FILE = WIN32_ERROR.ERROR_CTLOG_INCONSISTENT_TRACKING_FILE;
pub const ERROR_VHD_RESIZE_WOULD_TRUNCATE_DATA = WIN32_ERROR.ERROR_VHD_RESIZE_WOULD_TRUNCATE_DATA;
pub const ERROR_VHD_COULD_NOT_COMPUTE_MINIMUM_VIRTUAL_SIZE = WIN32_ERROR.ERROR_VHD_COULD_NOT_COMPUTE_MINIMUM_VIRTUAL_SIZE;
pub const ERROR_VHD_ALREADY_AT_OR_BELOW_MINIMUM_VIRTUAL_SIZE = WIN32_ERROR.ERROR_VHD_ALREADY_AT_OR_BELOW_MINIMUM_VIRTUAL_SIZE;
pub const ERROR_VHD_METADATA_FULL = WIN32_ERROR.ERROR_VHD_METADATA_FULL;
pub const ERROR_VHD_INVALID_CHANGE_TRACKING_ID = WIN32_ERROR.ERROR_VHD_INVALID_CHANGE_TRACKING_ID;
pub const ERROR_VHD_CHANGE_TRACKING_DISABLED = WIN32_ERROR.ERROR_VHD_CHANGE_TRACKING_DISABLED;
pub const ERROR_VHD_MISSING_CHANGE_TRACKING_INFORMATION = WIN32_ERROR.ERROR_VHD_MISSING_CHANGE_TRACKING_INFORMATION;
pub const ERROR_QUERY_STORAGE_ERROR = WIN32_ERROR.ERROR_QUERY_STORAGE_ERROR;
