const std = @import("std");
const builtin = @import("builtin");
const math = @import("math.zig");
const graphics = @import("graphics.zig");
const tic80 = @import("tic80.zig");
const physics = @import("physics.zig");
const font = @import("text.zig").font;

const BoundingBox = math.BoundingBox;
const Vector2i = math.Vector2i;
const Vector2f = math.Vector2f;
const Vector3f = math.Vector3f;
const Vec2 = math.Vec2;
const M44 = math.M44;
const M33 = math.M33;
const Buffer2D = @import("buffer.zig").Buffer2D;
const RGB = @import("pixels.zig").RGB;
const RGBA = @import("pixels.zig").RGBA;
const BGRA = @import("pixels.zig").BGRA;
const BGR = @import("pixels.zig").BGR;
const Ecs = @import("ecs.zig").Ecs;
const Entity = @import("ecs.zig").Entity;

const windows = @import("windows.zig");
const wasm = @import("wasm.zig");
const platform = if (builtin.os.tag == .windows) windows else wasm;
const Application = platform.Application(.{
    .init = init,
    .update = update,
    .dimension_scale = 2,
    .desired_width = 240*3,
    .desired_height = 136*3,
});

// TODO: currently the wasm target only works if the exported functions are explicitly referenced.
// The reason for this is that zig compiles lazily. By referencing Platform.run, the comptime code
// in that funciton is executed, which in turn references the exported functions, making it so
// that those are "found" by zig and properly exported.
comptime {
    _ = Application.run;
}

pub fn main() !void {
    try Application.run();
}

const text_scale = 1;
const State = struct {
    debug_text_renderer: TextRenderer(platform.OutPixelType, 1024, text_scale),
    text_renderer: TextRenderer(platform.OutPixelType, 1024, text_scale),
    renderer: tic80.Renderer(platform.OutPixelType, tic80.Shader(platform.OutPixelType)),
    renderer_quads: tic80.QuadRenderer(platform.OutPixelType, tic80.QuadShader(platform.OutPixelType, null)),
    renderer_blending: tic80.QuadRenderer(platform.OutPixelType, tic80.QuadShader(platform.OutPixelType, 0)),
    renderer_shapes: ShapeRenderer(platform.OutPixelType, RGB.from(255,255,255)),
    renderer_surfaces: StandardQuadRenderer(platform.OutPixelType),
    level_background: Assets.LevelBackgroundDescriptor,
    rng_engine: std.rand.DefaultPrng,
    random: std.rand.Random,
    debug: bool,
    zoom: i32,
    selected_sprite: u8,
    quick_select_sprite: [4]?u8,
    camera: Camera,
    resources: Resources,
    resource_file_name: []const u8,
};

var state: State = undefined;

pub fn init(allocator: std.mem.Allocator) anyerror!void {
    state.debug_text_renderer = try TextRenderer(platform.OutPixelType, 1024, text_scale).init(allocator);
    state.text_renderer = try TextRenderer(platform.OutPixelType, 1024, text_scale).init(allocator);
    state.renderer = try tic80.Renderer(platform.OutPixelType, tic80.Shader(platform.OutPixelType)).init(allocator, Assets.palette, Assets.atlas_tiles);
    state.renderer_quads = try tic80.QuadRenderer(platform.OutPixelType, tic80.QuadShader(platform.OutPixelType, null)).init(allocator, Assets.palette, Assets.atlas_tiles);
    state.renderer_blending = try tic80.QuadRenderer(platform.OutPixelType, tic80.QuadShader(platform.OutPixelType, 0)).init(allocator, Assets.palette, Assets.atlas_tiles);
    state.renderer_shapes = try ShapeRenderer(platform.OutPixelType, RGB.from(255,255,255)).init(allocator);
    state.renderer_surfaces = try StandardQuadRenderer(platform.OutPixelType).init(allocator);
    state.camera = Camera.init(Vector3f { .x = 0, .y = 0, .z = 0 });
    state.rng_engine = std.rand.DefaultPrng.init(@intCast(platform.timestamp()));
    state.random = state.rng_engine.random();
    state.debug = true;
    state.zoom = 1;
    state.level_background = Assets.level_all_levels.background.*;
    state.selected_sprite = 0;
    state.resource_file_name = "resources.bin";
    state.resources = Resources.init(allocator);
    state.resources.load_from_file(state.resource_file_name) catch |err| {
        std.log.debug("err: failed to load from file: {any}", .{err});
        try state.resources.load_from_embedded();
    };
}

pub fn update(ud: *platform.UpdateData) anyerror!bool {

    const h: f32 = @floatFromInt(ud.pixel_buffer.height);
    const w: f32 = @floatFromInt(ud.pixel_buffer.width);
    const zoom: f32 = @floatFromInt(state.zoom); _ = zoom;
    // already takes into account native scaling if in use
    const mouse_window: Vector2f = blk: {
        const mx = @divFloor(ud.mouse.x, Application.dimension_scale);
        // inverse y since mouse is given relative to top left corner
        const my = @divFloor((Application.height*Application.dimension_scale) - ud.mouse.y, Application.dimension_scale);
        break :blk Vector2i.from(mx, my).to(f32);
    };
    const mouse_world: Vector2f = blk: {
        const offset = Vector2f.from(state.camera.pos.x, state.camera.pos.y);
        break :blk mouse_window.add(offset);
    };
    // represents the tile x, y where the mouse is, assuming that tile size is 8
    // and that the coordinate 0, 0 is the bottom left pixel of the tile 0, 0
    const mouse_tile = Vector2f.from(@floor(mouse_world.x/8), @floor(mouse_world.y/8));
    const mouse_tile_in_map = mouse_tile.add(Vector2f.from(@floatFromInt(state.level_background.bb.left), @floatFromInt(state.level_background.bb.bottom)));
    const map_editor_world_coords_bb = blk: {
        var bb = state.level_background.bb;
        bb.top += 1;
        bb.right += 1;
        break :blk bb.scale(Vec2(usize).from(8,8)).to(f32);
    };
    _ = map_editor_world_coords_bb;
    const mouse_is_in_map_editor = state.level_background.bb.to(f32).contains(mouse_tile);
    
    const MouseState = struct {
        var busy = false;
    };

    const pan_speed = 5;
    if (ud.key_pressed('L')) try state.resources.load_from_file(state.resource_file_name);
    if (ud.key_pressed('M')) try state.resources.save_to_file(ud.allocator, state.resource_file_name);
    if (ud.key_pressed('G')) state.debug = !state.debug;
    if (ud.key_pressing('W')) state.camera.pos.y += pan_speed;
    if (ud.key_pressing('A')) state.camera.pos.x -= pan_speed;
    if (ud.key_pressing('S')) state.camera.pos.y -= pan_speed;
    if (ud.key_pressing('D')) state.camera.pos.x += pan_speed;
    if (ud.mwheel > 0) state.zoom += 1;
    if (ud.mwheel < 0) state.zoom -= 1;

    if (ud.key_pressed('J') and mouse_is_in_map_editor) try state.resources.junctions.append(.{.a = mouse_tile_in_map.to(u8), .b = mouse_tile_in_map.to(u8) });    

    const clear_color: BGR = @bitCast(Assets.palette[0]);
    ud.pixel_buffer.clear(platform.OutPixelType.from(BGR, clear_color));

    const view_matrix = M33.look_at(Vector2f.from(state.camera.pos.x, state.camera.pos.y), Vector2f.from(0, 1));
    const projection_matrix = M33.orthographic_projection(0, w, h, 0);
    const mvp_matrix = projection_matrix.multiply(view_matrix);
    const viewport_matrix = M33.viewport(0, 0, w, h);
    const projection_matrix_screen = M33.orthographic_projection(0, w, h, 0);

    const entity_spawner_menu_data = struct {
        var option_selected: ?usize = null;
        var option_hovered: ?usize = null;
        const options: []const []const u8 = blk: {
            var opts: []const []const u8 = &[_][]const u8 {};
            opts = opts ++ &[_][]const u8{};
            for (@typeInfo(Assets.EntityType).Enum.fields) |field| {
                opts = opts ++ &[_][]const u8{field.name};
            }
            opts = opts ++ &[_][]const u8{"delete spawner"};
            break :blk opts;
        };
    };
    
    const entity_spawner_menu = Container("entity_spawner_menu");
    if (try entity_spawner_menu.begin(ud.allocator, "entity spawner", Vec2(f32).from(10, 250), mouse_window, ud.mouse_left_clicked, ud.mouse_left_down, ud.pixel_buffer, projection_matrix_screen, viewport_matrix)) {
        if (entity_spawner_menu_data.option_selected) |selected| try entity_spawner_menu.text_line_fmt("Selected: {}", .{selected})
        else try entity_spawner_menu.text_line("Select one...");
        _ = try entity_spawner_menu.selection_grid_from_text_options(entity_spawner_menu_data.options, &entity_spawner_menu_data.option_selected, &entity_spawner_menu_data.option_hovered);
    }
    try entity_spawner_menu.end();

    const particle_emitter_menu_data = struct {
        var option_selected: ?usize = null;
        var option_hovered: ?usize = null;
        const options: []const []const u8 = blk: {
            var opts: []const []const u8 = &[_][]const u8 {};
            opts = opts ++ &[_][]const u8{};
            for (@typeInfo(Assets.ParticleEmitterType).Enum.fields) |field| {
                opts = opts ++ &[_][]const u8{field.name};
            }
            opts = opts ++ &[_][]const u8{"delete emitter"};
            break :blk opts;
        };
    };

    const particle_emitter_menu = Container("particle_emitter_menu");
    if (try particle_emitter_menu.begin(ud.allocator, "particle emitter spawner", Vec2(f32).from(10, 300), mouse_window, ud.mouse_left_clicked, ud.mouse_left_down, ud.pixel_buffer, projection_matrix_screen, viewport_matrix)) {
        if (particle_emitter_menu_data.option_selected) |selected| try particle_emitter_menu.text_line_fmt("Selected: {}", .{selected})
        else try particle_emitter_menu.text_line("Select one...");
        _ = try particle_emitter_menu.selection_grid_from_text_options(particle_emitter_menu_data.options, &particle_emitter_menu_data.option_selected, &particle_emitter_menu_data.option_hovered);
    }
    try particle_emitter_menu.end();

    const sprite_selector_window_data = struct {
        var sprite_selected: ?usize = 0;
        var sprite_hovered: ?usize = null;
        var quick_select_sprite_selected: ?usize = 0;
        var quick_select_sprite_hovered: ?usize = null;
        var quick_select_indices: [8]?usize = [_]?usize {null} ** 8;
    };
    const sprite_selector_window = Container("sprite_selector");
    if (try sprite_selector_window.begin(ud.allocator, "sprites", Vec2(f32).from (10, 10+16*8), mouse_window, ud.mouse_left_clicked, ud.mouse_left_down, ud.pixel_buffer, projection_matrix_screen, viewport_matrix)) {
        if (sprite_selector_window_data.sprite_selected) |selected| try sprite_selector_window.text_line_fmt("Selected: {}", .{selected})
        else try sprite_selector_window.text_line("Select one...");
        
        const sprite_quick_select_grid = sprite_selector_window.selection_grid(Vec2(usize).from(8,1), Vec2(usize).from(8,8), &sprite_selector_window_data.quick_select_sprite_selected, &sprite_selector_window_data.quick_select_sprite_hovered);
        for (0..8) |i| {
            if (ud.key_pressed(49 + i)) sprite_selector_window_data.quick_select_sprite_selected = i;
            if (sprite_selector_window_data.quick_select_indices[i]) |sprite_index| {
                const sprite_uv_bb = BoundingBox(usize).from_indexed_grid(Vec2(usize).from(16,16), Vec2(usize).from(8,8), sprite_index, true);
                try sprite_quick_select_grid.fill_index_with_palette_based_textured_quad(i, sprite_uv_bb.to(f32), Assets.atlas_tiles_buffer, @constCast(&Assets.palette));
            }
        }
        try sprite_quick_select_grid.highlight_selection_and_hover();

        const sprite_grid = sprite_selector_window.selection_grid(Vec2(usize).from(16,16), Vec2(usize).from(8,8), &sprite_selector_window_data.sprite_selected, &sprite_selector_window_data.sprite_hovered);
        try sprite_grid.fill_with_palette_based_texture(Assets.atlas_tiles_buffer, @constCast(&Assets.palette));
        try sprite_grid.highlight_selection_and_hover();
        
        if (sprite_grid.just_selected) {
            sprite_selector_window_data.quick_select_indices[sprite_selector_window_data.quick_select_sprite_selected.?] = sprite_selector_window_data.sprite_selected.?;
        }

    }
    try sprite_selector_window.end();

    const map_editor_data = struct {
        const size = Vec2(usize).from(50,30);
        var map_tile_selected: ?usize = 0;
        var map_tile_hovered: ?usize = null;
        var map_tile_bb = BoundingBox(usize).from(size.y-1, 0, 0, size.x-1);
        var surface: Buffer2D(platform.OutPixelType) = undefined;
        var initialized = false;
    };
    if (!map_editor_data.initialized) {
        map_editor_data.initialized = true;
        map_editor_data.surface = Buffer2D(platform.OutPixelType).from(try ud.allocator.alloc(platform.OutPixelType, map_editor_data.size.x*8*map_editor_data.size.y*8), map_editor_data.size.x*8);
    }
    const map_editor = Container("map_editor");
    if (try map_editor.begin(ud.allocator, "map editor", Vec2(f32).from (200, h-10), mouse_window, ud.mouse_left_clicked, ud.mouse_left_down, ud.pixel_buffer, projection_matrix_screen, viewport_matrix)) {
        
        if (ud.key_pressing('D') and map_editor_data.map_tile_bb.right < 240-1) map_editor_data.map_tile_bb = map_editor_data.map_tile_bb.offset(Vec2(usize).from(1, 0));
        if (ud.key_pressing('W') and map_editor_data.map_tile_bb.top < 136-1) map_editor_data.map_tile_bb = map_editor_data.map_tile_bb.offset(Vec2(usize).from(0, 1));
        if (ud.key_pressing('S') and map_editor_data.map_tile_bb.bottom > 0) map_editor_data.map_tile_bb = map_editor_data.map_tile_bb.offset_negative(Vec2(usize).from(0, 1));
        if (ud.key_pressing('A') and map_editor_data.map_tile_bb.left > 0) map_editor_data.map_tile_bb = map_editor_data.map_tile_bb.offset_negative(Vec2(usize).from(1, 0));
        
        try state.renderer_quads.add_map(state.resources.map, map_editor_data.map_tile_bb, Vector2f.from(0,0));
        state.renderer_quads.render(
            map_editor_data.surface,
            M33.orthographic_projection(0, map_editor_data.size.x*8, map_editor_data.size.y*8, 0),
            M33.viewport(0, 0, map_editor_data.size.x*8, map_editor_data.size.y*8)
        );

        const map_editor_tile_grid = map_editor.selection_grid(map_editor_data.size, Vec2(usize).from(8,8), &map_editor_data.map_tile_selected, &map_editor_data.map_tile_hovered);

        // map_editor_data.offsetx = std.math.clamp(map_editor_data.offsetx, 0, 240-ww);
        // map_editor_data.offsety = std.math.clamp(map_editor_data.offsety, 0, 136-hh);
        // const map_editor_tile_grid = map_editor.selection_grid(Vec2(usize).from(ww,hh), Vec2(usize).from(8,8), &map_editor_data.map_tile_selected, &map_editor_data.map_tile_hovered);
        // for (map_editor_data.offsety..map_editor_data.offsety+hh) |y| {
        //     for (map_editor_data.offsetx..map_editor_data.offsetx+ww) |x| {
        //         const index = (x - map_editor_data.offsetx) + (y - map_editor_data.offsety)*ww;
        //         const sprite_uv_bb = BoundingBox(usize).from_indexed_grid(Vec2(usize).from(16,16), Vec2(usize).from(8,8), @intCast(state.resources.map[y][x]), true);
        //         try map_editor_tile_grid.fill_index_with_palette_based_textured_quad(index, sprite_uv_bb.to(f32), Assets.atlas_tiles_buffer, @constCast(&Assets.palette));
        //     }
        // }

        try map_editor_tile_grid.fill_with_texture(map_editor_data.surface);
        try map_editor_tile_grid.highlight_selection_and_hover();
    }
    try map_editor.end();
    
    if (false) {
    // render the map
    {
        try state.renderer_quads.add_map(state.resources.map, state.level_background.bb, Vector2f.from(0,0));
        state.renderer_quads.render(
            ud.pixel_buffer,
            mvp_matrix,
            viewport_matrix
        );
    }

    // level bounding boxes
    {
        const LevelModifyState = struct {
            var index: u8 = undefined;
            var side: math.BoundingBoxSide = undefined;
            var active = false;
            fn unset() void {
                std.debug.assert(active);
                std.debug.assert(MouseState.busy);
                MouseState.busy = false;
                active = false;
            }
            fn set(_index: u8, _side: math.BoundingBoxSide) void {
                std.debug.assert(!active);
                std.debug.assert(!MouseState.busy);
                MouseState.busy = true;
                active = true;
                index = _index;
                side = _side;
            }
        };
        for (state.resources.levels.items, 0..) |*l, i| {
            const level_index: u8 = @intCast(i);
            const level_bb_f32 = l.bb.to(f32);
            var level_bb = level_bb_f32;
            level_bb.right += 1;
            level_bb.top += 1;
            level_bb = level_bb.scale(Vec2(f32).from(8,8));
            const color: RGBA = if (level_bb.contains(mouse_world)) @bitCast(@as(u32,0xff00ffff)) else @bitCast(@as(u32,0xffffffff));
            try state.renderer_shapes.add_quad_border(level_bb, 1, color);
            
            // conditions to start modifying the level bb
            if (!MouseState.busy and !LevelModifyState.active and ud.mouse_left_down) {
                if (@abs(level_bb.left - mouse_world.x) < 4 and mouse_world.y > level_bb.bottom and mouse_world.y < level_bb.top) LevelModifyState.set(level_index, .left)
                else if (@abs(level_bb.right - mouse_world.x) < 4 and mouse_world.y > level_bb.bottom and mouse_world.y < level_bb.top) LevelModifyState.set(level_index, .right)
                else if (@abs(level_bb.top - mouse_world.y) < 4 and mouse_world.x > level_bb.left and mouse_world.x < level_bb.right) LevelModifyState.set(level_index, .top)
                else if (@abs(level_bb.bottom - mouse_world.y) < 4 and mouse_world.x > level_bb.left and mouse_world.x < level_bb.right) LevelModifyState.set(level_index, .bottom);
            }
            
            if (LevelModifyState.active and LevelModifyState.index == level_index) {
                // conditions to stop modifying the level bb 
                if (!ud.mouse_left_down) LevelModifyState.unset()
                else {
                    // change the level bb
                    if (!level_bb.contains(mouse_world)) switch (LevelModifyState.side) {
                        .top => if (mouse_tile_in_map.y < 136 and mouse_tile_in_map.y>level_bb_f32.top) { l.bb.top = @intFromFloat(mouse_tile_in_map.y); },
                        .bottom => if (mouse_tile_in_map.y >= 0 and mouse_tile_in_map.y<level_bb_f32.bottom) { l.bb.bottom = @intFromFloat(mouse_tile_in_map.y); },
                        .left => if (mouse_tile_in_map.x >= 0 and mouse_tile_in_map.x<level_bb_f32.left) { l.bb.left = @intFromFloat(mouse_tile_in_map.x); },
                        .right => if (mouse_tile_in_map.x < 240 and mouse_tile_in_map.x>level_bb_f32.right) { l.bb.right = @intFromFloat(mouse_tile_in_map.x); },
                    }
                    else switch (LevelModifyState.side) {
                        .top => if (mouse_tile_in_map.y < 136 and mouse_tile_in_map.y<level_bb_f32.top) { l.bb.top = @intFromFloat(mouse_tile_in_map.y); },
                        .bottom => if (mouse_tile_in_map.y >= 0 and mouse_tile_in_map.y>level_bb_f32.bottom) { l.bb.bottom = @intFromFloat(mouse_tile_in_map.y); },
                        .left => if (mouse_tile_in_map.x >= 0 and mouse_tile_in_map.x>level_bb_f32.left) { l.bb.left = @intFromFloat(mouse_tile_in_map.x); },
                        .right => if (mouse_tile_in_map.x < 240 and mouse_tile_in_map.x<level_bb_f32.right) { l.bb.right = @intFromFloat(mouse_tile_in_map.x); },
                    }
                }
            }
        }
        var map_tile_bb = state.level_background.bb.to(f32);
        map_tile_bb.right += 1;
        map_tile_bb.top += 1;
        const map_bb = map_tile_bb.offset(Vec2(f32).from(-map_tile_bb.left, -map_tile_bb.bottom)).scale(Vec2(f32).from(8,8));
        try state.renderer_shapes.add_quad_border(map_bb, 1, @bitCast(@as(u32,0xffffffff)));
        state.renderer_shapes.render(ud.pixel_buffer, mvp_matrix, viewport_matrix);
    }

    // draw the level junctions
    {
        const JunctionModifyState = struct {
            var active = false;
            var ix: u8 = undefined;
            var a: bool = undefined;
            fn set(_ix: u8, _a: bool) void {
                std.debug.assert(!active);
                std.debug.assert(!MouseState.busy);
                MouseState.busy = true;
                active = true;
                ix = _ix;
                a = _a;
            }
            fn unset() void {
                std.debug.assert(active);
                std.debug.assert(MouseState.busy);
                MouseState.busy = false;
                active = false;
            }
        };
        for (state.resources.junctions.items, 0..) |*junction, i| {
            const index: u8 = @intCast(i);
            
            // TODO add way to remove junction

            var hover: i32 = 0;
            if (state.level_background.bb.to(f32).contains(mouse_tile)) {
                const mt = mouse_tile.to(u8);
                if (mt.x == junction.a.x and mt.y == junction.a.y) {
                    // hover junction a
                    hover = 1;
                }
                else if (mt.x == junction.b.x and mt.y == junction.b.y) {
                    // hover junction b
                    hover = 2;
                }
            }

            if (JunctionModifyState.active) {
                if (!ud.mouse_left_down) JunctionModifyState.unset()
                else if (JunctionModifyState.ix == index) {
                    if (mouse_is_in_map_editor and JunctionModifyState.a) {
                        junction.a = mouse_tile.to(u8);
                    }
                    else if (mouse_is_in_map_editor and !JunctionModifyState.a) {
                        junction.b = mouse_tile.to(u8);
                    }
                }
            }
            else {
                // condition to start modifying a junction
                if (hover > 0 and ud.mouse_left_down and !MouseState.busy) {
                    JunctionModifyState.set(index, hover == 1);
                }
            }

            const exist_sprite_id = 143;
            try state.renderer_quads.add_sprite_from_atlas_index(exist_sprite_id, junction.a.to(f32).scale(8), .{});
            try state.renderer_quads.add_sprite_from_atlas_index(exist_sprite_id, junction.b.to(f32).scale(8), .{});
            if (hover != 0) {
                try state.renderer_shapes.add_quad_border(BoundingBox(f32).from_br_size(junction.b.to(f32).scale(8), Vec2(f32).from(8, 8)), 1, @bitCast(@as(u32,0xff000066)));
                try state.renderer_shapes.add_quad_border(BoundingBox(f32).from_br_size(junction.a.to(f32).scale(8), Vec2(f32).from(8, 8)), 1, @bitCast(@as(u32,0xff000066)));
            }
            
            // TODO add line renderer pipeline, which batches lines and renders them all together I guess?
            // 
            //     try state.renderer_lines.add_line(junction.a, junction.b, @bitCast(@as(u32,0x0000ffaa)));
            // 
        }
        state.renderer_quads.render(ud.pixel_buffer, mvp_matrix, viewport_matrix);
        state.renderer_shapes.render(ud.pixel_buffer, mvp_matrix, viewport_matrix);
    }
    
    // Entity Spawners in the map editor
    {
        // Create and Delete entity spawners in the map
        if (entity_spawner_menu_data.option_selected) |option_selected| {
            if (state.level_background.bb.to(f32).contains(mouse_tile) and ud.mouse_left_clicked) {
                // NOTE the last option is hardcoded to be "delete" which is the only way of deleting entity spawners currently
                if (option_selected == entity_spawner_menu_data.options.len-1) {
                    const pos_to_delete = mouse_tile.to(u8);
                    for (state.resources.entity_spawners.items, 0..) |pe, i| {
                        if (pe.pos.equal(pos_to_delete)) {
                            const removed = state.resources.entity_spawners.orderedRemove(i);
                            std.log.debug("removed entity spawner {any}", .{removed});
                            break;
                        }
                    }
                }
                else {
                    try state.resources.entity_spawners.append(.{
                        .pos = mouse_tile.to(u8),
                        .entity_type = @intCast(option_selected)
                    });
                }
            }
        }
        // move spawners in the map
        {
            const EntitySpawnerModifyState = struct {
                var active = false;
                var index: u8 = undefined;
                fn set(_ix: u8) void {
                    std.debug.assert(!active);
                    std.debug.assert(!MouseState.busy);
                    MouseState.busy = true;
                    active = true;
                    index = _ix;
                }
                fn unset() void {
                    std.debug.assert(active);
                    std.debug.assert(MouseState.busy);
                    MouseState.busy = false;
                    active = false;
                }
            };
            for (state.resources.entity_spawners.items, 0..) |*entity_spawner, i| {
                const index: u8 = @intCast(i);
                const hovering: bool = mouse_is_in_map_editor and mouse_tile.to(u8).equal(entity_spawner.pos);
                
                if (!MouseState.busy and !EntitySpawnerModifyState.active and hovering and ud.mouse_left_down) EntitySpawnerModifyState.set(index);
                
                if (EntitySpawnerModifyState.active) {
                    if (!ud.mouse_left_down) EntitySpawnerModifyState.unset()
                    else if (EntitySpawnerModifyState.index == index) {
                        if (mouse_is_in_map_editor) entity_spawner.pos = mouse_tile.to(u8);
                    } 
                }

                // use the first sprite of the default animation as the sprite of the spawner
                const spawner_sprite_id = Assets.EntityDescriptor.from(@enumFromInt(entity_spawner.entity_type)).default_animation.sprites[0];
                try state.renderer_quads.add_sprite_from_atlas_index(spawner_sprite_id, entity_spawner.pos.to(f32).scale(8), .{});
                if (hovering) {
                    try state.renderer_shapes.add_quad_border(BoundingBox(f32).from_br_size(entity_spawner.pos.to(f32).scale(8), Vec2(f32).from(8, 8)), 1, @bitCast(@as(u32,0xffffffff)));
                }
            }
            state.renderer_quads.render(ud.pixel_buffer, mvp_matrix, viewport_matrix);
            state.renderer_shapes.render(ud.pixel_buffer, mvp_matrix, viewport_matrix);
        }
    }
    
    // Particle Emitters in the map editor
    {
        // Create and Delete emitters in the map
        {
            // implement the functionality of the menu in the map editor itself
            if (particle_emitter_menu_data.option_selected) |option_selected| {
                if(state.level_background.bb.to(f32).contains(mouse_tile) and ud.mouse_left_clicked) {
                    // NOTE the first entity in the list is hardcoded to be "delete" which is the only way of deleting entity spawners currently
                    if (option_selected == particle_emitter_menu_data.options.len-1) {
                        const pos_to_delete = mouse_tile.to(u8);
                        for (state.resources.environment_particle_emitters.items, 0..) |pe, i| {
                            if (pe.pos.equal(pos_to_delete)) {
                                const removed = state.resources.environment_particle_emitters.orderedRemove(i);
                                std.log.debug("removed particle emitter {any}", .{removed});
                                break;
                            }
                        }
                    }
                    else {
                        try state.resources.environment_particle_emitters.append(.{
                            .pos = mouse_tile.to(u8),
                            .particle_emitter_type = @intCast(option_selected)
                        });
                    }
                }
            }
        }
        // Move emitters in the map
        {
            const ParticleEmitterModifyState = struct {
                var active = false;
                var index: u8 = undefined;
                fn set(_ix: u8) void {
                    std.debug.assert(!active);
                    std.debug.assert(!MouseState.busy);
                    MouseState.busy = true;
                    active = true;
                    index = _ix;
                }
                fn unset() void {
                    std.debug.assert(active);
                    std.debug.assert(MouseState.busy);
                    MouseState.busy = false;
                    active = false;
                }
            };
            for (state.resources.environment_particle_emitters.items, 0..) |*particle_emitter, i| {
                const index: u8 = @intCast(i);
                const hovering: bool = mouse_is_in_map_editor and mouse_tile.to(u8).equal(particle_emitter.pos);
                
                if (!MouseState.busy and !ParticleEmitterModifyState.active and hovering and ud.mouse_left_down) ParticleEmitterModifyState.set(index);
                
                if (ParticleEmitterModifyState.active) {
                    if (!ud.mouse_left_down) ParticleEmitterModifyState.unset()
                    else if (ParticleEmitterModifyState.index == index) {
                        if (mouse_is_in_map_editor) particle_emitter.pos = mouse_tile.to(u8);
                    }
                }

                // use the first sprite of the default animation as the sprite of the spawner
                const particle_emitter_sprite_id = 1;
                try state.renderer_quads.add_sprite_from_atlas_index(particle_emitter_sprite_id, particle_emitter.pos.to(f32).scale(8), .{});
                if (hovering) {
                    try state.renderer_shapes.add_quad_border(BoundingBox(f32).from_br_size(particle_emitter.pos.to(f32).scale(8), Vec2(f32).from(8, 8)), 1, @bitCast(@as(u32,0xffffffff)));
                }
            }
            state.renderer_quads.render(ud.pixel_buffer, mvp_matrix, viewport_matrix);
            state.renderer_shapes.render(ud.pixel_buffer, mvp_matrix, viewport_matrix);
        }
    }

    // map painting stuff
    {
        const MapPaintState = struct {
            var active = false;
            fn set() void {
                std.debug.assert(!active);
                std.debug.assert(!MouseState.busy);
                MouseState.busy = true;
                active = true;
            }
            fn unset() void {
                std.debug.assert(active);
                std.debug.assert(MouseState.busy);
                MouseState.busy = false;
                active = false;
            }
        };
        // the bounding box of the full map, used to know whether the mouse is in it or not
        const map_tiles_bb = blk: {
            var bb = state.level_background.bb.to(f32);
            break :blk bb.offset(Vec2(f32).from(-bb.left, -bb.bottom));
        };
        
        // conditions to start painting the map
        if (!MouseState.busy and !MapPaintState.active and map_tiles_bb.contains(mouse_tile) and ud.mouse_left_down) MapPaintState.set();
        
        if (MapPaintState.active) {
            // conditions to stop painting the map
            if (!ud.mouse_left_down or !map_tiles_bb.contains(mouse_tile)) MapPaintState.unset()
            else {
                // paint the map
                state.resources.map[@intFromFloat(mouse_tile_in_map.y)][@intFromFloat(mouse_tile_in_map.x)] = state.selected_sprite;
            }
        }

        // highlight the map cell the mouse is on        
        if (!MouseState.busy and map_tiles_bb.contains(mouse_tile)) {
            try state.renderer_shapes.add_quad(mouse_tile.scale(8), Vector2f.from(8,8), @as(RGBA, @bitCast(@as(u32, 0x99999999))));
            state.renderer_shapes.render(
                ud.pixel_buffer,
                mvp_matrix,
                viewport_matrix
            );
        }
    }

    }

    // debug overlay
    const dw = Container("debug_window");
    if (try dw.begin(ud.allocator, "debug", Vec2(f32).from(1, h-1), mouse_window, ud.mouse_left_clicked, ud.mouse_left_down, ud.pixel_buffer, projection_matrix_screen, viewport_matrix)) {
        try dw.text_line_fmt("ms {d: <9.2}", .{ud.ms});
        try dw.text_line_fmt("frame {}", .{ud.frame});
        try dw.text_line_fmt("camera {d:.4}, {d:.4}", .{state.camera.pos.x, state.camera.pos.y});
        try dw.text_line_fmt("mouse_world {d:.4} {d:.4}", .{mouse_world.x, mouse_world.y});
        try dw.text_line_fmt("mouse_window {d:.4} {d:.4}", .{mouse_window.x, mouse_window.y});
        try dw.text_line_fmt("mouse_tile {d:.4} {d:.4}", .{mouse_tile.x, mouse_tile.y});
        try dw.text_line_fmt("buffer dimensions {d:.4} {d:.4}", .{w, h});
        try dw.text_line_fmt("zoom {}", .{state.zoom});
        try dw.text_line_fmt("selected_sprite {}", .{state.selected_sprite});
        try dw.text_line_fmt("l click {}", .{ud.mouse_left_clicked});
        try dw.text_line_fmt("mouse busy {}", .{MouseState.busy});
    }
    try dw.end();

    return true;
}

// TODO implement internal persistent state for arbitrary number of buttons identified by the label
// TODO find a good way to handle errors without needing to try on every call
// TODO stack based API so that I dont rely on comptime generated static lifetime structs
fn Container(comptime id: []const u8) type {
    return struct {
    
        const Self = @This();

        const text_line_height = state.text_renderer.height()+3;
        const char_width = state.text_renderer.width()+1;

        var renderer: Renderer(platform.OutPixelType) = undefined;

        var initialized: bool = false;
        var background_color: RGBA = undefined;
        var highlight_color_a: RGBA = undefined;
        var highlight_color_b: RGBA = undefined;
        var text_color: RGBA = undefined;
        var strings: Strings = undefined;
        var strings_ephemeral: Strings = undefined;
        var draggable_previous_position: ?Vec2(f32) = null;
        var dragged_frames: usize = 0;
        
        var name_hover: bool = false;
        var name: ?[]const u8 = null;
        var bb: BoundingBox(f32) = undefined;
        var elements: std.ArrayList(GuiElement) = undefined;
        var elements_text_lines: std.ArrayList(String) = undefined;
        var elements_buttons: std.ArrayList(Button) = undefined;
        var selectable_options: std.ArrayList(SelectableOptions) = undefined;
        var surface_with_grids: std.ArrayList(SurfaceWithSelectableGridElement(platform.OutPixelType)) = undefined;

        var container_active: bool = true;
        var pos: Vec2(f32) = undefined;
        var mouse_position: Vec2(f32) = undefined;
        var mouse_click: bool = undefined;
        var mouse_down: bool = undefined;

        var allocator: std.mem.Allocator = undefined;

        fn begin(_allocator: std.mem.Allocator, _name: []const u8, _pos: Vec2(f32), _mouse_position: Vec2(f32), _mouse_click: bool, _mouse_down: bool, pixel_buffer: Buffer2D(platform.OutPixelType), mvp_matrix: M33, viewport_matrix: M33) !bool {
            _ = id;
            allocator = _allocator;
            if (!initialized) {
                initialized = true;
                renderer = try Renderer(platform.OutPixelType).init(allocator);
                strings = Strings.init(allocator);
                strings_ephemeral = Strings.init(allocator);
                elements = std.ArrayList(GuiElement).init(allocator);
                elements_text_lines = std.ArrayList(String).init(allocator);
                elements_buttons = std.ArrayList(Button).init(allocator);
                selectable_options = std.ArrayList(SelectableOptions).init(allocator);
                surface_with_grids = std.ArrayList(SurfaceWithSelectableGridElement(platform.OutPixelType)).init(allocator);
                
                text_color = RGBA.from(BGR, @bitCast(Assets.palette[1]));
                highlight_color_a = RGBA.from(BGR, @bitCast(Assets.palette[2]));
                highlight_color_b = RGBA.from(BGR, @bitCast(Assets.palette[3]));
                background_color = RGBA.make(0,0,0,255);

                bb = BoundingBox(f32).from(pos.y, pos.y, pos.x, pos.x);
                pos = _pos;
            }
            // reset the data for a new frame
            name = null;
            name_hover = false;
            bb = BoundingBox(f32).from(pos.y, pos.y, pos.x, pos.x + bb.width());
            elements_text_lines.clearRetainingCapacity();
            elements.clearRetainingCapacity();
            elements_buttons.clearRetainingCapacity();
            selectable_options.clearRetainingCapacity();
            surface_with_grids.clearRetainingCapacity();
            strings_ephemeral.clear();
            mouse_position = _mouse_position;
            mouse_click = _mouse_click and dragged_frames<8;
            mouse_down = _mouse_down;
            renderer.set_context(pixel_buffer, mvp_matrix, viewport_matrix);

            // NOTE this is a hack until I have layers in the renderer. Since I dont know the full size of the container yet
            // once I know it later on the call to `end()` I will then alter these values here for the correct ones.
            // TODO fix this hack
            try renderer.add_quad_from_bb(BoundingBox(f32).from(0,0,0,0), background_color);

            const header_bb = increment_bb(text_line_height, @as(f32, @floatFromInt(_name.len)) * char_width);
            name = strings.to_slice(try strings.get_or_create(_name));
            
            if (header_bb.contains(mouse_position)) {
                name_hover = true;
                if (mouse_click)  {
                    container_active = !container_active;
                }
            }
            else name_hover = false;

            if (draggable_previous_position) |previous_position| {
                if (!mouse_down) {
                    draggable_previous_position = null;
                    dragged_frames = 0;
                }
                else {
                    const movement = mouse_position.substract(previous_position);
                    draggable_previous_position = mouse_position;
                    pos = pos.add(movement);
                    bb = bb.offset(movement);
                    dragged_frames += 1;
                }
            }
            else {
                if (mouse_down and header_bb.contains(mouse_position)) draggable_previous_position = mouse_position;
            }

            if (name) |n| {
                try renderer.add_quad_from_bb(bb, if (name_hover) highlight_color_a else highlight_color_b);
                try renderer.add_text(Vec2(f32).from(bb.left, bb.bottom+1), "{s}", .{n}, text_color);
            }
            
            return container_active;
        }

        fn increment_bb(added_height: f32, minimum_width: f32) BoundingBox(f32) {
            bb.bottom = bb.bottom - added_height;
            bb.right = @max(bb.left + minimum_width, bb.right);
            return BoundingBox(f32).from(bb.bottom + added_height, bb.bottom, bb.left, bb.right);
        }

        fn button(text: []const u8, pressed: *bool) !bool {
            const button_bb = increment_bb(text_line_height, @as(f32, @floatFromInt(text.len))*char_width);

            var hover = false;
            if (button_bb.contains(mouse_position)) {
                hover = true;
                if (mouse_click)  {
                    pressed.* = !pressed.*;
                }
            }
            
            try renderer.add_quad_from_bb(button_bb, if (hover) highlight_color_a else highlight_color_b);
            try renderer.add_text(button_bb.bl(), "{s}", .{text}, text_color);
            
            return pressed.*;
        }

        fn text_line(text: []const u8) !void {
            const text_bb = increment_bb(text_line_height, @as(f32, @floatFromInt(text.len))*char_width);
            try renderer.add_text(text_bb.bl(), "{s}", .{text}, text_color);
        }

        fn text_line_fmt(comptime fmt: []const u8, args: anytype) !void {
            const text = try std.fmt.allocPrint(allocator, fmt, args);
            defer allocator.free(text);
            const text_bb = increment_bb(text_line_height, @as(f32, @floatFromInt(text.len))*char_width);           
            try renderer.add_text(text_bb.bl(), "{s}", .{text}, text_color);
        }

        fn selection_grid_from_text_options(options: []const []const u8, selected: *?usize, hovered: *?usize) !GridThingy {
            var max_width: usize = 0;
            for (options) |option| max_width = @max(max_width, option.len * @as(usize, @intFromFloat(char_width)));
            
            const grid_dimensions = Vec2(usize).from(1, options.len);
            const grid_cell_dimensions = Vec2(usize).from(max_width, @as(usize, @intFromFloat(text_line_height)));

            const grid = selection_grid(grid_dimensions, grid_cell_dimensions, selected, hovered);
            try grid.fill_with_text_options(options);
            try grid.highlight_selection_and_hover();
            return grid;
        }
        
        // fn option_selector(options: []const []const u8, selected: *?usize, hovered: *?usize) !void {
        //     // TODO calculate minimal max width of every option
        //     const options_bb = increment_bb(text_line_height*@as(f32, @floatFromInt(options.len)), 0);
            
        //     // find out if any option is hovered
        //     if (options_bb.contains_exclusive(mouse_position)) {
        //         const mouse_in_options_bb = mouse_position.substract(options_bb.bl());
        //         const option_index: usize = @intFromFloat(@floor(mouse_in_options_bb.y / text_line_height));
        //         std.debug.assert(option_index >= 0 and option_index < options.len);
        //         hovered.* = option_index;
        //     }
        //     else hovered.* = null;

        //     // selecting and selection-clear logic
        //     if (mouse_click) if (hovered.*) |hovered_index| {
        //         if (selected.*) |selected_index| {
        //             if (selected_index == hovered_index) selected.* = null
        //             else selected.* = hovered_index;
        //         }
        //         else {
        //             selected.* = hovered_index;
        //         }
        //     };

        //     // draw
        //     for (options, 0..) |option, i| {
        //         const if32: f32 = @floatFromInt(i);
        //         // The bounding box of the i-th selectable option
        //         const option_bb = BoundingBox(f32).from(
        //             options_bb.bottom + (if32+1) * text_line_height,
        //             options_bb.bottom + (if32+0) * text_line_height,
        //             options_bb.left,
        //             options_bb.right
        //         );
        //         try renderer.add_text(option_bb.bl(), "{s}", .{option}, text_color);
        //     }
        //     if (selected.*) |selected_option| {
        //         const if32: f32 = @floatFromInt(selected_option);
        //         const option_bb = BoundingBox(f32).from(
        //             options_bb.bottom + (if32+1) * text_line_height,
        //             options_bb.bottom + (if32+0) * text_line_height,
        //             options_bb.left,
        //             options_bb.right
        //         );
        //         var color = highlight_color_b;
        //         color.a = 50;
        //         try renderer.add_quad_from_bb(option_bb, color);
        //     }
        //     if (hovered.*) |hover_index| {
        //         const if32: f32 = @floatFromInt(hover_index);
        //         const option_bb = BoundingBox(f32).from(
        //             options_bb.bottom + (if32+1) * text_line_height,
        //             options_bb.bottom + (if32+0) * text_line_height,
        //             options_bb.left,
        //             options_bb.right
        //         );
        //         var color = highlight_color_a;
        //         color.a = 50;
        //         try renderer.add_quad_from_bb(option_bb, color);
        //     }
        // }

        const GridThingy = struct {
            
            grid_dimensions: Vec2(usize),
            grid_cell_dimensions: Vec2(usize),
            element_bb: BoundingBox(f32),
            working_bb: BoundingBox(f32),
            selected: *?usize,
            hovered: *?usize,
            just_selected: bool,
            
            pub fn fill_with_texture(self: GridThingy, texture: Buffer2D(platform.OutPixelType)) !void {
                try renderer.add_blit_texture_to_bb(self.working_bb, texture);
            }
            
            pub fn fill_with_palette_based_texture(self: GridThingy, palette_based_texture: Buffer2D(tic80.PaletteIndex), palette: *tic80.Palette) !void {
                try renderer.add_palette_based_textured_quad(self.working_bb, self.working_bb.offset_negative(self.working_bb.bl()), palette_based_texture, palette);
            }

            pub fn fill_index_with_palette_based_textured_quad(self: GridThingy, index: usize, texture_quad: BoundingBox(f32), palette_based_texture: Buffer2D(tic80.PaletteIndex), palette: *tic80.Palette) !void {
                const col = index % self.grid_dimensions.x;
                const row = @divFloor(index, self.grid_dimensions.x);
                const dest_bb = BoundingBox(f32).from(
                    self.working_bb.bottom + @as(f32, @floatFromInt(row*self.grid_cell_dimensions.y + self.grid_cell_dimensions.y)),
                    self.working_bb.bottom + @as(f32, @floatFromInt(row*self.grid_cell_dimensions.y)),
                    self.working_bb.left + @as(f32, @floatFromInt(col*self.grid_cell_dimensions.x)),
                    self.working_bb.left + @as(f32, @floatFromInt(col*self.grid_cell_dimensions.x + self.grid_cell_dimensions.x))
                );
                try renderer.add_palette_based_textured_quad(dest_bb, texture_quad, palette_based_texture, palette);
            }

            pub fn fill_with_text_options(self: GridThingy, options: []const []const u8) !void {
                for (options, 0..) |option, i| {
                    const if32: f32 = @floatFromInt(i);
                    const label_position = Vec2(f32).from(self.working_bb.left, self.working_bb.bottom + (if32+0) * @as(f32, @floatFromInt(self.grid_cell_dimensions.y)));
                    try renderer.add_text(label_position, "{s}", .{option}, text_color);
                }
            }

            pub fn highlight_selection_and_hover(self: GridThingy) !void {
                // render the highlight for the hover
                if (self.selected.*) |selected_option| {
                    const col: usize = selected_option%self.grid_dimensions.x;
                    const row: usize = @divFloor(selected_option,self.grid_dimensions.x);
                    const option_bb = BoundingBox(f32).from(
                        self.working_bb.bottom + @as(f32, @floatFromInt(row*self.grid_cell_dimensions.y + self.grid_cell_dimensions.y)),
                        self.working_bb.bottom + @as(f32, @floatFromInt(row*self.grid_cell_dimensions.y)),
                        self.working_bb.left   + @as(f32, @floatFromInt(col*self.grid_cell_dimensions.x)),
                        self.working_bb.left   + @as(f32, @floatFromInt(col*self.grid_cell_dimensions.x + self.grid_cell_dimensions.x)),
                    );
                    var color = highlight_color_b;
                    color.a = 50;
                    try renderer.add_quad_from_bb(option_bb, color);
                }

                // render the highlight for the selected
                if (self.hovered.*) |hover_index| {
                    const col: usize = hover_index % self.grid_dimensions.x;
                    const row: usize = @divFloor(hover_index, self.grid_dimensions.x);
                    const option_bb = BoundingBox(f32).from(
                        self.working_bb.bottom + @as(f32, @floatFromInt(row*self.grid_cell_dimensions.y + self.grid_cell_dimensions.y)),
                        self.working_bb.bottom + @as(f32, @floatFromInt(row*self.grid_cell_dimensions.y)),
                        self.working_bb.left   + @as(f32, @floatFromInt(col*self.grid_cell_dimensions.x)),
                        self.working_bb.left   + @as(f32, @floatFromInt(col*self.grid_cell_dimensions.x + self.grid_cell_dimensions.x)),
                    );
                    var color = highlight_color_a;
                    color.a = 50;
                    try renderer.add_quad_from_bb(option_bb, color);
                }
            }

        };

        fn selection_grid(grid_dimensions: Vec2(usize), grid_cell_dimensions: Vec2(usize), selected: *?usize, hovered: *?usize) GridThingy {
            const padding: f32 = 2;
            const element_bb = increment_bb(
                @as(f32,@floatFromInt(grid_cell_dimensions.y*grid_dimensions.y)) + padding*2,
                @as(f32,@floatFromInt(grid_cell_dimensions.x*grid_dimensions.x)) + padding*2
            );
            const working_bb = BoundingBox(f32).from(element_bb.top-padding, element_bb.bottom+padding, element_bb.left+padding, element_bb.left+padding + @as(f32,@floatFromInt(grid_cell_dimensions.x*grid_dimensions.x)));

            // find out if any option is hovered
            if (working_bb.contains_exclusive(mouse_position)) {
                const mouse_in_surface = mouse_position.substract(working_bb.bl()).to(usize);
                const mouse_tile_in_surface = Vec2(usize).from(mouse_in_surface.x/grid_cell_dimensions.x, mouse_in_surface.y/grid_cell_dimensions.y);
                const hovered_tile_index = mouse_tile_in_surface.x + mouse_tile_in_surface.y*grid_dimensions.x;
                std.debug.assert(hovered_tile_index >= 0 and hovered_tile_index < grid_dimensions.x*grid_dimensions.y);
                hovered.* = hovered_tile_index;
            }
            else hovered.* = null;

            // selecting and selection-clear logic
            var just_selected = false;
            if (mouse_click) if (hovered.*) |hovered_index| {
                if (selected.*) |selected_index| {
                    if (selected_index == hovered_index) selected.* = null
                    else {
                        just_selected = true;
                        selected.* = hovered_index;
                    }
                }
                else {
                    just_selected = true;
                    selected.* = hovered_index;
                }
            };

            return GridThingy {
                .element_bb = element_bb,
                .working_bb = working_bb,
                .grid_cell_dimensions = grid_cell_dimensions,
                .grid_dimensions = grid_dimensions,
                .hovered = hovered,
                .selected = selected,
                .just_selected = just_selected,
            };
        }
        
        // // TODO separate grid selector from its content
        // // 1. make a grid selector
        // // 2. declare the content
        // // 3. when all the content has been declared, actually make the grid selector over that content
        // fn show_palette_based_texture_and_grid_selector(comptime surface_grid_dimensions: Vec2(usize), palette_based_texture: Buffer2D(tic80.PaletteIndex), palette: *tic80.Palette, selected: *?usize, hovered: *?usize) !void {
        //     const padding: f32 = 2;
        //     const element_bb = increment_bb(@as(f32,@floatFromInt(palette_based_texture.height)) + padding*2, @as(f32,@floatFromInt(palette_based_texture.width)) + padding*2);
        //     const surface_bb = BoundingBox(f32).from(element_bb.top-padding, element_bb.bottom+padding, element_bb.left+padding, element_bb.right-padding);

        //     // find out if any option is hovered
        //     if (surface_bb.contains_exclusive(mouse_position)) {
        //         const mouse_in_surface = mouse_position.substract(surface_bb.bl()).to(usize);
        //         const mouse_tile_in_surface = Vec2(usize).from(mouse_in_surface.x/8, mouse_in_surface.y/8);
        //         const hovered_tile_index = mouse_tile_in_surface.x + mouse_tile_in_surface.y*surface_grid_dimensions.x;
        //         std.debug.assert(hovered_tile_index >= 0 and hovered_tile_index < surface_grid_dimensions.x*surface_grid_dimensions.y);
        //         hovered.* = hovered_tile_index;
        //     }
        //     else hovered.* = null;

        //     // selecting and selection-clear logic
        //     if (mouse_click) if (hovered.*) |hovered_index| {
        //         if (selected.*) |selected_index| {
        //             if (selected_index == hovered_index) selected.* = null
        //             else selected.* = hovered_index;
        //         }
        //         else {
        //             selected.* = hovered_index;
        //         }
        //     };

        //     // draw
        //     try renderer.add_palette_based_textured_quad(surface_bb, surface_bb.offset_negative(surface_bb.bl()), palette_based_texture, palette);
            
        //     // render the highlight for the hover
        //     if (selected.*) |selected_option| {
        //         const col: f32 = @floatFromInt(selected_option%surface_grid_dimensions.x);
        //         const row: f32 = @floatFromInt(@divFloor(selected_option,surface_grid_dimensions.y));
        //         const option_bb = BoundingBox(f32).from(
        //             surface_bb.bottom + row*8 + 8,
        //             surface_bb.bottom + row*8,
        //             surface_bb.left + col*8,
        //             surface_bb.left + col*8 + 8
        //         );
        //         var color = highlight_color_b;
        //         color.a = 50;
        //         try renderer.add_quad_from_bb(option_bb, color);
        //     }
        //     // render the highlight for the selected
        //     if (hovered.*) |hover_index| {
        //         const col: f32 = @floatFromInt(hover_index%surface_grid_dimensions.x);
        //         const row: f32 = @floatFromInt(@divFloor(hover_index,surface_grid_dimensions.y));
        //         const option_bb = BoundingBox(f32).from(
        //             surface_bb.bottom + row*8 + 8,
        //             surface_bb.bottom + row*8,
        //             surface_bb.left + col*8,
        //             surface_bb.left + col*8 + 8
        //         );
        //         var color = highlight_color_a;
        //         color.a = 50;
        //         try renderer.add_quad_from_bb(option_bb, color);
        //     }
        // }

        // fn surface_grid_selector(comptime surface_pixel_type: type, comptime surface_grid_dimensions: Vec2(usize), surface: Buffer2D(surface_pixel_type), selected: *?usize, hovered: *?usize) !void {
        //     const padding: f32 = 2;
        //     const element_bb = increment_bb(@as(f32,@floatFromInt(surface.height)) + padding*2, @as(f32,@floatFromInt(surface.width)) + padding*2);
        //     const surface_bb = BoundingBox(f32).from(element_bb.top-padding, element_bb.bottom+padding, element_bb.left+padding, element_bb.right-padding);

        //     // find out if any option is hovered
        //     if (surface_bb.contains_exclusive(mouse_position)) {
        //         const mouse_in_surface = mouse_position.substract(surface_bb.bl()).to(usize);
        //         const mouse_tile_in_surface = Vec2(usize).from(mouse_in_surface.x/surface_grid_dimensions.x, mouse_in_surface.y/surface_grid_dimensions.y);
        //         const hovered_tile_index = mouse_tile_in_surface.x + mouse_tile_in_surface.y*surface_grid_dimensions.x;
        //         std.debug.assert(hovered_tile_index >= 0 and hovered_tile_index < surface_grid_dimensions.x*surface_grid_dimensions.y);
        //         hovered.* = hovered_tile_index;
        //     }
        //     else hovered.* = null;

        //     // selecting and selection-clear logic
        //     if (mouse_click) if (hovered.*) |hovered_index| {
        //         if (selected.*) |selected_index| {
        //             if (selected_index == hovered_index) selected.* = null
        //             else selected.* = hovered_index;
        //         }
        //         else {
        //             selected.* = hovered_index;
        //         }
        //     };

        //     // draw
        //     try renderer.add_blit_texture_to_bb(surface_bb, surface);
        //     // render the highlight for the hover
        //     if (selected.*) |selected_option| {
        //         const col: f32 = @floatFromInt(selected_option%surface_grid_dimensions.x);
        //         const row: f32 = @floatFromInt(@divFloor(selected_option,surface_grid_dimensions.y));
        //         const option_bb = BoundingBox(f32).from(
        //             surface_bb.bottom + row*8 + 8,
        //             surface_bb.bottom + row*8,
        //             surface_bb.left + col*8,
        //             surface_bb.left + col*8 + 8
        //         );
        //         var color = highlight_color_b;
        //         color.a = 50;
        //         try renderer.add_quad_from_bb(option_bb, color);
        //     }
        //     // render the highlight for the selected
        //     if (hovered.*) |hover_index| {
        //         const col: f32 = @floatFromInt(hover_index%surface_grid_dimensions.x);
        //         const row: f32 = @floatFromInt(@divFloor(hover_index,surface_grid_dimensions.y));
        //         const option_bb = BoundingBox(f32).from(
        //             surface_bb.bottom + row*8 + 8,
        //             surface_bb.bottom + row*8,
        //             surface_bb.left + col*8,
        //             surface_bb.left + col*8 + 8
        //         );
        //         var color = highlight_color_a;
        //         color.a = 50;
        //         try renderer.add_quad_from_bb(option_bb, color);
        //     }
        // }

        fn separator(extra_width: f32) !void {
            const padding = 1;
            try elements.append(.{.index = 0, .element_type = .separator, .height = extra_width+2});
            const separator_bb = increment_bb(extra_width + 2*padding, 0);
            const separator_line_bb = BoundingBox(f32).from(separator_bb.top-padding, separator_bb.bottom+padding, separator_bb.left + padding, separator_bb.right - padding);
            try renderer.add_quad_from_bb(separator_line_bb, highlight_color_a);
        }

        fn end() !void {
            
            // TODO render in background layer
            // For now this is a huge hack lol dont do this
            try renderer.batches_shapes.items[0].add_quad_from_bb(bb, background_color);
            renderer.batches_shapes.items[0].vertex_buffer.items[3] = renderer.batches_shapes.items[0].vertex_buffer.pop();
            renderer.batches_shapes.items[0].vertex_buffer.items[2] = renderer.batches_shapes.items[0].vertex_buffer.pop();
            renderer.batches_shapes.items[0].vertex_buffer.items[1] = renderer.batches_shapes.items[0].vertex_buffer.pop();
            renderer.batches_shapes.items[0].vertex_buffer.items[0] = renderer.batches_shapes.items[0].vertex_buffer.pop();
            

            try renderer.add_quad_border(bb, 1, highlight_color_a);
            try renderer.flush_all();
            // try draw();
        }

    };

}

const String = struct {
    index: usize,
    length: usize
};
const Strings = struct {

    storage: std.ArrayList(u8),
    map: std.StringArrayHashMap(String),

    pub fn init(allocator: std.mem.Allocator) Strings {
        return .{
            .storage = std.ArrayList(u8).init(allocator),
            .map = std.StringArrayHashMap(String).init(allocator)
        };
    }

    pub fn get_or_create(self: *Strings, string: []const u8) !String {
        if (self.map.get(string)) |existing_string| {
            return existing_string;
        }
        else {
            const index = self.storage.items.len;
            _ = try self.storage.appendSlice(string);
            const new_string: String = .{
                .index = index,
                .length = string.len,
            };
            try self.map.put(string, new_string);
            return new_string;
        }
    }

    pub fn clear(self: *Strings) void {
        self.map.clearRetainingCapacity();
        self.storage.clearRetainingCapacity();
    }
    
    pub fn to_slice(self: *Strings, string: String) []const u8 {
        return self.storage.items[string.index..string.index+string.length];
    }

};
const SelectableOptions = struct {
    options: []const []const u8,
    hover_index: ?usize,
    select_index: ?usize,
};
const Button = struct {
    string: String,
    bb: BoundingBox(f32),
    hover: bool,
};
fn SurfaceWithSelectableGridElement(comptime surface_pixel_type: type) type {
    return struct {
        surface: Buffer2D(surface_pixel_type),
        hover_index: ?usize,
        select_index: ?usize,
        padding: f32,
        grid_dimensions: Vec2(usize),
    };
}
const GuiElement = struct {
    index: usize,
    element_type: GuiElementType,
    height: f32,
};
const GuiElementType = enum {
    text_line,
    text_line_ephemeral,
    button,
    separator,
    selectable_options,
    surface_grid_selectable,
};
const HighlightType = enum {
    none, highlighted_a, highlighted_b
};


const Camera = struct {
    pos: Vector3f,
    pub fn init(pos: Vector3f) Camera {
        return Camera {
            .pos = pos,
        };
    }
};

pub fn ShapeRenderer(comptime output_pixel_type: type, comptime color: RGB) type {
    return struct {

        const shader = struct {

            pub const Context = struct {
                mvp_matrix: M33,
            };

            pub const Invariant = struct {
                tint: RGBA,
            };

            pub const Vertex = struct {
                pos: Vector2f,
                tint: RGBA,
            };

            pub const pipeline_configuration = graphics.GraphicsPipelineQuads2DConfiguration {
                .blend_with_background = true,
                .do_quad_clipping = true,
                .do_scissoring = false,
                .trace = false
            };

            pub const Pipeline = graphics.GraphicsPipelineQuads2D(
                output_pixel_type,
                Context,
                Invariant,
                Vertex,
                pipeline_configuration,
                struct {
                    inline fn vertex_shader(context: Context, vertex: Vertex, out_invariant: *Invariant) Vector3f {
                        out_invariant.tint = vertex.tint;
                        return context.mvp_matrix.apply_to_vec2(vertex.pos);
                    }
                }.vertex_shader,
                struct {
                    inline fn fragment_shader(context: Context, invariants: Invariant) output_pixel_type {
                        _ = context;
                        const out_color = comptime output_pixel_type.from(RGB, color);
                        const tint = output_pixel_type.from(RGBA, invariants.tint);
                        return out_color.tint(tint);
                    }
                }.fragment_shader,
            );
        };
        
        const Self = @This();

        allocator: std.mem.Allocator,
        vertex_buffer: std.ArrayList(shader.Vertex),

        pub fn init(allocator: std.mem.Allocator) !Self {
            var self: Self = undefined;
            self.allocator = allocator;
            self.vertex_buffer = std.ArrayList(shader.Vertex).init(allocator);
            return self;
        }

        pub fn add_quad_from_bb(self: *Self, bb: BoundingBox(f32), tint: RGBA) !void {
            const pos = Vector2f.from(bb.left, bb.bottom);
            const size = Vector2f.from(bb.right - bb.left, bb.top - bb.bottom);
            const vertices = [4] shader.Vertex {
                .{ .pos = .{ .x = pos.x,          .y = pos.y          }, .tint = tint },
                .{ .pos = .{ .x = pos.x + size.x, .y = pos.y          }, .tint = tint },
                .{ .pos = .{ .x = pos.x + size.x, .y = pos.y + size.y }, .tint = tint },
                .{ .pos = .{ .x = pos.x,          .y = pos.y + size.y }, .tint = tint },
            };
            try self.vertex_buffer.appendSlice(&vertices);
        }

        pub fn add_quad_border(self: *Self, bb: BoundingBox(f32), thickness: f32, tint: RGBA) !void {
            const line_left = BoundingBox(f32).from(bb.top+thickness, bb.bottom-thickness, bb.left-thickness, bb.left);
            const line_bottom = BoundingBox(f32).from(bb.bottom, bb.bottom-thickness, bb.left-thickness, bb.right+thickness);
            const line_right = BoundingBox(f32).from(bb.top+thickness, bb.bottom-thickness, bb.right, bb.right+thickness);
            const line_top = BoundingBox(f32).from(bb.top+thickness, bb.top, bb.left-thickness, bb.right+thickness);
            try self.add_quad_from_bb(line_left, tint);
            try self.add_quad_from_bb(line_bottom, tint);
            try self.add_quad_from_bb(line_right, tint);
            try self.add_quad_from_bb(line_top, tint);
        }
        
        pub fn add_quad(self: *Self, pos: Vector2f, size: Vector2f, tint: RGBA) !void {
            const vertices = [4] shader.Vertex {
                .{ .pos = .{ .x = pos.x,          .y = pos.y          }, .tint = tint },
                .{ .pos = .{ .x = pos.x + size.x, .y = pos.y          }, .tint = tint },
                .{ .pos = .{ .x = pos.x + size.x, .y = pos.y + size.y }, .tint = tint },
                .{ .pos = .{ .x = pos.x,          .y = pos.y + size.y }, .tint = tint },
            };
            try self.vertex_buffer.appendSlice(&vertices);
        }

        pub fn render(self: *Self, pixel_buffer: Buffer2D(output_pixel_type), mvp_matrix: M33, viewport_matrix: M33) void {
            const context = shader.Context {
                .mvp_matrix = mvp_matrix,
            };
            shader.Pipeline.render(pixel_buffer, context, self.vertex_buffer.items, @divExact(self.vertex_buffer.items.len, 4), .{ .viewport_matrix = viewport_matrix, });
            self.vertex_buffer.clearRetainingCapacity();
        }

        pub fn deinit(self: *Self) void {
            self.vertex_buffer.clearAndFree();
        }

        const Batch = struct {
            vertex_buffer: std.ArrayList(shader.Vertex),
            pixel_buffer: Buffer2D(output_pixel_type),
            mvp_matrix: M33,
            viewport_matrix: M33,

            fn init(allocator: std.mem.Allocator, pixel_buffer: Buffer2D(output_pixel_type), mvp_matrix: M33, viewport_matrix: M33) Batch {
                return .{
                    .vertex_buffer = std.ArrayList(shader.Vertex).init(allocator),
                    .pixel_buffer = pixel_buffer,
                    .mvp_matrix = mvp_matrix,
                    .viewport_matrix = viewport_matrix,
                };
            }

            pub fn add_quad_from_bb(self: *Batch, bb: BoundingBox(f32), tint: RGBA) !void {
                const pos = Vector2f.from(bb.left, bb.bottom);
                const size = Vector2f.from(bb.right - bb.left, bb.top - bb.bottom);
                const vertices = [4] shader.Vertex {
                    .{ .pos = .{ .x = pos.x,          .y = pos.y          }, .tint = tint },
                    .{ .pos = .{ .x = pos.x + size.x, .y = pos.y          }, .tint = tint },
                    .{ .pos = .{ .x = pos.x + size.x, .y = pos.y + size.y }, .tint = tint },
                    .{ .pos = .{ .x = pos.x,          .y = pos.y + size.y }, .tint = tint },
                };
                try self.vertex_buffer.appendSlice(&vertices);
            }

            pub fn add_quad_border(self: *Batch, bb: BoundingBox(f32), thickness: f32, tint: RGBA) !void {
                const line_left = BoundingBox(f32).from(bb.top+thickness, bb.bottom-thickness, bb.left-thickness, bb.left);
                const line_bottom = BoundingBox(f32).from(bb.bottom, bb.bottom-thickness, bb.left-thickness, bb.right+thickness);
                const line_right = BoundingBox(f32).from(bb.top+thickness, bb.bottom-thickness, bb.right, bb.right+thickness);
                const line_top = BoundingBox(f32).from(bb.top+thickness, bb.top, bb.left-thickness, bb.right+thickness);
                try self.add_quad_from_bb(line_left, tint);
                try self.add_quad_from_bb(line_bottom, tint);
                try self.add_quad_from_bb(line_right, tint);
                try self.add_quad_from_bb(line_top, tint);
            }
            
            pub fn add_quad(self: *Batch, pos: Vector2f, size: Vector2f, tint: RGBA) !void {
                const vertices = [4] shader.Vertex {
                    .{ .pos = .{ .x = pos.x,          .y = pos.y          }, .tint = tint },
                    .{ .pos = .{ .x = pos.x + size.x, .y = pos.y          }, .tint = tint },
                    .{ .pos = .{ .x = pos.x + size.x, .y = pos.y + size.y }, .tint = tint },
                    .{ .pos = .{ .x = pos.x,          .y = pos.y + size.y }, .tint = tint },
                };
                try self.vertex_buffer.appendSlice(&vertices);
            }

            pub fn flush(self: *Batch) void {
                const context = shader.Context {
                    .mvp_matrix = self.mvp_matrix,
                };
                shader.Pipeline.render(self.pixel_buffer, context, self.vertex_buffer.items, @divExact(self.vertex_buffer.items.len, 4), .{ .viewport_matrix = self.viewport_matrix, });
                self.vertex_buffer.clearAndFree();
            }
        };
    
    };
}

pub fn StandardQuadRenderer(comptime output_pixel_type: type) type {
    return struct {

        const shader = struct {

            pub const Context = struct {
                texture: Buffer2D(output_pixel_type),
                mvp_matrix: M33,
            };

            pub const Invariant = struct {
                uv: Vector2f,
            };

            pub const Vertex = struct {
                pos: Vector2f,
                uv: Vector2f,
            };

            pub const pipeline_configuration = graphics.GraphicsPipelineQuads2DConfiguration {
                .blend_with_background = false,
                .do_quad_clipping = true,
                .do_scissoring = false,
                .trace = false,
            };

            pub const Pipeline = graphics.GraphicsPipelineQuads2D(
                output_pixel_type,
                Context,
                Invariant,
                Vertex,
                pipeline_configuration,
                struct {
                    inline fn vertex_shader(context: Context, vertex: Vertex, out_invariant: *Invariant) Vector3f {
                        out_invariant.uv = vertex.uv;
                        return context.mvp_matrix.apply_to_vec2(vertex.pos);
                    }
                }.vertex_shader,
                struct {
                    inline fn fragment_shader(context: Context, invariants: Invariant) output_pixel_type {
                        const sample = context.texture.point_sample(true, invariants.uv);
                        return output_pixel_type.from(output_pixel_type, sample);
                    }
                }.fragment_shader,
            );
        };
        
        const Self = @This();

        allocator: std.mem.Allocator,
        vertex_buffer: std.ArrayList(shader.Vertex),
        texture: Buffer2D(output_pixel_type),

        pub fn init(allocator: std.mem.Allocator) !Self {
            var self: Self = undefined;
            self.allocator = allocator;
            self.vertex_buffer = std.ArrayList(shader.Vertex).init(allocator);
            self.texture = undefined;
            return self;
        }

        pub fn add_blit_texture_to_bb(self: *Self, bb: BoundingBox(f32), texture: Buffer2D(output_pixel_type)) !void {
            self.texture = texture;
            const vertex_buffer = [4] shader.Vertex {
                .{ .pos = bb.bl(), .uv = Vec2(f32).from(0, 1) }, // 0 - bottom left
                .{ .pos = bb.br(), .uv = Vec2(f32).from(1, 1) }, // 1 - bottom right
                .{ .pos = bb.tr(), .uv = Vec2(f32).from(1, 0) }, // 2 - top right
                .{ .pos = bb.tl(), .uv = Vec2(f32).from(0, 0) }, // 3 - top left
            };
            try self.vertex_buffer.appendSlice(&vertex_buffer);
        }

        pub fn render(self: *Self, pixel_buffer: Buffer2D(output_pixel_type), mvp_matrix: M33, viewport_matrix: M33) void {
            const context = shader.Context {
                .texture = self.texture,
                .mvp_matrix = mvp_matrix,
            };
            shader.Pipeline.render(pixel_buffer, context, self.vertex_buffer.items, @divExact(self.vertex_buffer.items.len, 4), .{ .viewport_matrix = viewport_matrix, });
            self.vertex_buffer.clearRetainingCapacity();
        }

        pub fn deinit(self: *Self) void {
            self.vertex_buffer.clearAndFree();
        }

        const Batch = struct {
            vertex_buffer: std.ArrayList(shader.Vertex),
            texture: Buffer2D(output_pixel_type),
            pixel_buffer: Buffer2D(output_pixel_type),
            mvp_matrix: M33,
            viewport_matrix: M33,

            fn init(allocator: std.mem.Allocator, pixel_buffer: Buffer2D(output_pixel_type), mvp_matrix: M33, viewport_matrix: M33, texture: Buffer2D(output_pixel_type)) Batch {
                return .{
                    .vertex_buffer = std.ArrayList(shader.Vertex).init(allocator),
                    .texture = texture,
                    .pixel_buffer = pixel_buffer,
                    .mvp_matrix = mvp_matrix,
                    .viewport_matrix = viewport_matrix,
                };
            }

            pub fn add_blit_texture_to_bb(self: *Batch, bb: BoundingBox(f32)) !void {
                const vertex_buffer = [4] shader.Vertex {
                    .{ .pos = bb.bl(), .uv = Vec2(f32).from(0, 0) }, // 0 - bottom left
                    .{ .pos = bb.br(), .uv = Vec2(f32).from(1, 0) }, // 1 - bottom right
                    .{ .pos = bb.tr(), .uv = Vec2(f32).from(1, 1) }, // 2 - top right
                    .{ .pos = bb.tl(), .uv = Vec2(f32).from(0, 1) }, // 3 - top left
                };
                try self.vertex_buffer.appendSlice(&vertex_buffer);
            }

            pub fn flush(self: *Batch) void {
                const context = shader.Context {
                    .texture = self.texture,
                    .mvp_matrix = self.mvp_matrix,
                };
                shader.Pipeline.render(self.pixel_buffer, context, self.vertex_buffer.items, @divExact(self.vertex_buffer.items.len, 4), .{ .viewport_matrix = self.viewport_matrix, });
                self.vertex_buffer.clearAndFree();
            }
        };
    };
}

pub fn TextRenderer(comptime out_pixel_type: type, comptime max_size_per_print: usize, comptime size: comptime_float) type {
    return struct {

        const texture = font.texture;
        const char_width: f32 = (base_width - pad_left - pad_right) * size;
        const char_height: f32 = (base_height - pad_top - pad_bottom) * size;
        // NOTE the font has quite a lot of padding so rather than rendering the whole 8x8 quad, only render the relevant part of the quad
        // the rest is just transparent anyway
        const base_width: f32 = 8;
        const base_height: f32 = 8;
        const pad_top: f32 = 0;
        const pad_bottom: f32 = 3;
        const pad_left: f32 = 0;
        const pad_right: f32 = 5;
        const space_between_characters: f32 = 1;
        
        const Shader = struct {

            pub const Context = struct {
                mvp_matrix: M33,
            };

            pub const Invariant = struct {
                tint: RGBA,
                uv: Vector2f,
            };

            pub const Vertex = struct {
                pos: Vector2f,
                uv: Vector2f,
                tint: RGBA,
            };

            pub const pipeline_configuration = graphics.GraphicsPipelineQuads2DConfiguration {
                .blend_with_background = true,
                .do_quad_clipping = true,
                .do_scissoring = false,
                .trace = false
            };

            pub const Pipeline = graphics.GraphicsPipelineQuads2D(
                out_pixel_type,
                Context,
                Invariant,
                Vertex,
                pipeline_configuration,
                struct {
                    inline fn vertex_shader(context: Context, vertex: Vertex, out_invariant: *Invariant) Vector3f {
                        out_invariant.tint = vertex.tint;
                        out_invariant.uv = vertex.uv;
                        return context.mvp_matrix.apply_to_vec2(vertex.pos);
                    }
                }.vertex_shader,
                struct {
                    inline fn fragment_shader(context: Context, invariants: Invariant) out_pixel_type {
                        _ = context;
                        const sample = texture.point_sample(false, invariants.uv);
                        const sample_adapted = out_pixel_type.from(RGBA, sample); 
                        const tint = out_pixel_type.from(RGBA, invariants.tint);
                        return sample_adapted.tint(tint);
                    }
                }.fragment_shader,
            );
        };

        vertex_buffer: std.ArrayList(Shader.Vertex),
        
        const Self = @This();

        pub fn init(allocator: std.mem.Allocator) !Self {
            return .{
                .vertex_buffer = std.ArrayList(Shader.Vertex).init(allocator)
            };
        }

        pub fn deinit(self: *Self) void {
            self.vertex_buffer.clearAndFree();
        }

        pub fn print(self: *Self, pos: Vector2f, comptime fmt: []const u8, args: anytype, tint: RGBA) !void {
            var buff: [max_size_per_print]u8 = undefined;
            const str = try std.fmt.bufPrint(&buff, fmt, args);
            for (str, 0..) |_c, i| {
                const c = switch (_c) {
                    // 97...122 => _c-32,
                    65...90 => _c+32,
                    else => _c
                };
                // x and y are the bottom left of the quad
                const x: f32 = pos.x + @as(f32, @floatFromInt(i)) * char_width + @as(f32, @floatFromInt(i));
                const y: f32 = pos.y;
                
                // texture left and right
                const u_1: f32 = @as(f32, @floatFromInt(c%16)) * base_width + pad_left;
                const u_2: f32 = u_1 + base_width - pad_left - pad_right;
                // texture top and bottom. Note that the texture is invertex so the mat here is also inverted
                const v_1: f32 = (@as(f32, @floatFromInt(c/16)) + 1) * base_height - pad_bottom;
                const v_2: f32 = @as(f32, @floatFromInt(c/16)) * base_height + pad_top;

                // NOTE the texture is reversed hence the weird uv coordinates
                const vertices = [4] Shader.Vertex {
                    .{ .pos = .{ .x = x,              .y = y               }, .uv = .{ .x = u_1, .y = v_1 }, .tint = tint },
                    .{ .pos = .{ .x = x + char_width, .y = y               }, .uv = .{ .x = u_2, .y = v_1 }, .tint = tint },
                    .{ .pos = .{ .x = x + char_width, .y = y + char_height }, .uv = .{ .x = u_2, .y = v_2 }, .tint = tint },
                    .{ .pos = .{ .x = x,              .y = y + char_height }, .uv = .{ .x = u_1, .y = v_2 }, .tint = tint }
                };
                
                try self.vertex_buffer.appendSlice(&vertices);                
            }
        }

        pub fn width(self: *Self) f32 {
            _ = self;
            return char_width;
        }
        
        pub fn height(self: *Self) f32 {
            _ = self;
            return char_height;
        }

        pub fn render_all(self: *Self, pixel_buffer: Buffer2D(out_pixel_type), mvp_matrix: M33, viewport_matrix: M33) void {
            Shader.Pipeline.render(
                pixel_buffer,
                .{ .mvp_matrix = mvp_matrix, },
                self.vertex_buffer.items,
                self.vertex_buffer.items.len/4,
                .{ .viewport_matrix = viewport_matrix, }
            );
            self.vertex_buffer.clearRetainingCapacity();
        }
    
        const Batch = struct {
            vertex_buffer: std.ArrayList(Shader.Vertex),
            pixel_buffer: Buffer2D(out_pixel_type),
            mvp_matrix: M33,
            viewport_matrix: M33,

            fn init(allocator: std.mem.Allocator, pixel_buffer: Buffer2D(out_pixel_type), mvp_matrix: M33, viewport_matrix: M33) Batch {
                return .{
                    .vertex_buffer = std.ArrayList(Shader.Vertex).init(allocator),
                    .pixel_buffer = pixel_buffer,
                    .mvp_matrix = mvp_matrix,
                    .viewport_matrix = viewport_matrix,
                };
            }

            pub fn add_text(self: *Batch, pos: Vector2f, comptime fmt: []const u8, args: anytype, tint: RGBA) !void {
                var buff: [max_size_per_print]u8 = undefined;
                const str = try std.fmt.bufPrint(&buff, fmt, args);
                for (str, 0..) |_c, i| {
                    const c = switch (_c) {
                        65...90 => _c+32,
                        else => _c
                    };
                    // x and y are the bottom left of the quad
                    const x: f32 = pos.x + @as(f32, @floatFromInt(i)) * char_width + @as(f32, @floatFromInt(i));
                    const y: f32 = pos.y;
                    
                    // texture left and right
                    const u_1: f32 = @as(f32, @floatFromInt(c%16)) * base_width + pad_left;
                    const u_2: f32 = u_1 + base_width - pad_left - pad_right;
                    // texture top and bottom. Note that the texture is invertex so the mat here is also inverted
                    const v_1: f32 = (@as(f32, @floatFromInt(c/16)) + 1) * base_height - pad_bottom;
                    const v_2: f32 = @as(f32, @floatFromInt(c/16)) * base_height + pad_top;

                    // NOTE the texture is reversed hence the weird uv coordinates
                    const vertices = [4] Shader.Vertex {
                        .{ .pos = .{ .x = x,              .y = y               }, .uv = .{ .x = u_1, .y = v_1 }, .tint = tint },
                        .{ .pos = .{ .x = x + char_width, .y = y               }, .uv = .{ .x = u_2, .y = v_1 }, .tint = tint },
                        .{ .pos = .{ .x = x + char_width, .y = y + char_height }, .uv = .{ .x = u_2, .y = v_2 }, .tint = tint },
                        .{ .pos = .{ .x = x,              .y = y + char_height }, .uv = .{ .x = u_1, .y = v_2 }, .tint = tint }
                    };
                    
                    try self.vertex_buffer.appendSlice(&vertices);                
                }
            }

            pub fn flush(self: *Batch) void {
                Shader.Pipeline.render(
                    self.pixel_buffer,
                    .{ .mvp_matrix = self.mvp_matrix, },
                    self.vertex_buffer.items,
                    self.vertex_buffer.items.len/4,
                    .{ .viewport_matrix = self.viewport_matrix, }
                );
                self.vertex_buffer.clearAndFree();
            }
        };
    
    };
}

pub fn PaletteBasedTexturedQuadRenderer(comptime output_pixel_type: type, comptime key_color: ?tic80.PaletteIndex) type {
    return struct {
        
        const Self = @This();

        const shader = struct {

            pub const Context = struct {
                palette_based_texture: Buffer2D(tic80.PaletteIndex),
                palette: *tic80.Palette,
                mvp_matrix: M33,
            };

            pub const Invariant = struct {
                uv: Vector2f,
            };

            pub const Vertex = struct {
                pos: Vector2f,
                uv: Vector2f,
            };

            pub const pipeline_configuration = graphics.GraphicsPipelineQuads2DConfiguration {
                .blend_with_background = key_color != null,
                .do_quad_clipping = true,
                .do_scissoring = false,
                .trace = false
            };

            inline fn vertex_shader(context: Context, vertex: Vertex, out_invariant: *Invariant) Vector3f {
                out_invariant.uv = vertex.uv;
                return context.mvp_matrix.apply_to_vec2(vertex.pos);
            }

            inline fn fragment_shader(context: Context, invariants: Invariant) output_pixel_type {
                const palette_index = context.palette_based_texture.point_sample(false, invariants.uv);
                const key_color_enabled = comptime key_color != null;
                if (key_color_enabled) {
                    if (palette_index == key_color.?) return output_pixel_type.from(RGBA, RGBA.make(0,0,0,0));
                }
                return output_pixel_type.from(BGR, @bitCast(context.palette[palette_index]));
            }
            
            pub const Pipeline = graphics.GraphicsPipelineQuads2D(
                output_pixel_type,
                Context,
                Invariant,
                Vertex,
                pipeline_configuration,
                vertex_shader,
                fragment_shader
            );
            
        };

        allocator: std.mem.Allocator,
        palette_based_texture: Buffer2D(tic80.PaletteIndex),
        palette: *tic80.Palette,
        vertex_buffer: std.ArrayList(shader.Vertex),

        pub fn init(allocator: std.mem.Allocator, palette: *tic80.Palette, palette_based_texture: Buffer2D(tic80.PaletteIndex)) !Self {
            var self: Self = undefined;
            self.allocator = allocator;
            self.palette_based_texture = palette_based_texture;
            self.palette = palette;
            self.vertex_buffer = std.ArrayList(shader.Vertex).init(allocator);
            return self;
        }

        pub const ExtraParameters = struct {
            mirror_horizontally: bool = false
        };

        pub fn add_sprite_from_atlas_by_index(self: *Self, comptime grid_cell_dimensions: Vec2(usize), comptime grid_dimensions: Vec2(usize), sprite_index: usize, dest_bb: BoundingBox(f32), parameters: ExtraParameters) !void {
            const colf: f32 = @floatFromInt(sprite_index % grid_dimensions.x);
            const rowf: f32 = @floatFromInt(@divFloor(sprite_index, grid_dimensions.y));
            var vertices = [4] shader.Vertex {
                .{ .pos = dest_bb.bl(), .uv = Vec2(f32).from(colf*grid_cell_dimensions.x + 0                      , rowf*grid_cell_dimensions.y + grid_cell_dimensions.y) }, // 0 - bottom left
                .{ .pos = dest_bb.br(), .uv = Vec2(f32).from(colf*grid_cell_dimensions.x + grid_cell_dimensions.x , rowf*grid_cell_dimensions.y + grid_cell_dimensions.y) }, // 1 - bottom right
                .{ .pos = dest_bb.tr(), .uv = Vec2(f32).from(colf*grid_cell_dimensions.x + grid_cell_dimensions.x , rowf*grid_cell_dimensions.y + 0                     ) }, // 2 - top right
                .{ .pos = dest_bb.tl(), .uv = Vec2(f32).from(colf*grid_cell_dimensions.x + 0                      , rowf*grid_cell_dimensions.y + 0                     ) }, // 3 - top left
            };
            if (parameters.mirror_horizontally) {
                vertices[0].uv.x = colf*grid_cell_dimensions.x + grid_cell_dimensions.x;
                vertices[1].uv.x = colf*grid_cell_dimensions.x + 0;
                vertices[2].uv.x = colf*grid_cell_dimensions.x + 0;
                vertices[3].uv.x = colf*grid_cell_dimensions.x + grid_cell_dimensions.x;
            }
            try self.vertex_buffer.appendSlice(&vertices);
        }

        pub fn add_map(self: *Self, comptime grid_cell_dimensions: Vec2(usize), comptime grid_dimensions: Vec2(usize), map: *[136][240]u8, map_bb: BoundingBox(usize), dest_bb: BoundingBox(f32)) !void {
            for (map[map_bb.bottom..map_bb.top+1], 0..) |map_row, i| {
                for (map_row[map_bb.left..map_bb.right+1], 0..) |sprite_index, j| {
                    const offset = Vector2f.from(@floatFromInt(j*8), @floatFromInt(i*8));
                    const map_tile_dest_bb = BoundingBox(f32).from(
                        dest_bb.bottom + offset.y + grid_cell_dimensions.y,
                        dest_bb.bottom + offset.y,
                        dest_bb.left + offset.x,
                        dest_bb.left + offset.x + grid_cell_dimensions.x
                    );
                    try self.add_sprite_from_atlas_by_index(grid_cell_dimensions, grid_dimensions, sprite_index, map_tile_dest_bb, .{});
                }
            }
        }

        pub fn render(self: *Self, pixel_buffer: Buffer2D(output_pixel_type), mvp_matrix: M33, viewport_matrix: M33) void {
            const context = shader.Context {
                .texture = self.palette_based_texture,
                .palette = self.palette,
                .mvp_matrix = mvp_matrix,
            };
            shader.Pipeline.render(pixel_buffer, context, self.vertex_buffer.items, @divExact(self.vertex_buffer.items.len, 4), .{ .viewport_matrix = viewport_matrix });
            self.vertex_buffer.clearRetainingCapacity();
        }

        pub fn deinit(self: *Self) void {
            self.vertex_buffer.clearAndFree();
        }

        const Batch = struct {
            
            palette_based_texture: Buffer2D(tic80.PaletteIndex),
            palette: *tic80.Palette,
            vertex_buffer: std.ArrayList(shader.Vertex),
            pixel_buffer: Buffer2D(output_pixel_type),
            mvp_matrix: M33,
            viewport_matrix: M33,

            pub fn init(allocator: std.mem.Allocator, palette: *tic80.Palette, palette_based_texture: Buffer2D(tic80.PaletteIndex), pixel_buffer: Buffer2D(output_pixel_type), mvp_matrix: M33, viewport_matrix: M33) !Batch {
                var self: Batch = undefined;
                self.palette_based_texture = palette_based_texture;
                self.palette = palette;
                self.vertex_buffer = std.ArrayList(shader.Vertex).init(allocator);
                self.pixel_buffer = pixel_buffer;
                self.mvp_matrix = mvp_matrix;
                self.viewport_matrix = viewport_matrix;
                return self;
            }

            pub fn add_palette_based_textured_quad(self: *Batch, dest_bb: BoundingBox(f32), src_bb: BoundingBox(f32)) !void {
                var vertices = [4] shader.Vertex {
                    .{ .pos = dest_bb.bl(), .uv = src_bb.tl() }, // 0 - bottom left
                    .{ .pos = dest_bb.br(), .uv = src_bb.tr() }, // 1 - bottom right
                    .{ .pos = dest_bb.tr(), .uv = src_bb.br() }, // 2 - top right
                    .{ .pos = dest_bb.tl(), .uv = src_bb.bl() }, // 3 - top left
                };
                try self.vertex_buffer.appendSlice(&vertices);
            }

            pub fn add_sprite_from_atlas_by_index(self: *Batch, comptime grid_cell_dimensions: Vec2(usize), comptime grid_dimensions: Vec2(usize), sprite_index: usize, dest_bb: BoundingBox(f32), parameters: ExtraParameters) !void {
                const colf: f32 = @floatFromInt(sprite_index % grid_dimensions.x);
                const rowf: f32 = @floatFromInt(@divFloor(sprite_index, grid_dimensions.y));
                var vertices = [4] shader.Vertex {
                    .{ .pos = dest_bb.bl(), .uv = Vec2(f32).from(colf*grid_cell_dimensions.x + 0                      , rowf*grid_cell_dimensions.y + grid_cell_dimensions.y) }, // 0 - bottom left
                    .{ .pos = dest_bb.br(), .uv = Vec2(f32).from(colf*grid_cell_dimensions.x + grid_cell_dimensions.x , rowf*grid_cell_dimensions.y + grid_cell_dimensions.y) }, // 1 - bottom right
                    .{ .pos = dest_bb.tr(), .uv = Vec2(f32).from(colf*grid_cell_dimensions.x + grid_cell_dimensions.x , rowf*grid_cell_dimensions.y + 0                     ) }, // 2 - top right
                    .{ .pos = dest_bb.tl(), .uv = Vec2(f32).from(colf*grid_cell_dimensions.x + 0                      , rowf*grid_cell_dimensions.y + 0                     ) }, // 3 - top left
                };
                if (parameters.mirror_horizontally) {
                    vertices[0].uv.x = colf*grid_cell_dimensions.x + grid_cell_dimensions.x;
                    vertices[1].uv.x = colf*grid_cell_dimensions.x + 0;
                    vertices[2].uv.x = colf*grid_cell_dimensions.x + 0;
                    vertices[3].uv.x = colf*grid_cell_dimensions.x + grid_cell_dimensions.x;
                }
                try self.vertex_buffer.appendSlice(&vertices);
            }

            pub fn add_map(self: *Batch, comptime grid_cell_dimensions: Vec2(usize), comptime grid_dimensions: Vec2(usize), map: *[136][240]u8, map_bb: BoundingBox(usize), dest_bb: BoundingBox(f32)) !void {
                for (map[map_bb.bottom..map_bb.top+1], 0..) |map_row, i| {
                    for (map_row[map_bb.left..map_bb.right+1], 0..) |sprite_index, j| {
                        const offset = Vector2f.from(@floatFromInt(j*8), @floatFromInt(i*8));
                        const map_tile_dest_bb = BoundingBox(f32).from(
                            dest_bb.bottom + offset.y + grid_cell_dimensions.y,
                            dest_bb.bottom + offset.y,
                            dest_bb.left + offset.x,
                            dest_bb.left + offset.x + grid_cell_dimensions.x
                        );
                        try self.add_sprite_from_atlas_by_index(grid_cell_dimensions, grid_dimensions, sprite_index, map_tile_dest_bb, .{});
                    }
                }
            }

            pub fn flush(self: *Batch) void {
                const context = shader.Context {
                    .palette_based_texture = self.palette_based_texture,
                    .palette = self.palette,
                    .mvp_matrix = self.mvp_matrix,
                };
                shader.Pipeline.render(self.pixel_buffer, context, self.vertex_buffer.items, @divExact(self.vertex_buffer.items.len, 4), .{ .viewport_matrix = self.viewport_matrix });
                self.vertex_buffer.clearAndFree();
            }
            
        };
        
    };
}

// TODO allow to continue batches if not explicitly asked to use a different batch, or if the continuation is just imposible (for example, when textures used are different)
// TODO add layers!
pub fn Renderer(comptime output_pixel_type: type) type {
    return struct {

        const Self = @This();

        const TextRendererImpl = TextRenderer(output_pixel_type, 1024, text_scale);
        const ShapeRendererImpl = ShapeRenderer(output_pixel_type, RGB.from(255,255,255));
        const SurfaceRendererImpl = StandardQuadRenderer(output_pixel_type);
        const PaletteBasedTexturedQuadRendererImpl = PaletteBasedTexturedQuadRenderer(output_pixel_type, null);

        allocator: std.mem.Allocator,

        batches: std.ArrayList(BatchDescriptor),
        current_batch: BatchDescriptor,

        batches_text: std.ArrayList(TextRendererImpl.Batch),
        batches_shapes: std.ArrayList(ShapeRendererImpl.Batch),
        batches_palette_based_textured_quads: std.ArrayList(PaletteBasedTexturedQuadRendererImpl.Batch),
        batches_surfaces: std.ArrayList(SurfaceRendererImpl.Batch),

        pixel_buffer: Buffer2D(output_pixel_type),
        mvp_matrix: M33,
        viewport_matrix: M33,

        pub fn init(allocator: std.mem.Allocator) !Self {
            var self: Self = undefined;
            self.allocator = allocator;
                        
            self.batches_text = std.ArrayList(TextRendererImpl.Batch).init(allocator);
            self.batches_shapes = std.ArrayList(ShapeRendererImpl.Batch).init(allocator);
            self.batches_surfaces = std.ArrayList(SurfaceRendererImpl.Batch).init(allocator);
            self.batches_palette_based_textured_quads = std.ArrayList(PaletteBasedTexturedQuadRendererImpl.Batch).init(allocator);

            self.batches = std.ArrayList(BatchDescriptor).init(allocator);

            self.current_batch = .{
                .index = 0,
                .renderer_type = .none
            };
            
            return self;
        }

        pub fn set_context(self: *Self, pixel_buffer: Buffer2D(output_pixel_type), mvp_matrix: M33, viewport_matrix: M33) void {
            self.pixel_buffer = pixel_buffer;
            self.mvp_matrix = mvp_matrix;
            self.viewport_matrix = viewport_matrix;
        }

        pub fn add_quad_from_bb(self: *Self, bb: BoundingBox(f32), tint: RGBA) !void {
            const correct_renderer = RendererType.shape;
            if (self.current_batch.renderer_type == correct_renderer) {
                const batch = &self.batches_shapes.items[self.batches_shapes.items.len-1];
                try batch.add_quad_from_bb(bb, tint);
                return;
            }

            // save previous batch
            if (self.current_batch.renderer_type != .none) try self.batches.append(self.current_batch);
            // set new batch
            self.current_batch = .{
                .renderer_type = correct_renderer,
                .index = self.batches_shapes.items.len
            };
            const new_batch = try self.batches_shapes.addOne();
            new_batch.* = ShapeRendererImpl.Batch.init(self.allocator, self.pixel_buffer, self.mvp_matrix, self.viewport_matrix);
            try new_batch.add_quad_from_bb(bb, tint);
        }
        
        pub fn add_quad_border(self: *Self, bb: BoundingBox(f32), thickness: f32, tint: RGBA) !void {
            const correct_renderer = RendererType.shape;
            if (self.current_batch.renderer_type == correct_renderer) {
                const batch = &self.batches_shapes.items[self.current_batch.index];
                try batch.add_quad_border(bb, thickness, tint);
                return;
            }

            // save previous batch
            if (self.current_batch.renderer_type != .none) try self.batches.append(self.current_batch);
            // initialize and set new batch
            self.current_batch = .{
                .renderer_type = correct_renderer,
                .index = self.batches_shapes.items.len
            };
            const new_batch = try self.batches_shapes.addOne();
            new_batch.* = ShapeRendererImpl.Batch.init(self.allocator, self.pixel_buffer, self.mvp_matrix, self.viewport_matrix);
            try new_batch.add_quad_border(bb, thickness, tint);
        }
        
        pub fn add_palette_based_textured_quad(self: *Self, dest_bb: BoundingBox(f32), src_bb: BoundingBox(f32), palette_based_texture: Buffer2D(tic80.PaletteIndex), palette: *tic80.Palette) !void {
            const correct_renderer = RendererType.palette_based_textured_quad_renderer;
            if (self.current_batch.renderer_type == correct_renderer) {
                const batch = &self.batches_palette_based_textured_quads.items[self.current_batch.index];
                // if the batch is using same palette and texture, keep using it
                if (batch.palette_based_texture.data.ptr == palette_based_texture.data.ptr and batch.palette == palette) {
                    try batch.add_palette_based_textured_quad(dest_bb, src_bb);
                    return;
                }
            }

            // save previous batch
            if (self.current_batch.renderer_type != .none) try self.batches.append(self.current_batch);

            // initialize and set new batch
            self.current_batch = .{
                .renderer_type = correct_renderer,
                .index = self.batches_palette_based_textured_quads.items.len
            };
            const new_batch = try self.batches_palette_based_textured_quads.addOne();
            new_batch.* = try PaletteBasedTexturedQuadRendererImpl.Batch.init(self.allocator, palette, palette_based_texture, self.pixel_buffer, self.mvp_matrix, self.viewport_matrix);
            try new_batch.add_palette_based_textured_quad(dest_bb, src_bb);
        }

        pub fn add_blit_texture_to_bb(self: *Self, bb: BoundingBox(f32), texture: Buffer2D(output_pixel_type)) !void {
            const correct_renderer = RendererType.surface;
            if (self.current_batch.renderer_type == correct_renderer) {
                const batch = &self.batches_surfaces.items[self.current_batch.index];
                if (batch.texture.data.ptr == texture.data.ptr) {
                    try batch.add_blit_texture_to_bb(bb);
                    return;
                }
            }
            // save previous batch
            if (self.current_batch.renderer_type != .none) try self.batches.append(self.current_batch);
            // initialize and set new batch
            self.current_batch = .{
                .renderer_type = correct_renderer,
                .index = self.batches_surfaces.items.len
            };
            const new_batch = try self.batches_surfaces.addOne();
            new_batch.* = SurfaceRendererImpl.Batch.init(self.allocator, self.pixel_buffer, self.mvp_matrix, self.viewport_matrix, texture);
            try new_batch.add_blit_texture_to_bb(bb);
        }
        
        pub fn add_text(self: *Self, pos: Vector2f, comptime fmt: []const u8, args: anytype, tint: RGBA) !void {
            const correct_renderer = RendererType.text;
            if (self.current_batch.renderer_type == correct_renderer) {
                const batch = &self.batches_text.items[self.current_batch.index];
                try batch.add_text(pos, fmt, args, tint);
                return;
            }

            // save previous batch
            if (self.current_batch.renderer_type != .none) try self.batches.append(self.current_batch);
            // initialize and set new batch
            self.current_batch = .{
                .renderer_type = correct_renderer,
                .index = self.batches_text.items.len
            };
            const new_batch = try self.batches_text.addOne();
            new_batch.* = TextRendererImpl.Batch.init(self.allocator, self.pixel_buffer, self.mvp_matrix, self.viewport_matrix);
            try new_batch.add_text(pos, fmt, args, tint);
        }

        pub fn flush_all(self: *Self) !void {
            if (self.current_batch.renderer_type == .none) return;
            try self.batches.append(self.current_batch);

            std.log.debug("total batches for container {}", .{self.batches.items.len});
            
            for (self.batches.items) |batch| {
                const index = batch.index;
                switch (batch.renderer_type) {
                    .shape => {
                        const batch_to_render = &self.batches_shapes.items[index];
                        batch_to_render.flush();
                    },
                    .text => {
                        const batch_to_render = &self.batches_text.items[index];
                        batch_to_render.flush();
                    },
                    .surface => {
                        const batch_to_render = &self.batches_surfaces.items[index];
                        batch_to_render.flush();
                    },
                    .palette_based_textured_quad_renderer => {
                        const batch_to_render = &self.batches_palette_based_textured_quads.items[index];
                        batch_to_render.flush();
                    },
                    .none => unreachable
                }
            }

            self.batches.clearRetainingCapacity();
            self.batches_shapes.clearRetainingCapacity();
            self.batches_surfaces.clearRetainingCapacity();
            self.batches_text.clearRetainingCapacity();
            self.current_batch = .{
                .index = 0,
                .renderer_type = .none
            };
        }

        const RendererType = enum {
            none, text, shape, surface, palette_based_textured_quad_renderer
        };

        const BatchDescriptor = struct {
            renderer_type: RendererType,
            index: usize,
        };
    };
}

/// in tic's maps, the Y points downwards. This functions "corrects" any y coordinate when referencing a tile in a map
inline fn correct_y(thing: anytype) @TypeOf(thing) {
    return  135 - thing;
}

const Direction = enum {Left, Right};

// TODO add header with version of resource file and throw error if wrong version
pub const Resources = struct {
    
    allocator: std.mem.Allocator,
    strings: std.ArrayList(u8),
    map: [136][240]u8,
    levels: std.ArrayList(LevelDescriptor),
    junctions: std.ArrayList(LevelJunctionDescriptor),
    entity_spawners: std.ArrayList(EntitySpawner),
    environment_particle_emitters: std.ArrayList(EnvironmentParticleEmitter),

    pub fn init(allocator: std.mem.Allocator) Resources {
        return .{
            .allocator = allocator,
            .strings = std.ArrayList(u8).init(allocator),
            .map = undefined,
            .levels = std.ArrayList(LevelDescriptor).init(allocator),
            .junctions = std.ArrayList(LevelJunctionDescriptor).init(allocator),
            .entity_spawners = std.ArrayList(EntitySpawner).init(allocator),
            .environment_particle_emitters = std.ArrayList(EnvironmentParticleEmitter).init(allocator),
        };
    }

    pub fn deinit(self: *Resources) void {
        self.strings.deinit();
        self.levels.deinit();
        self.junctions.deinit();
        self.entity_spawners.deinit();
        self.environment_particle_emitters.deinit();
    }

    pub fn save_to_file(self: *const Resources, allocator: std.mem.Allocator, file_name: []const u8) !void {
        var serialized_data = std.ArrayList(u8).init(allocator);
        for (self.map) |byte_row| {
            // write the map
            _ = try serialized_data.writer().write(byte_row[0..]);
        }
        // write the level count
        // NOTE just int cast to u8, force level count to be less than 256
        _ = try serialized_data.writer().writeByte(@intCast(self.levels.items.len));
        for (self.levels.items) |level| {
            // write the level's name length
            // NOTE just int cast to u8, level name should be smaller than 256 bytes
            _ = try serialized_data.writer().writeByte(@intCast(level.name.length));
            // write the level's name
            for (self.get_string(level.name)) |char| try serialized_data.writer().writeByte(char);
            // write the level's map bounding box
            _ = try serialized_data.writer().writeByte(level.bb.top);
            _ = try serialized_data.writer().writeByte(level.bb.bottom);
            _ = try serialized_data.writer().writeByte(level.bb.left);
            _ = try serialized_data.writer().writeByte(level.bb.right);
        }
        // junctions
        _ = try serialized_data.writer().writeByte(@intCast(self.junctions.items.len));
        for (self.junctions.items) |junction| {
            _ = try serialized_data.writer().writeByte(junction.a.x);
            _ = try serialized_data.writer().writeByte(junction.a.y);
            _ = try serialized_data.writer().writeByte(junction.b.x);
            _ = try serialized_data.writer().writeByte(junction.b.y);
        }
        // enemy entity spawners
        _ = try serialized_data.writer().writeByte(@intCast(self.entity_spawners.items.len));
        for (self.entity_spawners.items) |spawner| {
            _ = try serialized_data.writer().writeByte(spawner.pos.x);
            _ = try serialized_data.writer().writeByte(spawner.pos.y);
            _ = try serialized_data.writer().writeByte(spawner.entity_type);
        }
        // environment particle emitters
        _ = try serialized_data.writer().writeByte(@intCast(self.environment_particle_emitters.items.len));
        for (self.environment_particle_emitters.items) |emitter| {
            _ = try serialized_data.writer().writeByte(emitter.pos.x);
            _ = try serialized_data.writer().writeByte(emitter.pos.y);
            _ = try serialized_data.writer().writeByte(emitter.particle_emitter_type);
        }

        const file = try std.fs.cwd().createFile(file_name, .{});
        defer file.close();
        try file.writeAll(serialized_data.items);
        std.log.debug("resources saved to file {s}!", .{file_name});
    }

    pub fn load_from_file(self: *Resources, file_name: []const u8) !void {
        var new_resources = Resources.init(self.allocator);
        const map_data_start: [*]u8 = @ptrCast(&new_resources.map);
        const map_underlying_bytes: []u8 = @ptrCast(map_data_start[0..240*136]);
        const file = try std.fs.cwd().openFile(file_name, .{});
        defer file.close();
        // read the map
        _ = try file.reader().read(map_underlying_bytes);
        // read the level count
        const level_count: usize = @intCast(try file.reader().readByte());
        var name_starting_index: usize = 0;
        for (0..level_count) |_| {
            const name_length: usize = @intCast(try file.reader().readByte());
            const slice = try new_resources.strings.addManyAsSlice(name_length);
            _ = try file.reader().read(slice);
            const top = try file.reader().readByte();
            const bottom = try file.reader().readByte();
            const left = try file.reader().readByte();
            const right = try file.reader().readByte();
            try new_resources.levels.append(.{
                .name = .{.index = name_starting_index, .length = name_length},
                .bb = BoundingBox(u8).from(top, bottom, left, right)
            });
            name_starting_index += name_length;
        }
        // read the level junction count
        const level_junction_count: usize = @intCast(try file.reader().readByte());
        for (0..level_junction_count) |_| {
            const ax = try file.reader().readByte();
            const ay = try file.reader().readByte();
            const bx = try file.reader().readByte();
            const by = try file.reader().readByte();
            try new_resources.junctions.append(.{.a = Vec2(u8).from(ax, ay), .b = Vec2(u8).from(bx, by)});
        }
        const entity_spawner_count: usize = @intCast(try file.reader().readByte());
        for (0..entity_spawner_count) |_| {
            const px = try file.reader().readByte();
            const py = try file.reader().readByte();
            const entity_type = try file.reader().readByte();
            try new_resources.entity_spawners.append(.{.pos = Vec2(u8).from(px, py), .entity_type = entity_type});
        }
        const environment_particle_emitters_count: usize = @intCast(try file.reader().readByte());
        for (0..environment_particle_emitters_count) |_| {
            const px = try file.reader().readByte();
            const py = try file.reader().readByte();
            const emitter_type = try file.reader().readByte();
            try new_resources.environment_particle_emitters.append(.{.pos = Vec2(u8).from(px, py), .particle_emitter_type = emitter_type});
        }
        std.log.debug("resources from file {s} loaded!", .{file_name});
        self.deinit();
        self.* = new_resources;
    }

    pub fn load_from_embedded(self: *Resources) !void {
        self.map = Assets.map;
        var name_starting_index: usize = 0;
        inline for (@typeInfo(Assets.Levels).Enum.fields) |field| {
            const slice = try self.strings.addManyAsSlice(field.name.len);
            @memcpy(slice, field.name);
            const level = Assets.Levels.get(@enumFromInt(field.value));
            try self.levels.append(.{
                .name = .{.index = name_starting_index, .length = field.name.len},
                .bb = level.background.bb.to(u8)
            });
            name_starting_index += field.name.len;
        }

        try self.entity_spawners.append(.{.pos=Vec2(u8).from(131, correct_y(131)), .entity_type = @intFromEnum(Assets.EntityType.slime_king)});
        try self.entity_spawners.append(.{.pos=Vec2(u8).from(71, correct_y(116)), .entity_type = @intFromEnum(Assets.EntityType.knight_1)});
        try self.entity_spawners.append(.{.pos=Vec2(u8).from(77, correct_y(116)), .entity_type = @intFromEnum(Assets.EntityType.knight_2)});
        try self.entity_spawners.append(.{.pos=Vec2(u8).from(68, correct_y(132)), .entity_type = @intFromEnum(Assets.EntityType.slime)});
        try self.entity_spawners.append(.{.pos=Vec2(u8).from(72, correct_y(132)), .entity_type = @intFromEnum(Assets.EntityType.slime)});
        try self.entity_spawners.append(.{.pos=Vec2(u8).from(81, correct_y(129)), .entity_type = @intFromEnum(Assets.EntityType.slime)});
        try self.entity_spawners.append(.{.pos=Vec2(u8).from(36, correct_y(132)), .entity_type = @intFromEnum(Assets.EntityType.slime)});
        try self.entity_spawners.append(.{.pos=Vec2(u8).from(48, correct_y(132)), .entity_type = @intFromEnum(Assets.EntityType.slime)});
        try self.entity_spawners.append(.{.pos=Vec2(u8).from(7, correct_y(25)), .entity_type = @intFromEnum(Assets.EntityType.knight_1)});
        try self.entity_spawners.append(.{.pos=Vec2(u8).from(13, correct_y(23)), .entity_type = @intFromEnum(Assets.EntityType.knight_2)});
        try self.entity_spawners.append(.{.pos=Vec2(u8).from(15, correct_y(20)), .entity_type = @intFromEnum(Assets.EntityType.knight_1)});
        try self.entity_spawners.append(.{.pos=Vec2(u8).from(21, correct_y(25)), .entity_type = @intFromEnum(Assets.EntityType.knight_2)});
        
        try self.environment_particle_emitters.append(.{.pos = Vec2(f32).from(275.0/8.0, 36.0/8.0).to(u8), .particle_emitter_type = @intFromEnum(Assets.ParticleEmitterType.fire)});
        try self.environment_particle_emitters.append(.{.pos = Vec2(f32).from(539.0/8.0, 36.0/8.0).to(u8), .particle_emitter_type = @intFromEnum(Assets.ParticleEmitterType.fire)});
        try self.environment_particle_emitters.append(.{.pos = Vec2(f32).from(643.0/8.0, 60.0/8.0).to(u8), .particle_emitter_type = @intFromEnum(Assets.ParticleEmitterType.fire)});
        try self.environment_particle_emitters.append(.{.pos = Vec2(f32).from(515.0/8.0, 164.0/8.0).to(u8), .particle_emitter_type = @intFromEnum(Assets.ParticleEmitterType.fire)});
        try self.environment_particle_emitters.append(.{.pos = Vec2(f32).from(548.0/8.0, 164.0/8.0).to(u8), .particle_emitter_type = @intFromEnum(Assets.ParticleEmitterType.fire)});
        try self.environment_particle_emitters.append(.{.pos = Vec2(f32).from(580.0/8.0, 164.0/8.0).to(u8), .particle_emitter_type = @intFromEnum(Assets.ParticleEmitterType.fire)});
        try self.environment_particle_emitters.append(.{.pos = Vec2(f32).from(619.0/8.0, 164.0/8.0).to(u8), .particle_emitter_type = @intFromEnum(Assets.ParticleEmitterType.fire)});
        try self.environment_particle_emitters.append(.{.pos = Vec2(f32).from(1036.0/8.0, 44.0/8.0).to(u8), .particle_emitter_type = @intFromEnum(Assets.ParticleEmitterType.fire)});
        try self.environment_particle_emitters.append(.{.pos = Vec2(f32).from(1003.0/8.0, 44.0/8.0).to(u8), .particle_emitter_type = @intFromEnum(Assets.ParticleEmitterType.fire)});

        try self.junctions.append(.{.a = Vec2(u8).from(19,2), .b = Vec2(u8).from(30,3) });
        std.log.debug("resources embedded loaded!", .{});
    }

    pub fn get_string(self: *const Resources, string: String) []const u8 {
        return self.strings.items[string.index..string.index+string.length];
    }

    // const String = struct {
    //     index: usize,
    //     length: usize
    // };

    const LevelIndex = u8;

    const LevelDescriptor = struct {
        name: String,
        bb: BoundingBox(u8),
    };

    pub const LevelJunctionDescriptor = struct {
        a: Vec2(u8),
        b: Vec2(u8),
    };

    pub const EntitySpawner = struct {
        pos: Vec2(u8),
        entity_type: u8
    };

    pub const EnvironmentParticleEmitter = struct {
        pos: Vec2(u8),
        particle_emitter_type: u8
    };

};

pub const Assets = struct {
    
    pub const ParticleEmitterType = enum(u8) {
        fire,
    };

    pub const Levels = enum {
        level_first,
        level_slime,
        level_two_directions,
        level_poison_corridor,
        level_entrance_to_something,
        level_first_floor,
        level_the_hueco,
        level_dash,
        level_last_level,
        level_all_levels,
        pub fn get(level: Levels) *const LevelDescriptor {
            return switch (level) {
                .level_first => &level_first,
                .level_slime => &level_slime,
                .level_two_directions => &level_two_directions,
                .level_poison_corridor => &level_poison_corridor,
                .level_entrance_to_something => &level_entrance_to_something,
                .level_first_floor => &level_first_floor,
                .level_the_hueco => &level_the_hueco,
                .level_dash => &level_dash,
                .level_last_level => &level_last_level,
                .level_all_levels => &level_all_levels,
            };
        }
    };
    
    pub const LevelDescriptor = struct {
        background: *const LevelBackgroundDescriptor,
        doors: []const *const DoorDescriptor,
        static_texts: []const *const StaticTextDescriptor,
        entity_spawns: []const EntitySpawnDescriptor,
        fn from(background: *const LevelBackgroundDescriptor, doors: []const *const DoorDescriptor, static_texts: []const *const StaticTextDescriptor, entity_spawns: []const EntitySpawnDescriptor) LevelDescriptor {
            return LevelDescriptor {
                .background = background,
                .doors = doors,
                .static_texts = static_texts,
                .entity_spawns = entity_spawns,
            };
        }
    };

    pub const level_all_levels = LevelDescriptor.from(
        &Assets.LevelBackgroundDescriptor.from(BoundingBox(usize).from(135, 0, 0, 239)),
        &[_] *const DoorDescriptor { },
        &[_] *const StaticTextDescriptor { },
        &[_] EntitySpawnDescriptor { },
    );

    pub const level_first = LevelDescriptor.from(
        &level_bg_first,
        &[_] *const DoorDescriptor { &door_level_first_0 },
        &[_] *const StaticTextDescriptor { &static_text_tutorial_0, &static_text_tutorial_1 },
        &[_] EntitySpawnDescriptor { },
    );

    pub const level_slime = LevelDescriptor.from(
        &level_bg_slime,
        &[_] *const DoorDescriptor { &door_level_slime_0, &door_level_slime_1 },
        &[_] *const StaticTextDescriptor { &static_text_tutorial_2 },
        &[_] EntitySpawnDescriptor { entity_spawn_enemy_slime_3, entity_spawn_enemy_slime_4 },
    );

    pub const level_two_directions = LevelDescriptor.from(
        &level_bg_two_directions,
        &[_] *const DoorDescriptor { &door_level_two_directions_0, &door_level_two_directions_1, &door_level_two_directions_2 },
        &[_] *const StaticTextDescriptor { },
        &[_] EntitySpawnDescriptor { entity_spawn_enemy_slime_0, entity_spawn_enemy_slime_1, entity_spawn_enemy_slime_2 },
    );

    pub const level_poison_corridor = LevelDescriptor.from(
        &level_bg_poison_corridor,
        &[_] *const DoorDescriptor { &door_level_poison_corridor_0, &door_level_poison_corridor_1 },
        &[_] *const StaticTextDescriptor { },
        &[_] EntitySpawnDescriptor { },
    );

    pub const level_entrance_to_something = LevelDescriptor.from(
        &level_bg_entrance_to_something,
        &[_] *const DoorDescriptor { &door_level_entrance_to_something_0 },
        &[_] *const StaticTextDescriptor { },
        &[_] EntitySpawnDescriptor { entity_spawn_enemy_slime_king_0 },
    );

    pub const level_first_floor = LevelDescriptor.from(
        &level_bg_first_floor,
        &[_] *const DoorDescriptor { &door_level_first_floor_0 },
        &[_] *const StaticTextDescriptor { },
        &[_] EntitySpawnDescriptor { entity_spawn_enemy_knight_0, entity_spawn_enemy_knight_1 },
    );

    pub const level_the_hueco = LevelDescriptor.from(
        &level_bg_the_hueco,
        &[_] *const DoorDescriptor {
            &door_level_the_hueco_0,
            &door_level_the_hueco_1,
            &door_level_the_hueco_2_0,
            &door_level_the_hueco_2_1,
            &door_level_the_hueco_2_2,
            &door_level_the_hueco_2_3,
            &door_level_the_hueco_2_4,
            &door_level_the_hueco_2_5,
            &door_level_the_hueco_2_6,
            &door_level_the_hueco_2_7,
            &door_level_the_hueco_2_8,
            &door_level_the_hueco_2_9,
            &door_level_the_hueco_3
        },
        &[_] *const StaticTextDescriptor { },
        &[_] EntitySpawnDescriptor { },
    );

    pub const level_dash = LevelDescriptor.from(
        &level_bg_dash,
        &[_] *const DoorDescriptor { &door_level_dash },
        &[_] *const StaticTextDescriptor { },
        &[_] EntitySpawnDescriptor { },
    );

    pub const level_last_level = LevelDescriptor.from(
        &level_bg_last_level,
        &[_] *const DoorDescriptor { },
        &[_] *const StaticTextDescriptor { },
        &[_] EntitySpawnDescriptor { },
    );

    pub const LevelBackgroundDescriptor = struct {
        bb: BoundingBox(usize),
        fn from(bb: BoundingBox(usize)) LevelBackgroundDescriptor {
            return LevelBackgroundDescriptor { .bb = bb };
        }
    };
    
    pub const level_bg_first = LevelBackgroundDescriptor.from( BoundingBox(usize).from( correct_y(119), correct_y(135), 0, 19) );
    pub const level_bg_slime = LevelBackgroundDescriptor.from( BoundingBox(usize).from( correct_y(123), correct_y(135), 30, 50) );
    pub const level_bg_two_directions = LevelBackgroundDescriptor.from( BoundingBox(usize).from( correct_y(126), correct_y(135), 60, 89) );
    pub const level_bg_poison_corridor = LevelBackgroundDescriptor.from( BoundingBox(usize).from( correct_y(126), correct_y(135), 90, 119) );
    pub const level_bg_entrance_to_something = LevelBackgroundDescriptor.from( BoundingBox(usize).from( correct_y(126), correct_y(135), 120, 134) );
    pub const level_bg_first_floor = LevelBackgroundDescriptor.from( BoundingBox(usize).from( correct_y(112), correct_y(118), 58, 82) );
    pub const level_bg_the_hueco = LevelBackgroundDescriptor.from( BoundingBox(usize).from( correct_y(95), correct_y(118), 90, 119) );
    pub const level_bg_dash = LevelBackgroundDescriptor.from( BoundingBox(usize).from( correct_y(95), correct_y(101), 60, 89) );
    pub const level_bg_last_level = LevelBackgroundDescriptor.from( BoundingBox(usize).from( correct_y(17), correct_y(32), 1, 25) );
    
    pub const AtlasPosition = struct {
        col: usize,
        row: usize,
        pub fn from(col: usize, row: usize) AtlasPosition {
            return .{ .col = col, .row = row };
        }
        pub fn from_id(id: usize) AtlasPosition {
            return .{ .col = id%16, .row = @divFloor(id, 16) };
        }
    };

    pub const sprite_weird_block = AtlasPosition.from(1, 0);
    pub const sprite_pengu1 = AtlasPosition.from(0, 12);
    pub const sprite_pengu2 = AtlasPosition.from(1, 12);
    pub const sprite_slime1 = AtlasPosition.from(2, 11);
    pub const sprite_slime2 = AtlasPosition.from(3, 11);
    pub const sprite_id0 = AtlasPosition.from(0, 0);
    pub const sprite_id255 = AtlasPosition.from(15, 15);
    pub const sprite_id15 = AtlasPosition.from(15, 0);
    pub const sprite_id240 = AtlasPosition.from(0, 15);
    
    pub const sprite_knight_a_0 = AtlasPosition.from(0, 11);
    pub const sprite_knight_a_1 = AtlasPosition.from(1, 11);
    pub const sprite_archer_0 = AtlasPosition.from(0, 10);
    pub const sprite_archer_1 = AtlasPosition.from(1, 10);
    pub const sprite_pengu_0 = AtlasPosition.from(0, 12);
    pub const sprite_pengu_1 = AtlasPosition.from(1, 12);
    pub const sprite_slime_0 = AtlasPosition.from(2, 10);
    pub const sprite_slime_1 = AtlasPosition.from(3, 10);
    pub const sprite_knight_b_0 = AtlasPosition.from(4, 10);
    pub const sprite_knight_b_1 = AtlasPosition.from(5, 10);
    pub const sprite_penguknight_0 = AtlasPosition.from_id(35);
    pub const sprite_penguknight_1 = AtlasPosition.from_id(36);
    pub const sprite_penguknight_2 = AtlasPosition.from_id(51);

    pub const SpawnDescriptor = struct {
        /// indexes into a `tic80.Map` 
        level: Levels,
        pos: Vector2i,
        pub inline fn from(pos: Vector2i, level: Levels) SpawnDescriptor {
            return SpawnDescriptor { .pos = pos, .level = level };
        }
    };

    pub const spawn_start_0 = SpawnDescriptor.from(Vector2i.from(4, 134), .level_first);
    pub const spawn_level_first_0 = SpawnDescriptor.from(Vector2i.from(17, 133), .level_first);
    pub const spawn_level_slime_0 = SpawnDescriptor.from(Vector2i.from(31, 132), .level_slime);
    pub const spawn_level_slime_1 = SpawnDescriptor.from(Vector2i.from(49, 132), .level_slime);
    pub const spawn_level_two_directions_0 = SpawnDescriptor.from(Vector2i.from(61, 132), .level_two_directions);
    pub const spawn_level_two_directions_1 = SpawnDescriptor.from(Vector2i.from(88, 133), .level_two_directions);
    pub const spawn_level_poison_corridor_0 = SpawnDescriptor.from(Vector2i.from(91, 133), .level_poison_corridor);
    pub const spawn_level_poison_corridor_1 = SpawnDescriptor.from(Vector2i.from(118, 133), .level_poison_corridor);
    pub const spawn_level_poison_corridor_2 = SpawnDescriptor.from(Vector2i.from(96, 126), .level_poison_corridor);
    pub const spawn_level_entrance_to_something_0 = SpawnDescriptor.from(Vector2i.from(121, 133), .level_entrance_to_something);
    pub const spawn_up_the_rope_0 = SpawnDescriptor.from(Vector2i.from(65, 116), .level_first_floor);
    pub const spawn_level_first_floor_0 = SpawnDescriptor.from(Vector2i.from(81, 116), .level_first_floor);
    pub const spawn_level_the_hueco_0 = SpawnDescriptor.from(Vector2i.from(91, 116), .level_the_hueco);
    pub const spawn_level_the_hueco_1 = SpawnDescriptor.from(Vector2i.from(91, 100), .level_the_hueco);
    pub const spawn_level_dash_0 = SpawnDescriptor.from(Vector2i.from(88, 100), .level_dash);
    pub const spawn_level_last_level_0 = SpawnDescriptor.from(Vector2i.from(2, 25), .level_last_level);

    pub const DoorDescriptor = struct {
        /// indexes into a `tic80.Map` 
        pos: Vector2i,
        destination: *const SpawnDescriptor,
        pub inline fn from(pos: Vector2i, destination: *const SpawnDescriptor) DoorDescriptor {
            return DoorDescriptor { .pos = pos, .destination = destination };
        }
    };

    pub const door_level_first_0 = DoorDescriptor.from(Vector2i.from(19, 133), &spawn_level_slime_0);
    pub const door_level_slime_0 = DoorDescriptor.from(Vector2i.from(30, 132), &spawn_level_first_0);
    pub const door_level_slime_1 = DoorDescriptor.from(Vector2i.from(50, 132), &spawn_level_two_directions_0);
    pub const door_level_two_directions_0 = DoorDescriptor.from(Vector2i.from(60, 132), &spawn_level_slime_1);
    pub const door_level_two_directions_1 = DoorDescriptor.from(Vector2i.from(89, 133), &spawn_level_poison_corridor_0);
    pub const door_level_two_directions_2 = DoorDescriptor.from(Vector2i.from(83, 129), &spawn_up_the_rope_0);
    pub const door_level_poison_corridor_0 = DoorDescriptor.from(Vector2i.from(90, 133), &spawn_level_two_directions_1);
    pub const door_level_poison_corridor_1 = DoorDescriptor.from(Vector2i.from(119, 133), &spawn_level_entrance_to_something_0);
    pub const door_level_entrance_to_something_0 = DoorDescriptor.from(Vector2i.from(120, 133), &spawn_level_poison_corridor_1);
    pub const door_level_first_floor_0 = DoorDescriptor.from(Vector2i.from(82, 116), &spawn_level_the_hueco_0);
    pub const door_level_the_hueco_0 = DoorDescriptor.from(Vector2i.from(90, 116), &spawn_level_first_floor_0);
    pub const door_level_the_hueco_1 = DoorDescriptor.from(Vector2i.from(119, 116), &spawn_level_last_level_0);
    pub const door_level_the_hueco_2_0 = DoorDescriptor.from(Vector2i.from(104, 118), &spawn_level_poison_corridor_2);
    pub const door_level_the_hueco_2_1 = DoorDescriptor.from(Vector2i.from(105, 118), &spawn_level_poison_corridor_2);
    pub const door_level_the_hueco_2_2 = DoorDescriptor.from(Vector2i.from(106, 118), &spawn_level_poison_corridor_2);
    pub const door_level_the_hueco_2_3 = DoorDescriptor.from(Vector2i.from(107, 118), &spawn_level_poison_corridor_2);
    pub const door_level_the_hueco_2_4 = DoorDescriptor.from(Vector2i.from(108, 118), &spawn_level_poison_corridor_2);
    pub const door_level_the_hueco_2_5 = DoorDescriptor.from(Vector2i.from(109, 118), &spawn_level_poison_corridor_2);
    pub const door_level_the_hueco_2_6 = DoorDescriptor.from(Vector2i.from(110, 118), &spawn_level_poison_corridor_2);
    pub const door_level_the_hueco_2_7 = DoorDescriptor.from(Vector2i.from(111, 118), &spawn_level_poison_corridor_2);
    pub const door_level_the_hueco_2_8 = DoorDescriptor.from(Vector2i.from(112, 118), &spawn_level_poison_corridor_2);
    pub const door_level_the_hueco_2_9 = DoorDescriptor.from(Vector2i.from(113, 118), &spawn_level_poison_corridor_2);
    pub const door_level_the_hueco_3 = DoorDescriptor.from(Vector2i.from(90, 100), &spawn_level_dash_0);
    pub const door_level_dash = DoorDescriptor.from(Vector2i.from(89, 100), &spawn_level_the_hueco_1);

    pub const StaticTextDescriptor = struct {
        /// indexes into a `tic80.Map` 
        pos: Vector2i,
        /// size in terms of map cells
        size: Vector2i,
        text: []const u8,
        pub inline fn from(pos: Vector2i, size: Vector2i, text: []const u8) StaticTextDescriptor {
            return StaticTextDescriptor  { .pos = pos, .size = size, .text = text };
        }
    };

    pub const static_text_tutorial_0 = StaticTextDescriptor.from(Vector2i.from(3, correct_y(3)), Vector2i.from(25, 1), "[g] to toggle debug");
    pub const static_text_tutorial_1 = StaticTextDescriptor.from(Vector2i.from(3, correct_y(2)), Vector2i.from(25, 1), "[r] to restart");
    pub const static_text_tutorial_2 = StaticTextDescriptor.from(Vector2i.from(35, correct_y(8)), Vector2i.from(19, 1), "[f] to attack");

    pub const EntitySpawnDescriptor = struct {
        /// indexes into a `tic80.Map` 
        pos: Vector2i,
        entity: EntityType,
        pub inline fn from(pos: Vector2i, entity: EntityType) EntitySpawnDescriptor {
            return EntitySpawnDescriptor  { .pos = pos, .entity = entity };
        }
    };
    
    pub const entity_spawn_enemy_slime_king_0 = EntitySpawnDescriptor.from(Vector2i.from(131, 131), .slime_king);
    pub const entity_spawn_enemy_knight_0 = EntitySpawnDescriptor.from(Vector2i.from(71, 116), .knight_1);
    pub const entity_spawn_enemy_knight_1 = EntitySpawnDescriptor.from(Vector2i.from(77, 116), .knight_2);
    pub const entity_spawn_enemy_slime_0 = EntitySpawnDescriptor.from(Vector2i.from(68, 132), .slime);
    pub const entity_spawn_enemy_slime_1 = EntitySpawnDescriptor.from(Vector2i.from(72, 132), .slime);
    pub const entity_spawn_enemy_slime_2 = EntitySpawnDescriptor.from(Vector2i.from(81, 129), .slime);
    pub const entity_spawn_enemy_slime_3 = EntitySpawnDescriptor.from(Vector2i.from(36, 132), .slime);
    pub const entity_spawn_enemy_slime_4 = EntitySpawnDescriptor.from(Vector2i.from(48, 132), .slime);
    pub const entity_spawn_enemy_knight_2 = EntitySpawnDescriptor.from(Vector2i.from(7, 25), .knight_1);
    pub const entity_spawn_enemy_knight_3 = EntitySpawnDescriptor.from(Vector2i.from(13, 23), .knight_2);
    pub const entity_spawn_enemy_knight_4 = EntitySpawnDescriptor.from(Vector2i.from(15, 20), .knight_1);
    pub const entity_spawn_enemy_knight_5 = EntitySpawnDescriptor.from(Vector2i.from(21, 25), .knight_2);

    const EntityType = enum(u8) {
        slime,
        knight_1,
        knight_2,
        archer,
        slime_king,
    };

    const EntitySlimeRuntime = struct {
        attack_start_frame: usize,
        attack_direction: Direction,
        pub fn init() EntitySlimeRuntime {
            return .{
                .attack_start_frame = 0,
                .attack_direction = .Right,
            };
        }
    };

    const EntityArcherRuntime = struct {
        pub fn init() EntityArcherRuntime { return .{}; }
    };

    const EntitySlimeKingRuntime = struct {
        pub fn init() EntitySlimeKingRuntime { return .{}; }
    };
    
    const EntityKnight1Runtime = struct {
        
        state_change_frame: usize,
        current_state: EntityState,
        attack_direction: Direction,

        const EntityState = enum {
            idle, charging, attack_1_cooldown, chaining, attack_2_cooldown 
        };

        pub fn init() EntityKnight1Runtime {
            return .{
                .state_change_frame = 0,
                .state = .idle,
                .attack_direction = .Right,
            };
        }
    };

    const EntityKnight2Runtime = struct {
        pub fn init() EntityKnight2Runtime { return .{}; }
    };

    pub const EntityDescriptor = struct {
        default_animation: *const AnimationDescriptor,
        weight: f32,
        hp: i32,
        speed: f32,
        chase_range: f32,
        attack_dmg: i32,
        attack_cooldown: usize,
        attack_range: f32,
        hurtbox: BoundingBox(f32),
        
        pub fn from(t: EntityType) EntityDescriptor {
            return switch (t) {
                .slime => entity_slime,
                .knight_1 => entity_knight_1,
                .knight_2 => entity_knight_2,
                .archer => entity_archer,
                .slime_king => entity_slime_king,
            };
        }
    };
    
    pub const entity_slime = EntityDescriptor {
        .default_animation = &animation_slime,
        .weight = 2,
        .hp = 30,
        .speed = 0.02,
        .chase_range = 6*8,
        .attack_dmg = 15,
        .attack_cooldown = 60,
        .attack_range = 3*8,
        .hurtbox = BoundingBox(f32).from(4, 0, -3, 3),
    };
    pub const entity_knight_1 = EntityDescriptor {
        .default_animation = &animation_knight_1,
        .weight = 5,
        .hp = 70,
        .speed = 0.03,
        .chase_range = 7*8,
        .attack_dmg = 30,
        .attack_cooldown = 60*2,
        .attack_range = 2*8,
        .hurtbox = BoundingBox(f32).from(6, 0, -3, 3),
    };
    pub const entity_knight_2 = EntityDescriptor {
        .default_animation = &animation_knight_2,
        .weight = 5,
        .hp = 70,
        .speed = 0.03,
        .chase_range = 7*8,
        .attack_dmg = 30,
        .attack_cooldown = 60*2,
        .attack_range = 2*8,
        .hurtbox = BoundingBox(f32).from(6, 1, 3, 9),
    };
    pub const entity_archer = EntityDescriptor {
        .default_animation = &animation_archer,
        .weight = 3,
        .hp = 60,
        .speed = 0.1,
        .chase_range = 10*8,
        .attack_dmg = 30,
        .attack_cooldown = 60*2,
        .attack_range = 7*8,
        .hurtbox = BoundingBox(f32).from(5, 3, -3, 3),
    };
    pub const entity_slime_king = EntityDescriptor {
        .default_animation = &animation_slime,
        .weight = 10,
        .hp = 200,
        .speed = 0.015,
        .chase_range = 30*8,
        .attack_dmg = 40,
        .attack_cooldown = 60*3,
        .attack_range = 3*8,
        .hurtbox = BoundingBox(f32).from(4*2, 0*2, -3*2, 3*2),
    };

    pub const AnimationDescriptor = struct {
        sprites: []const tic80.AtlasIndex,
        duration: usize,
        pub inline fn from(sprites: []const tic80.AtlasIndex, duration: usize) AnimationDescriptor {
            return AnimationDescriptor { .sprites = sprites, .duration = duration };
        }
    };

    pub const animation_attack_0 = AnimationDescriptor.from( &[_]tic80.AtlasIndex { 65, 66, 67 }, 30);
    pub const animation_attack_1 = AnimationDescriptor.from( &[_]tic80.AtlasIndex { 37, 38, 39, 40, 41 }, 10);
    pub const animation_fire = AnimationDescriptor.from( &[_]tic80.AtlasIndex { 139, 140 }, 15);
    pub const animation_wings = AnimationDescriptor.from( &[_]tic80.AtlasIndex { 113, 114 }, 30);
    pub const animation_slime = AnimationDescriptor.from( &[_]tic80.AtlasIndex { 178, 179 }, 60);
    pub const animation_knight_1 = AnimationDescriptor.from( &[_]tic80.AtlasIndex { 176, 177 }, 60);
    pub const animation_knight_2 = AnimationDescriptor.from( &[_]tic80.AtlasIndex { 180, 181 }, 60);
    pub const animation_penguin = AnimationDescriptor.from( &[_]tic80.AtlasIndex { 192, 193 }, 60);
    pub const animation_archer = AnimationDescriptor.from( &[_]tic80.AtlasIndex { 160, 161 }, 120);
    pub const animation_player_idle = AnimationDescriptor.from( &[_]tic80.AtlasIndex { 35, 51 }, 60);
    pub const animation_player_walk = AnimationDescriptor.from( &[_]tic80.AtlasIndex { 35, 36 }, 10);
    pub const animation_preparing_attack = AnimationDescriptor.from( &[_]tic80.AtlasIndex { 97, 98, 0, 0, 100, 99 }, 18);
    
    pub const config = struct {
        pub const player = struct {
            pub const attack = struct {
                pub const cooldown = 10;
                pub const damage = 10;
                pub const animation = animation_attack_1;
                pub const range = 2;
                pub const hitbox_relative_to_position = BoundingBox(f32).from(6, 1, 5, 11);
                pub const knockback_strength = 0.22;
            };
        };
    };

    const HitboxType = enum {
        /// once the hitbox hits an enemy, it cannot hit the same enemy again for the duration of the hitbox
        once_per_target,
        /// once hit per frame, as many times as it hits
        once_per_frame,
    };
    
    pub const palette = tic80.Palette {
        0x1a1c2c,
        0x5d275d,
        0xb13e53,
        0xef7d57,
        0xffcd75,
        0xa7f070,
        0x38b764,
        0x257179,
        0x29366f,
        0x3b5dc9,
        0x41a6f6,
        0x73eff7,
        0xf4f4f4,
        0x94b0c2,
        0x566c86,
        0x333c57
    };

    pub const atlas_sprites: tic80.SpriteAtlas = blk: {
        var atlas = std.mem.zeroes(tic80.SpriteAtlas);
        atlas[1] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0xf, 0xf, 0xe, 0xf, 0x0, 0x1, 0x0, 0x0, 0xf, 0x0, 0xe, 0x0, 0x0, 0x1, 0x0, 0x0, 0xe, 0x0, 0xf, 0x0, 0x0, 0x1, 0x0, 0x0, 0xf, 0xe, 0xf, 0xe, 0x0, 0x1, 0x0, 0x0, 0xf, 0xf, 0xf, 0xf, 0x0, 0xf, 0x0, 0x0, 0xf, 0x8, 0x8, 0xf, 0x0, 0x7 };
        atlas[2] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0xf, 0xf, 0xe, 0xf, 0x0, 0x1, 0x0, 0x0, 0xf, 0x0, 0xe, 0x0, 0x0, 0x1, 0x0, 0x0, 0xe, 0x0, 0xf, 0x0, 0x0, 0x1, 0x0, 0x0, 0xf, 0xe, 0xf, 0xe, 0x0, 0x1, 0x0, 0x0, 0xf, 0xf, 0xf, 0xf, 0x0, 0xf, 0x0, 0x0, 0xf, 0x8, 0x8, 0xf, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };
        atlas[3] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x7, 0x7, 0x7, 0x0, 0x0, 0x0, 0x6, 0x5, 0x6, 0x6, 0x6, 0x7, 0x0, 0x6, 0x5, 0x6, 0x6, 0x6, 0x6, 0x6, 0x7, 0x6, 0x7, 0x7, 0x7, 0x6, 0x7, 0x7, 0x7 };
        atlas[4] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x7, 0x7, 0x7, 0x0, 0x0, 0x0, 0x6, 0x5, 0x6, 0x6, 0x6, 0x7, 0x0, 0x6, 0x5, 0x6, 0x6, 0x6, 0x6, 0x7, 0x7, 0x7, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x7, 0x0, 0x7, 0x7, 0x7, 0x6, 0x7, 0x7, 0x0 };
        atlas[17] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0xe, 0xe, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe, 0x8, 0xe, 0x8, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0x3, 0x3, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0x3, 0x3, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0xd, 0xd, 0x0, 0x0, 0x0, 0x4, 0x4, 0x0, 0x0, 0x4, 0x4, 0x0 };
        atlas[18] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0xe, 0xe, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe, 0x8, 0xe, 0x8, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0x3, 0x3, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0x3, 0x3, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0xd, 0xd, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0xd, 0xd, 0x0, 0x0, 0x0, 0x4, 0x4, 0x0, 0x0, 0x4, 0x4, 0x0 };
        atlas[19] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe, 0xc, 0xe, 0xc, 0x0, 0xd, 0x0, 0x0, 0xe, 0xc, 0xe, 0xc, 0x0, 0xd, 0x0, 0x0, 0x0, 0xe, 0xe, 0xe, 0x0, 0xd, 0x0, 0x0, 0xf, 0xf, 0xf, 0xf, 0x0, 0xf, 0x0, 0x0, 0xf, 0xd, 0xd, 0xf, 0x0, 0x1 };
        atlas[20] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe, 0xc, 0xe, 0xc, 0x0, 0xd, 0x0, 0x0, 0xe, 0xc, 0xe, 0xc, 0x0, 0xd, 0x0, 0x0, 0x0, 0xe, 0xe, 0xe, 0x0, 0xd, 0x0, 0x0, 0xf, 0xf, 0xf, 0xf, 0x0, 0xf, 0x0, 0x0, 0xf, 0xd, 0xd, 0xf, 0x0, 0x1, 0x0, 0x0, 0x0, 0xd, 0xd, 0xe, 0x0, 0x0 };
        break :blk atlas;
    };

    pub const atlas_tiles_buffer = Buffer2D(tic80.PaletteIndex).from(@constCast(&atlas_tiles_normalized), 8*16);
    pub const atlas_tiles_normalized: [8*8*16*16]tic80.PaletteIndex = blk: {
        var texture_data: [8*8*16*16]tic80.PaletteIndex = undefined;
        for (atlas_tiles, 0..) |sprite, sprite_index| {
            const atlas_col = sprite_index % 16;
            const atlas_row = @divFloor(sprite_index, 16);
            @setEvalBranchQuota(1000000);
            for (sprite, 0..) |palette_index, pixel_index| {
                const sprite_col = pixel_index % 8;
                const sprite_row = @divFloor(pixel_index, 8);

                const dest_x = atlas_col*8 + sprite_col;
                // NOTE I want the atlas sprite 0  to start from bottom left and grow upwards so inverse y
                const dest_y = (15 - atlas_row)*8 + sprite_row;
                texture_data[dest_x + dest_y*16*8] = palette_index;
            }
        }
        break :blk texture_data;
    };

    pub const atlas_tiles: tic80.SpriteAtlas = blk: {
        var atlas = std.mem.zeroes(tic80.SpriteAtlas);
        atlas[1] = tic80.SpriteData { 0x0, 0xb, 0xb, 0x0, 0x0, 0xa, 0xa, 0x0, 0xb, 0x8, 0x9, 0x9, 0x9, 0x9, 0x8, 0xa, 0xb, 0x9, 0xb, 0xb, 0xa, 0xa, 0x9, 0xa, 0x0, 0x9, 0x8, 0x8, 0x8, 0x8, 0x9, 0x0, 0x0, 0x9, 0xb, 0xb, 0xa, 0xa, 0x9, 0x0, 0xb, 0x9, 0x8, 0x8, 0x8, 0x8, 0x9, 0xa, 0xb, 0x8, 0x9, 0x9, 0x9, 0x9, 0x8, 0xa, 0x0, 0xb, 0xb, 0x0, 0x0, 0xa, 0xa, 0x0 };
        atlas[3] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x3, 0x3, 0x2, 0x0, 0x0, 0x0, 0x3, 0x3, 0x3, 0x2, 0x2, 0x2, 0x0, 0x0, 0x3, 0x2, 0x2, 0x2, 0x2, 0x2, 0x0, 0x0, 0x2, 0x2, 0x2, 0x2, 0x2, 0x1, 0x0, 0x0, 0x2, 0x2, 0x2, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x2, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };
        atlas[4] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x3, 0x3, 0x2, 0x0, 0x0, 0x0, 0x3, 0x3, 0x3, 0x2, 0x2, 0x2, 0x0, 0x0, 0x3, 0x2, 0x2, 0x2, 0x2, 0x2, 0x0, 0x0, 0x2, 0x2, 0x2, 0x2, 0x2, 0x1, 0x0, 0x0, 0x2, 0x2, 0x2, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x2, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0 };
        atlas[5] = tic80.SpriteData { 0x2, 0x2, 0x0, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x1, 0x1, 0x1, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0 };
        atlas[6] = tic80.SpriteData { 0x0, 0x2, 0x2, 0x2, 0x2, 0x0, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x1, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1 };
        atlas[7] = tic80.SpriteData { 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1 };
        atlas[8] = tic80.SpriteData { 0x0, 0x2, 0x2, 0x2, 0x2, 0x0, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x0, 0x1, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };
        atlas[9] = tic80.SpriteData { 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1 };
        atlas[10] = tic80.SpriteData { 0x2, 0x2, 0x0, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1 };
        atlas[11] = tic80.SpriteData { 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x1, 0x0, 0x1, 0x1, 0x1, 0x1, 0x0, 0x0, 0x1, 0x0, 0x0, 0x1, 0x1, 0x0 };
        atlas[12] = tic80.SpriteData { 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x0, 0x2, 0x2, 0x2, 0x2, 0x2, 0x1, 0x2, 0x2, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x1, 0x0, 0x0, 0x1, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };
        atlas[14] = tic80.SpriteData { 0x0, 0x0, 0x3, 0x3, 0x3, 0x2, 0x0, 0x0, 0x0, 0x3, 0x3, 0x2, 0x2, 0x2, 0x2, 0x0, 0x3, 0x3, 0x2, 0x2, 0x2, 0x2, 0x2, 0x1, 0x3, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x1, 0x3, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x1, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x1, 0x1, 0x0, 0x2, 0x2, 0x2, 0x2, 0x1, 0x1, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x1, 0x0, 0x0 };
        atlas[15] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x3, 0x3, 0x2, 0x0, 0x0, 0x0, 0x3, 0x3, 0x2, 0x2, 0x2, 0x2, 0x0, 0x3, 0x3, 0x2, 0x2, 0x2, 0x2, 0x2, 0x1, 0x3, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x1, 0x3, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x1, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x1, 0x1, 0x0, 0x2, 0x2, 0x2, 0x2, 0x1, 0x1, 0x0 };
        atlas[19] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0x0, 0x0, 0x0, 0x0, 0xd, 0x7, 0xe, 0xe, 0x7, 0xf, 0x0, 0x0, 0xd, 0x7, 0xe, 0xe, 0x7, 0xf, 0x0, 0x0, 0xd, 0xd, 0x7, 0xe, 0xf, 0xf, 0x0, 0x0, 0x0, 0xd, 0xd, 0x7, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd, 0xe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };
        atlas[20] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x2, 0x0, 0x0, 0x0, 0x0, 0x3, 0x7, 0x2, 0x2, 0x7, 0x1, 0x0, 0x0, 0x3, 0x7, 0x2, 0x2, 0x7, 0x1, 0x0, 0x0, 0x3, 0x3, 0x7, 0x2, 0x1, 0x1, 0x0, 0x0, 0x0, 0x3, 0x3, 0x7, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };
        atlas[30] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0x0, 0x0, 0x0, 0x0, 0xd, 0x7, 0xe, 0xe, 0x7, 0xf, 0x0, 0x0, 0xd, 0x7, 0x7, 0xe, 0x7, 0xf, 0x0, 0x0, 0xd, 0xd, 0x7, 0x7, 0xf, 0xf, 0x0, 0x0, 0x0, 0xd, 0xd, 0x7, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd, 0xe, 0x0, 0x0, 0x0 };
        atlas[31] = tic80.SpriteData { 0x0, 0x0, 0x1, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0x0, 0x0, 0x0, 0x0, 0xd, 0x7, 0xe, 0xe, 0x7, 0xf, 0x0, 0x0, 0xd, 0x7, 0x7, 0xe, 0x7, 0xf, 0x0, 0x0, 0xd, 0xd, 0x7, 0x7, 0xf, 0xf, 0x0, 0x0, 0x0, 0xd, 0xd, 0x7, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd, 0xe, 0x0, 0x0, 0x0 };
        atlas[33] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0xe, 0xe, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe, 0x8, 0xe, 0x8, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0x3, 0x3, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0x3, 0x3, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0xd, 0xd, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0xd, 0xd, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x4, 0x0, 0x0 };
        atlas[34] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0xe, 0xe, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe, 0x8, 0xe, 0x8, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0x3, 0x3, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0x3, 0x3, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0xd, 0xd, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x4, 0x0, 0x0 };
        atlas[35] = tic80.SpriteData { 0x2, 0x2, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd, 0xd, 0xd, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd, 0x8, 0x8, 0x8, 0x0, 0x0, 0x0, 0x0, 0xd, 0xd, 0x3, 0x3, 0x0, 0x0, 0x0, 0x0, 0xd, 0xd, 0x3, 0x3, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0xd, 0xd, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0xd, 0xd, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x4, 0x0, 0x0 };
        atlas[36] = tic80.SpriteData { 0x0, 0x2, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0xd, 0xd, 0xd, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd, 0x8, 0x8, 0x8, 0x0, 0x0, 0x0, 0x0, 0xd, 0xd, 0x3, 0x3, 0x0, 0x0, 0x0, 0x0, 0xd, 0xd, 0x3, 0x3, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0xd, 0xd, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0xd, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x4, 0x0, 0x0, 0x0 };
        atlas[37] = tic80.SpriteData { 0xd, 0xd, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd, 0xd, 0xd, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd, 0xd, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };
        atlas[38] = tic80.SpriteData { 0xd, 0xd, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd, 0xd, 0xd, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd, 0xd, 0xd, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd, 0xd, 0xd, 0xd, 0x0, 0x0, 0x0, 0x0, 0xd, 0xd, 0xd, 0xd, 0xd, 0x0, 0x0, 0x0, 0x0, 0xd, 0xd, 0xd, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };
        atlas[39] = tic80.SpriteData { 0xd, 0xd, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd, 0xd, 0xd, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd, 0xd, 0xd, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd, 0xd, 0xd, 0xd, 0xd, 0x0, 0x0, 0x0, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0x0, 0x0, 0xd, 0xd, 0xd, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };
        atlas[40] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd, 0xd, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd, 0xd, 0xd, 0x0, 0x0, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0x0, 0x0, 0x0, 0xd, 0xd, 0xd, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };
        atlas[41] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd, 0xd, 0x0, 0x0, 0x0, 0xd, 0xd, 0xd, 0xd, 0xd, 0x0, 0x0, 0x0, 0x0, 0xd, 0xd, 0xd, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };
        atlas[49] = tic80.SpriteData { 0xe, 0xe, 0xe, 0xe, 0xe, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0x8, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0xe, 0xf, 0xe, 0x8, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0x3, 0x3, 0x3, 0x0, 0x0, 0x0, 0xe, 0xe, 0x3, 0x3, 0x3, 0x0, 0x0, 0x0, 0xe, 0xe, 0xd, 0xd, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0xd, 0xd, 0x0, 0x0, 0x0, 0x4, 0x4, 0x0, 0x0, 0x4, 0x4, 0x0 };
        atlas[50] = tic80.SpriteData { 0xe, 0xe, 0xe, 0xe, 0xe, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0xf, 0xe, 0x8, 0x0, 0x0, 0x0, 0x0, 0xe, 0x8, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0x3, 0x3, 0x3, 0x0, 0x0, 0x0, 0xe, 0xe, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0x3, 0x3, 0x3, 0x0, 0x0, 0x0, 0xe, 0xe, 0xd, 0xd, 0x0, 0x0, 0x0, 0x4, 0x4, 0x0, 0x0, 0x4, 0x4, 0x0 };
        atlas[51] = tic80.SpriteData { 0x0, 0x2, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0xd, 0xd, 0xd, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd, 0x8, 0x8, 0x8, 0x0, 0x0, 0x0, 0x0, 0xd, 0xd, 0x3, 0x3, 0x0, 0x0, 0x0, 0x0, 0xd, 0xd, 0x3, 0x3, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0xd, 0xd, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0xd, 0xd, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x4, 0x0, 0x0 };
        atlas[52] = tic80.SpriteData { 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0xe, 0xe, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe, 0xf, 0xf, 0xf, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0x4, 0x4, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0x4, 0x4, 0x0, 0x0, 0x0, 0x0, 0xd, 0xd, 0xe, 0xe, 0x0, 0x0, 0x0, 0x0, 0xd, 0xd, 0xe, 0xe, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x3, 0x0, 0x0 };
        atlas[65] = tic80.SpriteData { 0x0, 0xc, 0xc, 0x0, 0xc, 0x0, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0xc, 0x0, 0xc, 0xc, 0x0, 0xc, 0x0, 0xc, 0xc, 0x0, 0xc, 0xc, 0x0, 0x0, 0xc, 0xc, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0xc, 0x0, 0x0, 0x0, 0xc, 0xc, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };
        atlas[66] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x0, 0xc, 0xc, 0xc, 0xc, 0x0, 0x0, 0xc, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0xc, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };
        atlas[67] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0xc, 0xc, 0x0, 0x0, 0x0, 0xc, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0xc, 0x0, 0x0, 0x0, 0x0 };
        atlas[68] = tic80.SpriteData { 0x0, 0x0, 0xd, 0x0, 0xd, 0x0, 0x0, 0x0, 0x0, 0xd, 0x0, 0x0, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };
        atlas[81] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x0, 0xc, 0xc, 0xc, 0xc, 0x0, 0x0, 0xc, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0xc, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };
        atlas[82] = tic80.SpriteData { 0x0, 0xc, 0xc, 0x0, 0xc, 0x0, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0xc, 0x0, 0xc, 0xc, 0x0, 0xc, 0x0, 0xc, 0xc, 0x0, 0xc, 0xc, 0x0, 0x0, 0xc, 0xc, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0xc, 0x0, 0x0, 0x0, 0xc, 0xc, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };
        atlas[83] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0xc, 0xc, 0x0, 0x0, 0x0, 0xc, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0xc, 0x0, 0x0, 0x0, 0x0 };
        atlas[97] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0xc, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };
        atlas[98] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0xc, 0xc, 0x4, 0x4, 0x4, 0xc, 0xc, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };
        atlas[99] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };
        atlas[100] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0x0, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0x0, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };
        atlas[113] = tic80.SpriteData { 0xc, 0xc, 0x0, 0x0, 0x0, 0x0, 0xc, 0xc, 0xc, 0xd, 0xc, 0x0, 0x0, 0xc, 0xd, 0xc, 0xc, 0xd, 0xd, 0xc, 0xc, 0xd, 0xd, 0xc, 0x0, 0xc, 0xd, 0xc, 0xc, 0xd, 0xc, 0x0, 0x0, 0xc, 0xd, 0xc, 0xc, 0xd, 0xc, 0x0, 0x0, 0xc, 0xd, 0xc, 0xc, 0xd, 0xc, 0x0, 0xc, 0xd, 0xc, 0xc, 0xc, 0xc, 0xd, 0xc, 0xc, 0xc, 0xc, 0x0, 0x0, 0xc, 0xc, 0xc };
        atlas[114] = tic80.SpriteData { 0x0, 0xc, 0x0, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0xc, 0xc, 0x0, 0x0, 0xc, 0xc, 0x0, 0x0, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0x0, 0x0, 0x0, 0xc, 0xc, 0xc, 0xc, 0x0, 0x0, 0x0, 0x0, 0xc, 0xc, 0xc, 0xc, 0x0, 0x0, 0x0, 0x0, 0xc, 0xc, 0xc, 0xc, 0x0, 0x0, 0x0, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0x0, 0x0, 0xc, 0xc, 0x0, 0x0, 0xc, 0xc, 0x0 };
        atlas[123] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x2, 0x3, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0x0, 0x0, 0x0 };
        atlas[133] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x6, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0xf, 0x0, 0xf, 0x0, 0x0, 0xf, 0xf, 0x0 };
        atlas[134] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x5, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x6, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0xf, 0x0, 0x0 };
        atlas[135] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0xf, 0xf, 0x0, 0x0 };
        atlas[136] = tic80.SpriteData { 0x0, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0x0, 0xe, 0xe, 0xe, 0xe, 0x1, 0xe, 0x1, 0xf, 0xe, 0x1, 0xe, 0x1, 0xe, 0x1, 0x1, 0x1, 0xe, 0xe, 0x1, 0x1, 0x1, 0x1, 0x1, 0xf, 0xe, 0x1, 0xe, 0x1, 0x1, 0x1, 0xf, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0xf, 0x1, 0xf, 0x1, 0x1, 0xf, 0x1, 0xf, 0x1, 0xf, 0x1, 0x0, 0xf, 0x1, 0xf, 0x1, 0xf, 0x1, 0x0 };
        atlas[137] = tic80.SpriteData { 0x0, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0x0, 0xd, 0xd, 0xd, 0xd, 0xe, 0xd, 0xe, 0xf, 0xd, 0xe, 0xd, 0xe, 0xd, 0xe, 0xe, 0xe, 0xd, 0xd, 0xe, 0xe, 0xe, 0xe, 0xe, 0xf, 0xd, 0xe, 0xd, 0xe, 0xe, 0xe, 0xf, 0xf, 0xe, 0xe, 0xe, 0xe, 0xe, 0xf, 0xe, 0x8, 0xe, 0xe, 0xf, 0xe, 0xf, 0xe, 0xf, 0xe, 0x0, 0xf, 0xe, 0xf, 0xe, 0xf, 0xe, 0x0 };
        atlas[138] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x5, 0x7, 0x0, 0x7, 0x0, 0x7, 0x0, 0x0, 0x0, 0x6, 0x5, 0x6, 0x7, 0x0, 0x7, 0x0, 0x0, 0x7, 0x6, 0x7, 0x6, 0x7, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x7, 0xf, 0xf, 0x0 };
        atlas[139] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x2, 0x3, 0x2, 0x0, 0x0, 0x0, 0x0, 0x2, 0x3, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x1, 0x0, 0x0, 0x0 };
        atlas[140] = tic80.SpriteData { 0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x4, 0x3, 0x4, 0x0, 0x0, 0x0, 0x0, 0x2, 0x3, 0x2, 0x0, 0x2, 0x0, 0x0, 0x2, 0x3, 0x2, 0x3, 0x2, 0x0, 0x0, 0x0, 0x3, 0x2, 0x3, 0x2, 0x3, 0x2, 0x0, 0x0, 0x0, 0x1, 0x2, 0x1, 0x2, 0x0, 0x0 };
        atlas[143] = tic80.SpriteData { 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x7, 0x6, 0x6, 0x7, 0x5, 0x5, 0x5, 0x5, 0x7, 0x6, 0x6, 0x7, 0x5, 0x5, 0x5, 0x6, 0x7, 0x7, 0x6, 0x6, 0x6, 0x6, 0x5, 0x6, 0x6, 0x6, 0x6, 0x6, 0x5, 0x6, 0x5, 0x5, 0x7, 0x7, 0x7, 0x6, 0x5, 0x5, 0x5, 0x5, 0x7, 0x7, 0x6, 0x7, 0x6, 0x5, 0x5, 0x5, 0x7, 0x7, 0x6, 0x7, 0x5, 0x6 };
        atlas[151] = tic80.SpriteData { 0x0, 0x0, 0xd, 0xe, 0xe, 0xe, 0xf, 0xf, 0x0, 0x0, 0xd, 0xe, 0xe, 0xe, 0xf, 0xf, 0x0, 0x0, 0x0, 0xd, 0xe, 0xf, 0xe, 0x0, 0x0, 0x0, 0x0, 0xd, 0xe, 0xf, 0xe, 0x0, 0x0, 0x0, 0x0, 0xd, 0xe, 0xf, 0xe, 0x0, 0x0, 0x0, 0x0, 0xd, 0xe, 0xf, 0xe, 0x0, 0x0, 0x0, 0x0, 0xd, 0xe, 0xf, 0xe, 0x0, 0x0, 0x0, 0x0, 0xd, 0xe, 0xf, 0xe, 0x0 };
        atlas[152] = tic80.SpriteData { 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf };
        atlas[153] = tic80.SpriteData { 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf };
        atlas[154] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7 };
        atlas[155] = tic80.SpriteData { 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7 };
        atlas[159] = tic80.SpriteData { 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc };
        atlas[160] = tic80.SpriteData { 0x9, 0x9, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x9, 0x9, 0x0, 0xd, 0x0, 0x3, 0x0, 0x9, 0xc, 0xc, 0x9, 0xd, 0x0, 0x0, 0x3, 0x9, 0xc, 0xf, 0x9, 0xd, 0x0, 0x0, 0x3, 0x9, 0xc, 0xc, 0x9, 0xd, 0x0, 0x0, 0x3, 0x0, 0x9, 0x9, 0x0, 0xd, 0x0, 0x3, 0x0, 0xa, 0x0, 0x0, 0xa, 0x0, 0x3, 0x0, 0x0, 0xa, 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x0 };
        atlas[161] = tic80.SpriteData { 0x9, 0x9, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x9, 0x9, 0x0, 0xd, 0x0, 0x3, 0x0, 0x9, 0xc, 0xd, 0xd, 0x0, 0x0, 0x0, 0x3, 0x9, 0xd, 0x4, 0x4, 0x4, 0x4, 0x4, 0xf, 0x9, 0xc, 0xd, 0xd, 0x0, 0x0, 0x0, 0x3, 0x0, 0x9, 0x9, 0x0, 0xd, 0x0, 0x3, 0x0, 0xa, 0x0, 0x0, 0xa, 0x0, 0x3, 0x0, 0x0, 0xa, 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x0 };
        atlas[162] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x4, 0x4, 0x4, 0x4, 0xf };
        atlas[166] = tic80.SpriteData { 0x0, 0x0, 0x0, 0xd, 0xe, 0xf, 0xe, 0x0, 0x0, 0x0, 0x0, 0xd, 0xe, 0xf, 0xe, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe, 0xf, 0xe, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe, 0xf, 0xe, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0xf, 0xe, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0xf, 0xf, 0x0, 0x0, 0x0, 0x0, 0xd, 0xe, 0xf, 0xf, 0x0, 0x0, 0x0, 0x0, 0xd, 0xe, 0xf, 0xe, 0x0 };
        atlas[167] = tic80.SpriteData { 0x0, 0x0, 0x0, 0xd, 0xe, 0xf, 0xe, 0x0, 0x0, 0x0, 0x0, 0xd, 0xe, 0xf, 0xe, 0x0, 0x0, 0x0, 0x0, 0xd, 0xe, 0xf, 0xe, 0x0, 0x0, 0x0, 0x0, 0xd, 0xe, 0xf, 0xe, 0x0, 0x0, 0x0, 0x0, 0xd, 0xe, 0xf, 0xe, 0x0, 0x0, 0x0, 0x0, 0xd, 0xe, 0xf, 0xe, 0x0, 0x0, 0x0, 0x0, 0xd, 0xe, 0xf, 0xe, 0x0, 0x0, 0x0, 0x0, 0xd, 0xe, 0xf, 0xe, 0x0 };
        atlas[168] = tic80.SpriteData { 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf };
        atlas[176] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0xf, 0xf, 0xe, 0xf, 0x0, 0x1, 0x0, 0x0, 0xf, 0x0, 0xe, 0x0, 0x0, 0x1, 0x0, 0x0, 0xe, 0x0, 0xf, 0x0, 0x0, 0x1, 0x0, 0x0, 0xf, 0xe, 0xf, 0xe, 0x0, 0x1, 0x0, 0x0, 0xf, 0xf, 0xf, 0xf, 0x0, 0xf, 0x0, 0x0, 0xf, 0x8, 0x8, 0xf, 0x0, 0x7 };
        atlas[177] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0xf, 0xf, 0xe, 0xf, 0x0, 0x1, 0x0, 0x0, 0xf, 0x0, 0xe, 0x0, 0x0, 0x1, 0x0, 0x0, 0xe, 0x0, 0xf, 0x0, 0x0, 0x1, 0x0, 0x0, 0xf, 0xe, 0xf, 0xe, 0x0, 0x1, 0x0, 0x0, 0xf, 0xf, 0xf, 0xf, 0x0, 0xf, 0x0, 0x0, 0xf, 0x8, 0x8, 0xf, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };
        atlas[178] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x7, 0x7, 0x7, 0x0, 0x0, 0x0, 0x6, 0x5, 0x6, 0x6, 0x6, 0x7, 0x0, 0x6, 0x5, 0x6, 0x6, 0x6, 0x6, 0x6, 0x7, 0x6, 0x7, 0x7, 0x7, 0x6, 0x7, 0x7, 0x7 };
        atlas[179] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x7, 0x7, 0x7, 0x0, 0x0, 0x0, 0x6, 0x5, 0x6, 0x6, 0x6, 0x7, 0x0, 0x6, 0x5, 0x6, 0x6, 0x6, 0x6, 0x7, 0x7, 0x7, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x7, 0x0, 0x7, 0x7, 0x7, 0x6, 0x7, 0x7, 0x0 };
        atlas[180] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe, 0xc, 0xe, 0xc, 0x0, 0xd, 0x0, 0x0, 0xe, 0xc, 0xe, 0xc, 0x0, 0xd, 0x0, 0x0, 0x0, 0xe, 0xe, 0xe, 0x0, 0xd, 0x0, 0x0, 0xf, 0xf, 0xf, 0xf, 0x0, 0xf, 0x0, 0x0, 0xf, 0xd, 0xd, 0xf, 0x0, 0x1 };
        atlas[181] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe, 0xc, 0xe, 0xc, 0x0, 0xd, 0x0, 0x0, 0xe, 0xc, 0xe, 0xc, 0x0, 0xd, 0x0, 0x0, 0x0, 0xe, 0xe, 0xe, 0x0, 0xd, 0x0, 0x0, 0xf, 0xf, 0xf, 0xf, 0x0, 0xf, 0x0, 0x0, 0xf, 0xd, 0xd, 0xf, 0x0, 0x1, 0x0, 0x0, 0x0, 0xd, 0xd, 0xe, 0x0, 0x0 };
        atlas[182] = tic80.SpriteData { 0x0, 0x0, 0x0, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd, 0xe, 0xf, 0xf, 0x0, 0x0, 0x0, 0x0, 0xd, 0xe, 0xf, 0xe, 0x0, 0x0, 0x0, 0x0, 0xd, 0xe, 0xf, 0xe, 0x0, 0x0, 0x0, 0x0, 0xd, 0xe, 0xf, 0xe, 0x0, 0x0, 0x0, 0xd, 0xe, 0xe, 0xe, 0xf, 0xf, 0x0, 0x0, 0xd, 0xe, 0xe, 0xe, 0xf, 0xf };
        atlas[183] = tic80.SpriteData { 0x0, 0x0, 0x0, 0xd, 0xe, 0xf, 0xe, 0x0, 0x0, 0x0, 0x0, 0xd, 0xe, 0xf, 0xe, 0x0, 0x0, 0x0, 0x0, 0xd, 0xe, 0xf, 0xe, 0x0, 0x0, 0x0, 0x0, 0xd, 0xe, 0xf, 0xe, 0x0, 0x0, 0x0, 0x0, 0xd, 0xe, 0xf, 0xe, 0x0, 0x0, 0x0, 0x0, 0xd, 0xe, 0xf, 0xe, 0x0, 0x0, 0x0, 0xd, 0xe, 0xe, 0xe, 0xf, 0xf, 0x0, 0x0, 0xd, 0xe, 0xe, 0xe, 0xf, 0xf };
        atlas[184] = tic80.SpriteData { 0xd, 0xe, 0xe, 0xf, 0xf, 0xf, 0x0, 0x0, 0xd, 0xe, 0xe, 0xf, 0xf, 0xf, 0x0, 0x0, 0x0, 0xe, 0xf, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0xe, 0xf, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0xe, 0xf, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0xe, 0xf, 0xe, 0xf, 0x0, 0x0, 0x0, 0xd, 0xe, 0xe, 0xf, 0xf, 0xf, 0x0, 0x0, 0xd, 0xe, 0xe, 0xf, 0xf, 0xf, 0x0, 0x0 };
        atlas[185] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0xf, 0xf, 0xf, 0x0, 0x0, 0x0, 0x0, 0xf, 0xf, 0xf, 0xf, 0x0, 0x0, 0x0, 0x0, 0xf, 0xf, 0xf, 0xf, 0x0, 0x0, 0x0, 0x0, 0xf, 0xf, 0xf, 0xf, 0x0, 0xd, 0xd, 0x0, 0xf, 0xf, 0xf, 0x9, 0x9, 0x9, 0xd, 0x0, 0xf, 0x8, 0x8, 0x9, 0x9, 0x9, 0xd, 0x0, 0xf, 0x8, 0x8, 0x9, 0x9, 0x9, 0xd, 0x0 };
        atlas[186] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0xf, 0xf, 0xf, 0x0, 0x0, 0x0, 0x0, 0xf, 0xf, 0xf, 0xf, 0x0, 0x0, 0x0, 0x0, 0xf, 0xf, 0xf, 0xf, 0x0, 0x0, 0x0, 0x8, 0x8, 0x8, 0xf, 0xf, 0x0, 0x0, 0xe, 0x8, 0x8, 0x8, 0xe, 0xf, 0x0, 0x0, 0xe, 0x8, 0x8, 0x8, 0xe, 0xf, 0x0 };
        atlas[187] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0xc, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0xc, 0x0, 0xd, 0x1, 0x3, 0x3, 0x1, 0xd, 0x0, 0x0, 0xd, 0x1, 0x1, 0x1, 0x1, 0xd, 0x0 };
        atlas[188] = tic80.SpriteData { 0x0, 0x0, 0x9, 0x8, 0x0, 0x0, 0xd, 0x0, 0x0, 0x0, 0x9, 0x8, 0x0, 0x0, 0xe, 0xd, 0x0, 0xd, 0xf, 0xf, 0xe, 0x0, 0xf, 0xd, 0x0, 0xd, 0xd, 0xe, 0xe, 0x0, 0xf, 0xe, 0x0, 0xe, 0xd, 0xe, 0xf, 0x0, 0xf, 0xe, 0x0, 0xe, 0xe, 0xf, 0xf, 0x0, 0xf, 0xe, 0x0, 0x0, 0xe, 0xf, 0x0, 0x0, 0xf, 0xe, 0x0, 0x0, 0xe, 0xf, 0x0, 0x0, 0xe, 0x0 };
        atlas[189] = tic80.SpriteData { 0x0, 0x0, 0x9, 0x8, 0x0, 0x0, 0xd, 0x0, 0x0, 0x0, 0x9, 0x8, 0x0, 0x0, 0xd, 0x0, 0x0, 0xd, 0xf, 0xf, 0xe, 0x0, 0x1, 0x0, 0x0, 0xd, 0xd, 0xe, 0xe, 0x0, 0xf, 0x0, 0x0, 0xe, 0xd, 0xe, 0xf, 0x0, 0xf, 0x0, 0x0, 0xe, 0xe, 0xf, 0xf, 0x0, 0xf, 0x0, 0x0, 0x0, 0xe, 0xf, 0x0, 0x0, 0xf, 0x0, 0x0, 0x0, 0xe, 0xf, 0x0, 0x0, 0xf, 0x0 };
        atlas[192] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0xe, 0xe, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe, 0x8, 0xe, 0x8, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0x3, 0x3, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0x3, 0x3, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0xd, 0xd, 0x0, 0x0, 0x0, 0x4, 0x4, 0x0, 0x0, 0x4, 0x4, 0x0 };
        atlas[193] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0xe, 0xe, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe, 0x8, 0xe, 0x8, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0x3, 0x3, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0x3, 0x3, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0xd, 0xd, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0xd, 0xd, 0x0, 0x0, 0x0, 0x4, 0x4, 0x0, 0x0, 0x4, 0x4, 0x0 };
        atlas[198] = tic80.SpriteData { 0x0, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xd, 0xf, 0xe, 0xd, 0xf, 0xe, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xe, 0xe, 0xd, 0xf, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xf, 0xd, 0xd, 0xe, 0xe, 0xd, 0xd, 0xd, 0x0, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd };
        atlas[199] = tic80.SpriteData { 0x7, 0xe, 0xe, 0xe, 0x7, 0x7, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xf, 0xe, 0xd, 0xf, 0xe, 0xd, 0xf, 0xe, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0x7, 0x7, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0x7, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0x7, 0xf, 0xd, 0xd, 0xd, 0xd };
        atlas[200] = tic80.SpriteData { 0xe, 0xe, 0xe, 0x7, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xf, 0xe, 0xe, 0xe, 0xe, 0xe, 0x7, 0xf, 0xe, 0xd, 0xf, 0xe, 0xd, 0xf, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0x7, 0xd, 0xd, 0xd, 0xf, 0xe, 0xf, 0xd, 0x7, 0xd, 0xd, 0xd, 0xf, 0x8, 0xf, 0xd, 0x0, 0x0, 0xd };
        atlas[201] = tic80.SpriteData { 0x7, 0xe, 0xe, 0x0, 0x7, 0x7, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xf, 0xe, 0xd, 0xf, 0xf, 0xd, 0xf, 0xe, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0x7, 0x7, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0x7, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0x7, 0xf, 0xd, 0xd, 0xd, 0xd };
        atlas[202] = tic80.SpriteData { 0xe, 0xe, 0xe, 0x7, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xf, 0xe, 0xe, 0xe, 0xe, 0xe, 0x7, 0xf, 0xe, 0xd, 0xf, 0xe, 0xd, 0xf, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xe, 0xe, 0xd, 0xd, 0x7, 0xd, 0xd, 0xd, 0xe, 0xe, 0xd, 0xd, 0x7, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xf, 0x0, 0x0, 0xd };
        atlas[203] = tic80.SpriteData { 0xe, 0xe, 0xe, 0x7, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xf, 0xe, 0xe, 0xe, 0xe, 0xe, 0x7, 0xf, 0xe, 0xd, 0xf, 0xe, 0xd, 0xf, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xe, 0xe, 0xd, 0xd, 0x7, 0xd, 0xd, 0xd, 0xe, 0xe, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xd };
        atlas[204] = tic80.SpriteData { 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0x7, 0x0, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0x7, 0xe, 0xd, 0xf, 0xe, 0xd, 0xf, 0xe, 0xf, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xe, 0xd, 0xe, 0xd, 0xd, 0xd, 0xf, 0xd, 0xe, 0xd, 0xe, 0xd, 0xe, 0xd, 0xf, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0x0 };
        atlas[205] = tic80.SpriteData { 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0x7, 0x0, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0x7, 0xe, 0xd, 0xf, 0xe, 0xd, 0xf, 0xe, 0xf, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xe, 0xe, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xf, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xf, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0x0 };
        atlas[212] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0 };
        atlas[213] = tic80.SpriteData { 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf };
        atlas[214] = tic80.SpriteData { 0x0, 0xd, 0xe, 0xd, 0xd, 0xe, 0xe, 0xe, 0x0, 0xe, 0xd, 0xe, 0xd, 0xe, 0xe, 0xe, 0x0, 0xd, 0xd, 0xd, 0xd, 0xe, 0xe, 0xe, 0x0, 0xd, 0xd, 0xd, 0xd, 0xe, 0xe, 0xe, 0x0, 0xd, 0xd, 0xd, 0xd, 0xe, 0xe, 0xe, 0x0, 0xd, 0xd, 0xd, 0xd, 0xe, 0xe, 0xe, 0x0, 0xd, 0xd, 0xd, 0xd, 0xe, 0xe, 0xe, 0x0, 0xd, 0xd, 0xd, 0xd, 0xe, 0xe, 0xe };
        atlas[216] = tic80.SpriteData { 0x0, 0xf, 0x8, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0 };
        atlas[217] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0xe, 0x0, 0x0, 0x0, 0x0, 0xe, 0xf, 0x0, 0xf, 0xf, 0x0, 0x0, 0x0, 0xe, 0x7, 0xa, 0x7, 0xf, 0x0, 0x0, 0x0, 0x0, 0x7, 0xa, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0 };
        atlas[218] = tic80.SpriteData { 0x0, 0x0, 0x9, 0xa, 0xa, 0x9, 0x0, 0x0, 0x0, 0x0, 0x9, 0xa, 0xa, 0x9, 0x0, 0x0, 0x0, 0x0, 0x9, 0xa, 0xa, 0x9, 0x0, 0x0, 0x0, 0x0, 0x9, 0xa, 0xa, 0x9, 0x0, 0x0, 0x0, 0x0, 0x9, 0xa, 0xa, 0x9, 0x0, 0x0, 0x0, 0x0, 0x9, 0xa, 0xa, 0x9, 0x0, 0x0, 0x0, 0x0, 0x8, 0xa, 0xa, 0x9, 0x0, 0x0, 0x0, 0x0, 0x9, 0xa, 0xa, 0x9, 0x0, 0x0 };
        atlas[219] = tic80.SpriteData { 0x0, 0xf, 0x8, 0x9, 0x9, 0x8, 0xf, 0x0, 0x0, 0x0, 0x8, 0x9, 0x9, 0x8, 0x0, 0x0, 0x0, 0x0, 0x8, 0x9, 0x9, 0x8, 0x0, 0x0, 0x0, 0x0, 0x8, 0xa, 0xa, 0x8, 0x0, 0x0, 0x0, 0x0, 0x9, 0xa, 0xa, 0x8, 0x0, 0x0, 0x0, 0x0, 0x9, 0xa, 0xa, 0x9, 0x0, 0x0, 0x0, 0x0, 0x9, 0xa, 0xa, 0x9, 0x0, 0x0, 0x0, 0x0, 0x9, 0xa, 0xa, 0x9, 0x0, 0x0 };
        atlas[228] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0 };
        atlas[229] = tic80.SpriteData { 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe };
        atlas[232] = tic80.SpriteData { 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0 };
        atlas[233] = tic80.SpriteData { 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0 };
        atlas[234] = tic80.SpriteData { 0x0, 0x0, 0x9, 0xa, 0xa, 0x9, 0x0, 0x0, 0x0, 0x0, 0x9, 0xa, 0xa, 0x8, 0x0, 0x0, 0x0, 0x0, 0x9, 0xa, 0xa, 0x9, 0x0, 0x0, 0x0, 0x0, 0x9, 0xa, 0xa, 0x9, 0x0, 0x0, 0x0, 0x0, 0x8, 0xa, 0xa, 0x9, 0x0, 0x0, 0x0, 0x0, 0x9, 0xa, 0xa, 0x9, 0x0, 0x0, 0x0, 0x0, 0x9, 0xa, 0xa, 0x9, 0x0, 0x0, 0x0, 0x0, 0x9, 0xa, 0xa, 0x9, 0x0, 0x0 };
        atlas[235] = tic80.SpriteData { 0x0, 0x0, 0x9, 0xa, 0xa, 0x9, 0x0, 0x0, 0x0, 0x0, 0x9, 0xa, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0xa, 0xa, 0x9, 0x0, 0x0, 0x0, 0x0, 0x9, 0xa, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0xa, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };
        atlas[236] = tic80.SpriteData { 0x0, 0x0, 0x9, 0xa, 0xa, 0x9, 0x0, 0x0, 0x0, 0x0, 0x9, 0xa, 0xa, 0x9, 0x0, 0x0, 0x0, 0x0, 0x9, 0xa, 0xa, 0x9, 0x0, 0x0, 0x0, 0x0, 0x9, 0xa, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x9, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };
        atlas[244] = tic80.SpriteData { 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x6, 0x0, 0x0, 0x0, 0x0, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x0 };
        atlas[248] = tic80.SpriteData { 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0xc, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0xc, 0xc, 0xc, 0x0, 0x0, 0x0 };
        atlas[249] = tic80.SpriteData { 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0xc, 0xc, 0xc, 0x0, 0x0, 0x0, 0x0, 0xc, 0xc, 0xc, 0xc, 0x0, 0x0, 0x0, 0x0 };
        atlas[251] = tic80.SpriteData { 0x0, 0x0, 0x8, 0xa, 0xa, 0x9, 0x0, 0x0, 0x0, 0x0, 0x8, 0x9, 0xa, 0x8, 0x0, 0x0, 0x0, 0x0, 0x8, 0x9, 0x9, 0x8, 0x0, 0x0, 0x0, 0x0, 0xc, 0xc, 0xc, 0x8, 0x0, 0x0, 0x0, 0x0, 0xc, 0xc, 0xc, 0xc, 0xc, 0x0, 0x0, 0xc, 0xc, 0xd, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xd, 0xc, 0xc, 0xd, 0xc, 0xc, 0x0, 0xc, 0xd, 0xc, 0xc, 0xc, 0xc, 0x0 };
        atlas[252] = tic80.SpriteData { 0x0, 0x0, 0x0, 0xa, 0xa, 0x8, 0x0, 0x0, 0x0, 0x0, 0x8, 0xa, 0x9, 0x8, 0x0, 0x0, 0x0, 0x0, 0x8, 0x9, 0x9, 0x8, 0x0, 0x0, 0x0, 0x0, 0xc, 0xc, 0xc, 0x8, 0x0, 0x0, 0x0, 0x0, 0xc, 0xd, 0xc, 0xc, 0xc, 0x0, 0x0, 0xc, 0xc, 0xc, 0xc, 0xd, 0xc, 0xc, 0xc, 0xc, 0xd, 0xd, 0xc, 0xd, 0xc, 0xc, 0x0, 0xc, 0xd, 0xd, 0xc, 0xc, 0xc, 0x0 };
        break :blk atlas;
    };

    fn correct_map_y(comptime y: usize) usize {return 255-y; }
    
    pub const map = blk: {
        var data = std.mem.zeroes(tic80.Map);
        data[correct_y(3)] = tic80.MapRow { 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x00, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0xd9, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0xd9, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0xd9, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0xd9, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(4)] = tic80.MapRow { 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x89, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x89, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x89, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x89, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x89, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(5)] = tic80.MapRow { 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(6)] = tic80.MapRow { 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x97, 0x00, 0x00, 0x00, 0x00, 0x00, 0x97, 0x00, 0x00, 0x00, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(7)] = tic80.MapRow { 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x89, 0x89, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa7, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa7, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(8)] = tic80.MapRow { 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa7, 0x97, 0x00, 0x00, 0x00, 0x97, 0xa7, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(9)] = tic80.MapRow { 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x88, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa7, 0xa7, 0x00, 0x00, 0x00, 0xa7, 0xa7, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(10)] = tic80.MapRow { 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x89, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa7, 0xa7, 0x00, 0x00, 0x00, 0xa7, 0xa7, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(11)] = tic80.MapRow { 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x88, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa7, 0xa7, 0x00, 0x00, 0x00, 0xa7, 0xa7, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(12)] = tic80.MapRow { 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x89, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb7, 0xb7, 0x00, 0x00, 0x00, 0xb7, 0xb7, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(13)] = tic80.MapRow { 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x97, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(14)] = tic80.MapRow { 0x89, 0x00, 0x00, 0x89, 0x89, 0x00, 0xa7, 0x00, 0x00, 0x89, 0x00, 0x00, 0x88, 0x88, 0x88, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(15)] = tic80.MapRow { 0x89, 0x00, 0x00, 0x89, 0x88, 0x00, 0xb7, 0x00, 0x89, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(16)] = tic80.MapRow { 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xc6, 0xc7, 0xc8, 0xc9, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(17)] = tic80.MapRow { 0x89, 0x00, 0x00, 0xd9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(18)] = tic80.MapRow { 0x89, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(19)] = tic80.MapRow { 0x89, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(20)] = tic80.MapRow { 0x89, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbd, 0x00, 0x89, 0x88, 0x88, 0x86, 0x00, 0xba, 0xb9, 0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(21)] = tic80.MapRow { 0x89, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xc9, 0xca, 0xc9, 0xca, 0xcb, 0xcd, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(22)] = tic80.MapRow { 0x89, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x97, 0x00, 0xdb, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(23)] = tic80.MapRow { 0x89, 0x00, 0x00, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa7, 0x00, 0xda, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(24)] = tic80.MapRow { 0x89, 0x00, 0x00, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x0a, 0x0a, 0x00, 0x00, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa6, 0x00, 0xea, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(25)] = tic80.MapRow { 0x00, 0x00, 0x00, 0xe8, 0xbc, 0xbb, 0x00, 0x00, 0x86, 0x00, 0x0a, 0x07, 0x07, 0x09, 0xb6, 0x00, 0xf8, 0x00, 0x87, 0x00, 0x00, 0x00, 0xb7, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(26)] = tic80.MapRow { 0x89, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xc9, 0xca, 0xcd, 0x08, 0x0b, 0x0b, 0x0b, 0x0b, 0x06, 0x06, 0x05, 0x06, 0x05, 0x05, 0x0c, 0xc6, 0xc7, 0xcb, 0xc7, 0xcd, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(27)] = tic80.MapRow { 0x89, 0x00, 0x00, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(28)] = tic80.MapRow { 0x89, 0x00, 0x00, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe8, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(29)] = tic80.MapRow { 0x89, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe8, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(30)] = tic80.MapRow { 0x89, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x00, 0xf9, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(31)] = tic80.MapRow { 0x89, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x05, 0x06, 0x06, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(32)] = tic80.MapRow { 0x89, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(33)] = tic80.MapRow { 0x89, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(34)] = tic80.MapRow { 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(35)] = tic80.MapRow { 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(36)] = tic80.MapRow { 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(37)] = tic80.MapRow { 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(38)] = tic80.MapRow { 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(39)] = tic80.MapRow { 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(40)] = tic80.MapRow { 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(41)] = tic80.MapRow { 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(42)] = tic80.MapRow { 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(43)] = tic80.MapRow { 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(44)] = tic80.MapRow { 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(45)] = tic80.MapRow { 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(46)] = tic80.MapRow { 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(47)] = tic80.MapRow { 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(48)] = tic80.MapRow { 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(49)] = tic80.MapRow { 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(50)] = tic80.MapRow { 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(95)] = tic80.MapRow { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(96)] = tic80.MapRow { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0x00, 0x0b, 0x0b, 0x00, 0x00, 0x00, 0x0b, 0x0b, 0x0b, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(97)] = tic80.MapRow { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(98)] = tic80.MapRow { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(99)] = tic80.MapRow { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(100)] = tic80.MapRow { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0x00, 0x00, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(101)] = tic80.MapRow { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0xc9, 0xc9, 0xca, 0xcb, 0xc9, 0xc9, 0xca, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xc9, 0xca, 0xcb, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xc6, 0xcc, 0xc9, 0xc6, 0xcc, 0xc9, 0xcc, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(102)] = tic80.MapRow { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(103)] = tic80.MapRow { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(104)] = tic80.MapRow { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(105)] = tic80.MapRow { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x89, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(106)] = tic80.MapRow { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x88, 0x88, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(107)] = tic80.MapRow { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x89, 0x89, 0x88, 0x88, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(108)] = tic80.MapRow { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(109)] = tic80.MapRow { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x89, 0x89, 0x00, 0x00, 0x00, 0x00, 0x89, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(110)] = tic80.MapRow { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x89, 0x89, 0x88, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(111)] = tic80.MapRow { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(112)] = tic80.MapRow { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe5, 0xd5, 0xd5, 0xe5, 0xe5, 0xe5, 0xe5, 0xd5, 0xd5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x89, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(113)] = tic80.MapRow { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe5, 0x00, 0x00, 0xd5, 0xd5, 0xd5, 0xd5, 0x00, 0x00, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xe5, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe5, 0xe5, 0x89, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(114)] = tic80.MapRow { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd5, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe5, 0xe5, 0xe5, 0x89, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe8, 0xa6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(115)] = tic80.MapRow { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe5, 0x00, 0x7b, 0x00, 0x00, 0x00, 0x7b, 0x00, 0x00, 0x00, 0x7b, 0x89, 0x00, 0x00, 0x00, 0x7b, 0x00, 0x00, 0x00, 0x00, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe5, 0xe5, 0xe5, 0xe5, 0x89, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa6, 0x00, 0x00, 0xe9, 0xa7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(116)] = tic80.MapRow { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe5, 0x00, 0x00, 0x00, 0x00, 0xb9, 0x00, 0xba, 0xb9, 0x00, 0x89, 0x88, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb6, 0x00, 0xbd, 0xe8, 0xb6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(117)] = tic80.MapRow { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc7, 0xcd, 0x89, 0xc6, 0xcb, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xc6, 0xc7, 0xc8, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcd, 0xc6, 0xc7, 0xc8, 0xc6, 0xcc, 0xcd, 0xc6, 0xc7, 0xc8, 0xc6, 0xc9, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc7, 0xc8, 0xc6, 0xc9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(118)] = tic80.MapRow { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x89, 0x89, 0xd4, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(119)] = tic80.MapRow { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(120)] = tic80.MapRow { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(121)] = tic80.MapRow { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(122)] = tic80.MapRow { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(123)] = tic80.MapRow { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(124)] = tic80.MapRow { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(125)] = tic80.MapRow { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe5, 0xe5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(126)] = tic80.MapRow { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd5, 0xd5, 0x00, 0xd9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0xe5, 0xe5, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(127)] = tic80.MapRow { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0xe5, 0xe5, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(128)] = tic80.MapRow { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7b, 0x00, 0x00, 0xd4, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0xe5, 0xe5, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(129)] = tic80.MapRow { 0x00, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0xe5, 0xe5, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x97, 0x00, 0x00, 0x00, 0x97, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(130)] = tic80.MapRow { 0x0a, 0x0a, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x88, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc7, 0xca, 0xc9, 0xc7, 0xc7, 0xc9, 0xcd, 0x00, 0x00, 0x00, 0x89, 0xd5, 0xd5, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0x00, 0x00, 0x00, 0x00, 0xa7, 0x7b, 0x00, 0x00, 0xa6, 0x7b, 0x00, 0x00, 0xa6, 0x89, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(131)] = tic80.MapRow { 0x09, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x7b, 0x00, 0x00, 0x00, 0x00, 0x89, 0x88, 0xd4, 0x88, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7b, 0x00, 0x00, 0x97, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x88, 0x88, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb7, 0x00, 0x00, 0x00, 0xb6, 0x00, 0x00, 0x00, 0x89, 0x88, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(132)] = tic80.MapRow { 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x97, 0x00, 0x00, 0x00, 0x97, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0x00, 0xf9, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00, 0xe4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x88, 0x88, 0x88, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(133)] = tic80.MapRow { 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xb6, 0x00, 0x00, 0x86, 0xb6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x98, 0x98, 0x98, 0x98, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x89, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(134)] = tic80.MapRow { 0x09, 0x00, 0x00, 0x85, 0x86, 0x87, 0x00, 0x00, 0x00, 0x00, 0x8a, 0x89, 0x89, 0x89, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x89, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        data[correct_y(135)] = tic80.MapRow { 0x07, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0c, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0x9b, 0x9b, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  };
        break :blk data;
    };

    // NOTE(Oscar) for some reason the flags are inversed in the save format of tic80, so I reversed them here manually
    const map_flags = tic80.Flags {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00, 0x00, 0x01,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };

    // TODO in place effects such as: attack slash animation 1, attack slash animation 2 and kinght attack flash animation
    // consists of: animation, location, and creation frame

};
